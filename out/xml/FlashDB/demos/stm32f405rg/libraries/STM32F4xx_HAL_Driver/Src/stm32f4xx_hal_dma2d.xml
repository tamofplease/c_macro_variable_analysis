<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma2d.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_dma2d.c
  * @author  MCD Application Team
  * @brief   DMA2D HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the DMA2D peripheral:
  *           + Initialization and de-initialization functions
  *           + IO operation functions
  *           + Peripheral Control functions
  *           + Peripheral State and Errors functions
  *
  @verbatim
  ==============================================================================
                        ##### How to use this driver #####
  ==============================================================================
    [..]
      (#) Program the required configuration through the following parameters:
          the transfer mode, the output color mode and the output offset using
          HAL_DMA2D_Init() function.

      (#) Program the required configuration through the following parameters:
          the input color mode, the input color, the input alpha value, the alpha mode,
          the red/blue swap mode, the inverted alpha mode and the input offset using
          HAL_DMA2D_ConfigLayer() function for foreground or/and background layer.

     *** Polling mode IO operation ***
     =================================
    [..]
       (#) Configure pdata parameter (explained hereafter), destination and data length
           and enable the transfer using HAL_DMA2D_Start().
       (#) Wait for end of transfer using HAL_DMA2D_PollForTransfer(), at this stage
           user can specify the value of timeout according to his end application.

     *** Interrupt mode IO operation ***
     ===================================
     [..]
       (#) Configure pdata parameter, destination and data length and enable
           the transfer using HAL_DMA2D_Start_IT().
       (#) Use HAL_DMA2D_IRQHandler() called under DMA2D_IRQHandler() interrupt subroutine.
       (#) At the end of data transfer HAL_DMA2D_IRQHandler() function is executed and user can
           add his own function by customization of function pointer XferCpltCallback (member
           of DMA2D handle structure).
       (#) In case of error, the HAL_DMA2D_IRQHandler() function calls the callback
           XferErrorCallback.

         -@-   In Register-to-Memory transfer mode, pdata parameter is the register
               color, in Memory-to-memory or Memory-to-Memory with pixel format
               conversion pdata is the source address.

         -@-   Configure the foreground source address, the background source address,
               the destination and data length then Enable the transfer using
               HAL_DMA2D_BlendingStart() in polling mode and HAL_DMA2D_BlendingStart_IT()
               in interrupt mode.

         -@-   HAL_DMA2D_BlendingStart() and HAL_DMA2D_BlendingStart_IT() functions
               are used if the memory to memory with blending transfer mode is selected.

      (#) Optionally, configure and enable the CLUT using HAL_DMA2D_CLUTLoad() in polling
          mode or HAL_DMA2D_CLUTLoad_IT() in interrupt mode.

      (#) Optionally, configure the line watermark in using the API HAL_DMA2D_ProgramLineEvent().

      (#) Optionally, configure the dead time value in the AHB clock cycle inserted between two
          consecutive accesses on the AHB master port in using the API HAL_DMA2D_ConfigDeadTime()
          and enable/disable the functionality  with the APIs HAL_DMA2D_EnableDeadTime() or
          HAL_DMA2D_DisableDeadTime().

      (#) The transfer can be suspended, resumed and aborted using the following
          functions: HAL_DMA2D_Suspend(), HAL_DMA2D_Resume(), HAL_DMA2D_Abort().

      (#) The CLUT loading can be suspended, resumed and aborted using the following
          functions: HAL_DMA2D_CLUTLoading_Suspend(), HAL_DMA2D_CLUTLoading_Resume(),
          HAL_DMA2D_CLUTLoading_Abort().

      (#) To control the DMA2D state, use the following function: HAL_DMA2D_GetState().

      (#) To read the DMA2D error code, use the following function: HAL_DMA2D_GetError().

     *** DMA2D HAL driver macros list ***
     =============================================
     [..]
       Below the list of most used macros in DMA2D HAL driver :

      (+) __HAL_DMA2D_ENABLE: Enable the DMA2D peripheral.
      (+) __HAL_DMA2D_GET_FLAG: Get the DMA2D pending flags.
      (+) __HAL_DMA2D_CLEAR_FLAG: Clear the DMA2D pending flags.
      (+) __HAL_DMA2D_ENABLE_IT: Enable the specified DMA2D interrupts.
      (+) __HAL_DMA2D_DISABLE_IT: Disable the specified DMA2D interrupts.
      (+) __HAL_DMA2D_GET_IT_SOURCE: Check whether the specified DMA2D interrupt is enabled or not.

     *** Callback registration ***
     ===================================
     [..]
      (#) The compilation define  USE_HAL_DMA2D_REGISTER_CALLBACKS when set to 1
          allows the user to configure dynamically the driver callbacks.
          Use function @ref HAL_DMA2D_RegisterCallback() to register a user callback.

      (#) Function @ref HAL_DMA2D_RegisterCallback() allows to register following callbacks:
            (+) XferCpltCallback : callback for transfer complete.
            (+) XferErrorCallback : callback for transfer error.
            (+) LineEventCallback : callback for line event.
            (+) CLUTLoadingCpltCallback : callback for CLUT loading completion.
            (+) MspInitCallback    : DMA2D MspInit.
            (+) MspDeInitCallback  : DMA2D MspDeInit.
          This function takes as parameters the HAL peripheral handle, the Callback ID
          and a pointer to the user callback function.

      (#) Use function @ref HAL_DMA2D_UnRegisterCallback() to reset a callback to the default
          weak (surcharged) function.
          @ref HAL_DMA2D_UnRegisterCallback() takes as parameters the HAL peripheral handle,
          and the Callback ID.
          This function allows to reset following callbacks:
            (+) XferCpltCallback : callback for transfer complete.
            (+) XferErrorCallback : callback for transfer error.
            (+) LineEventCallback : callback for line event.
            (+) CLUTLoadingCpltCallback : callback for CLUT loading completion.
            (+) MspInitCallback    : DMA2D MspInit.
            (+) MspDeInitCallback  : DMA2D MspDeInit.

      (#) By default, after the @ref HAL_DMA2D_Init and if the state is HAL_DMA2D_STATE_RESET
          all callbacks are reset to the corresponding legacy weak (surcharged) functions:
          examples @ref HAL_DMA2D_LineEventCallback(), @ref HAL_DMA2D_CLUTLoadingCpltCallback()
          Exception done for MspInit and MspDeInit callbacks that are respectively
          reset to the legacy weak (surcharged) functions in the @ref HAL_DMA2D_Init
          and @ref HAL_DMA2D_DeInit only when these callbacks are null (not registered beforehand)
          If not, MspInit or MspDeInit are not null, the @ref HAL_DMA2D_Init and @ref HAL_DMA2D_DeInit
          keep and use the user MspInit/MspDeInit callbacks (registered beforehand).

          Exception as well for Transfer Completion and Transfer Error callbacks that are not defined
          as weak (surcharged) functions. They must be defined by the user to be resorted to.

          Callbacks can be registered/unregistered in READY state only.
          Exception done for MspInit/MspDeInit callbacks that can be registered/unregistered
          in READY or RESET state, thus registered (user) MspInit/DeInit callbacks can be used
          during the Init/DeInit.
          In that case first register the MspInit/MspDeInit user callbacks
          using @ref HAL_DMA2D_RegisterCallback before calling @ref HAL_DMA2D_DeInit
          or @ref HAL_DMA2D_Init function.

          When The compilation define USE_HAL_DMA2D_REGISTER_CALLBACKS is set to 0 or
          not defined, the callback registering feature is not available
          and weak (surcharged) callbacks are used.

     [..]
      (@) You can refer to the DMA2D HAL driver header file for more useful macros

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_DMA2D_MODULE_ENABLED</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>DMA2D</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DMA2D  DMA2D
  * @brief DMA2D HAL module driver
  * @{
  */</comment>

<comment type="block">/* Private types -------------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup DMA2D_Private_Constants DMA2D Private Constants
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DMA2D_TimeOut DMA2D Time Out
  * @{
  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DMA2D_TIMEOUT_ABORT</name></cpp:macro>           <cpp:value>(1000U)</cpp:value></cpp:define>  <comment type="block" format="doxygen">/*!&lt;  1s  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DMA2D_TIMEOUT_SUSPEND</name></cpp:macro>         <cpp:value>(1000U)</cpp:value></cpp:define>  <comment type="block" format="doxygen">/*!&lt;  1s  */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private constants ---------------------------------------------------------*/</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup DMA2D_Private_Functions DMA2D Private Functions
  * @{
  */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DMA2D_SetConfig</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pdata</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DstAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Height</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>
<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup DMA2D_Exported_Functions DMA2D Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DMA2D_Exported_Functions_Group1 Initialization and de-initialization functions
 *  @brief   Initialization and Configuration functions
 *
@verbatim
 ===============================================================================
                ##### Initialization and Configuration functions #####
 ===============================================================================
    [..]  This section provides functions allowing to:
      (+) Initialize and configure the DMA2D
      (+) De-initialize the DMA2D

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initialize the DMA2D according to the specified
  *         parameters in the DMA2D_InitTypeDef and create the associated handle.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_Init</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the DMA2D peripheral state */</comment>
  <if_stmt><if>if<condition>(<expr><name>hdma2d</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
     <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_MODE</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_CMODE</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ColorMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_OFFSET</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutputOffset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DMA2D_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DMA2D_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Reset Callback pointers in HAL_DMA2D_STATE_RESET only */</comment>
    <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>LineEventCallback</name></name>       <operator>=</operator> <name>HAL_DMA2D_LineEventCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>CLUTLoadingCpltCallback</name></name> <operator>=</operator> <name>HAL_DMA2D_CLUTLoadingCpltCallback</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>hdma2d</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_DMA2D_MspInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>hdma2d</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if<condition>(<expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DMA2D_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>
    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name>HAL_DMA2D_MspInit</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */</comment>

  <comment type="block">/* Change DMA2D peripheral state */</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* DMA2D CR register configuration -------------------------------------------*/</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>DMA2D_CR_MODE</name></expr></argument>, <argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* DMA2D OPFCCR register configuration ---------------------------------------*/</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>OPFCCR</name></name></expr></argument>, <argument><expr><name>DMA2D_OPFCCR_CM</name></expr></argument>, <argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ColorMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* DMA2D OOR register configuration ------------------------------------------*/</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>OOR</name></name></expr></argument>, <argument><expr><name>DMA2D_OOR_LO</name></expr></argument>, <argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutputOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="block">/* Update error code */</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA2D_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Initialize the DMA2D state*/</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name>  <operator>=</operator> <name>HAL_DMA2D_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Deinitializes the DMA2D peripheral registers to their default reset
  *         values.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */</comment>

<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_DeInit</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>)</parameter_list>
<block>{<block_content>

  <comment type="block">/* Check the DMA2D peripheral state */</comment>
  <if_stmt><if>if<condition>(<expr><name>hdma2d</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
     <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>__HAL_RCC_DMA2D_IS_CLK_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Abort DMA2D transfer if any */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DMA2D_CR_START</name><operator>)</operator> <operator>==</operator> <name>DMA2D_CR_START</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA2D_Abort</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Issue when aborting DMA2D transfer */</comment>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Abort background CLUT loading if any */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGPFCCR</name></name> <operator>&amp;</operator> <name>DMA2D_BGPFCCR_START</name><operator>)</operator> <operator>==</operator> <name>DMA2D_BGPFCCR_START</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA2D_CLUTLoading_Abort</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Issue when aborting background CLUT loading */</comment>
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Abort foreground CLUT loading if any */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGPFCCR</name></name> <operator>&amp;</operator> <name>DMA2D_FGPFCCR_START</name><operator>)</operator> <operator>==</operator> <name>DMA2D_FGPFCCR_START</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA2D_CLUTLoading_Abort</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Issue when aborting foreground CLUT loading */</comment>
            <return>return <expr><name>HAL_ERROR</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Reset DMA2D control registers*/</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name>       <operator>=</operator>    <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IFCR</name></name>     <operator>=</operator> <literal type="number">0x3FU</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGOR</name></name>     <operator>=</operator>    <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGOR</name></name>     <operator>=</operator>    <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGPFCCR</name></name>  <operator>=</operator>    <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGPFCCR</name></name>  <operator>=</operator>    <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>OPFCCR</name></name>   <operator>=</operator>    <literal type="number">0U</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DMA2D_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>

    <if_stmt><if>if<condition>(<expr><name><name>hdma2d</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_DMA2D_MspDeInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* DeInit the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>hdma2d</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Carry on with de-initialization of low level hardware */</comment>
  <expr_stmt><expr><call><name>HAL_DMA2D_MspDeInit</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */</comment>

  <comment type="block">/* Update error code */</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA2D_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Initialize the DMA2D state*/</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name>  <operator>=</operator> <name>HAL_DMA2D_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the DMA2D MSP.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DMA2D_MspInit</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name><modifier>*</modifier></type> <name>hdma2d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitializes the DMA2D MSP.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DMA2D_MspDeInit</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name><modifier>*</modifier></type> <name>hdma2d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspDeInit can be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DMA2D_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User DMA2D Callback
  *         To be used instead of the weak (surcharged) predefined callback
  * @param hdma2d DMA2D handle
  * @param CallbackID ID of the callback to be registered
  *        This parameter can be one of the following values:
  *          @arg @ref HAL_DMA2D_TRANSFERCOMPLETE_CB_ID DMA2D transfer complete Callback ID
  *          @arg @ref HAL_DMA2D_TRANSFERERROR_CB_ID DMA2D transfer error Callback ID
  *          @arg @ref HAL_DMA2D_LINEEVENT_CB_ID DMA2D line event Callback ID
  *          @arg @ref HAL_DMA2D_CLUTLOADINGCPLT_CB_ID DMA2D CLUT loading completion Callback ID
  *          @arg @ref HAL_DMA2D_MSPINIT_CB_ID DMA2D MspInit callback ID
  *          @arg @ref HAL_DMA2D_MSPDEINIT_CB_ID DMA2D MspDeInit callback ID
  * @param pCallback pointer to the Callback function
  * @note No weak predefined callbacks are defined for HAL_DMA2D_TRANSFERCOMPLETE_CB_ID or HAL_DMA2D_TRANSFERERROR_CB_ID
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>, <parameter><decl><type><name>HAL_DMA2D_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>, <parameter><decl><type><name>pDMA2D_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>HAL_DMA2D_STATE_READY</name> <operator>==</operator> <name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_DMA2D_TRANSFERCOMPLETE_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_DMA2D_TRANSFERERROR_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_DMA2D_LINEEVENT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>LineEventCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_DMA2D_CLUTLOADINGCPLT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>CLUTLoadingCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_DMA2D_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_DMA2D_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <default>default :</default>
     <comment type="block">/* Update the error code */</comment>
     <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
     <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name>HAL_DMA2D_STATE_RESET</name> <operator>==</operator> <name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_DMA2D_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_DMA2D_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <default>default :</default>
     <comment type="block">/* Update the error code */</comment>
     <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
     <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
     <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
     <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister a DMA2D Callback
  *         DMA2D Callback is redirected to the weak (surcharged) predefined callback
  * @param hdma2d DMA2D handle
  * @param CallbackID ID of the callback to be unregistered
  *        This parameter can be one of the following values:
  *          @arg @ref HAL_DMA2D_TRANSFERCOMPLETE_CB_ID DMA2D transfer complete Callback ID
  *          @arg @ref HAL_DMA2D_TRANSFERERROR_CB_ID DMA2D transfer error Callback ID
  *          @arg @ref HAL_DMA2D_LINEEVENT_CB_ID DMA2D line event Callback ID
  *          @arg @ref HAL_DMA2D_CLUTLOADINGCPLT_CB_ID DMA2D CLUT loading completion Callback ID
  *          @arg @ref HAL_DMA2D_MSPINIT_CB_ID DMA2D MspInit callback ID
  *          @arg @ref HAL_DMA2D_MSPDEINIT_CB_ID DMA2D MspDeInit callback ID
  * @note No weak predefined callbacks are defined for HAL_DMA2D_TRANSFERCOMPLETE_CB_ID or HAL_DMA2D_TRANSFERERROR_CB_ID
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>, <parameter><decl><type><name>HAL_DMA2D_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>HAL_DMA2D_STATE_READY</name> <operator>==</operator> <name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_DMA2D_TRANSFERCOMPLETE_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_DMA2D_TRANSFERERROR_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_DMA2D_LINEEVENT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>LineEventCallback</name></name> <operator>=</operator> <name>HAL_DMA2D_LineEventCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_DMA2D_CLUTLOADINGCPLT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>CLUTLoadingCpltCallback</name></name> <operator>=</operator> <name>HAL_DMA2D_CLUTLoadingCpltCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_DMA2D_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_DMA2D_MspInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak (surcharged) Msp Init */</comment>
      <break>break;</break>

    <case>case <expr><name>HAL_DMA2D_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_DMA2D_MspDeInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak (surcharged) Msp DeInit */</comment>
      <break>break;</break>

    <default>default :</default>
     <comment type="block">/* Update the error code */</comment>
     <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
     <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name>HAL_DMA2D_STATE_RESET</name> <operator>==</operator> <name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_DMA2D_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_DMA2D_MspInit</name></expr>;</expr_stmt>   <comment type="block">/* Legacy weak (surcharged) Msp Init */</comment>
      <break>break;</break>

    <case>case <expr><name>HAL_DMA2D_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_DMA2D_MspDeInit</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak (surcharged) Msp DeInit */</comment>
      <break>break;</break>

    <default>default :</default>
     <comment type="block">/* Update the error code */</comment>
     <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
     <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
     <comment type="block">/* Update the error code */</comment>
     <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
     <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_DMA2D_REGISTER_CALLBACKS */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>


<comment type="block" format="doxygen">/** @defgroup DMA2D_Exported_Functions_Group2 IO operation functions
 *  @brief   IO operation functions
 *
@verbatim
 ===============================================================================
                      #####  IO operation functions  #####
 ===============================================================================
    [..]  This section provides functions allowing to:
      (+) Configure the pdata, destination address and data size then
          start the DMA2D transfer.
      (+) Configure the source for foreground and background, destination address
          and data size then start a MultiBuffer DMA2D transfer.
      (+) Configure the pdata, destination address and data size then
          start the DMA2D transfer with interrupt.
      (+) Configure the source for foreground and background, destination address
          and data size then start a MultiBuffer DMA2D transfer with interrupt.
      (+) Abort DMA2D transfer.
      (+) Suspend DMA2D transfer.
      (+) Resume DMA2D transfer.
      (+) Enable CLUT transfer.
      (+) Configure CLUT loading then start transfer in polling mode.
      (+) Configure CLUT loading then start transfer in interrupt mode.
      (+) Abort DMA2D CLUT loading.
      (+) Suspend DMA2D CLUT loading.
      (+) Resume DMA2D CLUT loading.
      (+) Poll for transfer complete.
      (+) handle DMA2D interrupt request.
      (+) Transfer watermark callback.
      (+) CLUT Transfer Complete callback.


@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Start the DMA2D Transfer.
  * @param  hdma2d     Pointer to a DMA2D_HandleTypeDef structure that contains
  *                     the configuration information for the DMA2D.
  * @param  pdata      Configure the source memory Buffer address if
  *                     Memory-to-Memory or Memory-to-Memory with pixel format
  *                     conversion mode is selected, or configure
  *                     the color value if Register-to-Memory mode is selected.
  * @param  DstAddress The destination memory Buffer address.
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_Start</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pdata</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DstAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Width</name></decl></parameter>,  <parameter><decl><type><name>uint32_t</name></type> <name>Height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_LINE</name><argument_list>(<argument><expr><name>Height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_PIXEL</name><argument_list>(<argument><expr><name>Width</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change DMA2D peripheral state */</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Configure the source, destination address and the data size */</comment>
  <expr_stmt><expr><call><name>DMA2D_SetConfig</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>pdata</name></expr></argument>, <argument><expr><name>DstAddress</name></expr></argument>, <argument><expr><name>Width</name></expr></argument>, <argument><expr><name>Height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_DMA2D_ENABLE</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Start the DMA2D Transfer with interrupt enabled.
  * @param  hdma2d     Pointer to a DMA2D_HandleTypeDef structure that contains
  *                     the configuration information for the DMA2D.
  * @param  pdata      Configure the source memory Buffer address if
  *                     the Memory-to-Memory or Memory-to-Memory with pixel format
  *                     conversion mode is selected, or configure
  *                     the color value if Register-to-Memory mode is selected.
  * @param  DstAddress The destination memory Buffer address.
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_Start_IT</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pdata</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DstAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Width</name></decl></parameter>,  <parameter><decl><type><name>uint32_t</name></type> <name>Height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_LINE</name><argument_list>(<argument><expr><name>Height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_PIXEL</name><argument_list>(<argument><expr><name>Width</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change DMA2D peripheral state */</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Configure the source, destination address and the data size */</comment>
  <expr_stmt><expr><call><name>DMA2D_SetConfig</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>pdata</name></expr></argument>, <argument><expr><name>DstAddress</name></expr></argument>, <argument><expr><name>Width</name></expr></argument>, <argument><expr><name>Height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the transfer complete, transfer error and configuration error interrupts */</comment>
  <expr_stmt><expr><call><name>__HAL_DMA2D_ENABLE_IT</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_IT_TC</name><operator>|</operator><name>DMA2D_IT_TE</name><operator>|</operator><name>DMA2D_IT_CE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_DMA2D_ENABLE</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Start the multi-source DMA2D Transfer.
  * @param  hdma2d      Pointer to a DMA2D_HandleTypeDef structure that contains
  *                      the configuration information for the DMA2D.
  * @param  SrcAddress1 The source memory Buffer address for the foreground layer.
  * @param  SrcAddress2 The source memory Buffer address for the background layer.
  * @param  DstAddress  The destination memory Buffer address.
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_BlendingStart</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>SrcAddress1</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type>  <name>SrcAddress2</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DstAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Width</name></decl></parameter>,  <parameter><decl><type><name>uint32_t</name></type> <name>Height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_LINE</name><argument_list>(<argument><expr><name>Height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_PIXEL</name><argument_list>(<argument><expr><name>Width</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change DMA2D peripheral state */</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Configure DMA2D Stream source2 address */</comment>
  <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGMAR</name></name></expr></argument>, <argument><expr><name>SrcAddress2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Configure the source, destination address and the data size */</comment>
  <expr_stmt><expr><call><name>DMA2D_SetConfig</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>SrcAddress1</name></expr></argument>, <argument><expr><name>DstAddress</name></expr></argument>, <argument><expr><name>Width</name></expr></argument>, <argument><expr><name>Height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_DMA2D_ENABLE</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Start the multi-source DMA2D Transfer with interrupt enabled.
  * @param  hdma2d     Pointer to a DMA2D_HandleTypeDef structure that contains
  *                     the configuration information for the DMA2D.
  * @param  SrcAddress1 The source memory Buffer address for the foreground layer.
  * @param  SrcAddress2 The source memory Buffer address for the background layer.
  * @param  DstAddress  The destination memory Buffer address.
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_BlendingStart_IT</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>SrcAddress1</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type>  <name>SrcAddress2</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DstAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Width</name></decl></parameter>,  <parameter><decl><type><name>uint32_t</name></type> <name>Height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_LINE</name><argument_list>(<argument><expr><name>Height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_PIXEL</name><argument_list>(<argument><expr><name>Width</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change DMA2D peripheral state */</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Configure DMA2D Stream source2 address */</comment>
  <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGMAR</name></name></expr></argument>, <argument><expr><name>SrcAddress2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Configure the source, destination address and the data size */</comment>
  <expr_stmt><expr><call><name>DMA2D_SetConfig</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>SrcAddress1</name></expr></argument>, <argument><expr><name>DstAddress</name></expr></argument>, <argument><expr><name>Width</name></expr></argument>, <argument><expr><name>Height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the transfer complete, transfer error and configuration error interrupts */</comment>
  <expr_stmt><expr><call><name>__HAL_DMA2D_ENABLE_IT</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_IT_TC</name><operator>|</operator><name>DMA2D_IT_TE</name><operator>|</operator><name>DMA2D_IT_CE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_DMA2D_ENABLE</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Abort the DMA2D Transfer.
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_Abort</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <comment type="block">/* Abort the DMA2D transfer */</comment>
  <comment type="block">/* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */</comment>
   <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>DMA2D_CR_ABORT</name><operator>|</operator><name>DMA2D_CR_START</name></expr></argument>, <argument><expr><name>DMA2D_CR_ABORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check if the DMA2D is effectively disabled */</comment>
  <while>while<condition>(<expr><operator>(</operator><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DMA2D_CR_START</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>DMA2D_TIMEOUT_ABORT</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Update error code */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_TIMEOUT</name></expr>;</expr_stmt>

      <comment type="block">/* Change the DMA2D state */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_TIMEOUT</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */</comment>
  <expr_stmt><expr><call><name>__HAL_DMA2D_DISABLE_IT</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_IT_TC</name><operator>|</operator><name>DMA2D_IT_TE</name><operator>|</operator><name>DMA2D_IT_CE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change the DMA2D state*/</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Suspend the DMA2D Transfer.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_Suspend</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <comment type="block">/* Suspend the DMA2D transfer */</comment>
  <comment type="block">/* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue). */</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>DMA2D_CR_SUSP</name><operator>|</operator><name>DMA2D_CR_START</name></expr></argument>, <argument><expr><name>DMA2D_CR_SUSP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check if the DMA2D is effectively suspended */</comment>
  <while>while <condition>(<expr><operator>(</operator><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <operator>(</operator><name>DMA2D_CR_SUSP</name> <operator>|</operator> <name>DMA2D_CR_START</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>DMA2D_CR_START</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>DMA2D_TIMEOUT_SUSPEND</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Update error code */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_TIMEOUT</name></expr>;</expr_stmt>

      <comment type="block">/* Change the DMA2D state */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_TIMEOUT</name></expr>;</expr_stmt>

      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

   <comment type="block">/* Check whether or not a transfer is actually suspended and change the DMA2D state accordingly */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DMA2D_CR_START</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_SUSPEND</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Make sure SUSP bit is cleared since it is meaningless
       when no tranfer is on-going */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>DMA2D_CR_SUSP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Resume the DMA2D Transfer.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_Resume</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the SUSP and START bits */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <operator>(</operator><name>DMA2D_CR_SUSP</name> <operator>|</operator> <name>DMA2D_CR_START</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>DMA2D_CR_SUSP</name> <operator>|</operator> <name>DMA2D_CR_START</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Ongoing transfer is suspended: change the DMA2D state before resuming */</comment>
    <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_BUSY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Resume the DMA2D transfer */</comment>
  <comment type="block">/* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue). */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>DMA2D_CR_SUSP</name><operator>|</operator><name>DMA2D_CR_START</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  Enable the DMA2D CLUT Transfer.
  * @param  hdma2d   Pointer to a DMA2D_HandleTypeDef structure that contains
  *                   the configuration information for the DMA2D.
  * @param  LayerIdx DMA2D Layer index.
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_EnableCLUT</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change DMA2D peripheral state */</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_BUSY</name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>LayerIdx</name> <operator>==</operator> <name>DMA2D_BACKGROUND_LAYER</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable the background CLUT loading */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGPFCCR</name></name></expr></argument>, <argument><expr><name>DMA2D_BGPFCCR_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Enable the foreground CLUT loading */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGPFCCR</name></name></expr></argument>, <argument><expr><name>DMA2D_FGPFCCR_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  Start DMA2D CLUT Loading.
  * @param  hdma2d   Pointer to a DMA2D_HandleTypeDef structure that contains
  *                   the configuration information for the DMA2D.
  * @param  CLUTCfg  Pointer to a DMA2D_CLUTCfgTypeDef structure that contains
  *                   the configuration information for the color look up table.
  * @param  LayerIdx DMA2D Layer index.
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @note Invoking this API is similar to calling HAL_DMA2D_ConfigCLUT() then HAL_DMA2D_EnableCLUT().
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_CLUTLoad</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>, <parameter><decl><type><name>DMA2D_CLUTCfgTypeDef</name></type> <name>CLUTCfg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_CLUT_CM</name><argument_list>(<argument><expr><name><name>CLUTCfg</name><operator>.</operator><name>CLUTColorMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_CLUT_SIZE</name><argument_list>(<argument><expr><name><name>CLUTCfg</name><operator>.</operator><name>Size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change DMA2D peripheral state */</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Configure the CLUT of the background DMA2D layer */</comment>
  <if_stmt><if>if<condition>(<expr><name>LayerIdx</name> <operator>==</operator> <name>DMA2D_BACKGROUND_LAYER</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Write background CLUT memory address */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGCMAR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>CLUTCfg</name><operator>.</operator><name>pCLUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Write background CLUT size and CLUT color mode */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGPFCCR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>DMA2D_BGPFCCR_CS</name> <operator>|</operator> <name>DMA2D_BGPFCCR_CCM</name><operator>)</operator></expr></argument>,
            <argument><expr><operator>(</operator><operator>(</operator><name><name>CLUTCfg</name><operator>.</operator><name>Size</name></name> <operator>&lt;&lt;</operator> <name>DMA2D_BGPFCCR_CS_Pos</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>CLUTCfg</name><operator>.</operator><name>CLUTColorMode</name></name> <operator>&lt;&lt;</operator> <name>DMA2D_BGPFCCR_CCM_Pos</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the CLUT loading for the background */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGPFCCR</name></name></expr></argument>, <argument><expr><name>DMA2D_BGPFCCR_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Configure the CLUT of the foreground DMA2D layer */</comment>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Write foreground CLUT memory address */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGCMAR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>CLUTCfg</name><operator>.</operator><name>pCLUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Write foreground CLUT size and CLUT color mode */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGPFCCR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>DMA2D_FGPFCCR_CS</name> <operator>|</operator> <name>DMA2D_FGPFCCR_CCM</name><operator>)</operator></expr></argument>,
            <argument><expr><operator>(</operator><operator>(</operator><name><name>CLUTCfg</name><operator>.</operator><name>Size</name></name> <operator>&lt;&lt;</operator> <name>DMA2D_FGPFCCR_CS_Pos</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>CLUTCfg</name><operator>.</operator><name>CLUTColorMode</name></name> <operator>&lt;&lt;</operator> <name>DMA2D_FGPFCCR_CCM_Pos</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 <comment type="block">/* Enable the CLUT loading for the foreground */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGPFCCR</name></name></expr></argument>, <argument><expr><name>DMA2D_FGPFCCR_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Start DMA2D CLUT Loading with interrupt enabled.
  * @param  hdma2d   Pointer to a DMA2D_HandleTypeDef structure that contains
  *                   the configuration information for the DMA2D.
  * @param  CLUTCfg  Pointer to a DMA2D_CLUTCfgTypeDef structure that contains
  *                   the configuration information for the color look up table.
  * @param  LayerIdx DMA2D Layer index.
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_CLUTLoad_IT</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>, <parameter><decl><type><name>DMA2D_CLUTCfgTypeDef</name></type> <name>CLUTCfg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_CLUT_CM</name><argument_list>(<argument><expr><name><name>CLUTCfg</name><operator>.</operator><name>CLUTColorMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_CLUT_SIZE</name><argument_list>(<argument><expr><name><name>CLUTCfg</name><operator>.</operator><name>Size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change DMA2D peripheral state */</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Configure the CLUT of the background DMA2D layer */</comment>
  <if_stmt><if>if<condition>(<expr><name>LayerIdx</name> <operator>==</operator> <name>DMA2D_BACKGROUND_LAYER</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Write background CLUT memory address */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGCMAR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>CLUTCfg</name><operator>.</operator><name>pCLUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Write background CLUT size and CLUT color mode */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGPFCCR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>DMA2D_BGPFCCR_CS</name> <operator>|</operator> <name>DMA2D_BGPFCCR_CCM</name><operator>)</operator></expr></argument>,
            <argument><expr><operator>(</operator><operator>(</operator><name><name>CLUTCfg</name><operator>.</operator><name>Size</name></name> <operator>&lt;&lt;</operator> <name>DMA2D_BGPFCCR_CS_Pos</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>CLUTCfg</name><operator>.</operator><name>CLUTColorMode</name></name> <operator>&lt;&lt;</operator> <name>DMA2D_BGPFCCR_CCM_Pos</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the CLUT Transfer Complete, transfer Error, configuration Error and CLUT Access Error interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_DMA2D_ENABLE_IT</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_IT_CTC</name> <operator>|</operator> <name>DMA2D_IT_TE</name> <operator>|</operator> <name>DMA2D_IT_CE</name> <operator>|</operator><name>DMA2D_IT_CAE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the CLUT loading for the background */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGPFCCR</name></name></expr></argument>, <argument><expr><name>DMA2D_BGPFCCR_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Configure the CLUT of the foreground DMA2D layer */</comment>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Write foreground CLUT memory address */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGCMAR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>CLUTCfg</name><operator>.</operator><name>pCLUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Write foreground CLUT size and CLUT color mode */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGPFCCR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>DMA2D_FGPFCCR_CS</name> <operator>|</operator> <name>DMA2D_FGPFCCR_CCM</name><operator>)</operator></expr></argument>,
            <argument><expr><operator>(</operator><operator>(</operator><name><name>CLUTCfg</name><operator>.</operator><name>Size</name></name> <operator>&lt;&lt;</operator> <name>DMA2D_FGPFCCR_CS_Pos</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>CLUTCfg</name><operator>.</operator><name>CLUTColorMode</name></name> <operator>&lt;&lt;</operator> <name>DMA2D_FGPFCCR_CCM_Pos</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the CLUT Transfer Complete, transfer Error, configuration Error and CLUT Access Error interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_DMA2D_ENABLE_IT</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_IT_CTC</name> <operator>|</operator> <name>DMA2D_IT_TE</name> <operator>|</operator> <name>DMA2D_IT_CE</name> <operator>|</operator><name>DMA2D_IT_CAE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the CLUT loading for the foreground */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGPFCCR</name></name></expr></argument>, <argument><expr><name>DMA2D_FGPFCCR_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Abort the DMA2D CLUT loading.
  * @param  hdma2d  Pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @param  LayerIdx DMA2D Layer index.
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_CLUTLoading_Abort</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>__IO</name> <name>uint32_t</name> <modifier>*</modifier></type> <name>reg</name> <init>=  <expr><operator>&amp;</operator><operator>(</operator><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGPFCCR</name></name><operator>)</operator></expr></init></decl>;</decl_stmt> <comment type="block">/* by default, point at background register */</comment>

  <comment type="block">/* Abort the CLUT loading */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>DMA2D_CR_ABORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If foreground CLUT loading is considered, update local variables */</comment>
  <if_stmt><if>if<condition>(<expr><name>LayerIdx</name> <operator>==</operator> <name>DMA2D_FOREGROUND_LAYER</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>reg</name>  <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGPFCCR</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>


  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check if the CLUT loading is aborted */</comment>
  <while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>reg</name> <operator>&amp;</operator> <name>DMA2D_BGPFCCR_START</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>DMA2D_TIMEOUT_ABORT</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Update error code */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_TIMEOUT</name></expr>;</expr_stmt>

      <comment type="block">/* Change the DMA2D state */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_TIMEOUT</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */</comment>
  <expr_stmt><expr><call><name>__HAL_DMA2D_DISABLE_IT</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_IT_CTC</name> <operator>|</operator> <name>DMA2D_IT_TE</name> <operator>|</operator> <name>DMA2D_IT_CE</name> <operator>|</operator><name>DMA2D_IT_CAE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change the DMA2D state*/</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Suspend the DMA2D CLUT loading.
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @param  LayerIdx DMA2D Layer index.
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_CLUTLoading_Suspend</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>loadsuspended</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>__IO</name> <name>uint32_t</name> <modifier>*</modifier></type> <name>reg</name> <init>=  <expr><operator>&amp;</operator><operator>(</operator><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGPFCCR</name></name><operator>)</operator></expr></init></decl>;</decl_stmt> <comment type="block">/* by default, point at background register */</comment>

  <comment type="block">/* Suspend the CLUT loading */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>DMA2D_CR_SUSP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If foreground CLUT loading is considered, update local variables */</comment>
  <if_stmt><if>if<condition>(<expr><name>LayerIdx</name> <operator>==</operator> <name>DMA2D_FOREGROUND_LAYER</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>reg</name>  <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGPFCCR</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check if the CLUT loading is suspended */</comment>
  <expr_stmt><expr><name>loadsuspended</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DMA2D_CR_SUSP</name><operator>)</operator> <operator>==</operator> <name>DMA2D_CR_SUSP</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1UL</literal></expr></then><else>: <expr><literal type="number">0UL</literal></expr></else></ternary></expr>;</expr_stmt> <comment type="block">/*1st condition: Suspend Check*/</comment>
  <expr_stmt><expr><name>loadsuspended</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><operator>*</operator><name>reg</name> <operator>&amp;</operator> <name>DMA2D_BGPFCCR_START</name><operator>)</operator> <operator>!=</operator> <name>DMA2D_BGPFCCR_START</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1UL</literal></expr></then><else>: <expr><literal type="number">0UL</literal></expr></else></ternary></expr>;</expr_stmt> <comment type="block">/*2nd condition: Not Start Check */</comment>
  <while>while <condition>(<expr><name>loadsuspended</name> <operator>==</operator> <literal type="number">0UL</literal></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>DMA2D_TIMEOUT_SUSPEND</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Update error code */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_TIMEOUT</name></expr>;</expr_stmt>

      <comment type="block">/* Change the DMA2D state */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_TIMEOUT</name></expr>;</expr_stmt>

      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>loadsuspended</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DMA2D_CR_SUSP</name><operator>)</operator> <operator>==</operator> <name>DMA2D_CR_SUSP</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1UL</literal></expr></then><else>: <expr><literal type="number">0UL</literal></expr></else></ternary></expr>;</expr_stmt> <comment type="block">/*1st condition: Suspend Check*/</comment>
    <expr_stmt><expr><name>loadsuspended</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><operator>*</operator><name>reg</name> <operator>&amp;</operator> <name>DMA2D_BGPFCCR_START</name><operator>)</operator> <operator>!=</operator> <name>DMA2D_BGPFCCR_START</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1UL</literal></expr></then><else>: <expr><literal type="number">0UL</literal></expr></else></ternary></expr>;</expr_stmt> <comment type="block">/*2nd condition: Not Start Check */</comment>
  </block_content>}</block></while>

   <comment type="block">/* Check whether or not a transfer is actually suspended and change the DMA2D state accordingly */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>reg</name> <operator>&amp;</operator> <name>DMA2D_BGPFCCR_START</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_SUSPEND</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Make sure SUSP bit is cleared since it is meaningless
       when no tranfer is on-going */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>DMA2D_CR_SUSP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Resume the DMA2D CLUT loading.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @param  LayerIdx DMA2D Layer index.
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_CLUTLoading_Resume</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the SUSP and START bits for background or foreground CLUT loading */</comment>
  <if_stmt><if>if<condition>(<expr><name>LayerIdx</name> <operator>==</operator> <name>DMA2D_BACKGROUND_LAYER</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Background CLUT loading suspension check */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DMA2D_CR_SUSP</name><operator>)</operator> <operator>==</operator> <name>DMA2D_CR_SUSP</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGPFCCR</name></name> <operator>&amp;</operator> <name>DMA2D_BGPFCCR_START</name><operator>)</operator> <operator>==</operator> <name>DMA2D_BGPFCCR_START</name></expr>)</condition>
      <block>{<block_content>
      <comment type="block">/* Ongoing CLUT loading is suspended: change the DMA2D state before resuming */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_BUSY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Foreground CLUT loading suspension check */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DMA2D_CR_SUSP</name><operator>)</operator> <operator>==</operator> <name>DMA2D_CR_SUSP</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGPFCCR</name></name> <operator>&amp;</operator> <name>DMA2D_FGPFCCR_START</name><operator>)</operator> <operator>==</operator> <name>DMA2D_FGPFCCR_START</name></expr>)</condition>
      <block>{<block_content>
      <comment type="block">/* Ongoing CLUT loading is suspended: change the DMA2D state before resuming */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_BUSY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Resume the CLUT loading */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>DMA2D_CR_SUSP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**

  * @brief  Polling for transfer complete or CLUT loading.
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_PollForTransfer</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>layer_start</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>isrflags</name> <init>= <expr><literal type="number">0x0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Polling for DMA2D transfer */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DMA2D_CR_START</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
   <comment type="block">/* Get tick */</comment>
   <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>(<expr><call><name>__HAL_DMA2D_GET_FLAG</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_FLAG_TC</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>isrflags</name> <operator>=</operator> <call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <operator>(</operator><name>DMA2D_FLAG_CE</name><operator>|</operator><name>DMA2D_FLAG_TE</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>DMA2D_FLAG_CE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_CE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>DMA2D_FLAG_TE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_TE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Clear the transfer and configuration error flags */</comment>
        <expr_stmt><expr><call><name>__HAL_DMA2D_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_FLAG_CE</name> <operator>|</operator> <name>DMA2D_FLAG_TE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Change DMA2D state */</comment>
        <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_ERROR</name></expr>;</expr_stmt>

        <comment type="block">/* Process unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* Check for the Timeout */</comment>
      <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator><operator>||</operator><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Update error code */</comment>
          <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_TIMEOUT</name></expr>;</expr_stmt>

          <comment type="block">/* Change the DMA2D state */</comment>
          <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_TIMEOUT</name></expr>;</expr_stmt>

          <comment type="block">/* Process unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Polling for CLUT loading (foreground or background) */</comment>
  <expr_stmt><expr><name>layer_start</name> <operator>=</operator> <name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGPFCCR</name></name> <operator>&amp;</operator> <name>DMA2D_FGPFCCR_START</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>layer_start</name> <operator>|=</operator> <name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGPFCCR</name></name> <operator>&amp;</operator> <name>DMA2D_BGPFCCR_START</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>layer_start</name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>(<expr><call><name>__HAL_DMA2D_GET_FLAG</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_FLAG_CTC</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>isrflags</name> <operator>=</operator> <call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <operator>(</operator><name>DMA2D_FLAG_CAE</name><operator>|</operator><name>DMA2D_FLAG_CE</name><operator>|</operator><name>DMA2D_FLAG_TE</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>DMA2D_FLAG_CAE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_CAE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>DMA2D_FLAG_CE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_CE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>DMA2D_FLAG_TE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_TE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */</comment>
        <expr_stmt><expr><call><name>__HAL_DMA2D_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_FLAG_CAE</name> <operator>|</operator> <name>DMA2D_FLAG_CE</name> <operator>|</operator> <name>DMA2D_FLAG_TE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Change DMA2D state */</comment>
        <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_DMA2D_STATE_ERROR</name></expr>;</expr_stmt>

        <comment type="block">/* Process unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* Check for the Timeout */</comment>
      <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator><operator>||</operator><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Update error code */</comment>
          <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_TIMEOUT</name></expr>;</expr_stmt>

          <comment type="block">/* Change the DMA2D state */</comment>
          <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_DMA2D_STATE_TIMEOUT</name></expr>;</expr_stmt>

          <comment type="block">/* Process unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Clear the transfer complete and CLUT loading flags */</comment>
  <expr_stmt><expr><call><name>__HAL_DMA2D_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_FLAG_TC</name><operator>|</operator><name>DMA2D_FLAG_CTC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change DMA2D state */</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @brief  Handle DMA2D interrupt request.
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */</comment>
<function><type><name>void</name></type> <name>HAL_DMA2D_IRQHandler</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>isrflags</name> <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>crflags</name> <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Transfer Error Interrupt management ***************************************/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>DMA2D_FLAG_TE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>crflags</name> <operator>&amp;</operator> <name>DMA2D_IT_TE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the transfer Error interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_DMA2D_DISABLE_IT</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_IT_TE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Update error code */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_TE</name></expr>;</expr_stmt>

      <comment type="block">/* Clear the transfer error flag */</comment>
      <expr_stmt><expr><call><name>__HAL_DMA2D_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_FLAG_TE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Change DMA2D state */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_ERROR</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if<condition>(<expr><name><name>hdma2d</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Transfer error Callback */</comment>
        <expr_stmt><expr><call><name><name>hdma2d</name><operator>-&gt;</operator><name>XferErrorCallback</name></name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Configuration Error Interrupt management **********************************/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>DMA2D_FLAG_CE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>crflags</name> <operator>&amp;</operator> <name>DMA2D_IT_CE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the Configuration Error interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_DMA2D_DISABLE_IT</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_IT_CE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Clear the Configuration error flag */</comment>
      <expr_stmt><expr><call><name>__HAL_DMA2D_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_FLAG_CE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Update error code */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_CE</name></expr>;</expr_stmt>

      <comment type="block">/* Change DMA2D state */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_ERROR</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if<condition>(<expr><name><name>hdma2d</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Transfer error Callback */</comment>
        <expr_stmt><expr><call><name><name>hdma2d</name><operator>-&gt;</operator><name>XferErrorCallback</name></name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* CLUT access Error Interrupt management ***********************************/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>DMA2D_FLAG_CAE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>crflags</name> <operator>&amp;</operator> <name>DMA2D_IT_CAE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the CLUT access error interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_DMA2D_DISABLE_IT</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_IT_CAE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Clear the CLUT access error flag */</comment>
      <expr_stmt><expr><call><name>__HAL_DMA2D_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_FLAG_CAE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Update error code */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_CAE</name></expr>;</expr_stmt>

      <comment type="block">/* Change DMA2D state */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_ERROR</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if<condition>(<expr><name><name>hdma2d</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Transfer error Callback */</comment>
        <expr_stmt><expr><call><name><name>hdma2d</name><operator>-&gt;</operator><name>XferErrorCallback</name></name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Transfer watermark Interrupt management **********************************/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>DMA2D_FLAG_TW</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>crflags</name> <operator>&amp;</operator> <name>DMA2D_IT_TW</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the transfer watermark interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_DMA2D_DISABLE_IT</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_IT_TW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Clear the transfer watermark flag */</comment>
      <expr_stmt><expr><call><name>__HAL_DMA2D_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_FLAG_TW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Transfer watermark Callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DMA2D_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hdma2d</name><operator>-&gt;</operator><name>LineEventCallback</name></name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_DMA2D_LineEventCallback</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_DMA2D_REGISTER_CALLBACKS */</comment>

    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Transfer Complete Interrupt management ************************************/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>DMA2D_FLAG_TC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>crflags</name> <operator>&amp;</operator> <name>DMA2D_IT_TC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the transfer complete interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_DMA2D_DISABLE_IT</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_IT_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Clear the transfer complete flag */</comment>
      <expr_stmt><expr><call><name>__HAL_DMA2D_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_FLAG_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Update error code */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_NONE</name></expr>;</expr_stmt>

      <comment type="block">/* Change DMA2D state */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_READY</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if<condition>(<expr><name><name>hdma2d</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Transfer complete Callback */</comment>
        <expr_stmt><expr><call><name><name>hdma2d</name><operator>-&gt;</operator><name>XferCpltCallback</name></name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* CLUT Transfer Complete Interrupt management ******************************/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>DMA2D_FLAG_CTC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>crflags</name> <operator>&amp;</operator> <name>DMA2D_IT_CTC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the CLUT transfer complete interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_DMA2D_DISABLE_IT</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_IT_CTC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Clear the CLUT transfer complete flag */</comment>
      <expr_stmt><expr><call><name>__HAL_DMA2D_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_FLAG_CTC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Update error code */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DMA2D_ERROR_NONE</name></expr>;</expr_stmt>

      <comment type="block">/* Change DMA2D state */</comment>
      <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_READY</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* CLUT Transfer complete Callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DMA2D_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hdma2d</name><operator>-&gt;</operator><name>CLUTLoadingCpltCallback</name></name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_DMA2D_CLUTLoadingCpltCallback</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_DMA2D_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DMA2D_LineEventCallback</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DMA2D_CLUTLoadingCpltCallback</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DMA2D_Exported_Functions_Group3 Peripheral Control functions
 *  @brief    Peripheral Control functions
 *
@verbatim
 ===============================================================================
                    ##### Peripheral Control functions #####
 ===============================================================================
    [..]  This section provides functions allowing to:
      (+) Configure the DMA2D foreground or background layer parameters.
      (+) Configure the DMA2D CLUT transfer.
      (+) Configure the line watermark
      (+) Configure the dead time value.
      (+) Enable or disable the dead time value functionality.


@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Configure the DMA2D Layer according to the specified
  *         parameters in the DMA2D_HandleTypeDef.
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @param  LayerIdx DMA2D Layer index.
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_ConfigLayer</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>DMA2D_LayerCfgTypeDef</name> <modifier>*</modifier></type><name>pLayerCfg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>regMask</name></decl>, <decl><type ref="prev"/><name>regValue</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_OFFSET</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>LayerCfg</name><index>[<expr><name>LayerIdx</name></expr>]</index></name><operator>.</operator><name>InputOffset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>!=</operator> <name>DMA2D_R2M</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_INPUT_COLOR_MODE</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>LayerCfg</name><index>[<expr><name>LayerIdx</name></expr>]</index></name><operator>.</operator><name>InputColorMode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>!=</operator> <name>DMA2D_M2M</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_ALPHA_MODE</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>LayerCfg</name><index>[<expr><name>LayerIdx</name></expr>]</index></name><operator>.</operator><name>AlphaMode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change DMA2D peripheral state */</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_BUSY</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>pLayerCfg</name> <operator>=</operator> <operator>&amp;</operator><name><name>hdma2d</name><operator>-&gt;</operator><name>LayerCfg</name><index>[<expr><name>LayerIdx</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* Prepare the value to be written to the BGPFCCR or FGPFCCR register */</comment>
  <expr_stmt><expr><name>regValue</name> <operator>=</operator> <name><name>pLayerCfg</name><operator>-&gt;</operator><name>InputColorMode</name></name> <operator>|</operator> <operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>AlphaMode</name></name> <operator>&lt;&lt;</operator> <name>DMA2D_BGPFCCR_AM_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>regMask</name>  <operator>=</operator> <name>DMA2D_BGPFCCR_CM</name> <operator>|</operator> <name>DMA2D_BGPFCCR_AM</name> <operator>|</operator> <name>DMA2D_BGPFCCR_ALPHA</name></expr>;</expr_stmt>


  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>InputColorMode</name></name> <operator>==</operator> <name>DMA2D_INPUT_A4</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>InputColorMode</name></name> <operator>==</operator> <name>DMA2D_INPUT_A8</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>regValue</name> <operator>|=</operator> <operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>InputAlpha</name></name> <operator>&amp;</operator> <name>DMA2D_BGPFCCR_ALPHA</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>regValue</name> <operator>|=</operator>  <operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>InputAlpha</name></name> <operator>&lt;&lt;</operator> <name>DMA2D_BGPFCCR_ALPHA_Pos</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Configure the background DMA2D layer */</comment>
  <if_stmt><if>if<condition>(<expr><name>LayerIdx</name> <operator>==</operator> <name>DMA2D_BACKGROUND_LAYER</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Write DMA2D BGPFCCR register */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGPFCCR</name></name></expr></argument>, <argument><expr><name>regMask</name></expr></argument>, <argument><expr><name>regValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* DMA2D BGOR register configuration -------------------------------------*/</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGOR</name></name></expr></argument>, <argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>InputOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* DMA2D BGCOLR register configuration -------------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>InputColorMode</name></name> <operator>==</operator> <name>DMA2D_INPUT_A4</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>InputColorMode</name></name> <operator>==</operator> <name>DMA2D_INPUT_A8</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGCOLR</name></name></expr></argument>, <argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>InputAlpha</name></name> <operator>&amp;</operator> <operator>(</operator><name>DMA2D_BGCOLR_BLUE</name><operator>|</operator><name>DMA2D_BGCOLR_GREEN</name><operator>|</operator><name>DMA2D_BGCOLR_RED</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Configure the foreground DMA2D layer */</comment>
  <else>else
  <block>{<block_content>


     <comment type="block">/* Write DMA2D FGPFCCR register */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGPFCCR</name></name></expr></argument>, <argument><expr><name>regMask</name></expr></argument>, <argument><expr><name>regValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* DMA2D FGOR register configuration -------------------------------------*/</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGOR</name></name></expr></argument>, <argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>InputOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* DMA2D FGCOLR register configuration -------------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>InputColorMode</name></name> <operator>==</operator> <name>DMA2D_INPUT_A4</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>InputColorMode</name></name> <operator>==</operator> <name>DMA2D_INPUT_A8</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGCOLR</name></name></expr></argument>, <argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>InputAlpha</name></name> <operator>&amp;</operator> <operator>(</operator><name>DMA2D_FGCOLR_BLUE</name><operator>|</operator><name>DMA2D_FGCOLR_GREEN</name><operator>|</operator><name>DMA2D_FGCOLR_RED</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Initialize the DMA2D state*/</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configure the DMA2D CLUT Transfer.
  * @param  hdma2d   Pointer to a DMA2D_HandleTypeDef structure that contains
  *                   the configuration information for the DMA2D.
  * @param  CLUTCfg  Pointer to a DMA2D_CLUTCfgTypeDef structure that contains
  *                   the configuration information for the color look up table.
  * @param  LayerIdx DMA2D Layer index.
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_ConfigCLUT</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>, <parameter><decl><type><name>DMA2D_CLUTCfgTypeDef</name></type> <name>CLUTCfg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_CLUT_CM</name><argument_list>(<argument><expr><name><name>CLUTCfg</name><operator>.</operator><name>CLUTColorMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_CLUT_SIZE</name><argument_list>(<argument><expr><name><name>CLUTCfg</name><operator>.</operator><name>Size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change DMA2D peripheral state */</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Configure the CLUT of the background DMA2D layer */</comment>
  <if_stmt><if>if<condition>(<expr><name>LayerIdx</name> <operator>==</operator> <name>DMA2D_BACKGROUND_LAYER</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Write background CLUT memory address */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGCMAR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>CLUTCfg</name><operator>.</operator><name>pCLUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Write background CLUT size and CLUT color mode */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BGPFCCR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>DMA2D_BGPFCCR_CS</name> <operator>|</operator> <name>DMA2D_BGPFCCR_CCM</name><operator>)</operator></expr></argument>,
            <argument><expr><operator>(</operator><operator>(</operator><name><name>CLUTCfg</name><operator>.</operator><name>Size</name></name> <operator>&lt;&lt;</operator> <name>DMA2D_BGPFCCR_CS_Pos</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>CLUTCfg</name><operator>.</operator><name>CLUTColorMode</name></name> <operator>&lt;&lt;</operator> <name>DMA2D_BGPFCCR_CCM_Pos</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 </block_content>}</block></if>
 <comment type="block">/* Configure the CLUT of the foreground DMA2D layer */</comment>
 <else>else
 <block>{<block_content>
   <comment type="block">/* Write foreground CLUT memory address */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGCMAR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>CLUTCfg</name><operator>.</operator><name>pCLUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Write foreground CLUT size and CLUT color mode */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGPFCCR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>DMA2D_FGPFCCR_CS</name> <operator>|</operator> <name>DMA2D_FGPFCCR_CCM</name><operator>)</operator></expr></argument>,
            <argument><expr><operator>(</operator><operator>(</operator><name><name>CLUTCfg</name><operator>.</operator><name>Size</name></name> <operator>&lt;&lt;</operator> <name>DMA2D_FGPFCCR_CS_Pos</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>CLUTCfg</name><operator>.</operator><name>CLUTColorMode</name></name> <operator>&lt;&lt;</operator> <name>DMA2D_FGPFCCR_CCM_Pos</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Set the DMA2D state to Ready*/</comment>
  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  Configure the line watermark.
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @param  Line   Line Watermark configuration (maximum 16-bit long value expected).
  * @note   HAL_DMA2D_ProgramLineEvent() API enables the transfer watermark interrupt.
  * @note   The transfer watermark interrupt is disabled once it has occurred.
  * @retval HAL status
  */</comment>

<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_ProgramLineEvent</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA2D_LINEWATERMARK</name><argument_list>(<argument><expr><name>Line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>Line</name> <operator>&gt;</operator> <name>DMA2D_LWR_LW</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Process locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Change DMA2D peripheral state */</comment>
    <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Sets the Line watermark configuration */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>LWR</name></name></expr></argument>, <argument><expr><name>Line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the Line interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_DMA2D_ENABLE_IT</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>, <argument><expr><name>DMA2D_IT_TW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Initialize the DMA2D state*/</comment>
    <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Enable DMA2D dead time feature.
  * @param hdma2d DMA2D handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_EnableDeadTime</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Set DMA2D_AMTCR EN bit */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>AMTCR</name></name></expr></argument>, <argument><expr><name>DMA2D_AMTCR_EN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Disable DMA2D dead time feature.
  * @param hdma2d DMA2D handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_DisableDeadTime</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Clear DMA2D_AMTCR EN bit */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>AMTCR</name></name></expr></argument>, <argument><expr><name>DMA2D_AMTCR_EN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Configure dead time.
  * @note The dead time value represents the guaranteed minimum number of cycles between
  *       two consecutive transactions on the AHB bus.
  * @param hdma2d DMA2D handle.
  * @param DeadTime dead time value.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA2D_ConfigDeadTime</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>DeadTime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Set DMA2D_AMTCR DT field */</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>AMTCR</name></name></expr></argument>, <argument><expr><name>DMA2D_AMTCR_DT</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>DeadTime</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>DMA2D_AMTCR_DT_Pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA2D_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>


<comment type="block" format="doxygen">/** @defgroup DMA2D_Exported_Functions_Group4 Peripheral State and Error functions
 *  @brief    Peripheral State functions
 *
@verbatim
 ===============================================================================
                  ##### Peripheral State and Errors functions #####
 ===============================================================================
    [..]
    This subsection provides functions allowing to:
      (+) Get the DMA2D state
      (+) Get the DMA2D error code

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Return the DMA2D state
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL state
  */</comment>
<function><type><name>HAL_DMA2D_StateTypeDef</name></type> <name>HAL_DMA2D_GetState</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hdma2d</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the DMA2D error code
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *               the configuration information for DMA2D.
  * @retval DMA2D Error Code
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_DMA2D_GetError</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hdma2d</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>


<comment type="block" format="doxygen">/** @defgroup DMA2D_Private_Functions DMA2D Private Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Set the DMA2D transfer parameters.
  * @param  hdma2d     Pointer to a DMA2D_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA2D.
  * @param  pdata      The source memory Buffer address
  * @param  DstAddress The destination memory Buffer address
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DMA2D_SetConfig</name><parameter_list>(<parameter><decl><type><name>DMA2D_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma2d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pdata</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DstAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp4</name></decl>;</decl_stmt>

  <comment type="block">/* Configure DMA2D data size */</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>NLR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>DMA2D_NLR_NL</name><operator>|</operator><name>DMA2D_NLR_PL</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>Height</name><operator>|</operator> <operator>(</operator><name>Width</name> <operator>&lt;&lt;</operator> <name>DMA2D_NLR_PL_Pos</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Configure DMA2D destination address */</comment>
  <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>OMAR</name></name></expr></argument>, <argument><expr><name>DstAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Register to memory DMA2D mode selected */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>DMA2D_R2M</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>pdata</name> <operator>&amp;</operator> <name>DMA2D_OCOLR_ALPHA_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>pdata</name> <operator>&amp;</operator> <name>DMA2D_OCOLR_RED_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>pdata</name> <operator>&amp;</operator> <name>DMA2D_OCOLR_GREEN_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name>pdata</name> <operator>&amp;</operator> <name>DMA2D_OCOLR_BLUE_1</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare the value to be written to the OCOLR register according to the color mode */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ColorMode</name></name> <operator>==</operator> <name>DMA2D_OUTPUT_ARGB8888</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>tmp3</name> <operator>|</operator> <name>tmp2</name> <operator>|</operator> <name>tmp1</name><operator>|</operator> <name>tmp4</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ColorMode</name></name> <operator>==</operator> <name>DMA2D_OUTPUT_RGB888</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>tmp3</name> <operator>|</operator> <name>tmp2</name> <operator>|</operator> <name>tmp4</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ColorMode</name></name> <operator>==</operator> <name>DMA2D_OUTPUT_RGB565</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <operator>(</operator><name>tmp2</name> <operator>&gt;&gt;</operator> <literal type="number">19U</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp3</name> <operator>=</operator> <operator>(</operator><name>tmp3</name> <operator>&gt;&gt;</operator> <literal type="number">10U</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp4</name> <operator>=</operator> <operator>(</operator><name>tmp4</name> <operator>&gt;&gt;</operator> <literal type="number">3U</literal> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name>  <operator>=</operator> <operator>(</operator><operator>(</operator><name>tmp3</name> <operator>&lt;&lt;</operator> <literal type="number">5U</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>tmp2</name> <operator>&lt;&lt;</operator> <literal type="number">11U</literal><operator>)</operator> <operator>|</operator> <name>tmp4</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ColorMode</name></name> <operator>==</operator> <name>DMA2D_OUTPUT_ARGB1555</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>tmp1</name> <operator>&gt;&gt;</operator> <literal type="number">31U</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <operator>(</operator><name>tmp2</name> <operator>&gt;&gt;</operator> <literal type="number">19U</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp3</name> <operator>=</operator> <operator>(</operator><name>tmp3</name> <operator>&gt;&gt;</operator> <literal type="number">11U</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp4</name> <operator>=</operator> <operator>(</operator><name>tmp4</name> <operator>&gt;&gt;</operator> <literal type="number">3U</literal> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name>  <operator>=</operator> <operator>(</operator><operator>(</operator><name>tmp3</name> <operator>&lt;&lt;</operator> <literal type="number">5U</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>tmp2</name> <operator>&lt;&lt;</operator> <literal type="number">10U</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>tmp1</name> <operator>&lt;&lt;</operator> <literal type="number">15U</literal><operator>)</operator> <operator>|</operator> <name>tmp4</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="block">/* Dhdma2d-&gt;Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>tmp1</name> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <operator>(</operator><name>tmp2</name> <operator>&gt;&gt;</operator> <literal type="number">20U</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp3</name> <operator>=</operator> <operator>(</operator><name>tmp3</name> <operator>&gt;&gt;</operator> <literal type="number">12U</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp4</name> <operator>=</operator> <operator>(</operator><name>tmp4</name> <operator>&gt;&gt;</operator> <literal type="number">4U</literal> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name>  <operator>=</operator> <operator>(</operator><operator>(</operator><name>tmp3</name> <operator>&lt;&lt;</operator> <literal type="number">4U</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>tmp2</name> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>tmp1</name> <operator>&lt;&lt;</operator> <literal type="number">12U</literal><operator>)</operator> <operator>|</operator> <name>tmp4</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* Write to DMA2D OCOLR register */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>OCOLR</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <comment type="block">/* M2M, M2M_PFC or M2M_Blending DMA2D Mode */</comment>
  <block>{<block_content>
    <comment type="block">/* Configure DMA2D source address */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hdma2d</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FGMAR</name></name></expr></argument>, <argument><expr><name>pdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DMA2D */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_DMA2D_MODULE_ENABLED */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
