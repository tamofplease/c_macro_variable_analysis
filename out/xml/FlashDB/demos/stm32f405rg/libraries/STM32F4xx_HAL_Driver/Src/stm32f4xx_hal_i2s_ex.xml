<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_i2s_ex.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_i2s_ex.c
  * @author  MCD Application Team
  * @brief   I2S HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of I2S extension peripheral:
  *           + Extension features Functions
  *
  @verbatim
  ==============================================================================
                    ##### I2S Extension features #####
  ==============================================================================
  [..]
     (#) In I2S full duplex mode, each SPI peripheral is able to manage sending and receiving
         data simultaneously using two data lines. Each SPI peripheral has an extended block
         called I2Sxext (i.e I2S2ext for SPI2 and I2S3ext for SPI3).
     (#) The extension block is not a full SPI IP, it is used only as I2S slave to
         implement full duplex mode. The extension block uses the same clock sources
         as its master.

     (#) Both I2Sx and I2Sx_ext can be configured as transmitters or receivers.

     [..]
       (@) Only I2Sx can deliver SCK and WS to I2Sx_ext in full duplex mode, where
         I2Sx can be I2S2 or I2S3.

                  ##### How to use this driver #####
 ===============================================================================
 [..]
   Three operation modes are available within this driver :

   *** Polling mode IO operation ***
   =================================
   [..]
     (+) Send and receive in the same time an amount of data in blocking mode using HAL_I2SEx_TransmitReceive()

   *** Interrupt mode IO operation ***
   ===================================
   [..]
     (+) Send and receive in the same time an amount of data in non blocking mode using HAL_I2SEx_TransmitReceive_IT()
     (+) At transmission/reception end of transfer HAL_I2SEx_TxRxCpltCallback is executed and user can
         add his own code by customization of function pointer HAL_I2SEx_TxRxCpltCallback
     (+) In case of transfer Error, HAL_I2S_ErrorCallback() function is executed and user can
         add his own code by customization of function pointer HAL_I2S_ErrorCallback

   *** DMA mode IO operation ***
   ==============================
   [..]
     (+) Send and receive an amount of data in non blocking mode (DMA) using HAL_I2SEx_TransmitReceive_DMA()
     (+) At transmission/reception end of transfer HAL_I2SEx_TxRxCpltCallback is executed and user can
         add his own code by customization of function pointer HAL_I2S_TxRxCpltCallback
     (+) In case of transfer Error, HAL_I2S_ErrorCallback() function is executed and user can
         add his own code by customization of function pointer HAL_I2S_ErrorCallback
  @endverbatim

 Additional Figure: The Extended block uses the same clock sources as its master.

                +-----------------------+
    I2Sx_SCK    |                       |
 ----------+--&gt;|          I2Sx         |-------------------&gt;I2Sx_SD(in/out)
         +--|--&gt;|                       |
        |   |   +-----------------------+
        |   |
 I2S_WS |   |
 ------&gt;|   |
        |   |   +-----------------------+
        |   +--&gt;|                       |
        |       |       I2Sx_ext        |-------------------&gt;I2Sx_extSD(in/out)
         +-----&gt;|                       |
                +-----------------------+
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_I2S_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block" format="doxygen">/** @defgroup I2SEx I2SEx
  * @brief I2S Extended HAL module driver
  * @{
  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>SPI_I2S_FULLDUPLEX_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup I2SEx_Private_Typedef I2S Extended Private Typedef
  * @{
  */</comment>
<typedef>typedef <type><enum>enum
<block>{
  <decl><name>I2S_USE_I2S</name>      <init>= <expr><literal type="number">0x00U</literal></expr></init></decl>,   <comment type="block" format="doxygen">/*!&lt; I2Sx should be used      */</comment>
  <decl><name>I2S_USE_I2SEXT</name>   <init>= <expr><literal type="number">0x01U</literal></expr></init></decl>,   <comment type="block" format="doxygen">/*!&lt; I2Sx_ext should be used  */</comment>
}</block></enum></type> <name>I2S_UseTypeDef</name>;</typedef>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup I2SEx_Private_Functions I2S Extended Private Functions
  * @{
  */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>I2SEx_TxRxDMAHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>I2SEx_TxRxDMACplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>I2SEx_TxRxDMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>I2SEx_RxISR_I2S</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>I2SEx_RxISR_I2SExt</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>I2SEx_TxISR_I2S</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>I2SEx_TxISR_I2SExt</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>I2SEx_FullDuplexWaitFlagStateUntilTimeout</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Flag</name></decl></parameter>,
    <parameter><decl><type><name>uint32_t</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>, <parameter><decl><type><name>I2S_UseTypeDef</name></type> <name>i2sUsed</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>
<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @addtogroup I2SEx I2SEx
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup I2SEx_Exported_Functions I2S Extended Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup I2SEx_Exported_Functions_Group1 I2S Extended IO operation functions
  *  @brief   I2SEx IO operation functions
  *
@verbatim
 ===============================================================================
                       ##### IO operation functions#####
 ===============================================================================
    [..]
    This subsection provides a set of functions allowing to manage the I2S data
    transfers.

    (#) There are two modes of transfer:
       (++) Blocking mode : The communication is performed in the polling mode.
            The status of all data processing is returned by the same function
            after finishing transfer.
       (++) No-Blocking mode : The communication is performed using Interrupts
            or DMA. These functions return the status of the transfer startup.
            The end of the data processing will be indicated through the
            dedicated I2S IRQ when using Interrupt mode or the DMA IRQ when
            using DMA mode.

    (#) Blocking mode functions are :
        (++) HAL_I2SEx_TransmitReceive()

    (#) No-Blocking mode functions with Interrupt are :
        (++) HAL_I2SEx_TransmitReceive_IT()
        (++) HAL_I2SEx_FullDuplex_IRQHandler()

    (#) No-Blocking mode functions with DMA are :
        (++) HAL_I2SEx_TransmitReceive_DMA()

    (#) A set of Transfer Complete Callback are provided in non Blocking mode:
        (++) HAL_I2SEx_TxRxCpltCallback()
@endverbatim
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @brief  Full-Duplex Transmit/Receive data in blocking mode.
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @param  pTxData a 16-bit pointer to the Transmit data buffer.
  * @param  pRxData a 16-bit pointer to the Receive data buffer.
  * @param  Size number of data sample to be sent:
  * @note   When a 16-bit data frame or a 16-bit data frame extended is selected during the I2S
  *         configuration phase, the Size parameter means the number of 16-bit data length
  *         in the transaction and when a 24-bit data frame or a 32-bit data frame is selected
  *         the Size parameter means the number of 16-bit data length.
  * @param  Timeout Timeout duration
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_I2SEx_TransmitReceive</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pTxData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pRxData</name></decl></parameter>,
                                            <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp1</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>errorcode</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_I2S_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>errorcode</name> <operator>=</operator> <name>HAL_BUSY</name></expr>;</expr_stmt>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pTxData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>pRxData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <operator>(</operator><name>SPI_I2SCFGR_DATLEN</name> <operator>|</operator> <name>SPI_I2SCFGR_CHLEN</name><operator>)</operator></expr>;</expr_stmt>
  <comment type="block">/* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
     is selected during the I2S configuration phase, the Size parameter means the number
     of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
     frame is selected the Size parameter means the number of 16-bit data length. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp1</name> <operator>==</operator> <name>I2S_DATAFORMAT_24B</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tmp1</name> <operator>==</operator> <name>I2S_DATAFORMAT_32B</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferSize</name></name>  <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferSize</name></name>  <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferSize</name></name>  <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferSize</name></name>  <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Set state and reset error code */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_I2S_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_BUSY_TX_RX</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SCFG</name></expr>;</expr_stmt>
  <comment type="block">/* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp1</name> <operator>==</operator> <name>I2S_MODE_MASTER_TX</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tmp1</name> <operator>==</operator> <name>I2S_MODE_SLAVE_TX</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Prepare the First Data before enabling the I2S */</comment>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>pTxData</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>

    <comment type="block">/* Enable I2Sext(receiver) before enabling I2Sx peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_I2SEXT_ENABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable I2Sx peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_I2S_ENABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check if Master Receiver mode is selected */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SCFG</name><operator>)</operator> <operator>==</operator> <name>I2S_MODE_MASTER_TX</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */</comment>
      <expr_stmt><expr><call><name>__HAL_I2SEXT_CLEAR_OVRFLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Wait until TXE flag is set */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>I2SEx_FullDuplexWaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>I2S_FLAG_TXE</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>I2S_USE_I2S</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set the error code */</comment>
          <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>errorcode</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
          <goto>goto <name>error</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Write Data on DR register */</comment>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>pTxData</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>

        <comment type="block">/* Check if an underrun occurs */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>__HAL_I2S_GET_FLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>I2S_FLAG_UDR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tmp1</name> <operator>==</operator> <name>I2S_MODE_SLAVE_TX</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Clear Underrun flag */</comment>
          <expr_stmt><expr><call><name>__HAL_I2S_CLEAR_UDRFLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Set the error code */</comment>
          <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_UDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Wait until RXNE flag is set */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>I2SEx_FullDuplexWaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>I2S_FLAG_RXNE</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>I2S_USE_I2SEXT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set the error code */</comment>
          <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>errorcode</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
          <goto>goto <name>error</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Read Data from DR register */</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pRxData</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>

        <comment type="block">/* Check if an overrun occurs */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>__HAL_I2SEXT_GET_FLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>I2S_FLAG_OVR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Clear Overrun flag */</comment>
          <expr_stmt><expr><call><name>__HAL_I2S_CLEAR_OVRFLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Set the error code */</comment>
          <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if>
  <comment type="block">/* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */</comment>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Prepare the First Data before enabling the I2S */</comment>
    <expr_stmt><expr><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DR</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>pTxData</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>

    <comment type="block">/* Enable I2Sext(transmitter) after enabling I2Sx peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_I2SEXT_ENABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable I2S peripheral before the I2Sext*/</comment>
    <expr_stmt><expr><call><name>__HAL_I2S_ENABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check if Master Receiver mode is selected */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SCFG</name><operator>)</operator> <operator>==</operator> <name>I2S_MODE_MASTER_RX</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */</comment>
      <expr_stmt><expr><call><name>__HAL_I2S_CLEAR_OVRFLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Wait until TXE flag is set */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>I2SEx_FullDuplexWaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>I2S_FLAG_TXE</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>I2S_USE_I2SEXT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set the error code */</comment>
          <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>errorcode</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
          <goto>goto <name>error</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Write Data on DR register */</comment>
        <expr_stmt><expr><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DR</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>pTxData</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>

        <comment type="block">/* Check if an underrun occurs */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>__HAL_I2SEXT_GET_FLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>I2S_FLAG_UDR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tmp1</name> <operator>==</operator> <name>I2S_MODE_SLAVE_RX</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Clear Underrun flag */</comment>
          <expr_stmt><expr><call><name>__HAL_I2S_CLEAR_UDRFLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Set the error code */</comment>
          <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_UDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Wait until RXNE flag is set */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>I2SEx_FullDuplexWaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>I2S_FLAG_RXNE</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>I2S_USE_I2S</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set the error code */</comment>
          <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>errorcode</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
          <goto>goto <name>error</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Read Data from DR register */</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pRxData</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>

        <comment type="block">/* Check if an overrun occurs */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>__HAL_I2S_GET_FLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>I2S_FLAG_OVR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Clear Overrun flag */</comment>
          <expr_stmt><expr><call><name>__HAL_I2S_CLEAR_OVRFLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Set the error code */</comment>
          <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>!=</operator> <name>HAL_I2S_ERROR_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>errorcode</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>error</name> :</label>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>errorcode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Full-Duplex Transmit/Receive data in non-blocking mode using Interrupt
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @param  pTxData a 16-bit pointer to the Transmit data buffer.
  * @param  pRxData a 16-bit pointer to the Receive data buffer.
  * @param  Size number of data sample to be sent:
  * @note   When a 16-bit data frame or a 16-bit data frame extended is selected during the I2S
  *         configuration phase, the Size parameter means the number of 16-bit data length
  *         in the transaction and when a 24-bit data frame or a 32-bit data frame is selected
  *         the Size parameter means the number of 16-bit data length.
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_I2SEx_TransmitReceive_IT</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pTxData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pRxData</name></decl></parameter>,
                                               <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp1</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>errorcode</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_I2S_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>errorcode</name> <operator>=</operator> <name>HAL_BUSY</name></expr>;</expr_stmt>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pTxData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>pRxData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name> <operator>=</operator> <name>pTxData</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>=</operator> <name>pRxData</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <operator>(</operator><name>SPI_I2SCFGR_DATLEN</name> <operator>|</operator> <name>SPI_I2SCFGR_CHLEN</name><operator>)</operator></expr>;</expr_stmt>
  <comment type="block">/* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp1</name> <operator>==</operator> <name>I2S_DATAFORMAT_24B</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tmp1</name> <operator>==</operator> <name>I2S_DATAFORMAT_32B</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferSize</name></name>  <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferSize</name></name>  <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferSize</name></name>  <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferSize</name></name>  <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_I2S_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_I2S_STATE_BUSY_TX_RX</name></expr>;</expr_stmt>

  <comment type="block">/* Set the function for IT treatment */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>I2S_MODE_MASTER_TX</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>I2S_MODE_SLAVE_TX</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable I2Sext RXNE and ERR interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_I2SEXT_ENABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_RXNE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable I2Sx TXE and ERR interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_I2S_ENABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_TXE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Transmit First data */</comment>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name><name>hi2s</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable TXE and ERR interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_I2S_DISABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_TXE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <else>else  <comment type="block">/* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */</comment>
  <block>{<block_content>
    <comment type="block">/* Enable I2Sext TXE and ERR interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_I2SEXT_ENABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_TXE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable I2Sext RXNE and ERR interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_I2S_ENABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_RXNE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Transmit First data */</comment>
    <expr_stmt><expr><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DR</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name><name>hi2s</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable I2Sext TXE and ERR interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_I2SEXT_DISABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_TXE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Enable I2Sext peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_I2SEXT_ENABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable I2S peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_I2S_ENABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error</name> :</label>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>errorcode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Full-Duplex Transmit/Receive data in non-blocking mode using DMA
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @param  pTxData a 16-bit pointer to the Transmit data buffer.
  * @param  pRxData a 16-bit pointer to the Receive data buffer.
  * @param  Size number of data sample to be sent:
  * @note   When a 16-bit data frame or a 16-bit data frame extended is selected during the I2S
  *         configuration phase, the Size parameter means the number of 16-bit data length
  *         in the transaction and when a 24-bit data frame or a 32-bit data frame is selected
  *         the Size parameter means the number of 16-bit data length.
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_I2SEx_TransmitReceive_DMA</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pTxData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pRxData</name></decl></parameter>,
                                                <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp1</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>errorcode</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_I2S_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>errorcode</name> <operator>=</operator> <name>HAL_BUSY</name></expr>;</expr_stmt>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pTxData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>pRxData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name> <operator>=</operator> <name>pTxData</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>=</operator> <name>pRxData</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <operator>(</operator><name>SPI_I2SCFGR_DATLEN</name> <operator>|</operator> <name>SPI_I2SCFGR_CHLEN</name><operator>)</operator></expr>;</expr_stmt>
  <comment type="block">/* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp1</name> <operator>==</operator> <name>I2S_DATAFORMAT_24B</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tmp1</name> <operator>==</operator> <name>I2S_DATAFORMAT_32B</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferSize</name></name>  <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferSize</name></name>  <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferSize</name></name>  <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferSize</name></name>  <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_I2S_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_I2S_STATE_BUSY_TX_RX</name></expr>;</expr_stmt>

  <comment type="block">/* Set the I2S Rx DMA Half transfer complete callback */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>I2SEx_TxRxDMAHalfCplt</name></expr>;</expr_stmt>

  <comment type="block">/* Set the I2S Rx DMA transfer complete callback */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name>  <operator>=</operator> <name>I2SEx_TxRxDMACplt</name></expr>;</expr_stmt>

  <comment type="block">/* Set the I2S Rx DMA error callback */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>I2SEx_TxRxDMAError</name></expr>;</expr_stmt>

  <comment type="block">/* Set the I2S Tx DMA Half transfer complete callback */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name>  <operator>=</operator> <name>I2SEx_TxRxDMAHalfCplt</name></expr>;</expr_stmt>

  <comment type="block">/* Set the I2S Tx DMA transfer complete callback */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name>  <operator>=</operator> <name>I2SEx_TxRxDMACplt</name></expr>;</expr_stmt>

  <comment type="block">/* Set the I2S Tx DMA error callback */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>I2SEx_TxRxDMAError</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SCFG</name></expr>;</expr_stmt>
  <comment type="block">/* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp1</name> <operator>==</operator> <name>I2S_MODE_MASTER_TX</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tmp1</name> <operator>==</operator> <name>I2S_MODE_SLAVE_TX</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable the Rx DMA Stream */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pRxData</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DR</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable Rx DMA Request */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CR2</name></expr></argument>, <argument><expr><name>SPI_CR2_RXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the Tx DMA Stream */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pTxData</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></argument>, <argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable Tx DMA Request */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SPI_CR2_TXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check if the I2S is already enabled */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SE</name><operator>)</operator> <operator>!=</operator> <name>SPI_I2SCFGR_I2SE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable I2Sext(receiver) before enabling I2Sx peripheral */</comment>
      <expr_stmt><expr><call><name>__HAL_I2SEXT_ENABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Enable I2S peripheral after the I2Sext */</comment>
      <expr_stmt><expr><call><name>__HAL_I2S_ENABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Check if Master Receiver mode is selected */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SCFG</name><operator>)</operator> <operator>==</operator> <name>I2S_MODE_MASTER_RX</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */</comment>
      <expr_stmt><expr><call><name>__HAL_I2S_CLEAR_OVRFLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Enable the Tx DMA Stream */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pTxData</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DR</name></expr></argument>, <argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable Tx DMA Request */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CR2</name></expr></argument>, <argument><expr><name>SPI_CR2_TXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the Rx DMA Stream */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pRxData</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable Rx DMA Request */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SPI_CR2_RXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check if the I2S is already enabled */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SE</name><operator>)</operator> <operator>!=</operator> <name>SPI_I2SCFGR_I2SE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable I2Sext(transmitter) before enabling I2Sx peripheral */</comment>
      <expr_stmt><expr><call><name>__HAL_I2SEXT_ENABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Enable I2S peripheral before the I2Sext */</comment>
      <expr_stmt><expr><call><name>__HAL_I2S_ENABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>error</name> :</label>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>errorcode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */</comment>
<function><type><name>void</name></type> <name>HAL_I2SEx_FullDuplex_IRQHandler</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>i2ssr</name>     <init>= <expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>i2sextsr</name>  <init>= <expr><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>SR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>i2scr2</name>    <init>= <expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>i2sextcr2</name> <init>= <expr><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CR2</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>I2S_MODE_MASTER_TX</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>I2S_MODE_SLAVE_TX</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* I2S in mode Transmitter -------------------------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>i2ssr</name> <operator>&amp;</operator> <name>I2S_FLAG_TXE</name><operator>)</operator> <operator>==</operator> <name>I2S_FLAG_TXE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>i2scr2</name> <operator>&amp;</operator> <name>I2S_IT_TXE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */</comment>
      <expr_stmt><expr><call><name>I2SEx_TxISR_I2S</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* I2Sext in mode Receiver -----------------------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>i2sextsr</name> <operator>&amp;</operator> <name>I2S_FLAG_RXNE</name><operator>)</operator> <operator>==</operator> <name>I2S_FLAG_RXNE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>i2sextcr2</name> <operator>&amp;</operator> <name>I2S_IT_RXNE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */</comment>
      <expr_stmt><expr><call><name>I2SEx_RxISR_I2SExt</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* I2Sext Overrun error interrupt occurred --------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>i2sextsr</name> <operator>&amp;</operator> <name>I2S_FLAG_OVR</name><operator>)</operator> <operator>==</operator> <name>I2S_FLAG_OVR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>i2sextcr2</name> <operator>&amp;</operator> <name>I2S_IT_ERR</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable RXNE and ERR interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_I2SEXT_DISABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_RXNE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Disable TXE and ERR interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_I2S_DISABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_TXE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Clear Overrun flag */</comment>
      <expr_stmt><expr><call><name>__HAL_I2S_CLEAR_OVRFLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Set the I2S State ready */</comment>
      <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>

      <comment type="block">/* Set the error code and execute error callback*/</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Call user error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_I2S_ErrorCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* I2S Underrun error interrupt occurred ----------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>i2ssr</name> <operator>&amp;</operator> <name>I2S_FLAG_UDR</name><operator>)</operator> <operator>==</operator> <name>I2S_FLAG_UDR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>i2scr2</name> <operator>&amp;</operator> <name>I2S_IT_ERR</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable TXE and ERR interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_I2S_DISABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_TXE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Disable RXNE and ERR interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_I2SEXT_DISABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_RXNE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Clear underrun flag */</comment>
      <expr_stmt><expr><call><name>__HAL_I2S_CLEAR_UDRFLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Set the I2S State ready */</comment>
      <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>

      <comment type="block">/* Set the error code and execute error callback*/</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_UDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Call user error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_I2S_ErrorCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <comment type="block">/* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */</comment>
  <else>else
  <block>{<block_content>
    <comment type="block">/* I2Sext in mode Transmitter ----------------------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>i2sextsr</name> <operator>&amp;</operator> <name>I2S_FLAG_TXE</name><operator>)</operator> <operator>==</operator> <name>I2S_FLAG_TXE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>i2sextcr2</name> <operator>&amp;</operator> <name>I2S_IT_TXE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */</comment>
      <expr_stmt><expr><call><name>I2SEx_TxISR_I2SExt</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* I2S in mode Receiver --------------------------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>i2ssr</name> <operator>&amp;</operator> <name>I2S_FLAG_RXNE</name><operator>)</operator> <operator>==</operator> <name>I2S_FLAG_RXNE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>i2scr2</name> <operator>&amp;</operator> <name>I2S_IT_RXNE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */</comment>
      <expr_stmt><expr><call><name>I2SEx_RxISR_I2S</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* I2S Overrun error interrupt occurred -------------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>i2ssr</name> <operator>&amp;</operator> <name>I2S_FLAG_OVR</name><operator>)</operator> <operator>==</operator> <name>I2S_FLAG_OVR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>i2scr2</name> <operator>&amp;</operator> <name>I2S_IT_ERR</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable RXNE and ERR interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_I2S_DISABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_RXNE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Disable TXE and ERR interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_I2SEXT_DISABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_TXE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Set the I2S State ready */</comment>
      <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>

      <comment type="block">/* Set the error code and execute error callback*/</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Call user error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_I2S_ErrorCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* I2Sext Underrun error interrupt occurred -------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>i2sextsr</name> <operator>&amp;</operator> <name>I2S_FLAG_UDR</name><operator>)</operator> <operator>==</operator> <name>I2S_FLAG_UDR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>i2sextcr2</name> <operator>&amp;</operator> <name>I2S_IT_ERR</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable TXE and ERR interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_I2SEXT_DISABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_TXE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Disable RXNE and ERR interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_I2S_DISABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_RXNE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Set the I2S State ready */</comment>
      <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>

      <comment type="block">/* Set the error code and execute error callback*/</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_UDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Call user error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_I2S_ErrorCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Tx and Rx Transfer half completed callback
  * @param  hi2s I2S handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_I2SEx_TxRxHalfCpltCallback</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxHalfCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_I2SEx_TxRxCpltCallback</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup I2SEx_Private_Functions I2S Extended Private Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  DMA I2S transmit receive process half complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>I2SEx_TxRxDMAHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name> <init>= <expr><operator>(</operator><name>I2S_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Call user TxRx Half complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>TxRxHalfCpltCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_I2SEx_TxRxHalfCpltCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA I2S transmit receive process complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>I2SEx_TxRxDMACplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name> <init>= <expr><operator>(</operator><name>I2S_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* if DMA is configured in DMA_NORMAL mode */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>DMA_NORMAL</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>==</operator> <name>hdma</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable Rx DMA Request */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SCFG</name><operator>)</operator> <operator>==</operator> <name>I2S_MODE_MASTER_TX</name><operator>)</operator> <operator>||</operator> \
          <operator>(</operator><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SCFG</name><operator>)</operator> <operator>==</operator> <name>I2S_MODE_SLAVE_TX</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CR2</name></expr></argument>, <argument><expr><name>SPI_CR2_RXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SPI_CR2_RXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>

        <comment type="block">/* Call user TxRx complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>TxRxCpltCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_I2SEx_TxRxCpltCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>==</operator> <name>hdma</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable Tx DMA Request */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SCFG</name><operator>)</operator> <operator>==</operator> <name>I2S_MODE_MASTER_TX</name><operator>)</operator> <operator>||</operator> \
          <operator>(</operator><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SCFG</name><operator>)</operator> <operator>==</operator> <name>I2S_MODE_SLAVE_TX</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SPI_CR2_TXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CR2</name></expr></argument>, <argument><expr><name>SPI_CR2_TXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>

        <comment type="block">/* Call user TxRx complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>TxRxCpltCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_I2SEx_TxRxCpltCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>I2SEx_TxRxDMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name> <init>= <expr><operator>(</operator><name>I2S_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Disable Rx and Tx DMA Request */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SPI_CR2_RXDMAEN</name> <operator>|</operator> <name>SPI_CR2_TXDMAEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CR2</name></expr></argument>, <argument><expr><operator>(</operator><name>SPI_CR2_RXDMAEN</name> <operator>|</operator> <name>SPI_CR2_TXDMAEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Set the error code and execute error callback*/</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_DMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Call user error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_I2S_ErrorCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>I2SEx_TxISR_I2S</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Write Data on DR register */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name><name>hi2s</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable TXE and ERR interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_I2S_DISABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_TXE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>
      <comment type="block">/* Call user TxRx complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>TxRxCpltCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_I2SEx_TxRxCpltCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>I2SEx_TxISR_I2SExt</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Write Data on DR register */</comment>
  <expr_stmt><expr><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DR</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name><name>hi2s</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable I2Sext TXE and ERR interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_I2SEXT_DISABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_TXE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>
      <comment type="block">/* Call user TxRx complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>TxRxCpltCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_I2SEx_TxRxCpltCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>I2SEx_RxISR_I2S</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Read Data from DR register */</comment>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>hi2s</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable RXNE and ERR interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_I2S_DISABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_RXNE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>
      <comment type="block">/* Call user TxRx complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>TxRxCpltCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_I2SEx_TxRxCpltCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>I2SEx_RxISR_I2SExt</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Read Data from DR register */</comment>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>hi2s</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable I2Sext RXNE and ERR interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_I2SEXT_DISABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_RXNE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>
      <comment type="block">/* Call user TxRx complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>TxRxCpltCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_I2SEx_TxRxCpltCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief This function handles I2S Communication Timeout.
  * @param hi2s I2S handle
  * @param Flag Flag checked
  * @param State Value of the flag expected
  * @param Timeout Duration of the timeout
  * @param i2sUsed I2S instance reference
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>I2SEx_FullDuplexWaitFlagStateUntilTimeout</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Flag</name></decl></parameter>,
    <parameter><decl><type><name>uint32_t</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>, <parameter><decl><type><name>I2S_UseTypeDef</name></type> <name>i2sUsed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>i2sUsed</name> <operator>==</operator> <name>I2S_USE_I2S</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Wait until flag is reset */</comment>
    <while>while <condition>(<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>__HAL_I2S_GET_FLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>Flag</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>SET</name></expr> </then><else>: <expr><name>RESET</name></expr></else></ternary><operator>)</operator> <operator>!=</operator> <name>State</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set the I2S State ready */</comment>
          <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>

          <comment type="block">/* Process Unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if>
  <else>else <comment type="block">/* i2sUsed == I2S_USE_I2SEXT */</comment>
  <block>{<block_content>
    <comment type="block">/* Wait until flag is reset */</comment>
    <while>while <condition>(<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>__HAL_I2SEXT_GET_FLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>Flag</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>SET</name></expr> </then><else>: <expr><name>RESET</name></expr></else></ternary><operator>)</operator> <operator>!=</operator> <name>State</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set the I2S State ready */</comment>
          <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>

          <comment type="block">/* Process Unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SPI_I2S_FULLDUPLEX_SUPPORT */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_I2S_MODULE_ENABLED */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
