<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_adc.c
  * @author  MCD Application Team
  * @brief   This file provides firmware functions to manage the following 
  *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
  *           + Initialization and de-initialization functions
  *           + IO operation functions
  *           + State and errors functions
  *         
  @verbatim
  ==============================================================================
                    ##### ADC Peripheral features #####
  ==============================================================================
  [..] 
  (#) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution.
  (#) Interrupt generation at the end of conversion, end of injected conversion,  
      and in case of analog watchdog or overrun events
  (#) Single and continuous conversion modes.
  (#) Scan mode for automatic conversion of channel 0 to channel x.
  (#) Data alignment with in-built data coherency.
  (#) Channel-wise programmable sampling time.
  (#) External trigger option with configurable polarity for both regular and 
      injected conversion.
  (#) Dual/Triple mode (on devices with 2 ADCs or more).
  (#) Configurable DMA data storage in Dual/Triple ADC mode. 
  (#) Configurable delay between conversions in Dual/Triple interleaved mode.
  (#) ADC conversion type (refer to the datasheets).
  (#) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
      slower speed.
  (#) ADC input range: VREF(minus) = VIN = VREF(plus).
  (#) DMA request generation during regular channel conversion.


                     ##### How to use this driver #####
  ==============================================================================
  [..]
  (#)Initialize the ADC low level resources by implementing the HAL_ADC_MspInit():
       (##) Enable the ADC interface clock using __HAL_RCC_ADC_CLK_ENABLE()
       (##) ADC pins configuration
             (+++) Enable the clock for the ADC GPIOs using the following function:
                   __HAL_RCC_GPIOx_CLK_ENABLE()  
             (+++) Configure these ADC pins in analog mode using HAL_GPIO_Init() 
       (##) In case of using interrupts (e.g. HAL_ADC_Start_IT())
             (+++) Configure the ADC interrupt priority using HAL_NVIC_SetPriority()
             (+++) Enable the ADC IRQ handler using HAL_NVIC_EnableIRQ()
             (+++) In ADC IRQ handler, call HAL_ADC_IRQHandler()
       (##) In case of using DMA to control data transfer (e.g. HAL_ADC_Start_DMA())
             (+++) Enable the DMAx interface clock using __HAL_RCC_DMAx_CLK_ENABLE()
             (+++) Configure and enable two DMA streams stream for managing data
                 transfer from peripheral to memory (output stream)
             (+++) Associate the initialized DMA handle to the CRYP DMA handle
                 using  __HAL_LINKDMA()
             (+++) Configure the priority and enable the NVIC for the transfer complete
                 interrupt on the two DMA Streams. The output stream should have higher
                 priority than the input stream.
                       
    *** Configuration of ADC, groups regular/injected, channels parameters ***
  ==============================================================================
  [..]
  (#) Configure the ADC parameters (resolution, data alignment, ...)
      and regular group parameters (conversion trigger, sequencer, ...)
      using function HAL_ADC_Init().

  (#) Configure the channels for regular group parameters (channel number, 
      channel rank into sequencer, ..., into regular group)
      using function HAL_ADC_ConfigChannel().

  (#) Optionally, configure the injected group parameters (conversion trigger, 
      sequencer, ..., of injected group)
      and the channels for injected group parameters (channel number, 
      channel rank into sequencer, ..., into injected group)
      using function HAL_ADCEx_InjectedConfigChannel().

  (#) Optionally, configure the analog watchdog parameters (channels
      monitored, thresholds, ...) using function HAL_ADC_AnalogWDGConfig().

  (#) Optionally, for devices with several ADC instances: configure the 
      multimode parameters using function HAL_ADCEx_MultiModeConfigChannel().

                       *** Execution of ADC conversions ***
  ==============================================================================
  [..]  
  (#) ADC driver can be used among three modes: polling, interruption,
      transfer by DMA.    

     *** Polling mode IO operation ***
     =================================
     [..]    
       (+) Start the ADC peripheral using HAL_ADC_Start() 
       (+) Wait for end of conversion using HAL_ADC_PollForConversion(), at this stage
           user can specify the value of timeout according to his end application      
       (+) To read the ADC converted values, use the HAL_ADC_GetValue() function.
       (+) Stop the ADC peripheral using HAL_ADC_Stop()
       
     *** Interrupt mode IO operation ***    
     ===================================
     [..]    
       (+) Start the ADC peripheral using HAL_ADC_Start_IT() 
       (+) Use HAL_ADC_IRQHandler() called under ADC_IRQHandler() Interrupt subroutine
       (+) At ADC end of conversion HAL_ADC_ConvCpltCallback() function is executed and user can 
           add his own code by customization of function pointer HAL_ADC_ConvCpltCallback 
       (+) In case of ADC Error, HAL_ADC_ErrorCallback() function is executed and user can 
           add his own code by customization of function pointer HAL_ADC_ErrorCallback
       (+) Stop the ADC peripheral using HAL_ADC_Stop_IT()     

     *** DMA mode IO operation ***    
     ==============================
     [..]    
       (+) Start the ADC peripheral using HAL_ADC_Start_DMA(), at this stage the user specify the length 
           of data to be transferred at each end of conversion 
       (+) At The end of data transfer by HAL_ADC_ConvCpltCallback() function is executed and user can 
           add his own code by customization of function pointer HAL_ADC_ConvCpltCallback 
       (+) In case of transfer Error, HAL_ADC_ErrorCallback() function is executed and user can 
           add his own code by customization of function pointer HAL_ADC_ErrorCallback
       (+) Stop the ADC peripheral using HAL_ADC_Stop_DMA()
                    
     *** ADC HAL driver macros list ***
     ============================================= 
     [..]
       Below the list of most used macros in ADC HAL driver.
       
      (+) __HAL_ADC_ENABLE : Enable the ADC peripheral
      (+) __HAL_ADC_DISABLE : Disable the ADC peripheral
      (+) __HAL_ADC_ENABLE_IT: Enable the ADC end of conversion interrupt
      (+) __HAL_ADC_DISABLE_IT: Disable the ADC end of conversion interrupt
      (+) __HAL_ADC_GET_IT_SOURCE: Check if the specified ADC interrupt source is enabled or disabled
      (+) __HAL_ADC_CLEAR_FLAG: Clear the ADC's pending flags
      (+) __HAL_ADC_GET_FLAG: Get the selected ADC's flag status
      (+) ADC_GET_RESOLUTION: Return resolution bits in CR1 register 
      
     [..] 
       (@) You can refer to the ADC HAL driver header file for more useful macros 

                      *** Deinitialization of ADC ***
  ==============================================================================
  [..]
  (#) Disable the ADC interface
     (++) ADC clock can be hard reset and disabled at RCC top level.
     (++) Hard reset of ADC peripherals
          using macro __HAL_RCC_ADC_FORCE_RESET(), __HAL_RCC_ADC_RELEASE_RESET().
     (++) ADC clock disable using the equivalent macro/functions as configuration step.
               (+++) Example:
                   Into HAL_ADC_MspDeInit() (recommended code location) or with
                   other device clock parameters configuration:
               (+++) HAL_RCC_GetOscConfig(&amp;RCC_OscInitStructure);
               (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI;
               (+++) RCC_OscInitStructure.HSIState = RCC_HSI_OFF; (if not used for system clock)
               (+++) HAL_RCC_OscConfig(&amp;RCC_OscInitStructure);

  (#) ADC pins configuration
     (++) Disable the clock for the ADC GPIOs using macro __HAL_RCC_GPIOx_CLK_DISABLE()

  (#) Optionally, in case of usage of ADC with interruptions:
     (++) Disable the NVIC for ADC using function HAL_NVIC_DisableIRQ(ADCx_IRQn)

  (#) Optionally, in case of usage of DMA:
        (++) Deinitialize the DMA using function HAL_DMA_DeInit().
        (++) Disable the NVIC for DMA using function HAL_NVIC_DisableIRQ(DMAx_Channelx_IRQn)   
                      *** Callback registration ***
  ==============================================================================
    [..]

     The compilation flag USE_HAL_ADC_REGISTER_CALLBACKS, when set to 1,
     allows the user to configure dynamically the driver callbacks.
     Use Functions @ref HAL_ADC_RegisterCallback()
     to register an interrupt callback.
    [..]

     Function @ref HAL_ADC_RegisterCallback() allows to register following callbacks:
       (+) ConvCpltCallback               : ADC conversion complete callback
       (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
       (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
       (+) ErrorCallback                  : ADC error callback
       (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
       (+) InjectedQueueOverflowCallback  : ADC group injected context queue overflow callback
       (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
       (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
       (+) EndOfSamplingCallback          : ADC end of sampling callback
       (+) MspInitCallback                : ADC Msp Init callback
       (+) MspDeInitCallback              : ADC Msp DeInit callback
     This function takes as parameters the HAL peripheral handle, the Callback ID
     and a pointer to the user callback function.
    [..]

     Use function @ref HAL_ADC_UnRegisterCallback to reset a callback to the default
     weak function.
    [..]

     @ref HAL_ADC_UnRegisterCallback takes as parameters the HAL peripheral handle,
     and the Callback ID.
     This function allows to reset following callbacks:
       (+) ConvCpltCallback               : ADC conversion complete callback
       (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
       (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
       (+) ErrorCallback                  : ADC error callback
       (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
       (+) InjectedQueueOverflowCallback  : ADC group injected context queue overflow callback
       (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
       (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
       (+) EndOfSamplingCallback          : ADC end of sampling callback
       (+) MspInitCallback                : ADC Msp Init callback
       (+) MspDeInitCallback              : ADC Msp DeInit callback
     [..]

     By default, after the @ref HAL_ADC_Init() and when the state is @ref HAL_ADC_STATE_RESET
     all callbacks are set to the corresponding weak functions:
     examples @ref HAL_ADC_ConvCpltCallback(), @ref HAL_ADC_ErrorCallback().
     Exception done for MspInit and MspDeInit functions that are
     reset to the legacy weak functions in the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit() only when
     these callbacks are null (not registered beforehand).
    [..]

     If MspInit or MspDeInit are not null, the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit()
     keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state.
     [..]

     Callbacks can be registered/unregistered in @ref HAL_ADC_STATE_READY state only.
     Exception done MspInit/MspDeInit functions that can be registered/unregistered
     in @ref HAL_ADC_STATE_READY or @ref HAL_ADC_STATE_RESET state,
     thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
    [..]

     Then, the user first registers the MspInit/MspDeInit user callbacks
     using @ref HAL_ADC_RegisterCallback() before calling @ref HAL_ADC_DeInit()
     or @ref HAL_ADC_Init() function.
     [..]

     When the compilation flag USE_HAL_ADC_REGISTER_CALLBACKS is set to 0 or
     not defined, the callback registration feature is not available and all callbacks
     are set to the corresponding weak functions.

    @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment> 

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup ADC ADC
  * @brief ADC driver modules
  * @{
  */</comment> 

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_ADC_MODULE_ENABLED</name></cpp:ifdef>
    
<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup ADC_Private_Functions
  * @{
  */</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ADC_Init</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ADC_DMAConvCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ADC_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ADC_DMAHalfConvCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup ADC_Exported_Functions ADC Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup ADC_Exported_Functions_Group1 Initialization and de-initialization functions 
 *  @brief    Initialization and Configuration functions 
 *
@verbatim    
 ===============================================================================
              ##### Initialization and de-initialization functions #####
 ===============================================================================
    [..]  This section provides functions allowing to:
      (+) Initialize and configure the ADC. 
      (+) De-initialize the ADC. 
         
@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the ADCx peripheral according to the specified parameters 
  *         in the ADC_InitStruct and initializes the ADC MSP.
  *           
  * @note   This function is used to configure the global features of the ADC ( 
  *         ClockPrescaler, Resolution, Data Alignment and number of conversion), however,
  *         the rest of the configuration parameters are specific to the regular
  *         channels group (scan mode activation, continuous mode activation,
  *         External trigger source and edge, DMA continuous request after the  
  *         last transfer and End of conversion selection).
  *             
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_ADC_Init</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>tmp_hal_status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check ADC handle */</comment>
  <if_stmt><if>if<condition>(<expr><name>hadc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_CLOCKPRESCALER</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockPrescaler</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_RESOLUTION</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Resolution</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ScanConvMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ContinuousConvMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_EXT_TRIG</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ExternalTrigConv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_DATA_ALIGN</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataAlign</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_REGULAR_LENGTH</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NbrOfConversion</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DMAContinuousRequests</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_EOCSelection</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>EOCSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DiscontinuousConvMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ExternalTrigConv</name></name> <operator>!=</operator> <name>ADC_SOFTWARE_START</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_EXT_TRIG_EDGE</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ExternalTrigConvEdge</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_ADC_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_ADC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/* Init the ADC Callback settings */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>ConvCpltCallback</name></name>              <operator>=</operator> <name>HAL_ADC_ConvCpltCallback</name></expr>;</expr_stmt>                 <comment type="block">/* Legacy weak callback */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>ConvHalfCpltCallback</name></name>          <operator>=</operator> <name>HAL_ADC_ConvHalfCpltCallback</name></expr>;</expr_stmt>             <comment type="block">/* Legacy weak callback */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>LevelOutOfWindowCallback</name></name>      <operator>=</operator> <name>HAL_ADC_LevelOutOfWindowCallback</name></expr>;</expr_stmt>         <comment type="block">/* Legacy weak callback */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCallback</name></name>                 <operator>=</operator> <name>HAL_ADC_ErrorCallback</name></expr>;</expr_stmt>                    <comment type="block">/* Legacy weak callback */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>InjectedConvCpltCallback</name></name>      <operator>=</operator> <name>HAL_ADCEx_InjectedConvCpltCallback</name></expr>;</expr_stmt>       <comment type="block">/* Legacy weak callback */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hadc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_ADC_MspInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MspInit  */</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>hadc</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name>HAL_ADC_MspInit</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_ADC_REGISTER_CALLBACKS */</comment>

    <comment type="block">/* Initialize ADC error code */</comment>
    <expr_stmt><expr><call><name>ADC_CLEAR_ERRORCODE</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Configuration of ADC parameters if previous preliminary actions are      */</comment> 
  <comment type="block">/* correctly completed.                                                     */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_ERROR_INTERNAL</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set ADC state */</comment>
    <expr_stmt><expr><call><name>ADC_STATE_CLR_SET</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>,
                      <argument><expr><name>HAL_ADC_STATE_REG_BUSY</name> <operator>|</operator> <name>HAL_ADC_STATE_INJ_BUSY</name></expr></argument>,
                      <argument><expr><name>HAL_ADC_STATE_BUSY_INTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Set ADC parameters */</comment>
    <expr_stmt><expr><call><name>ADC_Init</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Set ADC error code to none */</comment>
    <expr_stmt><expr><call><name>ADC_CLEAR_ERRORCODE</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Set the ADC state */</comment>
    <expr_stmt><expr><call><name>ADC_STATE_CLR_SET</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>,
                      <argument><expr><name>HAL_ADC_STATE_BUSY_INTERNAL</name></expr></argument>,
                      <argument><expr><name>HAL_ADC_STATE_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>tmp_hal_status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>tmp_hal_status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values. 
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_ADC_DeInit</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>tmp_hal_status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check ADC handle */</comment>
  <if_stmt><if>if<condition>(<expr><name>hadc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Set ADC state */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_BUSY_INTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Stop potential conversion on going, on regular and injected groups */</comment>
  <comment type="block">/* Disable ADC peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_ADC_DISABLE</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Configuration of ADC parameters if previous preliminary actions are      */</comment> 
  <comment type="block">/* correctly completed.                                                     */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>ADC_CR2_ADON</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_ADC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>hadc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_ADC_MspDeInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MspDeInit  */</comment>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* DeInit the low level hardware: RCC clock, NVIC */</comment>
  <expr_stmt><expr><call><name><name>hadc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* DeInit the low level hardware: RCC clock, NVIC */</comment>
  <expr_stmt><expr><call><name>HAL_ADC_MspDeInit</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_ADC_REGISTER_CALLBACKS */</comment>
    
    <comment type="block">/* Set ADC error code to none */</comment>
    <expr_stmt><expr><call><name>ADC_CLEAR_ERRORCODE</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Set ADC state */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_ADC_STATE_RESET</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>tmp_hal_status</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_ADC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User ADC Callback
  *         To be used instead of the weak predefined callback
  * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
  *                the configuration information for the specified ADC.
  * @param  CallbackID ID of the callback to be registered
  *         This parameter can be one of the following values:
  *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
  *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer callback ID
  *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
  *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
  *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complete callback ID
  *          @arg @ref HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID        ADC group injected context queue overflow callback ID
  *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
  *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_ADC_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name> <modifier>*</modifier></type><name>hadc</name></decl></parameter>, <parameter><decl><type><name>HAL_ADC_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>, <parameter><decl><type><name>pADC_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_ADC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name> <operator>&amp;</operator> <name>HAL_ADC_STATE_READY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0UL</literal></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_ADC_CONVERSION_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>ConvCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_ADC_CONVERSION_HALF_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>ConvHalfCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>LevelOutOfWindowCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_ADC_ERROR_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>InjectedConvCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_ADC_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_ADC_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_ADC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>HAL_ADC_STATE_RESET</name> <operator>==</operator> <name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_ADC_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_ADC_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_ADC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_ADC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister a ADC Callback
  *         ADC callback is redirected to the weak predefined callback
  * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
  *                the configuration information for the specified ADC.
  * @param  CallbackID ID of the callback to be unregistered
  *         This parameter can be one of the following values:
  *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
  *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer callback ID
  *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
  *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
  *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complete callback ID
  *          @arg @ref HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID        ADC group injected context queue overflow callback ID
  *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
  *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_ADC_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name> <modifier>*</modifier></type><name>hadc</name></decl></parameter>, <parameter><decl><type><name>HAL_ADC_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name> <operator>&amp;</operator> <name>HAL_ADC_STATE_READY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0UL</literal></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_ADC_CONVERSION_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>ConvCpltCallback</name></name> <operator>=</operator> <name>HAL_ADC_ConvCpltCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_ADC_CONVERSION_HALF_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>ConvHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_ADC_ConvHalfCpltCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>LevelOutOfWindowCallback</name></name> <operator>=</operator> <name>HAL_ADC_LevelOutOfWindowCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_ADC_ERROR_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>HAL_ADC_ErrorCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>InjectedConvCpltCallback</name></name> <operator>=</operator> <name>HAL_ADCEx_InjectedConvCpltCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_ADC_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_ADC_MspInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MspInit              */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_ADC_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_ADC_MspDeInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MspDeInit            */</comment>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_ADC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>HAL_ADC_STATE_RESET</name> <operator>==</operator> <name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_ADC_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_ADC_MspInit</name></expr>;</expr_stmt>                   <comment type="block">/* Legacy weak MspInit              */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_ADC_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_ADC_MspDeInit</name></expr>;</expr_stmt>               <comment type="block">/* Legacy weak MspDeInit            */</comment>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_ADC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_ADC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_ADC_REGISTER_CALLBACKS */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the ADC MSP.
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_ADC_MspInit</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitializes the ADC MSP.
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_ADC_MspDeInit</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspDeInit could be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup ADC_Exported_Functions_Group2 IO operation functions
 *  @brief    IO operation functions 
 *
@verbatim   
 ===============================================================================
             ##### IO operation functions #####
 ===============================================================================  
    [..]  This section provides functions allowing to:
      (+) Start conversion of regular channel.
      (+) Stop conversion of regular channel.
      (+) Start conversion of regular channel and enable interrupt.
      (+) Stop conversion of regular channel and disable interrupt.
      (+) Start conversion of regular channel and enable DMA transfer.
      (+) Stop conversion of regular channel and disable DMA transfer.
      (+) Handle ADC interrupt request. 
               
@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Enables ADC and starts conversion of the regular channels.
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_ADC_Start</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>counter</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ADC_Common_TypeDef</name> <modifier>*</modifier></type><name>tmpADC_Common</name></decl>;</decl_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ContinuousConvMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_EXT_TRIG_EDGE</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ExternalTrigConvEdge</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Enable the ADC peripheral */</comment>
  <comment type="block">/* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;</operator> <name>ADC_CR2_ADON</name><operator>)</operator> <operator>!=</operator> <name>ADC_CR2_ADON</name></expr>)</condition>
  <block>{<block_content>  
    <comment type="block">/* Enable the Peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_ADC_ENABLE</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Delay for ADC stabilization time */</comment>
    <comment type="block">/* Compute number of CPU cycles to wait for */</comment>
    <expr_stmt><expr><name>counter</name> <operator>=</operator> <operator>(</operator><name>ADC_STAB_DELAY_US</name> <operator>*</operator> <operator>(</operator><name>SystemCoreClock</name> <operator>/</operator> <literal type="number">1000000U</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>counter</name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>counter</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Start conversion if ADC is effectively enabled */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>ADC_CR2_ADON</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set ADC state                                                          */</comment>
    <comment type="block">/* - Clear state bitfield related to regular group conversion results     */</comment>
    <comment type="block">/* - Set state bitfield related to regular group operation                */</comment>
    <expr_stmt><expr><call><name>ADC_STATE_CLR_SET</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>,
                      <argument><expr><name>HAL_ADC_STATE_READY</name> <operator>|</operator> <name>HAL_ADC_STATE_REG_EOC</name> <operator>|</operator> <name>HAL_ADC_STATE_REG_OVR</name></expr></argument>,
                      <argument><expr><name>HAL_ADC_STATE_REG_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* If conversions on group regular are also triggering group injected,    */</comment>
    <comment type="block">/* update ADC state.                                                      */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>ADC_CR1_JAUTO</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>ADC_STATE_CLR_SET</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_INJ_EOC</name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_INJ_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* State machine update: Check if an injected conversion is ongoing */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_INJ_BUSY</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Reset ADC error code fields related to conversions on group regular */</comment>
      <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><operator>(</operator><name>HAL_ADC_ERROR_OVR</name> <operator>|</operator> <name>HAL_ADC_ERROR_DMA</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>         
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Reset ADC all error code fields */</comment>
      <expr_stmt><expr><call><name>ADC_CLEAR_ERRORCODE</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt> 

    <comment type="block">/* Process unlocked */</comment>
    <comment type="block">/* Unlock before starting ADC conversions: in case of potential           */</comment>
    <comment type="block">/* interruption, to let the process to ADC IRQ Handler.                   */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Pointer to the common control register to which is belonging hadc    */</comment>
    <comment type="block">/* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */</comment>
    <comment type="block">/* control register)                                                    */</comment>
    <expr_stmt><expr><name>tmpADC_Common</name> <operator>=</operator> <call><name>ADC_COMMON_REGISTER</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear regular group conversion flag and overrun flag */</comment>
    <comment type="block">/* (To ensure of no unknown state from potential previous ADC operations) */</comment>
    <expr_stmt><expr><call><name>__HAL_ADC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_FLAG_EOC</name> <operator>|</operator> <name>ADC_FLAG_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Check if Multimode enabled */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>tmpADC_Common</name><operator>-&gt;</operator><name>CCR</name></name></expr></argument>, <argument><expr><name>ADC_CCR_MULTI</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ADC2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ADC3</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>ADC1</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>ADC2</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>ADC</name><operator>-&gt;</operator><name>CCR</name></name> <operator>&amp;</operator> <name>ADC_CCR_MULTI_Msk</name><operator>)</operator> <operator>&lt;</operator> <name>ADC_CCR_MULTI_0</name><operator>)</operator><operator>)</operator> \
                                  <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>ADC3</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>ADC</name><operator>-&gt;</operator><name>CCR</name></name> <operator>&amp;</operator> <name>ADC_CCR_MULTI_Msk</name><operator>)</operator> <operator>&lt;</operator> <name>ADC_CCR_MULTI_4</name><operator>)</operator><operator>)</operator></expr>)</condition>
      <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ADC2 || ADC3 */</comment>
        <comment type="block">/* if no external trigger present enable software conversion of regular channels */</comment>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;</operator> <name>ADC_CR2_EXTEN</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition> 
        <block>{<block_content>
          <comment type="block">/* Enable the selected ADC software conversion for regular group */</comment>
          <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ADC_CR2_SWSTART</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ADC2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ADC3</name></expr></argument>)</argument_list></call></expr></cpp:if>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ADC2 || ADC3 */</comment>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */</comment>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>ADC1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;</operator> <name>ADC_CR2_EXTEN</name><operator>)</operator> <operator>==</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the selected ADC software conversion for regular group */</comment>
          <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ADC_CR2_SWSTART</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disables ADC and stop conversion of regular channels.
  * 
  * @note   Caution: This function will stop also injected channels.  
  *
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_ADC_Stop</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Stop potential conversion on going, on regular and injected groups */</comment>
  <comment type="block">/* Disable ADC peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_ADC_DISABLE</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check if ADC is effectively disabled */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>ADC_CR2_ADON</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set ADC state */</comment>
    <expr_stmt><expr><call><name>ADC_STATE_CLR_SET</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>,
                      <argument><expr><name>HAL_ADC_STATE_REG_BUSY</name> <operator>|</operator> <name>HAL_ADC_STATE_INJ_BUSY</name></expr></argument>,
                      <argument><expr><name>HAL_ADC_STATE_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Poll for regular conversion complete
  * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
  *         conversion) are cleared by this function.
  * @note   This function cannot be used in a particular setup: ADC configured 
  *         in DMA mode and polling for end of each conversion (ADC init
  *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
  *         In this case, DMA resets the flag EOC and polling cannot be
  *         performed on each conversion. Nevertheless, polling can still 
  *         be performed on the complete sequence.
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_ADC_PollForConversion</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
 
  <comment type="block">/* Verification that ADC configuration is compliant with polling for      */</comment>
  <comment type="block">/* each conversion:                                                       */</comment>
  <comment type="block">/* Particular case is ADC configured in DMA mode and ADC sequencer with   */</comment>
  <comment type="block">/* several ranks and polling for end of each conversion.                  */</comment>
  <comment type="block">/* For code simplicity sake, this particular case is generalized to       */</comment>
  <comment type="block">/* ADC configured in DMA mode and polling for end of each conversion.     */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>ADC_CR2_EOCS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>ADC_CR2_DMA</name></expr></argument>)</argument_list></call></expr>    )</condition>
  <block>{<block_content>
    <comment type="block">/* Update ADC state machine to error */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_ERROR_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Get tick */</comment> 
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check End of conversion flag */</comment>
  <while>while<condition>(<expr><operator>!</operator><operator>(</operator><call><name>__HAL_ADC_GET_FLAG</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_FLAG_EOC</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check if timeout is disabled (set to infinite wait) */</comment>
    <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Update ADC state machine to timeout */</comment>
        <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Process unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  
  <comment type="block">/* Clear regular group conversion flag */</comment>
  <expr_stmt><expr><call><name>__HAL_ADC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_FLAG_STRT</name> <operator>|</operator> <name>ADC_FLAG_EOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Update ADC state machine */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_REG_EOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Determine whether any further conversion upcoming on group regular       */</comment>
  <comment type="block">/* by external trigger, continuous mode or scan sequence on going.          */</comment>
  <comment type="block">/* Note: On STM32F4, there is no independent flag of end of sequence.       */</comment>
  <comment type="block">/*       The test of scan sequence on going is done either with scan        */</comment>
  <comment type="block">/*       sequence disabled or with end of conversion flag set to            */</comment>
  <comment type="block">/*       of end of sequence.                                                */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>ADC_IS_SOFTWARE_START_REGULAR</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call>                   <operator>&amp;&amp;</operator>
     <operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ContinuousConvMode</name></name> <operator>==</operator> <name>DISABLE</name><operator>)</operator>            <operator>&amp;&amp;</operator>
     <operator>(</operator><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SQR1</name></name></expr></argument>, <argument><expr><name>ADC_SQR1_L</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>ADC_CR2_EOCS</name></expr></argument>)</argument_list></call>  <operator>)</operator></expr>   )</condition>
  <block>{<block_content>
    <comment type="block">/* Set ADC state */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_REG_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    
    <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_INJ_BUSY</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Return ADC state */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Poll for conversion event
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @param  EventType the ADC event type.
  *          This parameter can be one of the following values:
  *            @arg ADC_AWD_EVENT: ADC Analog watch Dog event.
  *            @arg ADC_OVR_EVENT: ADC Overrun event.
  * @param  Timeout Timeout value in millisecond.   
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_ADC_PollForEvent</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>EventType</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_EVENT_TYPE</name><argument_list>(<argument><expr><name>EventType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check selected event flag */</comment>
  <while>while<condition>(<expr><operator>!</operator><operator>(</operator><call><name>__HAL_ADC_GET_FLAG</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>,<argument><expr><name>EventType</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Update ADC state machine to timeout */</comment>
        <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Process unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  
  <comment type="block">/* Analog watchdog (level out of window) event */</comment>
  <if_stmt><if>if<condition>(<expr><name>EventType</name> <operator>==</operator> <name>ADC_AWD_EVENT</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set ADC state */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_AWD1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
    <comment type="block">/* Clear ADC analog watchdog flag */</comment>
    <expr_stmt><expr><call><name>__HAL_ADC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_FLAG_AWD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Overrun event */</comment>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Set ADC state */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_REG_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Set ADC error code to overrun */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_ADC_ERROR_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Clear ADC overrun flag */</comment>
    <expr_stmt><expr><call><name>__HAL_ADC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_FLAG_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Return ADC state */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  Enables the interrupt and starts ADC conversion of regular channels.
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_ADC_Start_IT</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>counter</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ADC_Common_TypeDef</name> <modifier>*</modifier></type><name>tmpADC_Common</name></decl>;</decl_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ContinuousConvMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_EXT_TRIG_EDGE</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ExternalTrigConvEdge</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Enable the ADC peripheral */</comment>
  <comment type="block">/* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;</operator> <name>ADC_CR2_ADON</name><operator>)</operator> <operator>!=</operator> <name>ADC_CR2_ADON</name></expr>)</condition>
  <block>{<block_content>  
    <comment type="block">/* Enable the Peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_ADC_ENABLE</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Delay for ADC stabilization time */</comment>
    <comment type="block">/* Compute number of CPU cycles to wait for */</comment>
    <expr_stmt><expr><name>counter</name> <operator>=</operator> <operator>(</operator><name>ADC_STAB_DELAY_US</name> <operator>*</operator> <operator>(</operator><name>SystemCoreClock</name> <operator>/</operator> <literal type="number">1000000U</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>counter</name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>counter</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Start conversion if ADC is effectively enabled */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>ADC_CR2_ADON</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set ADC state                                                          */</comment>
    <comment type="block">/* - Clear state bitfield related to regular group conversion results     */</comment>
    <comment type="block">/* - Set state bitfield related to regular group operation                */</comment>
    <expr_stmt><expr><call><name>ADC_STATE_CLR_SET</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>,
                      <argument><expr><name>HAL_ADC_STATE_READY</name> <operator>|</operator> <name>HAL_ADC_STATE_REG_EOC</name> <operator>|</operator> <name>HAL_ADC_STATE_REG_OVR</name></expr></argument>,
                      <argument><expr><name>HAL_ADC_STATE_REG_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* If conversions on group regular are also triggering group injected,    */</comment>
    <comment type="block">/* update ADC state.                                                      */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>ADC_CR1_JAUTO</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>ADC_STATE_CLR_SET</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_INJ_EOC</name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_INJ_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* State machine update: Check if an injected conversion is ongoing */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_INJ_BUSY</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Reset ADC error code fields related to conversions on group regular */</comment>
      <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><operator>(</operator><name>HAL_ADC_ERROR_OVR</name> <operator>|</operator> <name>HAL_ADC_ERROR_DMA</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>         
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Reset ADC all error code fields */</comment>
      <expr_stmt><expr><call><name>ADC_CLEAR_ERRORCODE</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <comment type="block">/* Unlock before starting ADC conversions: in case of potential           */</comment>
    <comment type="block">/* interruption, to let the process to ADC IRQ Handler.                   */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Pointer to the common control register to which is belonging hadc    */</comment>
    <comment type="block">/* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */</comment>
    <comment type="block">/* control register)                                                    */</comment>
    <expr_stmt><expr><name>tmpADC_Common</name> <operator>=</operator> <call><name>ADC_COMMON_REGISTER</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear regular group conversion flag and overrun flag */</comment>
    <comment type="block">/* (To ensure of no unknown state from potential previous ADC operations) */</comment>
    <expr_stmt><expr><call><name>__HAL_ADC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_FLAG_EOC</name> <operator>|</operator> <name>ADC_FLAG_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Enable end of conversion interrupt for regular group */</comment>
    <expr_stmt><expr><call><name>__HAL_ADC_ENABLE_IT</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><operator>(</operator><name>ADC_IT_EOC</name> <operator>|</operator> <name>ADC_IT_OVR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Check if Multimode enabled */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>tmpADC_Common</name><operator>-&gt;</operator><name>CCR</name></name></expr></argument>, <argument><expr><name>ADC_CCR_MULTI</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ADC2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ADC3</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>ADC1</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>ADC2</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>ADC</name><operator>-&gt;</operator><name>CCR</name></name> <operator>&amp;</operator> <name>ADC_CCR_MULTI_Msk</name><operator>)</operator> <operator>&lt;</operator> <name>ADC_CCR_MULTI_0</name><operator>)</operator><operator>)</operator> \
                                  <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>ADC3</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>ADC</name><operator>-&gt;</operator><name>CCR</name></name> <operator>&amp;</operator> <name>ADC_CCR_MULTI_Msk</name><operator>)</operator> <operator>&lt;</operator> <name>ADC_CCR_MULTI_4</name><operator>)</operator><operator>)</operator></expr>)</condition>
      <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ADC2 || ADC3 */</comment>
        <comment type="block">/* if no external trigger present enable software conversion of regular channels */</comment>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;</operator> <name>ADC_CR2_EXTEN</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition> 
        <block>{<block_content>
          <comment type="block">/* Enable the selected ADC software conversion for regular group */</comment>
          <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ADC_CR2_SWSTART</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ADC2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ADC3</name></expr></argument>)</argument_list></call></expr></cpp:if>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ADC2 || ADC3 */</comment>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */</comment>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>ADC1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;</operator> <name>ADC_CR2_EXTEN</name><operator>)</operator> <operator>==</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the selected ADC software conversion for regular group */</comment>
          <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ADC_CR2_SWSTART</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disables the interrupt and stop ADC conversion of regular channels.
  * 
  * @note   Caution: This function will stop also injected channels.  
  *
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_ADC_Stop_IT</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Stop potential conversion on going, on regular and injected groups */</comment>
  <comment type="block">/* Disable ADC peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_ADC_DISABLE</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check if ADC is effectively disabled */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>ADC_CR2_ADON</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
  	<comment type="block">/* Disable ADC end of conversion interrupt for regular group */</comment>
    <expr_stmt><expr><call><name>__HAL_ADC_DISABLE_IT</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><operator>(</operator><name>ADC_IT_EOC</name> <operator>|</operator> <name>ADC_IT_OVR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set ADC state */</comment>
    <expr_stmt><expr><call><name>ADC_STATE_CLR_SET</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>,
                      <argument><expr><name>HAL_ADC_STATE_REG_BUSY</name> <operator>|</operator> <name>HAL_ADC_STATE_INJ_BUSY</name></expr></argument>,
                      <argument><expr><name>HAL_ADC_STATE_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Handles ADC interrupt request  
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_ADC_IRQHandler</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp1</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>tmp2</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ContinuousConvMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_REGULAR_LENGTH</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NbrOfConversion</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_EOCSelection</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>EOCSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__HAL_ADC_GET_FLAG</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_FLAG_EOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__HAL_ADC_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_IT_EOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Check End of conversion flag for regular channels */</comment>
  <if_stmt><if>if<condition>(<expr><name>tmp1</name> <operator>&amp;&amp;</operator> <name>tmp2</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update state machine on conversion status if not in error state */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_ERROR_INTERNAL</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set ADC state */</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_REG_EOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Determine whether any further conversion upcoming on group regular   */</comment>
    <comment type="block">/* by external trigger, continuous mode or scan sequence on going.      */</comment>
    <comment type="block">/* Note: On STM32F4, there is no independent flag of end of sequence.   */</comment>
    <comment type="block">/*       The test of scan sequence on going is done either with scan    */</comment>
    <comment type="block">/*       sequence disabled or with end of conversion flag set to        */</comment>
    <comment type="block">/*       of end of sequence.                                            */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>ADC_IS_SOFTWARE_START_REGULAR</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call>                   <operator>&amp;&amp;</operator>
       <operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ContinuousConvMode</name></name> <operator>==</operator> <name>DISABLE</name><operator>)</operator>            <operator>&amp;&amp;</operator>
       <operator>(</operator><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SQR1</name></name></expr></argument>, <argument><expr><name>ADC_SQR1_L</name></expr></argument>)</argument_list></call> <operator>||</operator> 
        <call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>ADC_CR2_EOCS</name></expr></argument>)</argument_list></call>  <operator>)</operator></expr>   )</condition>
    <block>{<block_content>
      <comment type="block">/* Disable ADC end of single conversion interrupt on group regular */</comment>
      <comment type="block">/* Note: Overrun interrupt was enabled with EOC interrupt in          */</comment>
      <comment type="block">/* HAL_ADC_Start_IT(), but is not disabled here because can be used   */</comment>
      <comment type="block">/* by overrun IRQ process below.                                      */</comment>
      <expr_stmt><expr><call><name>__HAL_ADC_DISABLE_IT</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_IT_EOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Set ADC state */</comment>
      <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_REG_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_INJ_BUSY</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Conversion complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_ADC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hadc</name><operator>-&gt;</operator><name>ConvCpltCallback</name></name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_ADC_ConvCpltCallback</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_ADC_REGISTER_CALLBACKS */</comment>
    
    <comment type="block">/* Clear regular group conversion flag */</comment>
    <expr_stmt><expr><call><name>__HAL_ADC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_FLAG_STRT</name> <operator>|</operator> <name>ADC_FLAG_EOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__HAL_ADC_GET_FLAG</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_FLAG_JEOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__HAL_ADC_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_IT_JEOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                               
  <comment type="block">/* Check End of conversion flag for injected channels */</comment>
  <if_stmt><if>if<condition>(<expr><name>tmp1</name> <operator>&amp;&amp;</operator> <name>tmp2</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update state machine on conversion status if not in error state */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_ERROR_INTERNAL</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set ADC state */</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_INJ_EOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Determine whether any further conversion upcoming on group injected  */</comment>
    <comment type="block">/* by external trigger, scan sequence on going or by automatic injected */</comment>
    <comment type="block">/* conversion from group regular (same conditions as group regular      */</comment>
    <comment type="block">/* interruption disabling above).                                       */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>ADC_IS_SOFTWARE_START_INJECTED</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call>                    <operator>&amp;&amp;</operator>
       <operator>(</operator><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>JSQR</name></name></expr></argument>, <argument><expr><name>ADC_JSQR_JL</name></expr></argument>)</argument_list></call>  <operator>||</operator>
        <call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>ADC_CR2_EOCS</name></expr></argument>)</argument_list></call>    <operator>)</operator> <operator>&amp;&amp;</operator>
       <operator>(</operator><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>ADC_CR1_JAUTO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>(</operator><call><name>ADC_IS_SOFTWARE_START_REGULAR</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call>       <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ContinuousConvMode</name></name> <operator>==</operator> <name>DISABLE</name><operator>)</operator>   <operator>)</operator>       <operator>)</operator></expr>   )</condition>
    <block>{<block_content>
      <comment type="block">/* Disable ADC end of single conversion interrupt on group injected */</comment>
      <expr_stmt><expr><call><name>__HAL_ADC_DISABLE_IT</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_IT_JEOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Set ADC state */</comment>
      <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_INJ_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   

      <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_REG_BUSY</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content> 
        <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Conversion complete callback */</comment> 
    <comment type="block">/* Conversion complete callback */</comment> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_ADC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hadc</name><operator>-&gt;</operator><name>InjectedConvCpltCallback</name></name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_ADCEx_InjectedConvCpltCallback</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_ADC_REGISTER_CALLBACKS */</comment>
    
    <comment type="block">/* Clear injected group conversion flag */</comment>
    <expr_stmt><expr><call><name>__HAL_ADC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><operator>(</operator><name>ADC_FLAG_JSTRT</name> <operator>|</operator> <name>ADC_FLAG_JEOC</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__HAL_ADC_GET_FLAG</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_FLAG_AWD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__HAL_ADC_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_IT_AWD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                          
  <comment type="block">/* Check Analog watchdog flag */</comment>
  <if_stmt><if>if<condition>(<expr><name>tmp1</name> <operator>&amp;&amp;</operator> <name>tmp2</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name>__HAL_ADC_GET_FLAG</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_FLAG_AWD</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set ADC state */</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_AWD1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Level out of window callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_ADC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hadc</name><operator>-&gt;</operator><name>LevelOutOfWindowCallback</name></name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_ADC_LevelOutOfWindowCallback</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_ADC_REGISTER_CALLBACKS */</comment>
      
      <comment type="block">/* Clear the ADC analog watchdog flag */</comment>
      <expr_stmt><expr><call><name>__HAL_ADC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_FLAG_AWD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__HAL_ADC_GET_FLAG</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_FLAG_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__HAL_ADC_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_IT_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Check Overrun flag */</comment>
  <if_stmt><if>if<condition>(<expr><name>tmp1</name> <operator>&amp;&amp;</operator> <name>tmp2</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Note: On STM32F4, ADC overrun can be set through other parameters    */</comment>
    <comment type="block">/*       refer to description of parameter "EOCSelection" for more      */</comment>
    <comment type="block">/*       details.                                                       */</comment>
    
    <comment type="block">/* Set ADC error code to overrun */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_ADC_ERROR_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Clear ADC overrun flag */</comment>
    <expr_stmt><expr><call><name>__HAL_ADC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_FLAG_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Error callback */</comment> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_ADC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_ADC_ErrorCallback</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_ADC_REGISTER_CALLBACKS */</comment>
    
    <comment type="block">/* Clear the Overrun flag */</comment>
    <expr_stmt><expr><call><name>__HAL_ADC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_FLAG_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enables ADC DMA request after last transfer (Single-ADC mode) and enables ADC peripheral  
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_ADC_Start_DMA</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>counter</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ADC_Common_TypeDef</name> <modifier>*</modifier></type><name>tmpADC_Common</name></decl>;</decl_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ContinuousConvMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_EXT_TRIG_EDGE</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ExternalTrigConvEdge</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Enable the ADC peripheral */</comment>
  <comment type="block">/* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;</operator> <name>ADC_CR2_ADON</name><operator>)</operator> <operator>!=</operator> <name>ADC_CR2_ADON</name></expr>)</condition>
  <block>{<block_content>  
    <comment type="block">/* Enable the Peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_ADC_ENABLE</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Delay for ADC stabilization time */</comment>
    <comment type="block">/* Compute number of CPU cycles to wait for */</comment>
    <expr_stmt><expr><name>counter</name> <operator>=</operator> <operator>(</operator><name>ADC_STAB_DELAY_US</name> <operator>*</operator> <operator>(</operator><name>SystemCoreClock</name> <operator>/</operator> <literal type="number">1000000U</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>counter</name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>counter</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Start conversion if ADC is effectively enabled */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>ADC_CR2_ADON</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set ADC state                                                          */</comment>
    <comment type="block">/* - Clear state bitfield related to regular group conversion results     */</comment>
    <comment type="block">/* - Set state bitfield related to regular group operation                */</comment>
    <expr_stmt><expr><call><name>ADC_STATE_CLR_SET</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>,
                      <argument><expr><name>HAL_ADC_STATE_READY</name> <operator>|</operator> <name>HAL_ADC_STATE_REG_EOC</name> <operator>|</operator> <name>HAL_ADC_STATE_REG_OVR</name></expr></argument>,
                      <argument><expr><name>HAL_ADC_STATE_REG_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* If conversions on group regular are also triggering group injected,    */</comment>
    <comment type="block">/* update ADC state.                                                      */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>ADC_CR1_JAUTO</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>ADC_STATE_CLR_SET</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_INJ_EOC</name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_INJ_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* State machine update: Check if an injected conversion is ongoing */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_INJ_BUSY</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Reset ADC error code fields related to conversions on group regular */</comment>
      <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><operator>(</operator><name>HAL_ADC_ERROR_OVR</name> <operator>|</operator> <name>HAL_ADC_ERROR_DMA</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>         
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Reset ADC all error code fields */</comment>
      <expr_stmt><expr><call><name>ADC_CLEAR_ERRORCODE</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <comment type="block">/* Unlock before starting ADC conversions: in case of potential           */</comment>
    <comment type="block">/* interruption, to let the process to ADC IRQ Handler.                   */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   

    <comment type="block">/* Pointer to the common control register to which is belonging hadc    */</comment>
    <comment type="block">/* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */</comment>
    <comment type="block">/* control register)                                                    */</comment>
    <expr_stmt><expr><name>tmpADC_Common</name> <operator>=</operator> <call><name>ADC_COMMON_REGISTER</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set the DMA transfer complete callback */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>DMA_Handle</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>ADC_DMAConvCplt</name></expr>;</expr_stmt>

    <comment type="block">/* Set the DMA half transfer complete callback */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>DMA_Handle</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>ADC_DMAHalfConvCplt</name></expr>;</expr_stmt>
    
    <comment type="block">/* Set the DMA error callback */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>DMA_Handle</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>ADC_DMAError</name></expr>;</expr_stmt>

    
    <comment type="block">/* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */</comment>
    <comment type="block">/* start (in case of SW start):                                           */</comment>
    
    <comment type="block">/* Clear regular group conversion flag and overrun flag */</comment>
    <comment type="block">/* (To ensure of no unknown state from potential previous ADC operations) */</comment>
    <expr_stmt><expr><call><name>__HAL_ADC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_FLAG_EOC</name> <operator>|</operator> <name>ADC_FLAG_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable ADC overrun interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_ADC_ENABLE_IT</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_IT_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Enable ADC DMA mode */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>ADC_CR2_DMA</name></expr>;</expr_stmt>
    
    <comment type="block">/* Start the DMA channel */</comment>
    <expr_stmt><expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>DMA_Handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><name>Length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Check if Multimode enabled */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>tmpADC_Common</name><operator>-&gt;</operator><name>CCR</name></name></expr></argument>, <argument><expr><name>ADC_CCR_MULTI</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ADC2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ADC3</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>ADC1</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>ADC2</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>ADC</name><operator>-&gt;</operator><name>CCR</name></name> <operator>&amp;</operator> <name>ADC_CCR_MULTI_Msk</name><operator>)</operator> <operator>&lt;</operator> <name>ADC_CCR_MULTI_0</name><operator>)</operator><operator>)</operator> \
                                  <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>ADC3</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>ADC</name><operator>-&gt;</operator><name>CCR</name></name> <operator>&amp;</operator> <name>ADC_CCR_MULTI_Msk</name><operator>)</operator> <operator>&lt;</operator> <name>ADC_CCR_MULTI_4</name><operator>)</operator><operator>)</operator></expr>)</condition>
      <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ADC2 || ADC3 */</comment>
        <comment type="block">/* if no external trigger present enable software conversion of regular channels */</comment>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;</operator> <name>ADC_CR2_EXTEN</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition> 
        <block>{<block_content>
          <comment type="block">/* Enable the selected ADC software conversion for regular group */</comment>
          <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ADC_CR2_SWSTART</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ADC2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ADC3</name></expr></argument>)</argument_list></call></expr></cpp:if>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ADC2 || ADC3 */</comment>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */</comment>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>ADC1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;</operator> <name>ADC_CR2_EXTEN</name><operator>)</operator> <operator>==</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the selected ADC software conversion for regular group */</comment>
          <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ADC_CR2_SWSTART</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disables ADC DMA (Single-ADC mode) and disables ADC peripheral    
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_ADC_Stop_DMA</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>tmp_hal_status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Stop potential conversion on going, on regular and injected groups */</comment>
  <comment type="block">/* Disable ADC peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_ADC_DISABLE</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check if ADC is effectively disabled */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>ADC_CR2_ADON</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the selected ADC DMA mode */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ADC_CR2_DMA</name></expr>;</expr_stmt>
    
    <comment type="block">/* Disable the DMA channel (in case of DMA in circular mode or stop while */</comment>
    <comment type="block">/* DMA transfer is on going)                                              */</comment>
    <expr_stmt><expr><name>tmp_hal_status</name> <operator>=</operator> <call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>DMA_Handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Disable ADC overrun interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_ADC_DISABLE_IT</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_IT_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Set ADC state */</comment>
    <expr_stmt><expr><call><name>ADC_STATE_CLR_SET</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>,
                      <argument><expr><name>HAL_ADC_STATE_REG_BUSY</name> <operator>|</operator> <name>HAL_ADC_STATE_INJ_BUSY</name></expr></argument>,
                      <argument><expr><name>HAL_ADC_STATE_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>tmp_hal_status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Gets the converted value from data register of regular channel.
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_ADC_GetValue</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>)</parameter_list>
<block>{<block_content>       
  <comment type="block">/* Return the selected ADC converted value */</comment> 
  <return>return <expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Regular conversion complete callback in non blocking mode 
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_ADC_ConvCpltCallback</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Regular conversion half DMA transfer callback in non blocking mode 
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_ADC_ConvHalfCpltCallback</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Analog watchdog callback in non blocking mode 
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_ADC_LevelOutOfWindowCallback</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Error ADC callback.
  * @note   In case of error due to overrun when using ADC with DMA transfer 
  *         (HAL ADC handle paramater "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
  *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
  *         - If needed, restart a new ADC conversion using function
  *           "HAL_ADC_Start_DMA()"
  *           (this function is also clearing overrun flag)
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_ADC_ErrorCallback</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name> <modifier>*</modifier></type><name>hadc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
  
<comment type="block" format="doxygen">/** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
 *  @brief   	Peripheral Control functions 
 *
@verbatim   
 ===============================================================================
             ##### Peripheral Control functions #####
 ===============================================================================  
    [..]  This section provides functions allowing to:
      (+) Configure regular channels. 
      (+) Configure injected channels.
      (+) Configure multimode.
      (+) Configure the analog watch dog.
      
@endverbatim
  * @{
  */</comment>

  <comment type="block" format="doxygen">/**
  * @brief  Configures for the selected ADC regular channel its corresponding
  *         rank in the sequencer and its sample time.
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_ADC_ConfigChannel</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>, <parameter><decl><type><name>ADC_ChannelConfTypeDef</name><modifier>*</modifier></type> <name>sConfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>counter</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ADC_Common_TypeDef</name> <modifier>*</modifier></type><name>tmpADC_Common</name></decl>;</decl_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_CHANNEL</name><argument_list>(<argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>Channel</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_REGULAR_RANK</name><argument_list>(<argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>Rank</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_SAMPLE_TIME</name><argument_list>(<argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>SamplingTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
  <comment type="block">/* if ADC_Channel_10 ... ADC_Channel_18 is selected */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>sConfig</name><operator>-&gt;</operator><name>Channel</name></name> <operator>&gt;</operator> <name>ADC_CHANNEL_9</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear the old sample time */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMPR1</name></name> <operator>&amp;=</operator> <operator>~</operator><call><name>ADC_SMPR1</name><argument_list>(<argument><expr><name>ADC_SMPR1_SMP10</name></expr></argument>, <argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>Channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Set the new sample time */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMPR1</name></name> <operator>|=</operator> <call><name>ADC_SMPR1</name><argument_list>(<argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>SamplingTime</name></name></expr></argument>, <argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>Channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <comment type="block">/* ADC_Channel include in ADC_Channel_[0..9] */</comment>
  <block>{<block_content>
    <comment type="block">/* Clear the old sample time */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMPR2</name></name> <operator>&amp;=</operator> <operator>~</operator><call><name>ADC_SMPR2</name><argument_list>(<argument><expr><name>ADC_SMPR2_SMP0</name></expr></argument>, <argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>Channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Set the new sample time */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMPR2</name></name> <operator>|=</operator> <call><name>ADC_SMPR2</name><argument_list>(<argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>SamplingTime</name></name></expr></argument>, <argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>Channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* For Rank 1 to 6 */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>sConfig</name><operator>-&gt;</operator><name>Rank</name></name> <operator>&lt;</operator> <literal type="number">7U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear the old SQx bits for the selected rank */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SQR3</name></name> <operator>&amp;=</operator> <operator>~</operator><call><name>ADC_SQR3_RK</name><argument_list>(<argument><expr><name>ADC_SQR3_SQ1</name></expr></argument>, <argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>Rank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Set the SQx bits for the selected rank */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SQR3</name></name> <operator>|=</operator> <call><name>ADC_SQR3_RK</name><argument_list>(<argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>Channel</name></name></expr></argument>, <argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>Rank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* For Rank 7 to 12 */</comment>
  <if type="elseif">else if <condition>(<expr><name><name>sConfig</name><operator>-&gt;</operator><name>Rank</name></name> <operator>&lt;</operator> <literal type="number">13U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear the old SQx bits for the selected rank */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SQR2</name></name> <operator>&amp;=</operator> <operator>~</operator><call><name>ADC_SQR2_RK</name><argument_list>(<argument><expr><name>ADC_SQR2_SQ7</name></expr></argument>, <argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>Rank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Set the SQx bits for the selected rank */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SQR2</name></name> <operator>|=</operator> <call><name>ADC_SQR2_RK</name><argument_list>(<argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>Channel</name></name></expr></argument>, <argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>Rank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* For Rank 13 to 16 */</comment>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Clear the old SQx bits for the selected rank */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SQR1</name></name> <operator>&amp;=</operator> <operator>~</operator><call><name>ADC_SQR1_RK</name><argument_list>(<argument><expr><name>ADC_SQR1_SQ13</name></expr></argument>, <argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>Rank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Set the SQx bits for the selected rank */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SQR1</name></name> <operator>|=</operator> <call><name>ADC_SQR1_RK</name><argument_list>(<argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>Channel</name></name></expr></argument>, <argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>Rank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

    <comment type="block">/* Pointer to the common control register to which is belonging hadc    */</comment>
    <comment type="block">/* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */</comment>
    <comment type="block">/* control register)                                                    */</comment>
    <expr_stmt><expr><name>tmpADC_Common</name> <operator>=</operator> <call><name>ADC_COMMON_REGISTER</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>ADC1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sConfig</name><operator>-&gt;</operator><name>Channel</name></name> <operator>==</operator> <name>ADC_CHANNEL_VBAT</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT &amp; ADC_CHANNEL_TEMPSENSOR*/</comment>    
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>ADC_CHANNEL_TEMPSENSOR</name> <operator>==</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>ADC_CHANNEL_VBAT</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>tmpADC_Common</name><operator>-&gt;</operator><name>CCR</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ADC_CCR_TSVREFE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Enable the VBAT channel*/</comment>
    <expr_stmt><expr><name><name>tmpADC_Common</name><operator>-&gt;</operator><name>CCR</name></name> <operator>|=</operator> <name>ADC_CCR_VBATE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>ADC1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>sConfig</name><operator>-&gt;</operator><name>Channel</name></name> <operator>==</operator> <name>ADC_CHANNEL_TEMPSENSOR</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>sConfig</name><operator>-&gt;</operator><name>Channel</name></name> <operator>==</operator> <name>ADC_CHANNEL_VREFINT</name><operator>)</operator><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT &amp; ADC_CHANNEL_TEMPSENSOR*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>ADC_CHANNEL_TEMPSENSOR</name> <operator>==</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>ADC_CHANNEL_VBAT</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>tmpADC_Common</name><operator>-&gt;</operator><name>CCR</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ADC_CCR_VBATE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Enable the Temperature sensor and VREFINT channel*/</comment>
    <expr_stmt><expr><name><name>tmpADC_Common</name><operator>-&gt;</operator><name>CCR</name></name> <operator>|=</operator> <name>ADC_CCR_TSVREFE</name></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>sConfig</name><operator>-&gt;</operator><name>Channel</name></name> <operator>==</operator> <name>ADC_CHANNEL_TEMPSENSOR</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Delay for temperature sensor stabilization time */</comment>
      <comment type="block">/* Compute number of CPU cycles to wait for */</comment>
      <expr_stmt><expr><name>counter</name> <operator>=</operator> <operator>(</operator><name>ADC_TEMPSENSOR_DELAY_US</name> <operator>*</operator> <operator>(</operator><name>SystemCoreClock</name> <operator>/</operator> <literal type="number">1000000U</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
      <while>while<condition>(<expr><name>counter</name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>counter</name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configures the analog watchdog.
  * @note Analog watchdog thresholds can be modified while ADC conversion
  * is on going.
  * In this case, some constraints must be taken into account:
  * The programmed threshold values are effective from the next
  * ADC EOC (end of unitary conversion).
  * Considering that registers write delay may happen due to
  * bus activity, this might cause an uncertainty on the
  * effective timing of the new programmed threshold values.
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_ADC_AnalogWDGConfig</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>, <parameter><decl><type><name>ADC_AnalogWDGConfTypeDef</name><modifier>*</modifier></type> <name>AnalogWDGConfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_FULL_ASSERT</name></cpp:ifdef>  
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_FULL_ASSERT  */</comment>  
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_ANALOG_WATCHDOG</name><argument_list>(<argument><expr><name><name>AnalogWDGConfig</name><operator>-&gt;</operator><name>WatchdogMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_CHANNEL</name><argument_list>(<argument><expr><name><name>AnalogWDGConfig</name><operator>-&gt;</operator><name>Channel</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>AnalogWDGConfig</name><operator>-&gt;</operator><name>ITMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_FULL_ASSERT</name></cpp:ifdef>  
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ADC_GET_RESOLUTION</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_RANGE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>AnalogWDGConfig</name><operator>-&gt;</operator><name>HighThreshold</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_RANGE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>AnalogWDGConfig</name><operator>-&gt;</operator><name>LowThreshold</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_FULL_ASSERT  */</comment>
  
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>AnalogWDGConfig</name><operator>-&gt;</operator><name>ITMode</name></name> <operator>==</operator> <name>ENABLE</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable the ADC Analog watchdog interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_ADC_ENABLE_IT</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_IT_AWD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Disable the ADC Analog watchdog interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_ADC_DISABLE_IT</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_IT_AWD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Clear AWDEN, JAWDEN and AWDSGL bits */</comment>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator>  <operator>~</operator><operator>(</operator><name>ADC_CR1_AWDSGL</name> <operator>|</operator> <name>ADC_CR1_JAWDEN</name> <operator>|</operator> <name>ADC_CR1_AWDEN</name><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Set the analog watchdog enable mode */</comment>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <name><name>AnalogWDGConfig</name><operator>-&gt;</operator><name>WatchdogMode</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* Set the high threshold */</comment>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>HTR</name></name> <operator>=</operator> <name><name>AnalogWDGConfig</name><operator>-&gt;</operator><name>HighThreshold</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* Set the low threshold */</comment>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>LTR</name></name> <operator>=</operator> <name><name>AnalogWDGConfig</name><operator>-&gt;</operator><name>LowThreshold</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* Clear the Analog watchdog channel select bits */</comment>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ADC_CR1_AWDCH</name></expr>;</expr_stmt>
  
  <comment type="block">/* Set the Analog watchdog channel */</comment>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>AnalogWDGConfig</name><operator>-&gt;</operator><name>Channel</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup ADC_Exported_Functions_Group4 ADC Peripheral State functions
 *  @brief   ADC Peripheral State functions 
 *
@verbatim   
 ===============================================================================
            ##### Peripheral State and errors functions #####
 ===============================================================================  
    [..]
    This subsection provides functions allowing to
      (+) Check the ADC state
      (+) Check the ADC Error
         
@endverbatim
  * @{
  */</comment>
  
<comment type="block" format="doxygen">/**
  * @brief  return the ADC state
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_ADC_GetState</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Return ADC state */</comment>
  <return>return <expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the ADC error code
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval ADC Error Code
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_ADC_GetError</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name> <modifier>*</modifier></type><name>hadc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup ADC_Private_Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the ADCx peripheral according to the specified parameters 
  *         in the ADC_InitStruct without initializing the ADC MSP.       
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ADC_Init</name><parameter_list>(<parameter><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ADC_Common_TypeDef</name> <modifier>*</modifier></type><name>tmpADC_Common</name></decl>;</decl_stmt>
  
  <comment type="block">/* Set ADC parameters */</comment>
  <comment type="block">/* Pointer to the common control register to which is belonging hadc    */</comment>
  <comment type="block">/* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */</comment>
  <comment type="block">/* control register)                                                    */</comment>
  <expr_stmt><expr><name>tmpADC_Common</name> <operator>=</operator> <call><name>ADC_COMMON_REGISTER</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Set the ADC clock prescaler */</comment>
  <expr_stmt><expr><name><name>tmpADC_Common</name><operator>-&gt;</operator><name>CCR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ADC_CCR_ADCPRE</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tmpADC_Common</name><operator>-&gt;</operator><name>CCR</name></name> <operator>|=</operator>  <name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockPrescaler</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* Set ADC scan mode */</comment>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ADC_CR1_SCAN</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator>  <call><name>ADC_CR1_SCANCONV</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ScanConvMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Set ADC resolution */</comment>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ADC_CR1_RES</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator>  <name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Resolution</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* Set ADC data alignment */</comment>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ADC_CR2_ALIGN</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataAlign</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* Enable external trigger if trigger selection is different of software  */</comment>
  <comment type="block">/* start.                                                                 */</comment>
  <comment type="block">/* Note: This configuration keeps the hardware feature of parameter       */</comment>
  <comment type="block">/*       ExternalTrigConvEdge "trigger edge none" equivalent to           */</comment>
  <comment type="block">/*       software start.                                                  */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ExternalTrigConv</name></name> <operator>!=</operator> <name>ADC_SOFTWARE_START</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Select external trigger to start conversion */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ADC_CR2_EXTSEL</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ExternalTrigConv</name></name></expr>;</expr_stmt>
    
    <comment type="block">/* Select external trigger polarity */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ADC_CR2_EXTEN</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ExternalTrigConvEdge</name></name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Reset the external trigger */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ADC_CR2_EXTSEL</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ADC_CR2_EXTEN</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Enable or disable ADC continuous conversion mode */</comment>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ADC_CR2_CONT</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <call><name>ADC_CR2_CONTINUOUS</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ContinuousConvMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DiscontinuousConvMode</name></name> <operator>!=</operator> <name>DISABLE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_ADC_REGULAR_DISC_NUMBER</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NbrOfDiscConversion</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <comment type="block">/* Enable the selected ADC regular discontinuous mode */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ADC_CR1_DISCEN</name></expr>;</expr_stmt>
    
    <comment type="block">/* Set the number of channels to be converted in discontinuous mode */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ADC_CR1_DISCNUM</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator>  <call><name>ADC_CR1_DISCONTINUOUS</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NbrOfDiscConversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Disable the selected ADC regular discontinuous mode */</comment>
    <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ADC_CR1_DISCEN</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Set ADC number of conversion */</comment>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SQR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ADC_SQR1_L</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SQR1</name></name> <operator>|=</operator>  <call><name>ADC_SQR1</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NbrOfConversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Enable or disable ADC DMA continuous request */</comment>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ADC_CR2_DDS</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <call><name>ADC_CR2_DMAContReq</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DMAContinuousRequests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Enable or disable ADC end of conversion selection */</comment>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ADC_CR2_EOCS</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <call><name>ADC_CR2_EOCSelection</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>EOCSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ADC_DMAConvCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>   
<block>{<block_content>
  <comment type="block">/* Retrieve ADC handle corresponding to current DMA handle */</comment>
  <decl_stmt><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name> <init>= <expr><operator>(</operator> <name>ADC_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator> <operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Update state machine on conversion status if not in error state */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_ERROR_INTERNAL</name> <operator>|</operator> <name>HAL_ADC_STATE_ERROR_DMA</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update ADC state machine */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_REG_EOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Determine whether any further conversion upcoming on group regular   */</comment>
    <comment type="block">/* by external trigger, continuous mode or scan sequence on going.      */</comment>
    <comment type="block">/* Note: On STM32F4, there is no independent flag of end of sequence.   */</comment>
    <comment type="block">/*       The test of scan sequence on going is done either with scan    */</comment>
    <comment type="block">/*       sequence disabled or with end of conversion flag set to        */</comment>
    <comment type="block">/*       of end of sequence.                                            */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>ADC_IS_SOFTWARE_START_REGULAR</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call>                   <operator>&amp;&amp;</operator>
       <operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ContinuousConvMode</name></name> <operator>==</operator> <name>DISABLE</name><operator>)</operator>            <operator>&amp;&amp;</operator>
       <operator>(</operator><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SQR1</name></name></expr></argument>, <argument><expr><name>ADC_SQR1_L</name></expr></argument>)</argument_list></call> <operator>||</operator> 
        <call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>ADC_CR2_EOCS</name></expr></argument>)</argument_list></call>  <operator>)</operator></expr>   )</condition>
    <block>{<block_content>
      <comment type="block">/* Disable ADC end of single conversion interrupt on group regular */</comment>
      <comment type="block">/* Note: Overrun interrupt was enabled with EOC interrupt in          */</comment>
      <comment type="block">/* HAL_ADC_Start_IT(), but is not disabled here because can be used   */</comment>
      <comment type="block">/* by overrun IRQ process below.                                      */</comment>
      <expr_stmt><expr><call><name>__HAL_ADC_DISABLE_IT</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>, <argument><expr><name>ADC_IT_EOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Set ADC state */</comment>
      <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_REG_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
      
      <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_INJ_BUSY</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name></expr></argument>, <argument><expr><name>HAL_ADC_STATE_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Conversion complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_ADC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hadc</name><operator>-&gt;</operator><name>ConvCpltCallback</name></name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_ADC_ConvCpltCallback</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_ADC_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if>
  <else>else <comment type="block">/* DMA and-or internal error occurred */</comment>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name> <operator>&amp;</operator> <name>HAL_ADC_STATE_ERROR_INTERNAL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0UL</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Call HAL ADC Error Callback function */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_ADC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_ADC_ErrorCallback</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_ADC_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if>
	<else>else
	<block>{<block_content>
      <comment type="block">/* Call DMA error callback */</comment>
      <expr_stmt><expr><call><name><name>hadc</name><operator>-&gt;</operator><name>DMA_Handle</name><operator>-&gt;</operator><name>XferErrorCallback</name></name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ADC_DMAHalfConvCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>   
<block>{<block_content>
  <decl_stmt><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name> <init>= <expr><operator>(</operator> <name>ADC_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator> <operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>
   <comment type="block">/* Half conversion callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_ADC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hadc</name><operator>-&gt;</operator><name>ConvHalfCpltCallback</name></name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_ADC_ConvHalfCpltCallback</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_ADC_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA error callback 
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ADC_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>   
<block>{<block_content>
  <decl_stmt><decl><type><name>ADC_HandleTypeDef</name><modifier>*</modifier></type> <name>hadc</name> <init>= <expr><operator>(</operator> <name>ADC_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator> <operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_ADC_STATE_ERROR_DMA</name></expr>;</expr_stmt>
  <comment type="block">/* Set ADC error code to DMA error */</comment>
  <expr_stmt><expr><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_ADC_ERROR_DMA</name></expr>;</expr_stmt>
   <comment type="block">/* Error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_ADC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hadc</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_ADC_ErrorCallback</name><argument_list>(<argument><expr><name>hadc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_ADC_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_ADC_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment> 

<comment type="block" format="doxygen">/**
  * @}
  */</comment> 

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
