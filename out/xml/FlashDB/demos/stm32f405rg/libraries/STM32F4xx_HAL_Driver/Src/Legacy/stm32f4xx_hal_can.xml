<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg/libraries/STM32F4xx_HAL_Driver/Src/Legacy/stm32f4xx_hal_can.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_can.c
  * @author  MCD Application Team
  * @brief   This file provides firmware functions to manage the following 
  *          functionalities of the Controller Area Network (CAN) peripheral:
  *           + Initialization and de-initialization functions 
  *           + IO operation functions
  *           + Peripheral Control functions
  *           + Peripheral State and Error functions
  *
  @verbatim
  ==============================================================================
                                 ##### User NOTE #####
  ==============================================================================
    [..]
      (#) This HAL CAN driver is deprecated, it contains some CAN Tx/Rx FIFO management limitations.
          Another HAL CAN driver version has been designed with new API's, to fix these limitations.

  ==============================================================================
                        ##### How to use this driver #####
  ==============================================================================
    [..]            
      (#) Enable the CAN controller interface clock using 
          __HAL_RCC_CAN1_CLK_ENABLE() for CAN1, __HAL_RCC_CAN2_CLK_ENABLE() for CAN2
         and __HAL_RCC_CAN3_CLK_ENABLE() for CAN3
      -@- In case you are using CAN2 only, you have to enable the CAN1 clock.
       
      (#) CAN pins configuration
        (++) Enable the clock for the CAN GPIOs using the following function:
             __GPIOx_CLK_ENABLE()   
        (++) Connect and configure the involved CAN pins to AF9 using the 
              following function HAL_GPIO_Init() 
              
      (#) Initialize and configure the CAN using CAN_Init() function.   
                 
      (#) Transmit the desired CAN frame using HAL_CAN_Transmit() function.

      (#) Or transmit the desired CAN frame using HAL_CAN_Transmit_IT() function.
           
      (#) Receive a CAN frame using HAL_CAN_Receive() function.

      (#) Or receive a CAN frame using HAL_CAN_Receive_IT() function.

     *** Polling mode IO operation ***
     =================================
     [..]    
       (+) Start the CAN peripheral transmission and wait the end of this operation 
           using HAL_CAN_Transmit(), at this stage user can specify the value of timeout
           according to his end application
       (+) Start the CAN peripheral reception and wait the end of this operation 
           using HAL_CAN_Receive(), at this stage user can specify the value of timeout
           according to his end application 
       
     *** Interrupt mode IO operation ***    
     ===================================
     [..]    
       (+) Start the CAN peripheral transmission using HAL_CAN_Transmit_IT()
       (+) Start the CAN peripheral reception using HAL_CAN_Receive_IT()         
       (+) Use HAL_CAN_IRQHandler() called under the used CAN Interrupt subroutine
       (+) At CAN end of transmission HAL_CAN_TxCpltCallback() function is executed and user can 
            add his own code by customization of function pointer HAL_CAN_TxCpltCallback 
       (+) In case of CAN Error, HAL_CAN_ErrorCallback() function is executed and user can 
            add his own code by customization of function pointer HAL_CAN_ErrorCallback
 
     *** CAN HAL driver macros list ***
     ============================================= 
     [..]
       Below the list of most used macros in CAN HAL driver.
       
      (+) __HAL_CAN_ENABLE_IT: Enable the specified CAN interrupts
      (+) __HAL_CAN_DISABLE_IT: Disable the specified CAN interrupts
      (+) __HAL_CAN_GET_IT_SOURCE: Check if the specified CAN interrupt source is enabled or disabled
      (+) __HAL_CAN_CLEAR_FLAG: Clear the CAN's pending flags
      (+) __HAL_CAN_GET_FLAG: Get the selected CAN's flag status

     [..]
      (@) You can refer to the CAN Legacy HAL driver header file for more useful macros

  @endverbatim
           
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup CAN CAN
  * @brief CAN driver modules
  * @{
  */</comment> 
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_CAN_LEGACY_MODULE_ENABLED</name></cpp:ifdef>  

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F405xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F415xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F407xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F417xx</name></expr></argument>)</argument_list></call> <operator>||</operator>\
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call> <operator>||</operator>\
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator>\
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Cx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator>\
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_CAN_MODULE_ENABLED</name></cpp:ifdef>
<comment type="block">/* Select HAL CAN module in stm32f4xx_hal_conf.h file:
   (#) HAL_CAN_MODULE_ENABLED for new HAL CAN driver fixing FIFO limitations
   (#) HAL_CAN_LEGACY_MODULE_ENABLED for legacy HAL CAN driver */</comment>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>'The HAL CAN driver cannot be used with its legacy, Please ensure to enable only one HAL CAN module at once in stm32f4xx_hal_conf.h file'</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_CAN_MODULE_ENABLED */</comment>

<cpp:warning>#<cpp:directive>warning</cpp:directive> <cpp:literal>'Legacy HAL CAN driver is enabled! It can be used with known limitations, refer to the release notes. However it is recommended to use rather the new HAL CAN driver'</cpp:literal></cpp:warning>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup CAN_Private_Constants
  * @{
  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAN_TIMEOUT_VALUE</name></cpp:macro>  <cpp:value>10U</cpp:value></cpp:define>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup CAN_Private_Functions
  * @{
  */</comment>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CAN_Receive_IT</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name><modifier>*</modifier></type> <name>hcan</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>FIFONumber</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CAN_Transmit_IT</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name><modifier>*</modifier></type> <name>hcan</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup CAN_Exported_Functions CAN Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup CAN_Exported_Functions_Group1 Initialization and de-initialization functions 
 *  @brief    Initialization and Configuration functions 
 *
@verbatim    
  ==============================================================================
              ##### Initialization and de-initialization functions #####
  ==============================================================================
    [..]  This section provides functions allowing to:
      (+) Initialize and configure the CAN. 
      (+) De-initialize the CAN. 
         
@endverbatim
  * @{
  */</comment>
  
<comment type="block" format="doxygen">/**
  * @brief  Initializes the CAN peripheral according to the specified
  *         parameters in the CAN_InitStruct.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CAN_Init</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name><modifier>*</modifier></type> <name>hcan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>InitStatus</name> <init>= <expr><name>CAN_INITSTATUS_FAILED</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check CAN handle */</comment>
  <if_stmt><if>if<condition>(<expr><name>hcan</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
     <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>TTCM</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ABOM</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AWUM</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NART</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>RFLM</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>TXFP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_MODE</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_SJW</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SJW</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_BS1</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BS1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_BS2</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BS2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_PRESCALER</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Prescaler</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  

  <if_stmt><if>if<condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CAN_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>
    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name>HAL_CAN_MspInit</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Initialize the CAN state*/</comment>
  <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY</name></expr>;</expr_stmt>
  
  <comment type="block">/* Exit from sleep mode */</comment>
  <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MCR</name></name> <operator>&amp;=</operator> <operator>(</operator><operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>CAN_MCR_SLEEP</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Request initialisation */</comment>
  <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MCR</name></name> <operator>|=</operator> <name>CAN_MCR_INRQ</name></expr> ;</expr_stmt>
  
  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait the acknowledge */</comment>
  <while>while<condition>(<expr><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MSR</name></name> <operator>&amp;</operator> <name>CAN_MSR_INAK</name><operator>)</operator> <operator>!=</operator> <name>CAN_MSR_INAK</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>CAN_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_CAN_STATE_TIMEOUT</name></expr>;</expr_stmt>
      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Check acknowledge */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MSR</name></name> <operator>&amp;</operator> <name>CAN_MSR_INAK</name><operator>)</operator> <operator>==</operator> <name>CAN_MSR_INAK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set the time triggered communication mode */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>TTCM</name></name> <operator>==</operator> <name>ENABLE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MCR</name></name> <operator>|=</operator> <name>CAN_MCR_TTCM</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MCR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>CAN_MCR_TTCM</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Set the automatic bus-off management */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ABOM</name></name> <operator>==</operator> <name>ENABLE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MCR</name></name> <operator>|=</operator> <name>CAN_MCR_ABOM</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MCR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>CAN_MCR_ABOM</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Set the automatic wake-up mode */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AWUM</name></name> <operator>==</operator> <name>ENABLE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MCR</name></name> <operator>|=</operator> <name>CAN_MCR_AWUM</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MCR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>CAN_MCR_AWUM</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Set the no automatic retransmission */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NART</name></name> <operator>==</operator> <name>ENABLE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MCR</name></name> <operator>|=</operator> <name>CAN_MCR_NART</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MCR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>CAN_MCR_NART</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Set the receive FIFO locked mode */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>RFLM</name></name> <operator>==</operator> <name>ENABLE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MCR</name></name> <operator>|=</operator> <name>CAN_MCR_RFLM</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MCR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>CAN_MCR_RFLM</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Set the transmit FIFO priority */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>TXFP</name></name> <operator>==</operator> <name>ENABLE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MCR</name></name> <operator>|=</operator> <name>CAN_MCR_TXFP</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MCR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>CAN_MCR_TXFP</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Set the bit timing register */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BTR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name><operator>)</operator> <operator>|</operator> \
                <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SJW</name></name><operator>)</operator> <operator>|</operator> \
                <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BS1</name></name><operator>)</operator> <operator>|</operator> \
                <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BS2</name></name><operator>)</operator> <operator>|</operator> \
               <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Prescaler</name></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Request leave initialisation */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MCR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>CAN_MCR_INRQ</name></expr>;</expr_stmt>

  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

   <comment type="block">/* Wait the acknowledge */</comment>
   <while>while<condition>(<expr><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MSR</name></name> <operator>&amp;</operator> <name>CAN_MSR_INAK</name><operator>)</operator> <operator>==</operator> <name>CAN_MSR_INAK</name></expr>)</condition>
   <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>CAN_TIMEOUT_VALUE</name></expr>)</condition>
     <block>{<block_content>
       <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_CAN_STATE_TIMEOUT</name></expr>;</expr_stmt>
       <comment type="block">/* Process unlocked */</comment>
       <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
     </block_content>}</block></if></if_stmt>
   </block_content>}</block></while>

    <comment type="block">/* Check acknowledged */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MSR</name></name> <operator>&amp;</operator> <name>CAN_MSR_INAK</name><operator>)</operator> <operator>!=</operator> <name>CAN_MSR_INAK</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>InitStatus</name> <operator>=</operator> <name>CAN_INITSTATUS_SUCCESS</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
 
  <if_stmt><if>if<condition>(<expr><name>InitStatus</name> <operator>==</operator> <name>CAN_INITSTATUS_SUCCESS</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set CAN error code to none */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_CAN_ERROR_NONE</name></expr>;</expr_stmt>
    
    <comment type="block">/* Initialize the CAN state */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_READY</name></expr>;</expr_stmt>
  
    <comment type="block">/* Return function status */</comment>
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Initialize the CAN state */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_ERROR</name></expr>;</expr_stmt>
    
    <comment type="block">/* Return function status */</comment>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configures the CAN reception filter according to the specified
  *         parameters in the CAN_FilterInitStruct.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @param  sFilterConfig pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CAN_ConfigFilter</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name><modifier>*</modifier></type> <name>hcan</name></decl></parameter>, <parameter><decl><type><name>CAN_FilterConfTypeDef</name><modifier>*</modifier></type> <name>sFilterConfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>filternbrbitpos</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CAN_TypeDef</name> <modifier>*</modifier></type><name>can_ip</name></decl>;</decl_stmt>
  
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_FILTER_NUMBER</name><argument_list>(<argument><expr><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterNumber</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_FILTER_MODE</name><argument_list>(<argument><expr><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_FILTER_SCALE</name><argument_list>(<argument><expr><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterScale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_FILTER_FIFO</name><argument_list>(<argument><expr><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterFIFOAssignment</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterActivation</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_BANKNUMBER</name><argument_list>(<argument><expr><name><name>sFilterConfig</name><operator>-&gt;</operator><name>BankNumber</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>filternbrbitpos</name> <operator>=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterNumber</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CAN3</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Check the CAN instance */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>CAN3</name></expr>)</condition>
  <block>{<block_content>	
    <expr_stmt><expr><name>can_ip</name> <operator>=</operator> <name>CAN3</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>can_ip</name> <operator>=</operator> <name>CAN1</name></expr>;</expr_stmt>    
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>can_ip</name> <operator>=</operator> <name>CAN1</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <comment type="block">/* Initialisation mode for the filter */</comment>
  <expr_stmt><expr><name><name>can_ip</name><operator>-&gt;</operator><name>FMR</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>CAN_FMR_FINIT</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CAN2</name></expr></argument>)</argument_list></call></expr></cpp:if>  
  <comment type="block">/* Select the start slave bank */</comment>
  <expr_stmt><expr><name><name>can_ip</name><operator>-&gt;</operator><name>FMR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>CAN_FMR_CAN2SB</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>can_ip</name><operator>-&gt;</operator><name>FMR</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sFilterConfig</name><operator>-&gt;</operator><name>BankNumber</name></name> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
     
  <comment type="block">/* Filter Deactivation */</comment>
  <expr_stmt><expr><name><name>can_ip</name><operator>-&gt;</operator><name>FA1R</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>filternbrbitpos</name></expr>;</expr_stmt>

  <comment type="block">/* Filter Scale */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterScale</name></name> <operator>==</operator> <name>CAN_FILTERSCALE_16BIT</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* 16-bit scale for the filter */</comment>
    <expr_stmt><expr><name><name>can_ip</name><operator>-&gt;</operator><name>FS1R</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>filternbrbitpos</name></expr>;</expr_stmt>

    <comment type="block">/* First 16-bit identifier and First 16-bit mask */</comment>
    <comment type="block">/* Or First 16-bit identifier and Second 16-bit identifier */</comment>
    <expr_stmt><expr><name><name>can_ip</name><operator>-&gt;</operator><name>sFilterRegister</name><index>[<expr><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterNumber</name></name></expr>]</index></name><operator>.</operator><name>FR1</name> <operator>=</operator> 
       <operator>(</operator><operator>(</operator><literal type="number">0x0000FFFFU</literal> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterMaskIdLow</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator>
        <operator>(</operator><literal type="number">0x0000FFFFU</literal> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterIdLow</name></name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Second 16-bit identifier and Second 16-bit mask */</comment>
    <comment type="block">/* Or Third 16-bit identifier and Fourth 16-bit identifier */</comment>
    <expr_stmt><expr><name><name>can_ip</name><operator>-&gt;</operator><name>sFilterRegister</name><index>[<expr><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterNumber</name></name></expr>]</index></name><operator>.</operator><name>FR2</name> <operator>=</operator> 
       <operator>(</operator><operator>(</operator><literal type="number">0x0000FFFFU</literal> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterMaskIdHigh</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator>
        <operator>(</operator><literal type="number">0x0000FFFFU</literal> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterIdHigh</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterScale</name></name> <operator>==</operator> <name>CAN_FILTERSCALE_32BIT</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* 32-bit scale for the filter */</comment>
    <expr_stmt><expr><name><name>can_ip</name><operator>-&gt;</operator><name>FS1R</name></name> <operator>|=</operator> <name>filternbrbitpos</name></expr>;</expr_stmt>
    
    <comment type="block">/* 32-bit identifier or First 32-bit identifier */</comment>
    <expr_stmt><expr><name><name>can_ip</name><operator>-&gt;</operator><name>sFilterRegister</name><index>[<expr><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterNumber</name></name></expr>]</index></name><operator>.</operator><name>FR1</name> <operator>=</operator> 
       <operator>(</operator><operator>(</operator><literal type="number">0x0000FFFFU</literal> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterIdHigh</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator>
        <operator>(</operator><literal type="number">0x0000FFFFU</literal> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterIdLow</name></name><operator>)</operator></expr>;</expr_stmt>
    <comment type="block">/* 32-bit mask or Second 32-bit identifier */</comment>
    <expr_stmt><expr><name><name>can_ip</name><operator>-&gt;</operator><name>sFilterRegister</name><index>[<expr><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterNumber</name></name></expr>]</index></name><operator>.</operator><name>FR2</name> <operator>=</operator> 
       <operator>(</operator><operator>(</operator><literal type="number">0x0000FFFFU</literal> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterMaskIdHigh</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator>
        <operator>(</operator><literal type="number">0x0000FFFFU</literal> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterMaskIdLow</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Filter Mode */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterMode</name></name> <operator>==</operator> <name>CAN_FILTERMODE_IDMASK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/*Id/Mask mode for the filter*/</comment>
    <expr_stmt><expr><name><name>can_ip</name><operator>-&gt;</operator><name>FM1R</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>filternbrbitpos</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <comment type="block">/* CAN_FilterInitStruct-&gt;CAN_FilterMode == CAN_FilterMode_IdList */</comment>
  <block>{<block_content>
    <comment type="block">/*Identifier list mode for the filter*/</comment>
    <expr_stmt><expr><name><name>can_ip</name><operator>-&gt;</operator><name>FM1R</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>filternbrbitpos</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Filter FIFO assignment */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterFIFOAssignment</name></name> <operator>==</operator> <name>CAN_FILTER_FIFO0</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* FIFO 0 assignation for the filter */</comment>
    <expr_stmt><expr><name><name>can_ip</name><operator>-&gt;</operator><name>FFA1R</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>filternbrbitpos</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterFIFOAssignment</name></name> <operator>==</operator> <name>CAN_FILTER_FIFO1</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* FIFO 1 assignation for the filter */</comment>
    <expr_stmt><expr><name><name>can_ip</name><operator>-&gt;</operator><name>FFA1R</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>filternbrbitpos</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Filter activation */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>sFilterConfig</name><operator>-&gt;</operator><name>FilterActivation</name></name> <operator>==</operator> <name>ENABLE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>can_ip</name><operator>-&gt;</operator><name>FA1R</name></name> <operator>|=</operator> <name>filternbrbitpos</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Leave the initialisation mode for the filter */</comment>
  <expr_stmt><expr><name><name>can_ip</name><operator>-&gt;</operator><name>FMR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>CAN_FMR_FINIT</name><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Deinitializes the CANx peripheral registers to their default reset values. 
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CAN_DeInit</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name><modifier>*</modifier></type> <name>hcan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check CAN handle */</comment>
  <if_stmt><if>if<condition>(<expr><name>hcan</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
     <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Change CAN state */</comment>
  <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY</name></expr>;</expr_stmt>
  
  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name>HAL_CAN_MspDeInit</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Change CAN state */</comment>
  <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the CAN MSP.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_CAN_MspInit</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name><modifier>*</modifier></type> <name>hcan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspInit could be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitializes the CAN MSP.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_CAN_MspDeInit</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name><modifier>*</modifier></type> <name>hcan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspDeInit could be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup CAN_Exported_Functions_Group2 IO operation functions
 *  @brief    IO operation functions 
 *
@verbatim   
  ==============================================================================
                      ##### IO operation functions #####
  ==============================================================================
    [..]  This section provides functions allowing to:
      (+) Transmit a CAN frame message.
      (+) Receive a CAN frame message.
      (+) Enter CAN peripheral in sleep mode. 
      (+) Wake up the CAN peripheral from sleep mode.
               
@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initiates and transmits a CAN frame message.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @param  Timeout Specify Timeout value   
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CAN_Transmit</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name><modifier>*</modifier></type> <name>hcan</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>transmitmailbox</name> <init>= <expr><name>CAN_TXSTATUS_NOMAILBOX</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_IDTYPE</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>IDE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_RTR</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>RTR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_DLC</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>DLC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TSR</name></name><operator>&amp;</operator><name>CAN_TSR_TME0</name><operator>)</operator> <operator>==</operator> <name>CAN_TSR_TME0</name><operator>)</operator> <operator>||</operator> \
     <operator>(</operator><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TSR</name></name><operator>&amp;</operator><name>CAN_TSR_TME1</name><operator>)</operator> <operator>==</operator> <name>CAN_TSR_TME1</name><operator>)</operator> <operator>||</operator> \
     <operator>(</operator><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TSR</name></name><operator>&amp;</operator><name>CAN_TSR_TME2</name><operator>)</operator> <operator>==</operator> <name>CAN_TSR_TME2</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>  
    <comment type="block">/* Process locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <comment type="block">/* Change CAN state */</comment>
    <switch>switch<condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
    <block>{<block_content>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_RX0</name><operator>)</operator></expr>:</case>
          <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX_RX0</name></expr>;</expr_stmt>
          <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_RX1</name><operator>)</operator></expr>:</case>
          <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX_RX1</name></expr>;</expr_stmt>
          <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_RX0_RX1</name><operator>)</operator></expr>:</case>
          <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX_RX0_RX1</name></expr>;</expr_stmt>
          <break>break;</break>
      <default>default:</default> <comment type="block">/* HAL_CAN_STATE_READY */</comment>
          <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX</name></expr>;</expr_stmt>
          <break>break;</break>
    </block_content>}</block></switch>
  
    <comment type="block">/* Select one empty transmit mailbox */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TSR</name></name><operator>&amp;</operator><name>CAN_TSR_TME0</name><operator>)</operator> <operator>==</operator> <name>CAN_TSR_TME0</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>transmitmailbox</name> <operator>=</operator> <name>CAN_TXMAILBOX_0</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TSR</name></name><operator>&amp;</operator><name>CAN_TSR_TME1</name><operator>)</operator> <operator>==</operator> <name>CAN_TSR_TME1</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>transmitmailbox</name> <operator>=</operator> <name>CAN_TXMAILBOX_1</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>transmitmailbox</name> <operator>=</operator> <name>CAN_TXMAILBOX_2</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Set up the Id */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sTxMailBox</name><index>[<expr><name>transmitmailbox</name></expr>]</index></name><operator>.</operator><name>TIR</name> <operator>&amp;=</operator> <name>CAN_TI0R_TXRQ</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>IDE</name></name> <operator>==</operator> <name>CAN_ID_STD</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_STDID</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>StdId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sTxMailBox</name><index>[<expr><name>transmitmailbox</name></expr>]</index></name><operator>.</operator><name>TIR</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>StdId</name></name> <operator>&lt;&lt;</operator> <literal type="number">21U</literal><operator>)</operator> <operator>|</operator> \
                                                  <name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>RTR</name></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_EXTID</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>ExtId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sTxMailBox</name><index>[<expr><name>transmitmailbox</name></expr>]</index></name><operator>.</operator><name>TIR</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>ExtId</name></name> <operator>&lt;&lt;</operator> <literal type="number">3U</literal><operator>)</operator> <operator>|</operator> \
                                                  <name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>IDE</name></name> <operator>|</operator> \
                                                  <name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>RTR</name></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <comment type="block">/* Set up the DLC */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>DLC</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x0000000F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sTxMailBox</name><index>[<expr><name>transmitmailbox</name></expr>]</index></name><operator>.</operator><name>TDTR</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xFFFFFFF0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sTxMailBox</name><index>[<expr><name>transmitmailbox</name></expr>]</index></name><operator>.</operator><name>TDTR</name> <operator>|=</operator> <name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>DLC</name></name></expr>;</expr_stmt>

    <comment type="block">/* Set up the data field */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sTxMailBox</name><index>[<expr><name>transmitmailbox</name></expr>]</index></name><operator>.</operator><name>TDLR</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">3U</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24U</literal><operator>)</operator> <operator>|</operator> 
                                             <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator>
                                             <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>|</operator> 
                                             <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sTxMailBox</name><index>[<expr><name>transmitmailbox</name></expr>]</index></name><operator>.</operator><name>TDHR</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">7U</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24U</literal><operator>)</operator> <operator>|</operator> 
                                             <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">6U</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator>
                                             <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">5U</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>|</operator>
                                             <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">4U</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <comment type="block">/* Request transmission */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sTxMailBox</name><index>[<expr><name>transmitmailbox</name></expr>]</index></name><operator>.</operator><name>TIR</name> <operator>|=</operator> <name>CAN_TI0R_TXRQ</name></expr>;</expr_stmt>
  
    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
    <comment type="block">/* Check End of transmission flag */</comment>
    <while>while<condition>(<expr><operator>!</operator><operator>(</operator><call><name>__HAL_CAN_TRANSMIT_STATUS</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>transmitmailbox</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check for the Timeout */</comment>
      <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
      <block>{<block_content>
       <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator><operator>||</operator><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
       <block>{<block_content>
         <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_TIMEOUT</name></expr>;</expr_stmt>

         <expr_stmt><expr><call><name>__HAL_CAN_CANCEL_TRANSMIT</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>transmitmailbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <comment type="block">/* Process unlocked */</comment>
         <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Change CAN state */</comment>
    <switch>switch<condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
    <block>{<block_content>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX_RX0</name><operator>)</operator></expr>:</case>
          <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_RX0</name></expr>;</expr_stmt>
          <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX_RX1</name><operator>)</operator></expr>:</case>
          <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_RX1</name></expr>;</expr_stmt>
          <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX_RX0_RX1</name><operator>)</operator></expr>:</case>
          <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_RX0_RX1</name></expr>;</expr_stmt>
          <break>break;</break>
      <default>default:</default> <comment type="block">/* HAL_CAN_STATE_BUSY_TX */</comment>
          <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_READY</name></expr>;</expr_stmt>
          <break>break;</break>
    </block_content>}</block></switch>

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Return function status */</comment>
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Change CAN state */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_ERROR</name></expr>;</expr_stmt> 

    <comment type="block">/* Return function status */</comment>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initiates and transmits a CAN frame message.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CAN_Transmit_IT</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name><modifier>*</modifier></type> <name>hcan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type>  <name>transmitmailbox</name> <init>= <expr><name>CAN_TXSTATUS_NOMAILBOX</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_IDTYPE</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>IDE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_RTR</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>RTR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_DLC</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>DLC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TSR</name></name><operator>&amp;</operator><name>CAN_TSR_TME0</name><operator>)</operator> <operator>==</operator> <name>CAN_TSR_TME0</name><operator>)</operator> <operator>||</operator> \
     <operator>(</operator><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TSR</name></name><operator>&amp;</operator><name>CAN_TSR_TME1</name><operator>)</operator> <operator>==</operator> <name>CAN_TSR_TME1</name><operator>)</operator> <operator>||</operator> \
     <operator>(</operator><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TSR</name></name><operator>&amp;</operator><name>CAN_TSR_TME2</name><operator>)</operator> <operator>==</operator> <name>CAN_TSR_TME2</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Select one empty transmit mailbox */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TSR</name></name><operator>&amp;</operator><name>CAN_TSR_TME0</name><operator>)</operator> <operator>==</operator> <name>CAN_TSR_TME0</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>transmitmailbox</name> <operator>=</operator> <name>CAN_TXMAILBOX_0</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TSR</name></name><operator>&amp;</operator><name>CAN_TSR_TME1</name><operator>)</operator> <operator>==</operator> <name>CAN_TSR_TME1</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>transmitmailbox</name> <operator>=</operator> <name>CAN_TXMAILBOX_1</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>transmitmailbox</name> <operator>=</operator> <name>CAN_TXMAILBOX_2</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Set up the Id */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sTxMailBox</name><index>[<expr><name>transmitmailbox</name></expr>]</index></name><operator>.</operator><name>TIR</name> <operator>&amp;=</operator> <name>CAN_TI0R_TXRQ</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>IDE</name></name> <operator>==</operator> <name>CAN_ID_STD</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_STDID</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>StdId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sTxMailBox</name><index>[<expr><name>transmitmailbox</name></expr>]</index></name><operator>.</operator><name>TIR</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>StdId</name></name> <operator>&lt;&lt;</operator> <literal type="number">21U</literal><operator>)</operator> <operator>|</operator> \
                                                <name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>RTR</name></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_EXTID</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>ExtId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sTxMailBox</name><index>[<expr><name>transmitmailbox</name></expr>]</index></name><operator>.</operator><name>TIR</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>ExtId</name></name> <operator>&lt;&lt;</operator> <literal type="number">3U</literal><operator>)</operator> <operator>|</operator> \
                                                <name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>IDE</name></name> <operator>|</operator> \
                                                <name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>RTR</name></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <comment type="block">/* Set up the DLC */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>DLC</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x0000000F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sTxMailBox</name><index>[<expr><name>transmitmailbox</name></expr>]</index></name><operator>.</operator><name>TDTR</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xFFFFFFF0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sTxMailBox</name><index>[<expr><name>transmitmailbox</name></expr>]</index></name><operator>.</operator><name>TDTR</name> <operator>|=</operator> <name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>DLC</name></name></expr>;</expr_stmt>

    <comment type="block">/* Set up the data field */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sTxMailBox</name><index>[<expr><name>transmitmailbox</name></expr>]</index></name><operator>.</operator><name>TDLR</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">3U</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24U</literal><operator>)</operator> <operator>|</operator>
                                           <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator>
                                           <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>|</operator> 
                                           <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sTxMailBox</name><index>[<expr><name>transmitmailbox</name></expr>]</index></name><operator>.</operator><name>TDHR</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">7U</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24U</literal><operator>)</operator> <operator>|</operator>
                                           <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">6U</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator>
                                           <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">5U</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>|</operator>
                                           <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hcan</name><operator>-&gt;</operator><name>pTxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">4U</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Change CAN state */</comment>
    <switch>switch<condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
    <block>{<block_content>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_RX0</name><operator>)</operator></expr>:</case>
          <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX_RX0</name></expr>;</expr_stmt>
          <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_RX1</name><operator>)</operator></expr>:</case>
          <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX_RX1</name></expr>;</expr_stmt>
          <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_RX0_RX1</name><operator>)</operator></expr>:</case>
          <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX_RX0_RX1</name></expr>;</expr_stmt>
          <break>break;</break>
      <default>default:</default> <comment type="block">/* HAL_CAN_STATE_READY */</comment>
          <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX</name></expr>;</expr_stmt>
          <break>break;</break>
    </block_content>}</block></switch>

    <comment type="block">/* Set CAN error code to none */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_CAN_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Request transmission */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sTxMailBox</name><index>[<expr><name>transmitmailbox</name></expr>]</index></name><operator>.</operator><name>TIR</name> <operator>|=</operator> <name>CAN_TI0R_TXRQ</name></expr>;</expr_stmt>

    <comment type="block">/* Enable Error warning, Error passive, Bus-off,
       Last error and Error Interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_CAN_ENABLE_IT</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_EWG</name> <operator>|</operator>
                              <name>CAN_IT_EPV</name> <operator>|</operator>
                              <name>CAN_IT_BOF</name> <operator>|</operator>
                              <name>CAN_IT_LEC</name> <operator>|</operator>
                              <name>CAN_IT_ERR</name> <operator>|</operator>
                              <name>CAN_IT_TME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Change CAN state */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_ERROR</name></expr>;</expr_stmt> 

    <comment type="block">/* Return function status */</comment>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receives a correct CAN frame.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @param  FIFONumber FIFO Number value
  * @param  Timeout Specify Timeout value 
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CAN_Receive</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name><modifier>*</modifier></type> <name>hcan</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>FIFONumber</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CanRxMsgTypeDef</name><modifier>*</modifier></type> <name>pRxMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
 
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_FIFO</name><argument_list>(<argument><expr><name>FIFONumber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check if CAN state is not busy for RX FIFO0 */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>FIFONumber</name> <operator>==</operator> <name>CAN_FIFO0</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CAN_STATE_BUSY_RX0</name><operator>)</operator> <operator>||</operator>         \
                                    <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CAN_STATE_BUSY_TX_RX0</name><operator>)</operator> <operator>||</operator>      \
                                    <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CAN_STATE_BUSY_RX0_RX1</name><operator>)</operator> <operator>||</operator>     \
                                    <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CAN_STATE_BUSY_TX_RX0_RX1</name><operator>)</operator><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check if CAN state is not busy for RX FIFO1 */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>FIFONumber</name> <operator>==</operator> <name>CAN_FIFO1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CAN_STATE_BUSY_RX1</name><operator>)</operator> <operator>||</operator>         \
                                    <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CAN_STATE_BUSY_TX_RX1</name><operator>)</operator> <operator>||</operator>      \
                                    <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CAN_STATE_BUSY_RX0_RX1</name><operator>)</operator> <operator>||</operator>     \
                                    <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CAN_STATE_BUSY_TX_RX0_RX1</name><operator>)</operator><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change CAN state */</comment>
  <if_stmt><if>if <condition>(<expr><name>FIFONumber</name> <operator>==</operator> <name>CAN_FIFO0</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch<condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
    <block>{<block_content>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX_RX0</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_RX1</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_RX0_RX1</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX_RX1</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX_RX0_RX1</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default> <comment type="block">/* HAL_CAN_STATE_READY */</comment>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_RX0</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else <comment type="block">/* FIFONumber == CAN_FIFO1 */</comment>
  <block>{<block_content>
    <switch>switch<condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
    <block>{<block_content>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX_RX1</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_RX0</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_RX0_RX1</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX_RX0</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX_RX0_RX1</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default> <comment type="block">/* HAL_CAN_STATE_READY */</comment>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_RX1</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Get tick */</comment> 
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check pending message */</comment>
  <while>while<condition>(<expr><call><name>__HAL_CAN_MSG_PENDING</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>FIFONumber</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator><operator>||</operator><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_TIMEOUT</name></expr>;</expr_stmt>
        <comment type="block">/* Process unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Set RxMsg pointer */</comment>
  <if_stmt><if>if<condition>(<expr><name>FIFONumber</name> <operator>==</operator> <name>CAN_FIFO0</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>pRxMsg</name> <operator>=</operator> <name><name>hcan</name><operator>-&gt;</operator><name>pRxMsg</name></name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <comment type="block">/* FIFONumber == CAN_FIFO1 */</comment>
  <block>{<block_content>
    <expr_stmt><expr><name>pRxMsg</name> <operator>=</operator> <name><name>hcan</name><operator>-&gt;</operator><name>pRx1Msg</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Get the Id */</comment>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>IDE</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x04</literal> <operator>&amp;</operator> <name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RIR</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>IDE</name></name> <operator>==</operator> <name>CAN_ID_STD</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>StdId</name></name> <operator>=</operator> <literal type="number">0x000007FFU</literal> <operator>&amp;</operator> <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RIR</name> <operator>&gt;&gt;</operator> <literal type="number">21U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>ExtId</name></name> <operator>=</operator> <literal type="number">0x1FFFFFFFU</literal> <operator>&amp;</operator> <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RIR</name> <operator>&gt;&gt;</operator> <literal type="number">3U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>RTR</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x02</literal> <operator>&amp;</operator> <name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RIR</name></expr>;</expr_stmt>
  <comment type="block">/* Get the DLC */</comment>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>DLC</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x0F</literal> <operator>&amp;</operator> <name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDTR</name></expr>;</expr_stmt>
  <comment type="block">/* Get the FMI */</comment>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>FMI</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal> <operator>&amp;</operator> <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDTR</name> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  <comment type="block">/* Get the FIFONumber */</comment>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>FIFONumber</name></name> <operator>=</operator> <name>FIFONumber</name></expr>;</expr_stmt>
  <comment type="block">/* Get the data field */</comment>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal> <operator>&amp;</operator> <name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDLR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal> <operator>&amp;</operator> <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDLR</name> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal> <operator>&amp;</operator> <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDLR</name> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal> <operator>&amp;</operator> <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDLR</name> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal> <operator>&amp;</operator> <name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDHR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal> <operator>&amp;</operator> <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDHR</name> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal> <operator>&amp;</operator> <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDHR</name> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal> <operator>&amp;</operator> <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDHR</name> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Release the FIFO */</comment>
  <if_stmt><if>if<condition>(<expr><name>FIFONumber</name> <operator>==</operator> <name>CAN_FIFO0</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Release FIFO0 */</comment>
    <expr_stmt><expr><call><name>__HAL_CAN_FIFO_RELEASE</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_FIFO0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <comment type="block">/* FIFONumber == CAN_FIFO1 */</comment>
  <block>{<block_content>
    <comment type="block">/* Release FIFO1 */</comment>
    <expr_stmt><expr><call><name>__HAL_CAN_FIFO_RELEASE</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_FIFO1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Change CAN state */</comment>
  <if_stmt><if>if <condition>(<expr><name>FIFONumber</name> <operator>==</operator> <name>CAN_FIFO0</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch<condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
    <block>{<block_content>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX_RX0</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_RX0_RX1</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_RX1</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX_RX0_RX1</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX_RX1</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default> <comment type="block">/* HAL_CAN_STATE_BUSY_RX0 */</comment>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_READY</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else <comment type="block">/* FIFONumber == CAN_FIFO1 */</comment>
  <block>{<block_content>
    <switch>switch<condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
    <block>{<block_content>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX_RX1</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_RX0_RX1</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_RX0</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX_RX0_RX1</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX_RX0</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default> <comment type="block">/* HAL_CAN_STATE_BUSY_RX1 */</comment>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_READY</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receives a correct CAN frame.
  * @param  hcan       Pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @param  FIFONumber Specify the FIFO number    
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CAN_Receive_IT</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name><modifier>*</modifier></type> <name>hcan</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>FIFONumber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CAN_FIFO</name><argument_list>(<argument><expr><name>FIFONumber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check if CAN state is not busy for RX FIFO0 */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>FIFONumber</name> <operator>==</operator> <name>CAN_FIFO0</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CAN_STATE_BUSY_RX0</name><operator>)</operator> <operator>||</operator>         \
                                   <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CAN_STATE_BUSY_TX_RX0</name><operator>)</operator> <operator>||</operator>      \
                                   <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CAN_STATE_BUSY_RX0_RX1</name><operator>)</operator> <operator>||</operator>     \
                                   <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CAN_STATE_BUSY_TX_RX0_RX1</name><operator>)</operator><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check if CAN state is not busy for RX FIFO1 */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>FIFONumber</name> <operator>==</operator> <name>CAN_FIFO1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CAN_STATE_BUSY_RX1</name><operator>)</operator> <operator>||</operator>         \
                                   <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CAN_STATE_BUSY_TX_RX1</name><operator>)</operator> <operator>||</operator>      \
                                   <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CAN_STATE_BUSY_RX0_RX1</name><operator>)</operator> <operator>||</operator>     \
                                   <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CAN_STATE_BUSY_TX_RX0_RX1</name><operator>)</operator><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change CAN state */</comment>
  <if_stmt><if>if<condition>(<expr><name>FIFONumber</name> <operator>==</operator> <name>CAN_FIFO0</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch<condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
    <block>{<block_content>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX_RX0</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_RX1</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_RX0_RX1</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX_RX1</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX_RX0_RX1</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default> <comment type="block">/* HAL_CAN_STATE_READY */</comment>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_RX0</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else <comment type="block">/* FIFONumber == CAN_FIFO1 */</comment>
  <block>{<block_content>
    <switch>switch<condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
    <block>{<block_content>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX_RX1</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_RX0</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_RX0_RX1</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX_RX0</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX_RX0_RX1</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default> <comment type="block">/* HAL_CAN_STATE_READY */</comment>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_RX1</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Set CAN error code to none */</comment>
  <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_CAN_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Enable interrupts: */</comment>
  <comment type="block">/*  - Enable Error warning Interrupt */</comment>
  <comment type="block">/*  - Enable Error passive Interrupt */</comment>
  <comment type="block">/*  - Enable Bus-off Interrupt */</comment>
  <comment type="block">/*  - Enable Last error code Interrupt */</comment>
  <comment type="block">/*  - Enable Error Interrupt */</comment>
  <comment type="block">/*  - Enable Transmit mailbox empty Interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_CAN_ENABLE_IT</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_EWG</name> <operator>|</operator>
                            <name>CAN_IT_EPV</name> <operator>|</operator>
                            <name>CAN_IT_BOF</name> <operator>|</operator>
                            <name>CAN_IT_LEC</name> <operator>|</operator>
                            <name>CAN_IT_ERR</name> <operator>|</operator>
                            <name>CAN_IT_TME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
   <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>FIFONumber</name> <operator>==</operator> <name>CAN_FIFO0</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable FIFO 0 overrun and message pending Interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_CAN_ENABLE_IT</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_FOV0</name> <operator>|</operator> <name>CAN_IT_FMP0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Enable FIFO 1 overrun and message pending Interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_CAN_ENABLE_IT</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_FOV1</name> <operator>|</operator> <name>CAN_IT_FMP1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enters the Sleep (low power) mode.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CAN_Sleep</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name><modifier>*</modifier></type> <name>hcan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
   
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Change CAN state */</comment>
  <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY</name></expr>;</expr_stmt> 
    
  <comment type="block">/* Request Sleep mode */</comment>
   <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MCR</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MCR</name></name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>CAN_MCR_INRQ</name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>CAN_MCR_SLEEP</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Sleep mode status */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MSR</name></name> <operator>&amp;</operator> <operator>(</operator><name>CAN_MSR_SLAK</name><operator>|</operator><name>CAN_MSR_INAK</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>CAN_MSR_SLAK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Return function status */</comment>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Wait the acknowledge */</comment>
  <while>while<condition>(<expr><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MSR</name></name> <operator>&amp;</operator> <operator>(</operator><name>CAN_MSR_SLAK</name><operator>|</operator><name>CAN_MSR_INAK</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>CAN_MSR_SLAK</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call>  <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>CAN_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_TIMEOUT</name></expr>;</expr_stmt>
      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Change CAN state */</comment>
  <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Wakes up the CAN peripheral from sleep mode, after that the CAN peripheral
  *         is in the normal mode.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CAN_WakeUp</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name><modifier>*</modifier></type> <name>hcan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
    
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Change CAN state */</comment>
  <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY</name></expr>;</expr_stmt>  
 
  <comment type="block">/* Wake up request */</comment>
  <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MCR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>CAN_MCR_SLEEP</name></expr>;</expr_stmt>

  <comment type="block">/* Get tick */</comment> 
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Sleep mode status */</comment>
  <while>while<condition>(<expr><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MSR</name></name> <operator>&amp;</operator> <name>CAN_MSR_SLAK</name><operator>)</operator> <operator>==</operator> <name>CAN_MSR_SLAK</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call>  <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>CAN_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_CAN_STATE_TIMEOUT</name></expr>;</expr_stmt>
      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MSR</name></name> <operator>&amp;</operator> <name>CAN_MSR_SLAK</name><operator>)</operator> <operator>==</operator> <name>CAN_MSR_SLAK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <comment type="block">/* Return function status */</comment>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Change CAN state */</comment>
  <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_READY</name></expr>;</expr_stmt> 
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Handles CAN interrupt request  
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_CAN_IRQHandler</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name><modifier>*</modifier></type> <name>hcan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp1</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>tmp2</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>tmp3</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorcode</name> <init>= <expr><name>HAL_CAN_ERROR_NONE</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check Overrun flag for FIFO0 */</comment>
  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__HAL_CAN_GET_FLAG</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_FLAG_FOV0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__HAL_CAN_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_FOV0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>tmp1</name> <operator>&amp;&amp;</operator> <name>tmp2</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set CAN error code to FOV0 error */</comment>
    <expr_stmt><expr><name>errorcode</name> <operator>|=</operator> <name>HAL_CAN_ERROR_FOV0</name></expr>;</expr_stmt>

    <comment type="block">/* Clear FIFO0 Overrun Flag */</comment>
    <expr_stmt><expr><call><name>__HAL_CAN_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_FLAG_FOV0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Check Overrun flag for FIFO1 */</comment>
  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__HAL_CAN_GET_FLAG</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_FLAG_FOV1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__HAL_CAN_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_FOV1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>tmp1</name> <operator>&amp;&amp;</operator> <name>tmp2</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set CAN error code to FOV1 error */</comment>
    <expr_stmt><expr><name>errorcode</name> <operator>|=</operator> <name>HAL_CAN_ERROR_FOV1</name></expr>;</expr_stmt>

    <comment type="block">/* Clear FIFO1 Overrun Flag */</comment>
    <expr_stmt><expr><call><name>__HAL_CAN_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_FLAG_FOV1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check End of transmission flag */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_CAN_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_TME</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__HAL_CAN_TRANSMIT_STATUS</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_TXMAILBOX_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__HAL_CAN_TRANSMIT_STATUS</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_TXMAILBOX_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>__HAL_CAN_TRANSMIT_STATUS</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_TXMAILBOX_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>tmp1</name> <operator>||</operator> <name>tmp2</name> <operator>||</operator> <name>tmp3</name></expr>)</condition>  
    <block>{<block_content>
      <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__HAL_CAN_GET_FLAG</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_FLAG_TXOK0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__HAL_CAN_GET_FLAG</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_FLAG_TXOK1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>__HAL_CAN_GET_FLAG</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_FLAG_TXOK2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Check Transmit success */</comment>
      <if_stmt><if>if<condition>(<expr><name>tmp1</name> <operator>||</operator> <name>tmp2</name> <operator>||</operator> <name>tmp3</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Call transmit function */</comment>
        <expr_stmt><expr><call><name>CAN_Transmit_IT</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else <comment type="block">/* Transmit failure */</comment>
      <block>{<block_content>
        <comment type="block">/* Set CAN error code to TXFAIL error */</comment>
        <expr_stmt><expr><name>errorcode</name> <operator>|=</operator> <name>HAL_CAN_ERROR_TXFAIL</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <comment type="block">/* Clear transmission status flags (RQCPx and TXOKx) */</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TSR</name></name></expr></argument>, <argument><expr><name>CAN_TSR_RQCP0</name>  <operator>|</operator> <name>CAN_TSR_RQCP1</name>  <operator>|</operator> <name>CAN_TSR_RQCP2</name> <operator>|</operator> \
                                   <name>CAN_FLAG_TXOK0</name> <operator>|</operator> <name>CAN_FLAG_TXOK1</name> <operator>|</operator> <name>CAN_FLAG_TXOK2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__HAL_CAN_MSG_PENDING</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_FIFO0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__HAL_CAN_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_FMP0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Check End of reception flag for FIFO0 */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>tmp1</name> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>tmp2</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Call receive function */</comment>
    <expr_stmt><expr><call><name>CAN_Receive_IT</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_FIFO0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__HAL_CAN_MSG_PENDING</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_FIFO1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__HAL_CAN_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_FMP1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Check End of reception flag for FIFO1 */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>tmp1</name> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>tmp2</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Call receive function */</comment>
    <expr_stmt><expr><call><name>CAN_Receive_IT</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_FIFO1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Set error code in handle */</comment>
  <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorcode</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__HAL_CAN_GET_FLAG</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_FLAG_EWG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__HAL_CAN_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_EWG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>__HAL_CAN_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Check Error Warning Flag */</comment>
  <if_stmt><if>if<condition>(<expr><name>tmp1</name> <operator>&amp;&amp;</operator> <name>tmp2</name> <operator>&amp;&amp;</operator> <name>tmp3</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set CAN error code to EWG error */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CAN_ERROR_EWG</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__HAL_CAN_GET_FLAG</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_FLAG_EPV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__HAL_CAN_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_EPV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>__HAL_CAN_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <comment type="block">/* Check Error Passive Flag */</comment>
  <if_stmt><if>if<condition>(<expr><name>tmp1</name> <operator>&amp;&amp;</operator> <name>tmp2</name> <operator>&amp;&amp;</operator> <name>tmp3</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set CAN error code to EPV error */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CAN_ERROR_EPV</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__HAL_CAN_GET_FLAG</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_FLAG_BOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__HAL_CAN_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_BOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>__HAL_CAN_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <comment type="block">/* Check Bus-Off Flag */</comment>
  <if_stmt><if>if<condition>(<expr><name>tmp1</name> <operator>&amp;&amp;</operator> <name>tmp2</name> <operator>&amp;&amp;</operator> <name>tmp3</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set CAN error code to BOF error */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CAN_ERROR_BOF</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ESR</name></name></expr></argument>, <argument><expr><name>CAN_ESR_LEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__HAL_CAN_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_LEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>__HAL_CAN_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Check Last error code Flag */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>!</operator><name>tmp1</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>tmp2</name> <operator>&amp;&amp;</operator> <name>tmp3</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ESR</name></name><operator>)</operator> <operator>&amp;</operator> <name>CAN_ESR_LEC</name></expr>;</expr_stmt>
    <switch>switch<condition>(<expr><name>tmp1</name></expr>)</condition>
    <block>{<block_content>
      <case>case<expr><operator>(</operator><name>CAN_ESR_LEC_0</name><operator>)</operator></expr>:</case>
          <comment type="block">/* Set CAN error code to STF error */</comment>
          <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CAN_ERROR_STF</name></expr>;</expr_stmt>
          <break>break;</break>
      <case>case<expr><operator>(</operator><name>CAN_ESR_LEC_1</name><operator>)</operator></expr>:</case>
          <comment type="block">/* Set CAN error code to FOR error */</comment>
          <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CAN_ERROR_FOR</name></expr>;</expr_stmt>
          <break>break;</break>
      <case>case<expr><operator>(</operator><name>CAN_ESR_LEC_1</name> <operator>|</operator> <name>CAN_ESR_LEC_0</name><operator>)</operator></expr>:</case>
          <comment type="block">/* Set CAN error code to ACK error */</comment>
          <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CAN_ERROR_ACK</name></expr>;</expr_stmt>
          <break>break;</break>
      <case>case<expr><operator>(</operator><name>CAN_ESR_LEC_2</name><operator>)</operator></expr>:</case>
          <comment type="block">/* Set CAN error code to BR error */</comment>
          <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CAN_ERROR_BR</name></expr>;</expr_stmt>
          <break>break;</break>
      <case>case<expr><operator>(</operator><name>CAN_ESR_LEC_2</name> <operator>|</operator> <name>CAN_ESR_LEC_0</name><operator>)</operator></expr>:</case>
          <comment type="block">/* Set CAN error code to BD error */</comment>
          <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CAN_ERROR_BD</name></expr>;</expr_stmt>
          <break>break;</break>
      <case>case<expr><operator>(</operator><name>CAN_ESR_LEC_2</name> <operator>|</operator> <name>CAN_ESR_LEC_1</name><operator>)</operator></expr>:</case>
          <comment type="block">/* Set CAN error code to CRC error */</comment>
          <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CAN_ERROR_CRC</name></expr>;</expr_stmt>
          <break>break;</break>
      <default>default:</default>
          <break>break;</break>
    </block_content>}</block></switch>

    <comment type="block">/* Clear Last error code Flag */</comment> 
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ESR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CAN_ESR_LEC</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Call the Error call Back in case of Errors */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>!=</operator> <name>HAL_CAN_ERROR_NONE</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear ERRI Flag */</comment> 
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MSR</name></name> <operator>=</operator> <name>CAN_MSR_ERRI</name></expr>;</expr_stmt> 
    <comment type="block">/* Set the CAN state ready to be able to start again the process */</comment>
    <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Disable interrupts: */</comment>
    <comment type="block">/*  - Disable Error warning Interrupt */</comment>
    <comment type="block">/*  - Disable Error passive Interrupt */</comment>
    <comment type="block">/*  - Disable Bus-off Interrupt */</comment>
    <comment type="block">/*  - Disable Last error code Interrupt */</comment>
    <comment type="block">/*  - Disable Error Interrupt */</comment>
    <comment type="block">/*  - Disable FIFO 0 message pending Interrupt */</comment>
    <comment type="block">/*  - Disable FIFO 0 Overrun Interrupt */</comment>
    <comment type="block">/*  - Disable FIFO 1 message pending Interrupt */</comment>
    <comment type="block">/*  - Disable FIFO 1 Overrun Interrupt */</comment>
    <comment type="block">/*  - Disable Transmit mailbox empty Interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_CAN_DISABLE_IT</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_EWG</name> <operator>|</operator>
                               <name>CAN_IT_EPV</name> <operator>|</operator>
                               <name>CAN_IT_BOF</name> <operator>|</operator>
                               <name>CAN_IT_LEC</name> <operator>|</operator>
                               <name>CAN_IT_ERR</name> <operator>|</operator>
                               <name>CAN_IT_FMP0</name><operator>|</operator>
                               <name>CAN_IT_FOV0</name><operator>|</operator>
                               <name>CAN_IT_FMP1</name><operator>|</operator>
                               <name>CAN_IT_FOV1</name><operator>|</operator>
                               <name>CAN_IT_TME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Call Error callback function */</comment>
    <expr_stmt><expr><call><name>HAL_CAN_ErrorCallback</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Transmission  complete callback in non blocking mode 
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_CAN_TxCpltCallback</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name><modifier>*</modifier></type> <name>hcan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Transmission  complete callback in non blocking mode 
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_CAN_RxCpltCallback</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name><modifier>*</modifier></type> <name>hcan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Error CAN callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_CAN_ErrorCallback</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name> <modifier>*</modifier></type><name>hcan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup CAN_Exported_Functions_Group3 Peripheral State and Error functions
  *  @brief   CAN Peripheral State functions 
  *
@verbatim   
  ==============================================================================
            ##### Peripheral State and Error functions #####
  ==============================================================================
    [..]
    This subsection provides functions allowing to :
      (+) Check the CAN state.
      (+) Check CAN Errors detected during interrupt process
         
@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  return the CAN state
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */</comment>
<function><type><name>HAL_CAN_StateTypeDef</name></type> <name>HAL_CAN_GetState</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name><modifier>*</modifier></type> <name>hcan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Return CAN state */</comment>
  <return>return <expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the CAN error code
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_CAN_GetError</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name> <modifier>*</modifier></type><name>hcan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hcan</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<comment type="block" format="doxygen">/**
  * @brief  Initiates and transmits a CAN frame message.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CAN_Transmit_IT</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name><modifier>*</modifier></type> <name>hcan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable Transmit mailbox empty Interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_CAN_DISABLE_IT</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_TME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CAN_STATE_BUSY_TX</name></expr>)</condition>
  <block>{<block_content>   
    <comment type="block">/* Disable Error warning, Error passive, Bus-off, Last error code
       and Error Interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_CAN_DISABLE_IT</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_EWG</name> <operator>|</operator>
                               <name>CAN_IT_EPV</name> <operator>|</operator>
                               <name>CAN_IT_BOF</name> <operator>|</operator>
                               <name>CAN_IT_LEC</name> <operator>|</operator>
                               <name>CAN_IT_ERR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Change CAN state */</comment>
  <switch>switch<condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX_RX0</name><operator>)</operator></expr>:</case>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_RX0</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX_RX1</name><operator>)</operator></expr>:</case>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_RX1</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX_RX0_RX1</name><operator>)</operator></expr>:</case>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_RX0_RX1</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default> <comment type="block">/* HAL_CAN_STATE_BUSY_TX */</comment>
      <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_READY</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <comment type="block">/* Transmission complete callback */</comment> 
  <expr_stmt><expr><call><name>HAL_CAN_TxCpltCallback</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receives a correct CAN frame.
  * @param  hcan       Pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @param  FIFONumber Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CAN_Receive_IT</name><parameter_list>(<parameter><decl><type><name>CAN_HandleTypeDef</name><modifier>*</modifier></type> <name>hcan</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>FIFONumber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp1</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CanRxMsgTypeDef</name><modifier>*</modifier></type> <name>pRxMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Set RxMsg pointer */</comment>
  <if_stmt><if>if<condition>(<expr><name>FIFONumber</name> <operator>==</operator> <name>CAN_FIFO0</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>pRxMsg</name> <operator>=</operator> <name><name>hcan</name><operator>-&gt;</operator><name>pRxMsg</name></name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <comment type="block">/* FIFONumber == CAN_FIFO1 */</comment>
  <block>{<block_content>
    <expr_stmt><expr><name>pRxMsg</name> <operator>=</operator> <name><name>hcan</name><operator>-&gt;</operator><name>pRx1Msg</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Get the Id */</comment>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>IDE</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x04</literal> <operator>&amp;</operator> <name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RIR</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>IDE</name></name> <operator>==</operator> <name>CAN_ID_STD</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>StdId</name></name> <operator>=</operator> <literal type="number">0x000007FFU</literal> <operator>&amp;</operator> <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RIR</name> <operator>&gt;&gt;</operator> <literal type="number">21U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>ExtId</name></name> <operator>=</operator> <literal type="number">0x1FFFFFFFU</literal> <operator>&amp;</operator> <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RIR</name> <operator>&gt;&gt;</operator> <literal type="number">3U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>RTR</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x02</literal> <operator>&amp;</operator> <name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RIR</name></expr>;</expr_stmt>
  <comment type="block">/* Get the DLC */</comment>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>DLC</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x0F</literal> <operator>&amp;</operator> <name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDTR</name></expr>;</expr_stmt>
  <comment type="block">/* Get the FIFONumber */</comment>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>FIFONumber</name></name> <operator>=</operator> <name>FIFONumber</name></expr>;</expr_stmt>
  <comment type="block">/* Get the FMI */</comment>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>FMI</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal> <operator>&amp;</operator> <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDTR</name> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  <comment type="block">/* Get the data field */</comment>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal> <operator>&amp;</operator> <name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDLR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal> <operator>&amp;</operator> <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDLR</name> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal> <operator>&amp;</operator> <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDLR</name> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal> <operator>&amp;</operator> <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDLR</name> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal> <operator>&amp;</operator> <name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDHR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal> <operator>&amp;</operator> <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDHR</name> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal> <operator>&amp;</operator> <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDHR</name> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRxMsg</name><operator>-&gt;</operator><name>Data</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal> <operator>&amp;</operator> <operator>(</operator><name><name>hcan</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>sFIFOMailBox</name><index>[<expr><name>FIFONumber</name></expr>]</index></name><operator>.</operator><name>RDHR</name> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt>
  <comment type="block">/* Release the FIFO */</comment>
  <comment type="block">/* Release FIFO0 */</comment>
  <if_stmt><if>if <condition>(<expr><name>FIFONumber</name> <operator>==</operator> <name>CAN_FIFO0</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_CAN_FIFO_RELEASE</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_FIFO0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Disable FIFO 0 overrun and message pending Interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_CAN_DISABLE_IT</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_FOV0</name> <operator>|</operator> <name>CAN_IT_FMP0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Release FIFO1 */</comment>
  <else>else <comment type="block">/* FIFONumber == CAN_FIFO1 */</comment>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_CAN_FIFO_RELEASE</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_FIFO1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Disable FIFO 1 overrun and message pending Interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_CAN_DISABLE_IT</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_FOV1</name> <operator>|</operator> <name>CAN_IT_FMP1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>hcan</name><operator>-&gt;</operator><name>State</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>tmp1</name> <operator>==</operator> <name>HAL_CAN_STATE_BUSY_RX0</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tmp1</name> <operator>==</operator> <name>HAL_CAN_STATE_BUSY_RX1</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>   
    <comment type="block">/* Disable Error warning, Error passive, Bus-off, Last error code
       and Error Interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_CAN_DISABLE_IT</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>, <argument><expr><name>CAN_IT_EWG</name> <operator>|</operator>
                               <name>CAN_IT_EPV</name> <operator>|</operator>
                               <name>CAN_IT_BOF</name> <operator>|</operator>
                               <name>CAN_IT_LEC</name> <operator>|</operator>
                               <name>CAN_IT_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Change CAN state */</comment>
  <if_stmt><if>if <condition>(<expr><name>FIFONumber</name> <operator>==</operator> <name>CAN_FIFO0</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch<condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
    <block>{<block_content>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX_RX0</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_RX0_RX1</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_RX1</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX_RX0_RX1</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX_RX1</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default> <comment type="block">/* HAL_CAN_STATE_BUSY_RX0 */</comment>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_READY</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else <comment type="block">/* FIFONumber == CAN_FIFO1 */</comment>
  <block>{<block_content>
    <switch>switch<condition>(<expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
    <block>{<block_content>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX_RX1</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_RX0_RX1</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_RX0</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case<expr><operator>(</operator><name>HAL_CAN_STATE_BUSY_TX_RX0_RX1</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_BUSY_TX_RX0</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default> <comment type="block">/* HAL_CAN_STATE_BUSY_RX1 */</comment>
        <expr_stmt><expr><name><name>hcan</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CAN_STATE_READY</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Receive complete callback */</comment> 
  <expr_stmt><expr><call><name>HAL_CAN_RxCpltCallback</name><argument_list>(<argument><expr><name>hcan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx || STM32F427xx || STM32F437xx ||\
          STM32F429xx || STM32F439xx || STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx ||\
          STM32F412Vx || STM32F412Rx || STM32F412Cx || STM32F413xx || STM32F423xx */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_CAN_LEGACY_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
