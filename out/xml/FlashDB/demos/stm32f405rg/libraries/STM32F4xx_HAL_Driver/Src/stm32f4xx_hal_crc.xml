<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_crc.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_crc.c
  * @author  MCD Application Team
  * @brief   CRC HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the Cyclic Redundancy Check (CRC) peripheral:
  *           + Initialization and de-initialization functions
  *           + Peripheral Control functions
  *           + Peripheral State functions
  *
  @verbatim
 ===============================================================================
                     ##### How to use this driver #####
 ===============================================================================
    [..]
         (+) Enable CRC AHB clock using __HAL_RCC_CRC_CLK_ENABLE();
         (+) Initialize CRC calculator
             (++) specify generating polynomial (peripheral default or non-default one)
             (++) specify initialization value (peripheral default or non-default one)
             (++) specify input data format
             (++) specify input or output data inversion mode if any
         (+) Use HAL_CRC_Accumulate() function to compute the CRC value of the
             input data buffer starting with the previously computed CRC as
             initialization value
         (+) Use HAL_CRC_Calculate() function to compute the CRC value of the
             input data buffer starting with the defined initialization value
             (default or non-default) to initiate CRC calculation

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup CRC CRC
  * @brief CRC HAL module driver.
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_CRC_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>

<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup CRC_Exported_Functions CRC Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup CRC_Exported_Functions_Group1 Initialization and de-initialization functions
 *  @brief    Initialization and Configuration functions.
 *
@verbatim
 ===============================================================================
            ##### Initialization and de-initialization functions #####
 ===============================================================================
    [..]  This section provides functions allowing to:
      (+) Initialize the CRC according to the specified parameters
          in the CRC_InitTypeDef and create the associated handle
      (+) DeInitialize the CRC peripheral
      (+) Initialize the CRC MSP (MCU Specific Package)
      (+) DeInitialize the CRC MSP

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initialize the CRC according to the specified
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CRC_Init</name><parameter_list>(<parameter><decl><type><name>CRC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcrc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the CRC handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>hcrc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CRC_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hcrc</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hcrc</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRC_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hcrc</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>
    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name>HAL_CRC_MspInit</name><argument_list>(<argument><expr><name>hcrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>hcrc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Change CRC peripheral state */</comment>
  <expr_stmt><expr><name><name>hcrc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CRC_DeInit</name><parameter_list>(<parameter><decl><type><name>CRC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcrc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the CRC handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>hcrc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CRC_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hcrc</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the CRC peripheral state */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hcrc</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRC_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Change CRC peripheral state */</comment>
  <expr_stmt><expr><name><name>hcrc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Reset CRC calculation unit */</comment>
  <expr_stmt><expr><call><name>__HAL_CRC_DR_RESET</name><argument_list>(<argument><expr><name>hcrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Reset IDR register content */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hcrc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IDR</name></name></expr></argument>, <argument><expr><name>CRC_IDR_IDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name>HAL_CRC_MspDeInit</name><argument_list>(<argument><expr><name>hcrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change CRC peripheral state */</comment>
  <expr_stmt><expr><name><name>hcrc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRC_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the CRC MSP.
  * @param  hcrc CRC handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_CRC_MspInit</name><parameter_list>(<parameter><decl><type><name>CRC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcrc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hcrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CRC_MspInit can be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitialize the CRC MSP.
  * @param  hcrc CRC handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_CRC_MspDeInit</name><parameter_list>(<parameter><decl><type><name>CRC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcrc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hcrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CRC_MspDeInit can be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup CRC_Exported_Functions_Group2 Peripheral Control functions
 *  @brief    management functions.
 *
@verbatim
 ===============================================================================
                      ##### Peripheral Control functions #####
 ===============================================================================
    [..]  This section provides functions allowing to:
      (+) compute the 32-bit CRC value of a 32-bit data buffer
          using combination of the previous CRC value and the new one.

       [..]  or

      (+) compute the 32-bit CRC value of a 32-bit data buffer
          independently of the previous CRC value.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Compute the 32-bit CRC value of a 32-bit data buffer
  *         starting with the previously computed CRC as initialization value.
  * @param  hcrc CRC handle
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_CRC_Accumulate</name><parameter_list>(<parameter><decl><type><name>CRC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcrc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name><name>pBuffer</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BufferLength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>index</name></decl>;</decl_stmt>      <comment type="block">/* CRC input data buffer index */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>temp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* CRC output (read from hcrc-&gt;Instance-&gt;DR register) */</comment>

  <comment type="block">/* Change CRC peripheral state */</comment>
  <expr_stmt><expr><name><name>hcrc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Enter Data to the CRC calculator */</comment>
  <for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>BufferLength</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcrc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <name><name>pBuffer</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>hcrc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</expr_stmt>

  <comment type="block">/* Change CRC peripheral state */</comment>
  <expr_stmt><expr><name><name>hcrc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Return the CRC computed value */</comment>
  <return>return <expr><name>temp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Compute the 32-bit CRC value of a 32-bit data buffer
  *         starting with hcrc-&gt;Instance-&gt;INIT as initialization value.
  * @param  hcrc CRC handle
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_CRC_Calculate</name><parameter_list>(<parameter><decl><type><name>CRC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcrc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name><name>pBuffer</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BufferLength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>index</name></decl>;</decl_stmt>      <comment type="block">/* CRC input data buffer index */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>temp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* CRC output (read from hcrc-&gt;Instance-&gt;DR register) */</comment>

  <comment type="block">/* Change CRC peripheral state */</comment>
  <expr_stmt><expr><name><name>hcrc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Reset CRC Calculation Unit (hcrc-&gt;Instance-&gt;INIT is
  *  written in hcrc-&gt;Instance-&gt;DR) */</comment>
  <expr_stmt><expr><call><name>__HAL_CRC_DR_RESET</name><argument_list>(<argument><expr><name>hcrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enter 32-bit input data to the CRC calculator */</comment>
  <for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>BufferLength</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcrc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <name><name>pBuffer</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>hcrc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</expr_stmt>

  <comment type="block">/* Change CRC peripheral state */</comment>
  <expr_stmt><expr><name><name>hcrc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Return the CRC computed value */</comment>
  <return>return <expr><name>temp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup CRC_Exported_Functions_Group3 Peripheral State functions
 *  @brief    Peripheral State functions.
 *
@verbatim
 ===============================================================================
                      ##### Peripheral State functions #####
 ===============================================================================
    [..]
    This subsection permits to get in run-time the status of the peripheral.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Return the CRC handle state.
  * @param  hcrc CRC handle
  * @retval HAL state
  */</comment>
<function><type><name>HAL_CRC_StateTypeDef</name></type> <name>HAL_CRC_GetState</name><parameter_list>(<parameter><decl><type><name>CRC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcrc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Return CRC handle state */</comment>
  <return>return <expr><name><name>hcrc</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_CRC_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
