<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc_ex.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_rtc_ex.c
  * @author  MCD Application Team
  * @brief   RTC HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the Real Time Clock (RTC) Extension peripheral:
  *           + RTC Time Stamp functions
  *           + RTC Tamper functions
  *           + RTC Wake-up functions
  *           + Extension Control functions
  *           + Extension RTC features functions
  *
  @verbatim
  ==============================================================================
                  ##### How to use this driver #####
  ==============================================================================
  [..]
    (+) Enable the RTC domain access.
    (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour
        format using the HAL_RTC_Init() function.

  *** RTC Wake-up configuration ***
  ================================
  [..]
    (+) To configure the RTC Wake-up Clock source and Counter use the HAL_RTCEx_SetWakeUpTimer()
        function. You can also configure the RTC Wake-up timer in interrupt mode
        using the HAL_RTCEx_SetWakeUpTimer_IT() function.
    (+) To read the RTC Wake-up Counter register, use the HAL_RTCEx_GetWakeUpTimer()
        function.

  *** TimeStamp configuration ***
  ===============================
  [..]
    (+) Configure the RTC_AFx trigger and enable the RTC TimeStamp using the
        HAL_RTCEx_SetTimeStamp() function. You can also configure the RTC TimeStamp with
        interrupt mode using the HAL_RTCEx_SetTimeStamp_IT() function.
    (+) To read the RTC TimeStamp Time and Date register, use the HAL_RTCEx_GetTimeStamp()
        function.
    (+) The TIMESTAMP alternate function can be mapped either to RTC_AF1 (PC13)
        or RTC_AF2 (PI8 or PA0 only for STM32F446xx devices) depending on the value of TSINSEL bit in
        RTC_TAFCR register. The corresponding pin is also selected by HAL_RTCEx_SetTimeStamp()
        or HAL_RTCEx_SetTimeStamp_IT() function.

  *** Tamper configuration ***
  ============================
  [..]
    (+) Enable the RTC Tamper and configure the Tamper filter count, trigger Edge
        or Level according to the Tamper filter (if equal to 0 Edge else Level)
        value, sampling frequency, precharge or discharge and Pull-UP using the
        HAL_RTCEx_SetTamper() function. You can configure RTC Tamper in interrupt
        mode using HAL_RTCEx_SetTamper_IT() function.
    (+) The TAMPER1 alternate function can be mapped either to RTC_AF1 (PC13)
        or RTC_AF2 (PI8 or PA0 only for STM32F446xx devices) depending on the value of TAMP1INSEL bit in
        RTC_TAFCR register. The corresponding pin is also selected by HAL_RTCEx_SetTamper()
        or HAL_RTCEx_SetTamper_IT() function.

  *** Backup Data Registers configuration ***
  ===========================================
  [..]
    (+) To write to the RTC Backup Data registers, use the HAL_RTCEx_BKUPWrite()
        function.
    (+) To read the RTC Backup Data registers, use the HAL_RTCEx_BKUPRead()
        function.

   @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RTCEx RTCEx
  * @brief RTC HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_RTC_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup RTCEx_Exported_Functions RTCEx Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RTCEx_Exported_Functions_Group1 RTC TimeStamp and Tamper functions
 *  @brief   RTC TimeStamp and Tamper functions
 *
@verbatim
 ===============================================================================
                 ##### RTC TimeStamp and Tamper functions #####
 ===============================================================================

 [..] This section provides functions allowing to configure TimeStamp feature

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Sets TimeStamp.
  * @note   This API must be called before enabling the TimeStamp feature.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  TimeStampEdge Specifies the pin edge on which the TimeStamp is
  *         activated.
  *          This parameter can be one of the following values:
  *             @arg RTC_TIMESTAMPEDGE_RISING: the Time stamp event occurs on the
  *                                        rising edge of the related pin.
  *             @arg RTC_TIMESTAMPEDGE_FALLING: the Time stamp event occurs on the
  *                                         falling edge of the related pin.
  * @param  RTC_TimeStampPin specifies the RTC TimeStamp Pin.
  *          This parameter can be one of the following values:
  *             @arg RTC_TIMESTAMPPIN_DEFAULT: PC13 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8/PA0 is selected as RTC TimeStamp Pin.
  *             (not applicable in the case of STM32F412xx, STM32F413xx and STM32F423xx devices)
  *             (PI8 for all STM32 devices except for STM32F446xx devices the PA0 is used)
  *             @arg RTC_TIMESTAMPPIN_PA0: PA0 is selected as RTC TimeStamp Pin only for STM32F446xx devices
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_SetTimeStamp</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>TimeStampEdge</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>RTC_TimeStampPin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIMESTAMP_EDGE</name><argument_list>(<argument><expr><name>TimeStampEdge</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TIMESTAMP_PIN</name><argument_list>(<argument><expr><name>RTC_TimeStampPin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Get the RTC_CR register and clear the bits to be configured */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><operator>(</operator><name>RTC_CR_TSEDGE</name> <operator>|</operator> <name>RTC_CR_TSE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmpreg</name><operator>|=</operator> <name>TimeStampEdge</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TAFCR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><name>RTC_TAFCR_TSINSEL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TAFCR</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>RTC_TimeStampPin</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Configure the Time Stamp TSEDGE and Enable bits */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>tmpreg</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>__HAL_RTC_TIMESTAMP_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sets TimeStamp with Interrupt.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @note   This API must be called before enabling the TimeStamp feature.
  * @param  TimeStampEdge Specifies the pin edge on which the TimeStamp is
  *         activated.
  *          This parameter can be one of the following values:
  *             @arg RTC_TIMESTAMPEDGE_RISING: the Time stamp event occurs on the
  *                                        rising edge of the related pin.
  *             @arg RTC_TIMESTAMPEDGE_FALLING: the Time stamp event occurs on the
  *                                         falling edge of the related pin.
  * @param  RTC_TimeStampPin Specifies the RTC TimeStamp Pin.
  *          This parameter can be one of the following values:
  *             @arg RTC_TIMESTAMPPIN_DEFAULT: PC13 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin. (not applicable in the case of STM32F446xx, STM32F412xx, STM32F413xx and STM32F423xx devices)
  *             @arg RTC_TIMESTAMPPIN_PA0: PA0 is selected as RTC TimeStamp Pin only for STM32F446xx devices
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_SetTimeStamp_IT</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>TimeStampEdge</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>RTC_TimeStampPin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIMESTAMP_EDGE</name><argument_list>(<argument><expr><name>TimeStampEdge</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TIMESTAMP_PIN</name><argument_list>(<argument><expr><name>RTC_TimeStampPin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Get the RTC_CR register and clear the bits to be configured */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><operator>(</operator><name>RTC_CR_TSEDGE</name> <operator>|</operator> <name>RTC_CR_TSE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmpreg</name> <operator>|=</operator> <name>TimeStampEdge</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Configure the Time Stamp TSEDGE and Enable bits */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>tmpreg</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TAFCR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><name>RTC_TAFCR_TSINSEL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TAFCR</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>RTC_TimeStampPin</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Clear RTC Timestamp flag */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_TIMESTAMP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_TSF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>__HAL_RTC_TIMESTAMP_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable IT timestamp */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_TIMESTAMP_ENABLE_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>,<argument><expr><name>RTC_IT_TS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* RTC timestamp Interrupt Configuration: EXTI configuration */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>EXTI</name><operator>-&gt;</operator><name>RTSR</name></name> <operator>|=</operator> <name>RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT</name></expr>;</expr_stmt>

  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Deactivates TimeStamp.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_DeactivateTimeStamp</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* In case of interrupt mode is used, the interrupt source must disabled */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_TIMESTAMP_DISABLE_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_IT_TS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the RTC_CR register and clear the bits to be configured */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><operator>(</operator><name>RTC_CR_TSEDGE</name> <operator>|</operator> <name>RTC_CR_TSE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Configure the Time Stamp TSEDGE and Enable bits */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>tmpreg</name></expr>;</expr_stmt>

  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Gets the RTC TimeStamp value.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  sTimeStamp Pointer to Time structure
  * @param  sTimeStampDate Pointer to Date structure
  * @param  Format specifies the format of the entered parameters.
  *          This parameter can be one of the following values:
  *             RTC_FORMAT_BIN: Binary data format
  *             RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_GetTimeStamp</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>RTC_TimeTypeDef</name><modifier>*</modifier></type> <name>sTimeStamp</name></decl></parameter>, <parameter><decl><type><name>RTC_DateTypeDef</name><modifier>*</modifier></type> <name>sTimeStampDate</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmptime</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>tmpdate</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_FORMAT</name><argument_list>(<argument><expr><name>Format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the TimeStamp time and date registers values */</comment>
  <expr_stmt><expr><name>tmptime</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TSTR</name></name> <operator>&amp;</operator> <name>RTC_TR_RESERVED_MASK</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmpdate</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TSDR</name></name> <operator>&amp;</operator> <name>RTC_DR_RESERVED_MASK</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Fill the Time structure fields with the read parameters */</comment>
  <expr_stmt><expr><name><name>sTimeStamp</name><operator>-&gt;</operator><name>Hours</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmptime</name> <operator>&amp;</operator> <operator>(</operator><name>RTC_TR_HT</name> <operator>|</operator> <name>RTC_TR_HU</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sTimeStamp</name><operator>-&gt;</operator><name>Minutes</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmptime</name> <operator>&amp;</operator> <operator>(</operator><name>RTC_TR_MNT</name> <operator>|</operator> <name>RTC_TR_MNU</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sTimeStamp</name><operator>-&gt;</operator><name>Seconds</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>tmptime</name> <operator>&amp;</operator> <operator>(</operator><name>RTC_TR_ST</name> <operator>|</operator> <name>RTC_TR_SU</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sTimeStamp</name><operator>-&gt;</operator><name>TimeFormat</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmptime</name> <operator>&amp;</operator> <operator>(</operator><name>RTC_TR_PM</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sTimeStamp</name><operator>-&gt;</operator><name>SubSeconds</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TSSSR</name></name></expr>;</expr_stmt>

  <comment type="block">/* Fill the Date structure fields with the read parameters */</comment>
  <expr_stmt><expr><name><name>sTimeStampDate</name><operator>-&gt;</operator><name>Year</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sTimeStampDate</name><operator>-&gt;</operator><name>Month</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmpdate</name> <operator>&amp;</operator> <operator>(</operator><name>RTC_DR_MT</name> <operator>|</operator> <name>RTC_DR_MU</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sTimeStampDate</name><operator>-&gt;</operator><name>Date</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>tmpdate</name> <operator>&amp;</operator> <operator>(</operator><name>RTC_DR_DT</name> <operator>|</operator> <name>RTC_DR_DU</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sTimeStampDate</name><operator>-&gt;</operator><name>WeekDay</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmpdate</name> <operator>&amp;</operator> <operator>(</operator><name>RTC_DR_WDU</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">13U</literal><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Check the input parameters format */</comment>
  <if_stmt><if>if<condition>(<expr><name>Format</name> <operator>==</operator> <name>RTC_FORMAT_BIN</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Convert the TimeStamp structure parameters to Binary format */</comment>
    <expr_stmt><expr><name><name>sTimeStamp</name><operator>-&gt;</operator><name>Hours</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sTimeStamp</name><operator>-&gt;</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sTimeStamp</name><operator>-&gt;</operator><name>Minutes</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sTimeStamp</name><operator>-&gt;</operator><name>Minutes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sTimeStamp</name><operator>-&gt;</operator><name>Seconds</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sTimeStamp</name><operator>-&gt;</operator><name>Seconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Convert the DateTimeStamp structure parameters to Binary format */</comment>
    <expr_stmt><expr><name><name>sTimeStampDate</name><operator>-&gt;</operator><name>Month</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sTimeStampDate</name><operator>-&gt;</operator><name>Month</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sTimeStampDate</name><operator>-&gt;</operator><name>Date</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sTimeStampDate</name><operator>-&gt;</operator><name>Date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sTimeStampDate</name><operator>-&gt;</operator><name>WeekDay</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sTimeStampDate</name><operator>-&gt;</operator><name>WeekDay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Clear the TIMESTAMP Flag */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_TIMESTAMP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_TSF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sets Tamper
  * @note   By calling this API we disable the tamper interrupt for all tampers.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_SetTamper</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>RTC_TamperTypeDef</name><modifier>*</modifier></type> <name>sTamper</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>Tamper</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER_PIN</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>PinSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER_TRIGGER</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>Trigger</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER_FILTER</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>Filter</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER_SAMPLING_FREQ</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>SamplingFrequency</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER_PRECHARGE_DURATION</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>PrechargeDuration</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER_PULLUP_STATE</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>TamperPullUp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>TimeStampOnTamperDetection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>sTamper</name><operator>-&gt;</operator><name>Trigger</name></name> <operator>!=</operator> <name>RTC_TAMPERTRIGGER_RISINGEDGE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>sTamper</name><operator>-&gt;</operator><name>Trigger</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sTamper</name><operator>-&gt;</operator><name>Tamper</name></name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTamper</name><operator>-&gt;</operator><name>Tamper</name></name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTamper</name><operator>-&gt;</operator><name>PinSelection</name></name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTamper</name><operator>-&gt;</operator><name>Trigger</name></name>  <operator>|</operator>\
            <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTamper</name><operator>-&gt;</operator><name>Filter</name></name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTamper</name><operator>-&gt;</operator><name>SamplingFrequency</name></name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTamper</name><operator>-&gt;</operator><name>PrechargeDuration</name></name> <operator>|</operator>\
            <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTamper</name><operator>-&gt;</operator><name>TamperPullUp</name></name> <operator>|</operator> <name><name>sTamper</name><operator>-&gt;</operator><name>TimeStampOnTamperDetection</name></name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TAFCR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTamper</name><operator>-&gt;</operator><name>Tamper</name></name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sTamper</name><operator>-&gt;</operator><name>Tamper</name></name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RTC_TAFCR_TAMPTS</name> <operator>|</operator>\
                                       <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RTC_TAFCR_TAMPFREQ</name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RTC_TAFCR_TAMPFLT</name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RTC_TAFCR_TAMPPRCH</name> <operator>|</operator>\
                                       <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RTC_TAFCR_TAMPPUDIS</name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RTC_TAFCR_TAMPINSEL</name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RTC_TAFCR_TAMPIE</name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TAFCR</name></name> <operator>|=</operator> <name>tmpreg</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sets Tamper with interrupt.
  * @note   By calling this API we force the tamper interrupt for all tampers.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  sTamper Pointer to RTC Tamper.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_SetTamper_IT</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>RTC_TamperTypeDef</name><modifier>*</modifier></type> <name>sTamper</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>Tamper</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER_PIN</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>PinSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER_TRIGGER</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>Trigger</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER_FILTER</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>Filter</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER_SAMPLING_FREQ</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>SamplingFrequency</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER_PRECHARGE_DURATION</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>PrechargeDuration</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER_PULLUP_STATE</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>TamperPullUp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>TimeStampOnTamperDetection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Configure the tamper trigger */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>sTamper</name><operator>-&gt;</operator><name>Trigger</name></name> <operator>!=</operator> <name>RTC_TAMPERTRIGGER_RISINGEDGE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>sTamper</name><operator>-&gt;</operator><name>Trigger</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sTamper</name><operator>-&gt;</operator><name>Tamper</name></name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTamper</name><operator>-&gt;</operator><name>Tamper</name></name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTamper</name><operator>-&gt;</operator><name>PinSelection</name></name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTamper</name><operator>-&gt;</operator><name>Trigger</name></name>  <operator>|</operator>\
            <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTamper</name><operator>-&gt;</operator><name>Filter</name></name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTamper</name><operator>-&gt;</operator><name>SamplingFrequency</name></name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTamper</name><operator>-&gt;</operator><name>PrechargeDuration</name></name> <operator>|</operator>\
            <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTamper</name><operator>-&gt;</operator><name>TamperPullUp</name></name> <operator>|</operator> <name><name>sTamper</name><operator>-&gt;</operator><name>TimeStampOnTamperDetection</name></name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TAFCR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTamper</name><operator>-&gt;</operator><name>Tamper</name></name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sTamper</name><operator>-&gt;</operator><name>Tamper</name></name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RTC_TAFCR_TAMPTS</name> <operator>|</operator>\
                                       <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RTC_TAFCR_TAMPFREQ</name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RTC_TAFCR_TAMPFLT</name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RTC_TAFCR_TAMPPRCH</name> <operator>|</operator>\
                                       <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RTC_TAFCR_TAMPPUDIS</name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RTC_TAFCR_TAMPINSEL</name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TAFCR</name></name> <operator>|=</operator> <name>tmpreg</name></expr>;</expr_stmt>

  <comment type="block">/* Configure the Tamper Interrupt in the RTC_TAFCR */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TAFCR</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RTC_TAFCR_TAMPIE</name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>sTamper</name><operator>-&gt;</operator><name>Tamper</name></name> <operator>==</operator> <name>RTC_TAMPER_1</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear RTC Tamper 1 flag */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_TAMPER_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_TAMP1F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Clear RTC Tamper 2 flag */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_TAMPER_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_TAMP2F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* RTC Tamper Interrupt Configuration: EXTI configuration */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>EXTI</name><operator>-&gt;</operator><name>RTSR</name></name> <operator>|=</operator> <name>RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Deactivates Tamper.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  Tamper Selected tamper pin.
  *          This parameter can be RTC_Tamper_1 and/or RTC_TAMPER_2.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_DeactivateTamper</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tamper</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER</name><argument_list>(<argument><expr><name>Tamper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the selected Tamper pin */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TAFCR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><name>Tamper</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles TimeStamp interrupt request.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RTCEx_TamperTimeStampIRQHandler</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_RTC_TIMESTAMP_GET_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_IT_TS</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Get the status of the Interrupt */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RTC_IT_TS</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* TIMESTAMP callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_RTC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hrtc</name><operator>-&gt;</operator><name>TimeStampEventCallback</name></name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_RTCEx_TimeStampEventCallback</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_RTC_REGISTER_CALLBACKS */</comment>

      <comment type="block">/* Clear the TIMESTAMP interrupt pending bit */</comment>
      <expr_stmt><expr><call><name>__HAL_RTC_TIMESTAMP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>,<argument><expr><name>RTC_FLAG_TSF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Get the status of the Interrupt */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_RTC_TAMPER_GET_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>,<argument><expr><name>RTC_IT_TAMP1</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Get the TAMPER Interrupt enable bit and pending bit */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TAFCR</name></name> <operator>&amp;</operator> <operator>(</operator><name>RTC_TAFCR_TAMPIE</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Tamper callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_RTC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hrtc</name><operator>-&gt;</operator><name>Tamper1EventCallback</name></name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_RTCEx_Tamper1EventCallback</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_RTC_REGISTER_CALLBACKS */</comment>

      <comment type="block">/* Clear the Tamper interrupt pending bit */</comment>
      <expr_stmt><expr><call><name>__HAL_RTC_TAMPER_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>,<argument><expr><name>RTC_FLAG_TAMP1F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Get the status of the Interrupt */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_RTC_TAMPER_GET_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_IT_TAMP2</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Get the TAMPER Interrupt enable bit and pending bit */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TAFCR</name></name> <operator>&amp;</operator> <name>RTC_TAFCR_TAMPIE</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Tamper callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_RTC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hrtc</name><operator>-&gt;</operator><name>Tamper2EventCallback</name></name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_RTCEx_Tamper2EventCallback</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_RTC_REGISTER_CALLBACKS */</comment>

      <comment type="block">/* Clear the Tamper interrupt pending bit */</comment>
      <expr_stmt><expr><call><name>__HAL_RTC_TAMPER_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_TAMP2F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Clear the EXTI's Flag for RTC TimeStamp and Tamper */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  TimeStamp callback.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_RTCEx_TimeStampEventCallback</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_TimeStampEventCallback could be implemented in the user file
  */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Tamper 1 callback.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_RTCEx_Tamper1EventCallback</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_Tamper1EventCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Tamper 2 callback.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_RTCEx_Tamper2EventCallback</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_Tamper2EventCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles TimeStamp polling request.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_PollForTimeStampEvent</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <while>while<condition>(<expr><call><name>__HAL_RTC_TIMESTAMP_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_TSF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name>__HAL_RTC_TIMESTAMP_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_TSOVF</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear the TIMESTAMP Overrun Flag */</comment>
      <expr_stmt><expr><call><name>__HAL_RTC_TIMESTAMP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_TSOVF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Change TIMESTAMP state */</comment>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator><operator>||</operator><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles Tamper1 Polling.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_PollForTamper1Event</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the status of the Interrupt */</comment>
  <while>while<condition>(<expr><call><name>__HAL_RTC_TAMPER_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_TAMP1F</name></expr></argument>)</argument_list></call><operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator><operator>||</operator><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Clear the Tamper Flag */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_TAMPER_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>,<argument><expr><name>RTC_FLAG_TAMP1F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles Tamper2 Polling.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_PollForTamper2Event</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the status of the Interrupt */</comment>
  <while>while<condition>(<expr><call><name>__HAL_RTC_TAMPER_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_TAMP2F</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator><operator>||</operator><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Clear the Tamper Flag */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_TAMPER_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>,<argument><expr><name>RTC_FLAG_TAMP2F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RTCEx_Exported_Functions_Group2 RTC Wake-up functions
 *  @brief   RTC Wake-up functions
 *
@verbatim
 ===============================================================================
                        ##### RTC Wake-up functions #####
 ===============================================================================

 [..] This section provides functions allowing to configure Wake-up feature

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Sets wake up timer.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_SetWakeUpTimer</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>WakeUpCounter</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>WakeUpClock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_WAKEUP_CLOCK</name><argument_list>(<argument><expr><name>WakeUpClock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_WAKEUP_COUNTER</name><argument_list>(<argument><expr><name>WakeUpCounter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*Check RTC WUTWF flag is reset only when wake up timer enabled*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RTC_CR_WUTE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait till RTC WUTWF flag is reset and if Time out is reached exit */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RTC_WAKEUPTIMER_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_WUTWF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RTC_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the write protection for RTC registers */</comment>
        <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>__HAL_RTC_WAKEUPTIMER_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till RTC WUTWF flag is set and if Time out is reached exit */</comment>
  <while>while<condition>(<expr><call><name>__HAL_RTC_WAKEUPTIMER_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_WUTWF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RTC_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable the write protection for RTC registers */</comment>
      <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Clear the Wake-up Timer clock source bits in CR register */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><name>RTC_CR_WUCKSEL</name></expr>;</expr_stmt>

  <comment type="block">/* Configure the clock source */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>WakeUpClock</name></expr>;</expr_stmt>

  <comment type="block">/* Configure the Wake-up Timer counter */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>WUTR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>WakeUpCounter</name></expr>;</expr_stmt>

   <comment type="block">/* Enable the Wake-up Timer */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WAKEUPTIMER_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sets wake up timer with interrupt
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_SetWakeUpTimer_IT</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>WakeUpCounter</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>WakeUpClock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_WAKEUP_CLOCK</name><argument_list>(<argument><expr><name>WakeUpClock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_WAKEUP_COUNTER</name><argument_list>(<argument><expr><name>WakeUpCounter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check RTC WUTWF flag is reset only when wake up timer enabled */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RTC_CR_WUTE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Wait till RTC WUTWF flag is reset and if Time out is reached exit */</comment>
    <expr_stmt><expr><name>count</name> <operator>=</operator> <name>RTC_TIMEOUT_VALUE</name>  <operator>*</operator> <operator>(</operator><name>SystemCoreClock</name> <operator>/</operator> <literal type="number">32U</literal> <operator>/</operator> <literal type="number">1000U</literal><operator>)</operator></expr>;</expr_stmt>
    <do>do
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><name>count</name><operator>--</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the write protection for RTC registers */</comment>
        <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    while<condition>(<expr><call><name>__HAL_RTC_WAKEUPTIMER_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_WUTWF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name></expr>)</condition>;</do>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>__HAL_RTC_WAKEUPTIMER_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till RTC WUTWF flag is set and if Time out is reached exit */</comment>
  <expr_stmt><expr><name>count</name> <operator>=</operator> <name>RTC_TIMEOUT_VALUE</name>  <operator>*</operator> <operator>(</operator><name>SystemCoreClock</name> <operator>/</operator> <literal type="number">32U</literal> <operator>/</operator> <literal type="number">1000U</literal><operator>)</operator></expr>;</expr_stmt>
  <do>do
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>count</name><operator>--</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable the write protection for RTC registers */</comment>
      <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  while<condition>(<expr><call><name>__HAL_RTC_WAKEUPTIMER_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_WUTWF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>;</do>

  <comment type="block">/* Configure the Wake-up Timer counter */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>WUTR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>WakeUpCounter</name></expr>;</expr_stmt>

  <comment type="block">/* Clear the Wake-up Timer clock source bits in CR register */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><name>RTC_CR_WUCKSEL</name></expr>;</expr_stmt>

  <comment type="block">/* Configure the clock source */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>WakeUpClock</name></expr>;</expr_stmt>

  <comment type="block">/* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>EXTI</name><operator>-&gt;</operator><name>RTSR</name></name> <operator>|=</operator> <name>RTC_EXTI_LINE_WAKEUPTIMER_EVENT</name></expr>;</expr_stmt>

  <comment type="block">/* Clear RTC Wake Up timer Flag */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_WUTF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Configure the Interrupt in the RTC_CR register */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WAKEUPTIMER_ENABLE_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>,<argument><expr><name>RTC_IT_WUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Wake-up Timer */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WAKEUPTIMER_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Deactivates wake up timer counter.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RTCEx_DeactivateWakeUpTimer</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Wake-up Timer */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WAKEUPTIMER_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* In case of interrupt mode is used, the interrupt source must disabled */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WAKEUPTIMER_DISABLE_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>,<argument><expr><name>RTC_IT_WUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till RTC WUTWF flag is set and if Time out is reached exit */</comment>
  <while>while<condition>(<expr><call><name>__HAL_RTC_WAKEUPTIMER_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_WUTWF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RTC_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable the write protection for RTC registers */</comment>
      <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Gets wake up timer counter.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Counter value
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RTCEx_GetWakeUpTimer</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Get the counter value */</comment>
  <return>return <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>WUTR</name></name> <operator>&amp;</operator> <name>RTC_WUTR_WUT</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles Wake Up Timer interrupt request.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RTCEx_WakeUpTimerIRQHandler</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_RTC_WAKEUPTIMER_GET_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_IT_WUT</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Get the status of the Interrupt */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RTC_IT_WUT</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* WAKEUPTIMER callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_RTC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hrtc</name><operator>-&gt;</operator><name>WakeUpTimerEventCallback</name></name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_RTCEx_WakeUpTimerEventCallback</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_RTC_REGISTER_CALLBACKS */</comment>

      <comment type="block">/* Clear the WAKEUPTIMER interrupt pending bit */</comment>
      <expr_stmt><expr><call><name>__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_WUTF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Clear the EXTI's line Flag for RTC WakeUpTimer */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Wake Up Timer callback.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_RTCEx_WakeUpTimerEventCallback</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles Wake Up Timer Polling.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_PollForWakeUpTimerEvent</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <while>while<condition>(<expr><call><name>__HAL_RTC_WAKEUPTIMER_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_WUTF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator><operator>||</operator><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>

        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Clear the WAKEUPTIMER Flag */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_WUTF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>


<comment type="block" format="doxygen">/** @defgroup RTCEx_Exported_Functions_Group3 Extension Peripheral Control functions
 *  @brief   Extension Peripheral Control functions
 *
@verbatim
 ===============================================================================
              ##### Extension Peripheral Control functions #####
 ===============================================================================
    [..]
    This subsection provides functions allowing to
      (+) Write a data in a specified RTC Backup data register
      (+) Read a data in a specified RTC Backup data register
      (+) Set the Coarse calibration parameters.
      (+) Deactivate the Coarse calibration parameters
      (+) Set the Smooth calibration parameters.
      (+) Configure the Synchronization Shift Control Settings.
      (+) Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
      (+) Deactivate the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
      (+) Enable the RTC reference clock detection.
      (+) Disable the RTC reference clock detection.
      (+) Enable the Bypass Shadow feature.
      (+) Disable the Bypass Shadow feature.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Writes a data in a specified RTC Backup data register.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RTCEx_BKUPWrite</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BackupRegister</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_BKP</name><argument_list>(<argument><expr><name>BackupRegister</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BKP0R</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <operator>(</operator><name>BackupRegister</name> <operator>*</operator> <literal type="number">4U</literal><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Write the specified register */</comment>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>Data</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Reads data from the specified RTC Backup data Register.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RTCEx_BKUPRead</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BackupRegister</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_BKP</name><argument_list>(<argument><expr><name>BackupRegister</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BKP0R</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <operator>(</operator><name>BackupRegister</name> <operator>*</operator> <literal type="number">4U</literal><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Read the specified register */</comment>
  <return>return <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>tmp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sets the Coarse calibration parameters.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  CalibSign Specifies the sign of the coarse calibration value.
  *          This parameter can be  one of the following values :
  *             @arg RTC_CALIBSIGN_POSITIVE: The value sign is positive
  *             @arg RTC_CALIBSIGN_NEGATIVE: The value sign is negative
  * @param  Value value of coarse calibration expressed in ppm (coded on 5 bits).
  *
  * @note   This Calibration value should be between 0 and 63 when using negative
  *         sign with a 2-ppm step.
  *
  * @note   This Calibration value should be between 0 and 126 when using positive
  *         sign with a 4-ppm step.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_SetCoarseCalib</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name><modifier>*</modifier></type> <name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>CalibSign</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_CALIB_SIGN</name><argument_list>(<argument><expr><name>CalibSign</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_CALIB_VALUE</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set Initialization mode */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>RTC_EnterInitMode</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable the write protection for RTC registers */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set RTC state*/</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Enable the Coarse Calibration */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_COARSE_CALIB_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set the coarse calibration value */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CALIBR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>CalibSign</name><operator>|</operator><name>Value</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Exit Initialization mode */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><name>RTC_ISR_INIT</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Deactivates the Coarse calibration parameters.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_DeactivateCoarseCalib</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name><modifier>*</modifier></type> <name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set Initialization mode */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>RTC_EnterInitMode</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable the write protection for RTC registers */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set RTC state*/</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Enable the Coarse Calibration */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_COARSE_CALIB_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Exit Initialization mode */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><name>RTC_ISR_INIT</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sets the Smooth calibration parameters.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  SmoothCalibPeriod Select the Smooth Calibration Period.
  *          This parameter can be can be one of the following values :
  *             @arg RTC_SMOOTHCALIB_PERIOD_32SEC: The smooth calibration period is 32s.
  *             @arg RTC_SMOOTHCALIB_PERIOD_16SEC: The smooth calibration period is 16s.
  *             @arg RTC_SMOOTHCALIB_PERIOD_8SEC: The smooth calibration period is 8s.
  * @param  SmoothCalibPlusPulses Select to Set or reset the CALP bit.
  *          This parameter can be one of the following values:
  *             @arg RTC_SMOOTHCALIB_PLUSPULSES_SET: Add one RTCCLK pulse every 2*11 pulses.
  *             @arg RTC_SMOOTHCALIB_PLUSPULSES_RESET: No RTCCLK pulses are added.
  * @param  SmouthCalibMinusPulsesValue Select the value of CALM[80] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @note   To deactivate the smooth calibration, the field SmoothCalibPlusPulses
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmouthCalibMinusPulsesValue must be equal to 0.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_SetSmoothCalib</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name><modifier>*</modifier></type> <name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>SmoothCalibPeriod</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>SmoothCalibPlusPulses</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>SmouthCalibMinusPulsesValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_SMOOTH_CALIB_PERIOD</name><argument_list>(<argument><expr><name>SmoothCalibPeriod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_SMOOTH_CALIB_PLUS</name><argument_list>(<argument><expr><name>SmoothCalibPlusPulses</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_SMOOTH_CALIB_MINUS</name><argument_list>(<argument><expr><name>SmouthCalibMinusPulsesValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* check if a calibration is pending*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name> <operator>&amp;</operator> <name>RTC_ISR_RECALPF</name><operator>)</operator> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* check if a calibration is pending*/</comment>
    <while>while<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name> <operator>&amp;</operator> <name>RTC_ISR_RECALPF</name><operator>)</operator> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RTC_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the write protection for RTC registers */</comment>
        <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Change RTC state */</comment>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Configure the Smooth calibration settings */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CALR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>SmoothCalibPeriod</name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>SmoothCalibPlusPulses</name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>SmouthCalibMinusPulsesValue</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configures the Synchronization Shift Control Settings.
  * @note   When REFCKON is set, firmware must not write to Shift control register.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  ShiftAdd1S Select to add or not 1 second to the time calendar.
  *          This parameter can be one of the following values :
  *             @arg RTC_SHIFTADD1S_SET: Add one second to the clock calendar.
  *             @arg RTC_SHIFTADD1S_RESET: No effect.
  * @param  ShiftSubFS Select the number of Second Fractions to substitute.
  *          This parameter can be one any value from 0 to 0x7FFF.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_SetSynchroShift</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name><modifier>*</modifier></type> <name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ShiftAdd1S</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ShiftSubFS</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_SHIFT_ADD1S</name><argument_list>(<argument><expr><name>ShiftAdd1S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_SHIFT_SUBFS</name><argument_list>(<argument><expr><name>ShiftSubFS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait until the shift is completed*/</comment>
    <while>while<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name> <operator>&amp;</operator> <name>RTC_ISR_SHPF</name><operator>)</operator> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RTC_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the write protection for RTC registers */</comment>
        <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Check if the reference clock detection is disabled */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RTC_CR_REFCKON</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Configure the Shift settings */</comment>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SHIFTR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>ShiftSubFS</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>ShiftAdd1S</name><operator>)</operator></expr>;</expr_stmt>

      <comment type="block">/* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */</comment>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RTC_CR_BYPSHAD</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name>HAL_RTC_WaitForSynchro</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Enable the write protection for RTC registers */</comment>
          <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

          <comment type="block">/* Process Unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Enable the write protection for RTC registers */</comment>
      <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Change RTC state */</comment>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configures the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  CalibOutput Select the Calibration output Selection .
  *          This parameter can be one of the following values:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_SetCalibrationOutPut</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name><modifier>*</modifier></type> <name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>CalibOutput</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_CALIB_OUTPUT</name><argument_list>(<argument><expr><name>CalibOutput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Clear flags before config */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><name>RTC_CR_COSEL</name></expr>;</expr_stmt>

  <comment type="block">/* Configure the RTC_CR register */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>CalibOutput</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>__HAL_RTC_CALIBRATION_OUTPUT_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Deactivates the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_DeactivateCalibrationOutPut</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name><modifier>*</modifier></type> <name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>__HAL_RTC_CALIBRATION_OUTPUT_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enables the RTC reference clock detection.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_SetRefClock</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name><modifier>*</modifier></type> <name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set Initialization mode */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>RTC_EnterInitMode</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable the write protection for RTC registers */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set RTC state*/</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_RTC_CLOCKREF_DETECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Exit Initialization mode */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><name>RTC_ISR_INIT</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable the RTC reference clock detection.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_DeactivateRefClock</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name><modifier>*</modifier></type> <name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set Initialization mode */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>RTC_EnterInitMode</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable the write protection for RTC registers */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set RTC state*/</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_RTC_CLOCKREF_DETECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Exit Initialization mode */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><name>RTC_ISR_INIT</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enables the Bypass Shadow feature.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_EnableBypassShadow</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name><modifier>*</modifier></type> <name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the BYPSHAD bit */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>RTC_CR_BYPSHAD</name></expr>;</expr_stmt>

  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disables the Bypass Shadow feature.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_DisableBypassShadow</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name><modifier>*</modifier></type> <name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Reset the BYPSHAD bit */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>~</operator><name>RTC_CR_BYPSHAD</name></expr>;</expr_stmt>

  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

  <comment type="block" format="doxygen">/** @defgroup RTCEx_Exported_Functions_Group4 Extended features functions
 *  @brief    Extended features functions
 *
@verbatim
 ===============================================================================
                 ##### Extended features functions #####
 ===============================================================================
    [..]  This section provides functions allowing to:
      (+) RTC Alarm B callback
      (+) RTC Poll for Alarm B request

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Alarm B callback.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_RTCEx_AlarmBEventCallback</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles AlarmB Polling request.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_PollForAlarmBEvent</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <while>while<condition>(<expr><call><name>__HAL_RTC_ALARM_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_ALRBF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator><operator>||</operator><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Clear the Alarm Flag */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_ALARM_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_ALRBF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_RTC_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
