<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dfsdm.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_dfsdm.c
  * @author  MCD Application Team
  * @brief   This file provides firmware functions to manage the following 
  *          functionalities of the Digital Filter for Sigma-Delta Modulators
  *          (DFSDM) peripherals:
  *           + Initialization and configuration of channels and filters
  *           + Regular channels configuration
  *           + Injected channels configuration
  *           + Regular/Injected Channels DMA Configuration
  *           + Interrupts and flags management
  *           + Analog watchdog feature
  *           + Short-circuit detector feature
  *           + Extremes detector feature
  *           + Clock absence detector feature
  *           + Break generation on analog watchdog or short-circuit event
  *         
  @verbatim
  ==============================================================================
                     ##### How to use this driver #####
  ==============================================================================
  [..]
    *** Channel initialization ***
    ==============================
    [..]
      (#) User has first to initialize channels (before filters initialization).
      (#) As prerequisite, fill in the HAL_DFSDM_ChannelMspInit() :
        (++) Enable DFSDMz clock interface with __HAL_RCC_DFSDMz_CLK_ENABLE().
        (++) Enable the clocks for the DFSDMz GPIOS with __HAL_RCC_GPIOx_CLK_ENABLE().
        (++) Configure these DFSDMz pins in alternate mode using HAL_GPIO_Init().
        (++) If interrupt mode is used, enable and configure DFSDMz_FLT0 global
            interrupt with HAL_NVIC_SetPriority() and HAL_NVIC_EnableIRQ().
      (#) Configure the output clock, input, serial interface, analog watchdog,
          offset and data right bit shift parameters for this channel using the 
          HAL_DFSDM_ChannelInit() function.

    *** Channel clock absence detector ***
    ======================================
    [..]
      (#) Start clock absence detector using HAL_DFSDM_ChannelCkabStart() or
          HAL_DFSDM_ChannelCkabStart_IT().
      (#) In polling mode, use HAL_DFSDM_ChannelPollForCkab() to detect the clock
          absence.
      (#) In interrupt mode, HAL_DFSDM_ChannelCkabCallback() will be called if
          clock absence is detected.
      (#) Stop clock absence detector using HAL_DFSDM_ChannelCkabStop() or
          HAL_DFSDM_ChannelCkabStop_IT().
      (#) Please note that the same mode (polling or interrupt) has to be used 
          for all channels because the channels are sharing the same interrupt.
      (#) Please note also that in interrupt mode, if clock absence detector is
          stopped for one channel, interrupt will be disabled for all channels.

    *** Channel short circuit detector ***
    ======================================
    [..]    
      (#) Start short circuit detector using HAL_DFSDM_ChannelScdStart() or
          or HAL_DFSDM_ChannelScdStart_IT().
      (#) In polling mode, use HAL_DFSDM_ChannelPollForScd() to detect short
          circuit.
      (#) In interrupt mode, HAL_DFSDM_ChannelScdCallback() will be called if 
          short circuit is detected.
      (#) Stop short circuit detector using HAL_DFSDM_ChannelScdStop() or
          or HAL_DFSDM_ChannelScdStop_IT().
      (#) Please note that the same mode (polling or interrupt) has to be used 
          for all channels because the channels are sharing the same interrupt.
      (#) Please note also that in interrupt mode, if short circuit detector is
          stopped for one channel, interrupt will be disabled for all channels.

    *** Channel analog watchdog value ***
    =====================================
    [..]    
      (#) Get analog watchdog filter value of a channel using
          HAL_DFSDM_ChannelGetAwdValue().

    *** Channel offset value ***
    =====================================
    [..]    
      (#) Modify offset value of a channel using HAL_DFSDM_ChannelModifyOffset().

    *** Filter initialization ***
    =============================
    [..]
      (#) After channel initialization, user has to init filters.
      (#) As prerequisite, fill in the HAL_DFSDM_FilterMspInit() :
        (++) If interrupt mode is used , enable and configure DFSDMz_FLTx global
            interrupt with HAL_NVIC_SetPriority() and HAL_NVIC_EnableIRQ().
            Please note that DFSDMz_FLT0 global interrupt could be already
            enabled if interrupt is used for channel.
        (++) If DMA mode is used, configure DMA with HAL_DMA_Init() and link it
            with DFSDMz filter handle using __HAL_LINKDMA().
      (#) Configure the regular conversion, injected conversion and filter
          parameters for this filter using the HAL_DFSDM_FilterInit() function.

    *** Filter regular channel conversion ***
    =========================================
    [..]    
      (#) Select regular channel and enable/disable continuous mode using
          HAL_DFSDM_FilterConfigRegChannel().
      (#) Start regular conversion using HAL_DFSDM_FilterRegularStart(),
          HAL_DFSDM_FilterRegularStart_IT(), HAL_DFSDM_FilterRegularStart_DMA() or
          HAL_DFSDM_FilterRegularMsbStart_DMA().
      (#) In polling mode, use HAL_DFSDM_FilterPollForRegConversion() to detect 
          the end of regular conversion.
      (#) In interrupt mode, HAL_DFSDM_FilterRegConvCpltCallback() will be called
          at the end of regular conversion.
      (#) Get value of regular conversion and corresponding channel using 
          HAL_DFSDM_FilterGetRegularValue().
      (#) In DMA mode, HAL_DFSDM_FilterRegConvHalfCpltCallback() and 
          HAL_DFSDM_FilterRegConvCpltCallback() will be called respectively at the
          half transfer and at the transfer complete. Please note that 
          HAL_DFSDM_FilterRegConvHalfCpltCallback() will be called only in DMA
          circular mode.
      (#) Stop regular conversion using HAL_DFSDM_FilterRegularStop(),
          HAL_DFSDM_FilterRegularStop_IT() or HAL_DFSDM_FilterRegularStop_DMA().

    *** Filter injected channels conversion ***
    ===========================================
    [..]
      (#) Select injected channels using HAL_DFSDM_FilterConfigInjChannel().
      (#) Start injected conversion using HAL_DFSDM_FilterInjectedStart(),
          HAL_DFSDM_FilterInjectedStart_IT(), HAL_DFSDM_FilterInjectedStart_DMA() or
          HAL_DFSDM_FilterInjectedMsbStart_DMA().
      (#) In polling mode, use HAL_DFSDM_FilterPollForInjConversion() to detect 
          the end of injected conversion.
      (#) In interrupt mode, HAL_DFSDM_FilterInjConvCpltCallback() will be called
          at the end of injected conversion.
      (#) Get value of injected conversion and corresponding channel using 
          HAL_DFSDM_FilterGetInjectedValue().
      (#) In DMA mode, HAL_DFSDM_FilterInjConvHalfCpltCallback() and 
          HAL_DFSDM_FilterInjConvCpltCallback() will be called respectively at the
          half transfer and at the transfer complete. Please note that 
          HAL_DFSDM_FilterInjConvCpltCallback() will be called only in DMA
          circular mode.
      (#) Stop injected conversion using HAL_DFSDM_FilterInjectedStop(),
          HAL_DFSDM_FilterInjectedStop_IT() or HAL_DFSDM_FilterInjectedStop_DMA().

    *** Filter analog watchdog ***
    ==============================
    [..]
      (#) Start filter analog watchdog using HAL_DFSDM_FilterAwdStart_IT().
      (#) HAL_DFSDM_FilterAwdCallback() will be called if analog watchdog occurs.
      (#) Stop filter analog watchdog using HAL_DFSDM_FilterAwdStop_IT().

    *** Filter extreme detector ***
    ===============================
    [..]
      (#) Start filter extreme detector using HAL_DFSDM_FilterExdStart().
      (#) Get extreme detector maximum value using HAL_DFSDM_FilterGetExdMaxValue().
      (#) Get extreme detector minimum value using HAL_DFSDM_FilterGetExdMinValue().
      (#) Start filter extreme detector using HAL_DFSDM_FilterExdStop().

    *** Filter conversion time ***
    ==============================
    [..]
      (#) Get conversion time value using HAL_DFSDM_FilterGetConvTimeValue().

    *** Callback registration ***
    =============================

    The compilation define USE_HAL_DFSDM_REGISTER_CALLBACKS when set to 1
    allows the user to configure dynamically the driver callbacks.
    Use functions @ref HAL_DFSDM_Channel_RegisterCallback(),
    @ref HAL_DFSDM_Filter_RegisterCallback() or
    @ref HAL_DFSDM_Filter_RegisterAwdCallback() to register a user callback.

    Function @ref HAL_DFSDM_Channel_RegisterCallback() allows to register
    following callbacks:
      (+) CkabCallback      : DFSDM channel clock absence detection callback.
      (+) ScdCallback       : DFSDM channel short circuit detection callback.
      (+) MspInitCallback   : DFSDM channel MSP init callback.
      (+) MspDeInitCallback : DFSDM channel MSP de-init callback.
    This function takes as parameters the HAL peripheral handle, the Callback ID
    and a pointer to the user callback function.

    Function @ref HAL_DFSDM_Filter_RegisterCallback() allows to register
    following callbacks:
      (+) RegConvCpltCallback     : DFSDM filter regular conversion complete callback.
      (+) RegConvHalfCpltCallback : DFSDM filter half regular conversion complete callback.
      (+) InjConvCpltCallback     : DFSDM filter injected conversion complete callback.
      (+) InjConvHalfCpltCallback : DFSDM filter half injected conversion complete callback.
      (+) ErrorCallback           : DFSDM filter error callback.
      (+) MspInitCallback         : DFSDM filter MSP init callback.
      (+) MspDeInitCallback       : DFSDM filter MSP de-init callback.
    This function takes as parameters the HAL peripheral handle, the Callback ID
    and a pointer to the user callback function.

    For specific DFSDM filter analog watchdog callback use dedicated register callback:   
    @ref HAL_DFSDM_Filter_RegisterAwdCallback().

    Use functions @ref HAL_DFSDM_Channel_UnRegisterCallback() or
    @ref HAL_DFSDM_Filter_UnRegisterCallback() to reset a callback to the default
    weak function.

    @ref HAL_DFSDM_Channel_UnRegisterCallback() takes as parameters the HAL peripheral handle,
    and the Callback ID.
    This function allows to reset following callbacks:
      (+) CkabCallback      : DFSDM channel clock absence detection callback.
      (+) ScdCallback       : DFSDM channel short circuit detection callback.
      (+) MspInitCallback   : DFSDM channel MSP init callback.
      (+) MspDeInitCallback : DFSDM channel MSP de-init callback.

    @ref HAL_DFSDM_Filter_UnRegisterCallback() takes as parameters the HAL peripheral handle,
    and the Callback ID.
    This function allows to reset following callbacks:
      (+) RegConvCpltCallback     : DFSDM filter regular conversion complete callback.
      (+) RegConvHalfCpltCallback : DFSDM filter half regular conversion complete callback.
      (+) InjConvCpltCallback     : DFSDM filter injected conversion complete callback.
      (+) InjConvHalfCpltCallback : DFSDM filter half injected conversion complete callback.
      (+) ErrorCallback           : DFSDM filter error callback.
      (+) MspInitCallback         : DFSDM filter MSP init callback.
      (+) MspDeInitCallback       : DFSDM filter MSP de-init callback.

    For specific DFSDM filter analog watchdog callback use dedicated unregister callback:
    @ref HAL_DFSDM_Filter_UnRegisterAwdCallback().

    By default, after the call of init function and if the state is RESET 
    all callbacks are reset to the corresponding legacy weak functions: 
    examples @ref HAL_DFSDM_ChannelScdCallback(), @ref HAL_DFSDM_FilterErrorCallback().
    Exception done for MspInit and MspDeInit callbacks that are respectively
    reset to the legacy weak functions in the init and de-init only when these 
    callbacks are null (not registered beforehand).
    If not, MspInit or MspDeInit are not null, the init and de-init keep and use
    the user MspInit/MspDeInit callbacks (registered beforehand)

    Callbacks can be registered/unregistered in READY state only.
    Exception done for MspInit/MspDeInit callbacks that can be registered/unregistered
    in READY or RESET state, thus registered (user) MspInit/DeInit callbacks can be used
    during the init/de-init.
    In that case first register the MspInit/MspDeInit user callbacks using 
    @ref HAL_DFSDM_Channel_RegisterCallback() or
    @ref HAL_DFSDM_Filter_RegisterCallback() before calling init or de-init function.

    When The compilation define USE_HAL_DFSDM_REGISTER_CALLBACKS is set to 0 or
    not defined, the callback registering feature is not available 
    and weak callbacks are used.
    @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_DFSDM_MODULE_ENABLED</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Cx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/** @defgroup DFSDM DFSDM
  * @brief DFSDM HAL driver module
  * @{
  */</comment> 

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup DFSDM_Private_Define DFSDM Private Define
 * @{
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFSDM_FLTCR1_MSB_RCH_OFFSET</name></cpp:macro>     <cpp:value>8U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFSDM_MSB_MASK</name></cpp:macro>                  <cpp:value>0xFFFF0000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFSDM_LSB_MASK</name></cpp:macro>                  <cpp:value>0x0000FFFFU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFSDM_CKAB_TIMEOUT</name></cpp:macro>              <cpp:value>5000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFSDM1_CHANNEL_NUMBER</name></cpp:macro>           <cpp:value>4U</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFSDM2_CHANNEL_NUMBER</name></cpp:macro>           <cpp:value>8U</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DFSDM2_Channel0 */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<comment type="block" format="doxygen">/** @addtogroup DFSDM_Private_Macros 
* @{
*/</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup DFSDM_Private_Variables DFSDM Private Variables
  * @{
  */</comment>
<decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type>                <name>v_dfsdm1ChannelCounter</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DFSDM_Channel_HandleTypeDef</name><modifier>*</modifier></type> <name><name>a_dfsdm1ChannelHandle</name><index>[<expr><name>DFSDM1_CHANNEL_NUMBER</name></expr>]</index></name> <init>= <expr><block>{<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type>                <name>v_dfsdm2ChannelCounter</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DFSDM_Channel_HandleTypeDef</name><modifier>*</modifier></type> <name><name>a_dfsdm2ChannelHandle</name><index>[<expr><name>DFSDM2_CHANNEL_NUMBER</name></expr>]</index></name> <init>= <expr><block>{<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>   <comment type="block">/* DFSDM2_Channel0 */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup DFSDM_Private_Functions DFSDM Private Functions
  * @{
  */</comment>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>DFSDM_GetInjChannelsNbr</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>Channels</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>DFSDM_GetChannelFromInstance</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_TypeDef</name><modifier>*</modifier></type> <name>Instance</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>     <name>DFSDM_RegConvStart</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>     <name>DFSDM_RegConvStop</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name><modifier>*</modifier></type> <name>hdfsdm_filter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>     <name>DFSDM_InjConvStart</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name><modifier>*</modifier></type> <name>hdfsdm_filter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>     <name>DFSDM_InjConvStop</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name><modifier>*</modifier></type> <name>hdfsdm_filter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>     <name>DFSDM_DMARegularHalfConvCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>     <name>DFSDM_DMARegularConvCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>     <name>DFSDM_DMAInjectedHalfConvCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>     <name>DFSDM_DMAInjectedConvCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>     <name>DFSDM_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup DFSDM_Exported_Functions DFSDM Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DFSDM_Exported_Functions_Group1_Channel Channel initialization and de-initialization functions
 *  @brief    Channel initialization and de-initialization functions 
 *
@verbatim
  ==============================================================================
        ##### Channel initialization and de-initialization functions #####
  ==============================================================================
    [..]  This section provides functions allowing to:
      (+) Initialize the DFSDM channel.
      (+) De-initialize the DFSDM channel.
@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initialize the DFSDM channel according to the specified parameters
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_ChannelInit</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name><modifier>*</modifier></type>               <name>channelCounterPtr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DFSDM_Channel_HandleTypeDef</name>  <modifier>*</modifier><modifier>*</modifier></type><name>channelHandleTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DFSDM_Channel_TypeDef</name><modifier>*</modifier></type>       <name>channel0Instance</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(DFSDM2_Channel0) */</comment>
  
  <comment type="block">/* Check DFSDM Channel handle */</comment>
  <if_stmt><if>if<condition>(<expr><name>hdfsdm_channel</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutputClock</name><operator>.</operator><name>Activation</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_INPUT</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Input</name><operator>.</operator><name>Multiplexer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_DATA_PACKING</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Input</name><operator>.</operator><name>DataPacking</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_INPUT_PINS</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Input</name><operator>.</operator><name>Pins</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_SERIAL_INTERFACE_TYPE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SerialInterface</name><operator>.</operator><name>Type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_SPI_CLOCK</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SerialInterface</name><operator>.</operator><name>SpiClock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_FILTER_ORDER</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Awd</name><operator>.</operator><name>FilterOrder</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_FILTER_OVS_RATIO</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Awd</name><operator>.</operator><name>Oversampling</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_OFFSET</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Offset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>RightBitShift</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Get channel counter, channel handle table and channel 0 instance */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>IS_DFSDM1_CHANNEL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>channelCounterPtr</name>  <operator>=</operator> <operator>&amp;</operator><name>v_dfsdm1ChannelCounter</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>channelHandleTable</name> <operator>=</operator>  <name>a_dfsdm1ChannelHandle</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>channel0Instance</name>   <operator>=</operator> <name>DFSDM1_Channel0</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>channelCounterPtr</name>  <operator>=</operator> <operator>&amp;</operator><name>v_dfsdm2ChannelCounter</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>channelHandleTable</name> <operator>=</operator> <name>a_dfsdm2ChannelHandle</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>channel0Instance</name>   <operator>=</operator> <name>DFSDM2_Channel0</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Check that channel has not been already initialized */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>channelHandleTable</name><index>[<expr><call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/* Reset callback pointers to the weak predefined callbacks */</comment>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>CkabCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_ChannelCkabCallback</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>ScdCallback</name></name>  <operator>=</operator> <name>HAL_DFSDM_ChannelScdCallback</name></expr>;</expr_stmt>

  <comment type="block">/* Call MSP init function */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_ChannelMspInit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hdfsdm_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Call MSP init function */</comment>
  <expr_stmt><expr><call><name>HAL_DFSDM_ChannelMspInit</name><argument_list>(<argument><expr><name>hdfsdm_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <comment type="block">/* Update the channel counter */</comment>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>channelCounterPtr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Configure output serial clock and enable global DFSDM interface only for first channel */</comment>
  <if_stmt><if>if<condition>(<expr><operator>*</operator><name>channelCounterPtr</name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_OUTPUT_CLOCK</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutputClock</name><operator>.</operator><name>Selection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Set the output serial clock source */</comment>
    <expr_stmt><expr><name><name>channel0Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR1_CKOUTSRC</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>channel0Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>|=</operator> <name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutputClock</name><operator>.</operator><name>Selection</name></name></expr>;</expr_stmt>
    
    <comment type="block">/* Reset clock divider */</comment>
    <expr_stmt><expr><name><name>channel0Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR1_CKOUTDIV</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutputClock</name><operator>.</operator><name>Activation</name></name> <operator>==</operator> <name>ENABLE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutputClock</name><operator>.</operator><name>Divider</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Set the output clock divider */</comment>
      <expr_stmt><expr><name><name>channel0Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutputClock</name><operator>.</operator><name>Divider</name></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> 
                                               <name>DFSDM_CHCFGR1_CKOUTDIV_Pos</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* enable the DFSDM global interface */</comment>
    <expr_stmt><expr><name><name>channel0Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>|=</operator> <name>DFSDM_CHCFGR1_DFSDMEN</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Set channel input parameters */</comment>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR1_DATPACK</name> <operator>|</operator> <name>DFSDM_CHCFGR1_DATMPX</name> <operator>|</operator> 
                                         <name>DFSDM_CHCFGR1_CHINSEL</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>|=</operator> <operator>(</operator><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Input</name><operator>.</operator><name>Multiplexer</name></name> <operator>|</operator> 
                                        <name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Input</name><operator>.</operator><name>DataPacking</name></name> <operator>|</operator> 
                                        <name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Input</name><operator>.</operator><name>Pins</name></name><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Set serial interface parameters */</comment>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR1_SITP</name> <operator>|</operator> <name>DFSDM_CHCFGR1_SPICKSEL</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>|=</operator> <operator>(</operator><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SerialInterface</name><operator>.</operator><name>Type</name></name> <operator>|</operator> 
                                        <name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SerialInterface</name><operator>.</operator><name>SpiClock</name></name><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Set analog watchdog parameters */</comment>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHAWSCDR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHAWSCDR_AWFORD</name> <operator>|</operator> <name>DFSDM_CHAWSCDR_AWFOSR</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHAWSCDR</name></name> <operator>|=</operator> <operator>(</operator><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Awd</name><operator>.</operator><name>FilterOrder</name></name> <operator>|</operator> 
                                       <operator>(</operator><operator>(</operator><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Awd</name><operator>.</operator><name>Oversampling</name></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>DFSDM_CHAWSCDR_AWFOSR_Pos</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Set channel offset and right bit shift */</comment>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR2_OFFSET</name> <operator>|</operator> <name>DFSDM_CHCFGR2_DTRBS</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR2</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Offset</name></name> <operator>&lt;&lt;</operator> <name>DFSDM_CHCFGR2_OFFSET_Pos</name><operator>)</operator> <operator>|</operator> 
                                        <operator>(</operator><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>RightBitShift</name></name> <operator>&lt;&lt;</operator> <name>DFSDM_CHCFGR2_DTRBS_Pos</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Enable DFSDM channel */</comment>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>|=</operator> <name>DFSDM_CHCFGR1_CHEN</name></expr>;</expr_stmt>
  
  <comment type="block">/* Set DFSDM Channel to ready state */</comment>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DFSDM_CHANNEL_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Store channel handle in DFSDM channel handle table */</comment>
  <expr_stmt><expr><name><name>channelHandleTable</name><index>[<expr><call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>hdfsdm_channel</name></expr>;</expr_stmt>
  
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Check that channel has not been already initialized */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>a_dfsdm1ChannelHandle</name><index>[<expr><call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/* Reset callback pointers to the weak predefined callbacks */</comment>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>CkabCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_ChannelCkabCallback</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>ScdCallback</name></name>  <operator>=</operator> <name>HAL_DFSDM_ChannelScdCallback</name></expr>;</expr_stmt>

  <comment type="block">/* Call MSP init function */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_ChannelMspInit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hdfsdm_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Call MSP init function */</comment>
  <expr_stmt><expr><call><name>HAL_DFSDM_ChannelMspInit</name><argument_list>(<argument><expr><name>hdfsdm_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <comment type="block">/* Update the channel counter */</comment>
  <expr_stmt><expr><name>v_dfsdm1ChannelCounter</name><operator>++</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Configure output serial clock and enable global DFSDM interface only for first channel */</comment>
  <if_stmt><if>if<condition>(<expr><name>v_dfsdm1ChannelCounter</name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_OUTPUT_CLOCK</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutputClock</name><operator>.</operator><name>Selection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Set the output serial clock source */</comment>
    <expr_stmt><expr><name><name>DFSDM1_Channel0</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR1_CKOUTSRC</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>DFSDM1_Channel0</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>|=</operator> <name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutputClock</name><operator>.</operator><name>Selection</name></name></expr>;</expr_stmt>
    
    <comment type="block">/* Reset clock divider */</comment>
    <expr_stmt><expr><name><name>DFSDM1_Channel0</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR1_CKOUTDIV</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutputClock</name><operator>.</operator><name>Activation</name></name> <operator>==</operator> <name>ENABLE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutputClock</name><operator>.</operator><name>Divider</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Set the output clock divider */</comment>
      <expr_stmt><expr><name><name>DFSDM1_Channel0</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutputClock</name><operator>.</operator><name>Divider</name></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> 
                                             <name>DFSDM_CHCFGR1_CKOUTDIV_Pos</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* enable the DFSDM global interface */</comment>
    <expr_stmt><expr><name><name>DFSDM1_Channel0</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>|=</operator> <name>DFSDM_CHCFGR1_DFSDMEN</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Set channel input parameters */</comment>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR1_DATPACK</name> <operator>|</operator> <name>DFSDM_CHCFGR1_DATMPX</name> <operator>|</operator> 
                                         <name>DFSDM_CHCFGR1_CHINSEL</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>|=</operator> <operator>(</operator><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Input</name><operator>.</operator><name>Multiplexer</name></name> <operator>|</operator> 
                                        <name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Input</name><operator>.</operator><name>DataPacking</name></name> <operator>|</operator> 
                                        <name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Input</name><operator>.</operator><name>Pins</name></name><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Set serial interface parameters */</comment>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR1_SITP</name> <operator>|</operator> <name>DFSDM_CHCFGR1_SPICKSEL</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>|=</operator> <operator>(</operator><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SerialInterface</name><operator>.</operator><name>Type</name></name> <operator>|</operator> 
                                        <name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SerialInterface</name><operator>.</operator><name>SpiClock</name></name><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Set analog watchdog parameters */</comment>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHAWSCDR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHAWSCDR_AWFORD</name> <operator>|</operator> <name>DFSDM_CHAWSCDR_AWFOSR</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHAWSCDR</name></name> <operator>|=</operator> <operator>(</operator><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Awd</name><operator>.</operator><name>FilterOrder</name></name> <operator>|</operator> 
                                       <operator>(</operator><operator>(</operator><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Awd</name><operator>.</operator><name>Oversampling</name></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>DFSDM_CHAWSCDR_AWFOSR_Pos</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Set channel offset and right bit shift */</comment>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR2_OFFSET</name> <operator>|</operator> <name>DFSDM_CHCFGR2_DTRBS</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR2</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Offset</name></name> <operator>&lt;&lt;</operator> <name>DFSDM_CHCFGR2_OFFSET_Pos</name><operator>)</operator> <operator>|</operator> 
                                        <operator>(</operator><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>RightBitShift</name></name> <operator>&lt;&lt;</operator> <name>DFSDM_CHCFGR2_DTRBS_Pos</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Enable DFSDM channel */</comment>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>|=</operator> <name>DFSDM_CHCFGR1_CHEN</name></expr>;</expr_stmt>
  
  <comment type="block">/* Set DFSDM Channel to ready state */</comment>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DFSDM_CHANNEL_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Store channel handle in DFSDM channel handle table */</comment>
  <expr_stmt><expr><name><name>a_dfsdm1ChannelHandle</name><index>[<expr><call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>hdfsdm_channel</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DFSDM2_Channel0 */</comment>
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  De-initialize the DFSDM channel.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_ChannelDeInit</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name><modifier>*</modifier></type>                    <name>channelCounterPtr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DFSDM_Channel_HandleTypeDef</name>  <modifier>*</modifier><modifier>*</modifier></type><name>channelHandleTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DFSDM_Channel_TypeDef</name><modifier>*</modifier></type>       <name>channel0Instance</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(DFSDM2_Channel0) */</comment>
  
  <comment type="block">/* Check DFSDM Channel handle */</comment>
  <if_stmt><if>if<condition>(<expr><name>hdfsdm_channel</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Get channel counter, channel handle table and channel 0 instance */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>IS_DFSDM1_CHANNEL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>channelCounterPtr</name>  <operator>=</operator> <operator>&amp;</operator><name>v_dfsdm1ChannelCounter</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>channelHandleTable</name> <operator>=</operator>  <name>a_dfsdm1ChannelHandle</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>channel0Instance</name>   <operator>=</operator> <name>DFSDM1_Channel0</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>channelCounterPtr</name>  <operator>=</operator> <operator>&amp;</operator><name>v_dfsdm2ChannelCounter</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>channelHandleTable</name> <operator>=</operator>  <name>a_dfsdm2ChannelHandle</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>channel0Instance</name>   <operator>=</operator> <name>DFSDM2_Channel0</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Check that channel has not been already deinitialized */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>channelHandleTable</name><index>[<expr><call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Disable the DFSDM channel */</comment>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR1_CHEN</name><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Update the channel counter */</comment>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>channelCounterPtr</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Disable global DFSDM at deinit of last channel */</comment>
  <if_stmt><if>if<condition>(<expr><operator>*</operator><name>channelCounterPtr</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>channel0Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR1_DFSDMEN</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Call MSP deinit function */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_ChannelMspDeInit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hdfsdm_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_DFSDM_ChannelMspDeInit</name><argument_list>(<argument><expr><name>hdfsdm_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Set DFSDM Channel in reset state */</comment>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DFSDM_CHANNEL_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Reset channel handle in DFSDM channel handle table */</comment>
  <expr_stmt><expr><name><name>channelHandleTable</name><index>[<expr><call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Check that channel has not been already deinitialized */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>a_dfsdm1ChannelHandle</name><index>[<expr><call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Disable the DFSDM channel */</comment>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR1_CHEN</name><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Update the channel counter */</comment>
  <expr_stmt><expr><name>v_dfsdm1ChannelCounter</name><operator>--</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Disable global DFSDM at deinit of last channel */</comment>
  <if_stmt><if>if<condition>(<expr><name>v_dfsdm1ChannelCounter</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>DFSDM1_Channel0</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR1_DFSDMEN</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Call MSP deinit function */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_ChannelMspDeInit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hdfsdm_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_DFSDM_ChannelMspDeInit</name><argument_list>(<argument><expr><name>hdfsdm_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Set DFSDM Channel in reset state */</comment>
  <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DFSDM_CHANNEL_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Reset channel handle in DFSDM channel handle table */</comment>
  <expr_stmt><expr><name><name>a_dfsdm1ChannelHandle</name><index>[<expr><call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>DFSDM_Channel_HandleTypeDef</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(DFSDM2_Channel0) */</comment>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initialize the DFSDM channel MSP.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DFSDM_ChannelMspInit</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdfsdm_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_ChannelMspInit could be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  De-initialize the DFSDM channel MSP.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DFSDM_ChannelMspDeInit</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdfsdm_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_ChannelMspDeInit could be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a user DFSDM channel callback
  *         to be used instead of the weak predefined callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @param  CallbackID ID of the callback to be registered.
  *         This parameter can be one of the following values:
  *           @arg @ref HAL_DFSDM_CHANNEL_CKAB_CB_ID clock absence detection callback ID.
  *           @arg @ref HAL_DFSDM_CHANNEL_SCD_CB_ID short circuit detection callback ID.
  *           @arg @ref HAL_DFSDM_CHANNEL_MSPINIT_CB_ID MSP init callback ID.
  *           @arg @ref HAL_DFSDM_CHANNEL_MSPDEINIT_CB_ID MSP de-init callback ID.
  * @param  pCallback pointer to the callback function.
  * @retval HAL status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_Channel_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name>        <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>,
                                                     <parameter><decl><type><name>HAL_DFSDM_Channel_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>,
                                                     <parameter><decl><type><name>pDFSDM_Channel_CallbackTypeDef</name></type>      <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>HAL_DFSDM_CHANNEL_STATE_READY</name> <operator>==</operator> <name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
    <block>{<block_content>
      <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
      <block>{<block_content>
      <case>case <expr><name>HAL_DFSDM_CHANNEL_CKAB_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>CkabCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAL_DFSDM_CHANNEL_SCD_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>ScdCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAL_DFSDM_CHANNEL_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAL_DFSDM_CHANNEL_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default :</default>
        <comment type="block">/* update return status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>HAL_DFSDM_CHANNEL_STATE_RESET</name> <operator>==</operator> <name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
    <block>{<block_content>
      <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
      <block>{<block_content>
      <case>case <expr><name>HAL_DFSDM_CHANNEL_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAL_DFSDM_CHANNEL_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default :</default>
        <comment type="block">/* update return status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister a user DFSDM channel callback.
  *         DFSDM channel callback is redirected to the weak predefined callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @param  CallbackID ID of the callback to be unregistered.
  *         This parameter can be one of the following values:
  *           @arg @ref HAL_DFSDM_CHANNEL_CKAB_CB_ID clock absence detection callback ID.
  *           @arg @ref HAL_DFSDM_CHANNEL_SCD_CB_ID short circuit detection callback ID.
  *           @arg @ref HAL_DFSDM_CHANNEL_MSPINIT_CB_ID MSP init callback ID.
  *           @arg @ref HAL_DFSDM_CHANNEL_MSPDEINIT_CB_ID MSP de-init callback ID.
  * @retval HAL status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_Channel_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name>        <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>,
                                                       <parameter><decl><type><name>HAL_DFSDM_Channel_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>HAL_DFSDM_CHANNEL_STATE_READY</name> <operator>==</operator> <name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_DFSDM_CHANNEL_CKAB_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>CkabCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_ChannelCkabCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_DFSDM_CHANNEL_SCD_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>ScdCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_ChannelScdCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_DFSDM_CHANNEL_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_ChannelMspInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_DFSDM_CHANNEL_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_ChannelMspDeInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name>HAL_DFSDM_CHANNEL_STATE_RESET</name> <operator>==</operator> <name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_DFSDM_CHANNEL_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_ChannelMspInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_DFSDM_CHANNEL_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_ChannelMspDeInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_DFSDM_REGISTER_CALLBACKS */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DFSDM_Exported_Functions_Group2_Channel Channel operation functions
 *  @brief    Channel operation functions
 *
@verbatim
  ==============================================================================
                   ##### Channel operation functions #####
  ==============================================================================
    [..]  This section provides functions allowing to:
      (+) Manage clock absence detector feature.
      (+) Manage short circuit detector feature.
      (+) Get analog watchdog value.
      (+) Modify offset value.
@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to start clock absence detection in polling mode.
  * @note   Same mode has to be used for all channels.
  * @note   If clock is not available on this channel during 5 seconds,
  *         clock absence detection will not be activated and function
  *         will return HAL_TIMEOUT error.  
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_ChannelCkabStart</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>channel</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>DFSDM_Filter_TypeDef</name><modifier>*</modifier></type>       <name>filter0Instance</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(DFSDM2_Channel0) */</comment>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check DFSDM channel state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_CHANNEL_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* Get channel counter, channel handle table and channel 0 instance */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>IS_DFSDM1_CHANNEL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>filter0Instance</name>   <operator>=</operator> <name>DFSDM1_Filter0</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>filter0Instance</name>   <operator>=</operator> <name>DFSDM2_Filter0</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>   
    <comment type="block">/* Get channel number from channel instance */</comment>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get timeout */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear clock absence flag */</comment>
    <while>while<condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>filter0Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_CKABF</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>DFSDM_FLTISR_CKABF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>filter0Instance</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRCKABF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

      <comment type="block">/* Check the Timeout */</comment>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call><operator>-</operator><name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>DFSDM_CKAB_TIMEOUT</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Set timeout status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_TIMEOUT</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Get channel number from channel instance */</comment>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get timeout */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear clock absence flag */</comment>
    <while>while<condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>DFSDM1_Filter0</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_CKABF</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>DFSDM_FLTISR_CKABF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>DFSDM1_Filter0</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRCKABF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

      <comment type="block">/* Check the Timeout */</comment>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call><operator>-</operator><name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>DFSDM_CKAB_TIMEOUT</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Set timeout status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_TIMEOUT</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DFSDM2_Channel0 */</comment>    

    <if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Start clock absence detection */</comment>
      <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>|=</operator> <name>DFSDM_CHCFGR1_CKABEN</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to poll for the clock absence detection.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_ChannelPollForCkab</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>, 
                                               <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>channel</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>DFSDM_Filter_TypeDef</name><modifier>*</modifier></type>       <name>filter0Instance</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(DFSDM2_Channel0) */</comment>
  
  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check DFSDM channel state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_CHANNEL_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
    
    <comment type="block">/* Get channel counter, channel handle table and channel 0 instance */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>IS_DFSDM1_CHANNEL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>filter0Instance</name>   <operator>=</operator> <name>DFSDM1_Filter0</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>filter0Instance</name>   <operator>=</operator> <name>DFSDM2_Filter0</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Get channel number from channel instance */</comment>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Get timeout */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait clock absence detection */</comment>
    <while>while<condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>filter0Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_CKABF</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>DFSDM_FLTISR_CKABF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check the Timeout */</comment>
      <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call><operator>-</operator><name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Return timeout status */</comment>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    
    <comment type="block">/* Clear clock absence detection flag */</comment>
    <expr_stmt><expr><name><name>filter0Instance</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRCKABF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>   
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>    
    <comment type="block">/* Get channel number from channel instance */</comment>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Get timeout */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait clock absence detection */</comment>
    <while>while<condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>DFSDM1_Filter0</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_CKABF</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>DFSDM_FLTISR_CKABF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check the Timeout */</comment>
      <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call><operator>-</operator><name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Return timeout status */</comment>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    
    <comment type="block">/* Clear clock absence detection flag */</comment>
    <expr_stmt><expr><name><name>DFSDM1_Filter0</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRCKABF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(DFSDM2_Channel0) */</comment>    
    <comment type="block">/* Return function status */</comment>
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to stop clock absence detection in polling mode.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_ChannelCkabStop</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>channel</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>DFSDM_Filter_TypeDef</name><modifier>*</modifier></type>       <name>filter0Instance</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(DFSDM2_Channel0) */</comment>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check DFSDM channel state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_CHANNEL_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block">/* Get channel counter, channel handle table and channel 0 instance */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>IS_DFSDM1_CHANNEL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>filter0Instance</name>   <operator>=</operator> <name>DFSDM1_Filter0</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>filter0Instance</name>   <operator>=</operator> <name>DFSDM2_Filter0</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt> 

    <comment type="block">/* Stop clock absence detection */</comment>
    <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR1_CKABEN</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Clear clock absence flag */</comment>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>filter0Instance</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRCKABF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Stop clock absence detection */</comment>
    <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR1_CKABEN</name><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Clear clock absence flag */</comment>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>DFSDM1_Filter0</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRCKABF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DFSDM2_Channel0 */</comment>    
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
 
<comment type="block" format="doxygen">/**
  * @brief  This function allows to start clock absence detection in interrupt mode.
  * @note   Same mode has to be used for all channels.
  * @note   If clock is not available on this channel during 5 seconds,
  *         clock absence detection will not be activated and function
  *         will return HAL_TIMEOUT error.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_ChannelCkabStart_IT</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>channel</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>DFSDM_Filter_TypeDef</name><modifier>*</modifier></type>       <name>filter0Instance</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(DFSDM2_Channel0) */</comment>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check DFSDM channel state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_CHANNEL_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block">/* Get channel counter, channel handle table and channel 0 instance */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>IS_DFSDM1_CHANNEL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>filter0Instance</name>   <operator>=</operator> <name>DFSDM1_Filter0</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>filter0Instance</name>   <operator>=</operator> <name>DFSDM2_Filter0</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Get channel number from channel instance */</comment>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get timeout */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear clock absence flag */</comment>
    <while>while<condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>filter0Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_CKABF</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>DFSDM_FLTISR_CKABF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>filter0Instance</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRCKABF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

      <comment type="block">/* Check the Timeout */</comment>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call><operator>-</operator><name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>DFSDM_CKAB_TIMEOUT</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Set timeout status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_TIMEOUT</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Activate clock absence detection interrupt */</comment>
      <expr_stmt><expr><name><name>filter0Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>|=</operator> <name>DFSDM_FLTCR2_CKABIE</name></expr>;</expr_stmt>

      <comment type="block">/* Start clock absence detection */</comment>
      <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>|=</operator> <name>DFSDM_CHCFGR1_CKABEN</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  
    <comment type="block">/* Get channel number from channel instance */</comment>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get timeout */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear clock absence flag */</comment>
    <while>while<condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>DFSDM1_Filter0</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_CKABF</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>DFSDM_FLTISR_CKABF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>DFSDM1_Filter0</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRCKABF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

      <comment type="block">/* Check the Timeout */</comment>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call><operator>-</operator><name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>DFSDM_CKAB_TIMEOUT</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Set timeout status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_TIMEOUT</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Activate clock absence detection interrupt */</comment>
      <expr_stmt><expr><name><name>DFSDM1_Filter0</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>|=</operator> <name>DFSDM_FLTCR2_CKABIE</name></expr>;</expr_stmt>

      <comment type="block">/* Start clock absence detection */</comment>
      <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>|=</operator> <name>DFSDM_CHCFGR1_CKABEN</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(DFSDM2_Channel0) */</comment> 
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Clock absence detection callback. 
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DFSDM_ChannelCkabCallback</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdfsdm_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to stop clock absence detection in interrupt mode.
  * @note   Interrupt will be disabled for all channels
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_ChannelCkabStop_IT</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>channel</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>DFSDM_Filter_TypeDef</name><modifier>*</modifier></type>       <name>filter0Instance</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(DFSDM2_Channel0) */</comment>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check DFSDM channel state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_CHANNEL_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block">/* Get channel counter, channel handle table and channel 0 instance */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>IS_DFSDM1_CHANNEL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>filter0Instance</name>   <operator>=</operator> <name>DFSDM1_Filter0</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>filter0Instance</name>   <operator>=</operator> <name>DFSDM2_Filter0</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt> 

    <comment type="block">/* Stop clock absence detection */</comment>
    <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR1_CKABEN</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Clear clock absence flag */</comment>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>filter0Instance</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRCKABF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Disable clock absence detection interrupt */</comment>
    <expr_stmt><expr><name><name>filter0Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR2_CKABIE</name><operator>)</operator></expr>;</expr_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

    <comment type="block">/* Stop clock absence detection */</comment>
    <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR1_CKABEN</name><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Clear clock absence flag */</comment>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>DFSDM1_Filter0</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRCKABF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Disable clock absence detection interrupt */</comment>
    <expr_stmt><expr><name><name>DFSDM1_Filter0</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR2_CKABIE</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DFSDM2_Channel0 */</comment>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to start short circuit detection in polling mode.
  * @note   Same mode has to be used for all channels
  * @param  hdfsdm_channel DFSDM channel handle.
  * @param  Threshold Short circuit detector threshold.
  *         This parameter must be a number between Min_Data = 0 and Max_Data = 255.
  * @param  BreakSignal Break signals assigned to short circuit event.
  *         This parameter can be a values combination of @ref DFSDM_BreakSignals.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_ChannelScdStart</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>,
                                            <parameter><decl><type><name>uint32_t</name></type> <name>Threshold</name></decl></parameter>,
                                            <parameter><decl><type><name>uint32_t</name></type> <name>BreakSignal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_SCD_THRESHOLD</name><argument_list>(<argument><expr><name>Threshold</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_BREAK_SIGNALS</name><argument_list>(<argument><expr><name>BreakSignal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check DFSDM channel state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_CHANNEL_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Configure threshold and break signals */</comment>
    <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHAWSCDR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHAWSCDR_BKSCD</name> <operator>|</operator> <name>DFSDM_CHAWSCDR_SCDT</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHAWSCDR</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>BreakSignal</name> <operator>&lt;&lt;</operator> <name>DFSDM_CHAWSCDR_BKSCD_Pos</name><operator>)</operator> <operator>|</operator> \
                                         <name>Threshold</name><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Start short circuit detection */</comment>
    <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>|=</operator> <name>DFSDM_CHCFGR1_SCDEN</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to poll for the short circuit detection.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_ChannelPollForScd</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>, 
                                              <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>channel</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>DFSDM_Filter_TypeDef</name><modifier>*</modifier></type>       <name>filter0Instance</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(DFSDM2_Channel0) */</comment>
  
  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check DFSDM channel state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_CHANNEL_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Get channel number from channel instance */</comment>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* Get channel counter, channel handle table and channel 0 instance */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>IS_DFSDM1_CHANNEL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>filter0Instance</name>   <operator>=</operator> <name>DFSDM1_Filter0</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>filter0Instance</name>   <operator>=</operator> <name>DFSDM2_Filter0</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

   <comment type="block">/* Get timeout */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait short circuit detection */</comment>
    <while>while<condition>(<expr><operator>(</operator><operator>(</operator><name><name>filter0Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_SCDF</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>DFSDM_FLTISR_SCDF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check the Timeout */</comment>
      <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call><operator>-</operator><name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Return timeout status */</comment>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    
    <comment type="block">/* Clear short circuit detection flag */</comment>
    <expr_stmt><expr><name><name>filter0Instance</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRSCDF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Get timeout */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait short circuit detection */</comment>
    <while>while<condition>(<expr><operator>(</operator><operator>(</operator><name><name>DFSDM1_Filter0</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_SCDF</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>DFSDM_FLTISR_SCDF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check the Timeout */</comment>
      <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call><operator>-</operator><name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Return timeout status */</comment>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Clear short circuit detection flag */</comment>
    <expr_stmt><expr><name><name>DFSDM1_Filter0</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRSCDF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DFSDM2_Channel0 */</comment> 

    <comment type="block">/* Return function status */</comment>
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to stop short circuit detection in polling mode.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_ChannelScdStop</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>channel</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>DFSDM_Filter_TypeDef</name><modifier>*</modifier></type>       <name>filter0Instance</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(DFSDM2_Channel0) */</comment>  

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check DFSDM channel state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_CHANNEL_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Stop short circuit detection */</comment>
    <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR1_SCDEN</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Clear short circuit detection flag */</comment>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* Get channel counter, channel handle table and channel 0 instance */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>IS_DFSDM1_CHANNEL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>filter0Instance</name>   <operator>=</operator> <name>DFSDM1_Filter0</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>filter0Instance</name>   <operator>=</operator> <name>DFSDM2_Filter0</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>filter0Instance</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRSCDF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name><name>DFSDM1_Filter0</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRSCDF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DFSDM2_Channel0*/</comment>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to start short circuit detection in interrupt mode.
  * @note   Same mode has to be used for all channels
  * @param  hdfsdm_channel DFSDM channel handle.
  * @param  Threshold Short circuit detector threshold.
  *         This parameter must be a number between Min_Data = 0 and Max_Data = 255.
  * @param  BreakSignal Break signals assigned to short circuit event.
  *         This parameter can be a values combination of @ref DFSDM_BreakSignals.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_ChannelScdStart_IT</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>,
                                               <parameter><decl><type><name>uint32_t</name></type> <name>Threshold</name></decl></parameter>,
                                               <parameter><decl><type><name>uint32_t</name></type> <name>BreakSignal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>DFSDM_Filter_TypeDef</name><modifier>*</modifier></type>       <name>filter0Instance</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(DFSDM2_Channel0) */</comment> 
  
  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_SCD_THRESHOLD</name><argument_list>(<argument><expr><name>Threshold</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_BREAK_SIGNALS</name><argument_list>(<argument><expr><name>BreakSignal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check DFSDM channel state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_CHANNEL_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* Get channel counter, channel handle table and channel 0 instance */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>IS_DFSDM1_CHANNEL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>filter0Instance</name>   <operator>=</operator> <name>DFSDM1_Filter0</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>filter0Instance</name>   <operator>=</operator> <name>DFSDM2_Filter0</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* Activate short circuit detection interrupt */</comment>
    <expr_stmt><expr><name><name>filter0Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>|=</operator> <name>DFSDM_FLTCR2_SCDIE</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Activate short circuit detection interrupt */</comment>
    <expr_stmt><expr><name><name>DFSDM1_Filter0</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>|=</operator> <name>DFSDM_FLTCR2_SCDIE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DFSDM2_Channel0 */</comment>

    <comment type="block">/* Configure threshold and break signals */</comment>
    <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHAWSCDR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHAWSCDR_BKSCD</name> <operator>|</operator> <name>DFSDM_CHAWSCDR_SCDT</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHAWSCDR</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>BreakSignal</name> <operator>&lt;&lt;</operator> <name>DFSDM_CHAWSCDR_BKSCD_Pos</name><operator>)</operator> <operator>|</operator> \
                                         <name>Threshold</name><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Start short circuit detection */</comment>
    <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>|=</operator> <name>DFSDM_CHCFGR1_SCDEN</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Short circuit detection callback. 
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DFSDM_ChannelScdCallback</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdfsdm_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to stop short circuit detection in interrupt mode.
  * @note   Interrupt will be disabled for all channels
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_ChannelScdStop_IT</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>channel</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>DFSDM_Filter_TypeDef</name><modifier>*</modifier></type>       <name>filter0Instance</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(DFSDM2_Channel0) */</comment>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check DFSDM channel state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_CHANNEL_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Stop short circuit detection */</comment>
    <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR1_SCDEN</name><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Clear short circuit detection flag */</comment>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>DFSDM_GetChannelFromInstance</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* Get channel counter, channel handle table and channel 0 instance */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>IS_DFSDM1_CHANNEL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>filter0Instance</name>   <operator>=</operator> <name>DFSDM1_Filter0</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>filter0Instance</name>   <operator>=</operator> <name>DFSDM2_Filter0</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>filter0Instance</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRSCDF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Disable short circuit detection interrupt */</comment>
    <expr_stmt><expr><name><name>filter0Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR2_SCDIE</name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
   <expr_stmt><expr><name><name>DFSDM1_Filter0</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRSCDF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Disable short circuit detection interrupt */</comment>
    <expr_stmt><expr><name><name>DFSDM1_Filter0</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR2_SCDIE</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DFSDM2_Channel0 */</comment>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to get channel analog watchdog value.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval Channel analog watchdog value.
  */</comment>
<function><type><name>int16_t</name></type> <name>HAL_DFSDM_ChannelGetAwdValue</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>(</operator><name>int16_t</name><operator>)</operator> <name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHWDATAR</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to modify channel offset value.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @param  Offset DFSDM channel offset.
  *         This parameter must be a number between Min_Data = -8388608 and Max_Data = 8388607.
  * @retval HAL status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_ChannelModifyOffset</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>,
                                                <parameter><decl><type><name>int32_t</name></type> <name>Offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CHANNEL_OFFSET</name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check DFSDM channel state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_CHANNEL_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Modify channel offset */</comment>
    <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_CHCFGR2_OFFSET</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CHCFGR2</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>Offset</name> <operator>&lt;&lt;</operator> <name>DFSDM_CHCFGR2_OFFSET_Pos</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DFSDM_Exported_Functions_Group3_Channel Channel state function
 *  @brief    Channel state function
 *
@verbatim
  ==============================================================================
                   ##### Channel state function #####
  ==============================================================================
    [..]  This section provides function allowing to:
      (+) Get channel handle state.
@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to get the current DFSDM channel handle state.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval DFSDM channel state.
  */</comment>
<function><type><name>HAL_DFSDM_Channel_StateTypeDef</name></type> <name>HAL_DFSDM_ChannelGetState</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Return DFSDM channel handle state */</comment>
  <return>return <expr><name><name>hdfsdm_channel</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DFSDM_Exported_Functions_Group1_Filter Filter initialization and de-initialization functions
 *  @brief    Filter initialization and de-initialization functions 
 *
@verbatim
  ==============================================================================
        ##### Filter initialization and de-initialization functions #####
  ==============================================================================
    [..]  This section provides functions allowing to:
      (+) Initialize the DFSDM filter.
      (+) De-initialize the DFSDM filter.
@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initialize the DFSDM filter according to the specified parameters
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterInit</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check DFSDM Channel handle */</comment>
  <if_stmt><if>if<condition>(<expr><name>hdfsdm_filter</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_REG_TRIGGER</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>RegularParam</name><operator>.</operator><name>Trigger</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>RegularParam</name><operator>.</operator><name>FastMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>RegularParam</name><operator>.</operator><name>DmaMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_INJ_TRIGGER</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>InjectedParam</name><operator>.</operator><name>Trigger</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>InjectedParam</name><operator>.</operator><name>ScanMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FUNCTIONAL_STATE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>InjectedParam</name><operator>.</operator><name>DmaMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_SINC_ORDER</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FilterParam</name><operator>.</operator><name>SincOrder</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_OVS_RATIO</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FilterParam</name><operator>.</operator><name>Oversampling</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FilterParam</name><operator>.</operator><name>IntOversampling</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check parameters compatibility */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>DFSDM1_Filter0</name><operator>)</operator> <operator>&amp;&amp;</operator> 
    <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>RegularParam</name><operator>.</operator><name>Trigger</name></name>  <operator>==</operator> <name>DFSDM_FILTER_SYNC_TRIGGER</name><operator>)</operator> <operator>||</operator> 
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>InjectedParam</name><operator>.</operator><name>Trigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SYNC_TRIGGER</name><operator>)</operator><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>DFSDM2_Filter0</name><operator>)</operator> <operator>&amp;&amp;</operator> 
    <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>RegularParam</name><operator>.</operator><name>Trigger</name></name>  <operator>==</operator> <name>DFSDM_FILTER_SYNC_TRIGGER</name><operator>)</operator> <operator>||</operator> 
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>InjectedParam</name><operator>.</operator><name>Trigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SYNC_TRIGGER</name><operator>)</operator><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DFSDM2_Channel0 */</comment>
       
  <comment type="block">/* Initialize DFSDM filter variables with default values */</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegularContMode</name></name>     <operator>=</operator> <name>DFSDM_CONTINUOUS_CONV_OFF</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedChannelsNbr</name></name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvRemaining</name></name>    <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCode</name></name>           <operator>=</operator> <name>DFSDM_FILTER_ERROR_NONE</name></expr>;</expr_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/* Reset callback pointers to the weak predefined callbacks */</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>AwdCallback</name></name>             <operator>=</operator> <name>HAL_DFSDM_FilterAwdCallback</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegConvCpltCallback</name></name>     <operator>=</operator> <name>HAL_DFSDM_FilterRegConvCpltCallback</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegConvHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_FilterRegConvHalfCpltCallback</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvCpltCallback</name></name>     <operator>=</operator> <name>HAL_DFSDM_FilterInjConvCpltCallback</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_FilterInjConvHalfCpltCallback</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCallback</name></name>           <operator>=</operator> <name>HAL_DFSDM_FilterErrorCallback</name></expr>;</expr_stmt>

  <comment type="block">/* Call MSP init function */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_FilterMspInit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Call MSP init function */</comment>
  <expr_stmt><expr><call><name>HAL_DFSDM_FilterMspInit</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Set regular parameters */</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR1_RSYNC</name><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>RegularParam</name><operator>.</operator><name>FastMode</name></name> <operator>==</operator> <name>ENABLE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <name>DFSDM_FLTCR1_FAST</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR1_FAST</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>RegularParam</name><operator>.</operator><name>DmaMode</name></name> <operator>==</operator> <name>ENABLE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <name>DFSDM_FLTCR1_RDMAEN</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR1_RDMAEN</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Set injected parameters */</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR1_JSYNC</name> <operator>|</operator> <name>DFSDM_FLTCR1_JEXTEN</name> <operator>|</operator> <name>DFSDM_FLTCR1_JEXTSEL</name><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>InjectedParam</name><operator>.</operator><name>Trigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_EXT_TRIGGER</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_EXT_TRIG</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>InjectedParam</name><operator>.</operator><name>ExtTrigger</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_EXT_TRIG_EDGE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>InjectedParam</name><operator>.</operator><name>ExtTriggerEdge</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>InjectedParam</name><operator>.</operator><name>ExtTrigger</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>InjectedParam</name><operator>.</operator><name>ScanMode</name></name> <operator>==</operator> <name>ENABLE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <name>DFSDM_FLTCR1_JSCAN</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR1_JSCAN</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>InjectedParam</name><operator>.</operator><name>DmaMode</name></name> <operator>==</operator> <name>ENABLE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <name>DFSDM_FLTCR1_JDMAEN</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR1_JDMAEN</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Set filter parameters */</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTFCR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTFCR_FORD</name> <operator>|</operator> <name>DFSDM_FLTFCR_FOSR</name> <operator>|</operator> <name>DFSDM_FLTFCR_IOSR</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTFCR</name></name> <operator>|=</operator> <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FilterParam</name><operator>.</operator><name>SincOrder</name></name> <operator>|</operator>
                                    <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FilterParam</name><operator>.</operator><name>Oversampling</name></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>DFSDM_FLTFCR_FOSR_Pos</name><operator>)</operator> <operator>|</operator>
                                     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FilterParam</name><operator>.</operator><name>IntOversampling</name></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Store regular and injected triggers and injected scan mode*/</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegularTrigger</name></name>   <operator>=</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>RegularParam</name><operator>.</operator><name>Trigger</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedTrigger</name></name>  <operator>=</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>InjectedParam</name><operator>.</operator><name>Trigger</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ExtTriggerEdge</name></name>   <operator>=</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>InjectedParam</name><operator>.</operator><name>ExtTriggerEdge</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedScanMode</name></name> <operator>=</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>InjectedParam</name><operator>.</operator><name>ScanMode</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* Enable DFSDM filter */</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <name>DFSDM_FLTCR1_DFEN</name></expr>;</expr_stmt>

  <comment type="block">/* Set DFSDM filter to ready state */</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DFSDM_FILTER_STATE_READY</name></expr>;</expr_stmt>
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  De-initializes the DFSDM filter.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterDeInit</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check DFSDM filter handle */</comment>
  <if_stmt><if>if<condition>(<expr><name>hdfsdm_filter</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Disable the DFSDM filter */</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR1_DFEN</name><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Call MSP deinit function */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_FilterMspDeInit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_DFSDM_FilterMspDeInit</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Set DFSDM filter in reset state */</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DFSDM_FILTER_STATE_RESET</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the DFSDM filter MSP.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DFSDM_FilterMspInit</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_FilterMspInit could be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  De-initializes the DFSDM filter MSP.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DFSDM_FilterMspDeInit</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_FilterMspDeInit could be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a user DFSDM filter callback
  *         to be used instead of the weak predefined callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @param  CallbackID ID of the callback to be registered.
  *         This parameter can be one of the following values:
  *           @arg @ref HAL_DFSDM_FILTER_REGCONV_COMPLETE_CB_ID regular conversion complete callback ID.
  *           @arg @ref HAL_DFSDM_FILTER_REGCONV_HALFCOMPLETE_CB_ID half regular conversion complete callback ID.
  *           @arg @ref HAL_DFSDM_FILTER_INJCONV_COMPLETE_CB_ID injected conversion complete callback ID.
  *           @arg @ref HAL_DFSDM_FILTER_INJCONV_HALFCOMPLETE_CB_ID half injected conversion complete callback ID.
  *           @arg @ref HAL_DFSDM_FILTER_ERROR_CB_ID error callback ID.
  *           @arg @ref HAL_DFSDM_FILTER_MSPINIT_CB_ID MSP init callback ID.
  *           @arg @ref HAL_DFSDM_FILTER_MSPDEINIT_CB_ID MSP de-init callback ID.
  * @param  pCallback pointer to the callback function.
  * @retval HAL status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_Filter_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name>        <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>,
                                                    <parameter><decl><type><name>HAL_DFSDM_Filter_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>,
                                                    <parameter><decl><type><name>pDFSDM_Filter_CallbackTypeDef</name></type>      <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* update the error code */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>DFSDM_FILTER_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>HAL_DFSDM_FILTER_STATE_READY</name> <operator>==</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
    <block>{<block_content>
      <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
      <block>{<block_content>
      <case>case <expr><name>HAL_DFSDM_FILTER_REGCONV_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegConvCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAL_DFSDM_FILTER_REGCONV_HALFCOMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegConvHalfCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAL_DFSDM_FILTER_INJCONV_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAL_DFSDM_FILTER_INJCONV_HALFCOMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvHalfCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAL_DFSDM_FILTER_ERROR_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAL_DFSDM_FILTER_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAL_DFSDM_FILTER_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default :</default>
        <comment type="block">/* update the error code */</comment>
        <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>DFSDM_FILTER_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
        <comment type="block">/* update return status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>HAL_DFSDM_FILTER_STATE_RESET</name> <operator>==</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
    <block>{<block_content>
      <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
      <block>{<block_content>
      <case>case <expr><name>HAL_DFSDM_FILTER_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAL_DFSDM_FILTER_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default :</default>
        <comment type="block">/* update the error code */</comment>
        <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>DFSDM_FILTER_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
        <comment type="block">/* update return status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* update the error code */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>DFSDM_FILTER_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister a user DFSDM filter callback.
  *         DFSDM filter callback is redirected to the weak predefined callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @param  CallbackID ID of the callback to be unregistered.
  *         This parameter can be one of the following values:
  *           @arg @ref HAL_DFSDM_FILTER_REGCONV_COMPLETE_CB_ID regular conversion complete callback ID.
  *           @arg @ref HAL_DFSDM_FILTER_REGCONV_HALFCOMPLETE_CB_ID half regular conversion complete callback ID.
  *           @arg @ref HAL_DFSDM_FILTER_INJCONV_COMPLETE_CB_ID injected conversion complete callback ID.
  *           @arg @ref HAL_DFSDM_FILTER_INJCONV_HALFCOMPLETE_CB_ID half injected conversion complete callback ID.
  *           @arg @ref HAL_DFSDM_FILTER_ERROR_CB_ID error callback ID.
  *           @arg @ref HAL_DFSDM_FILTER_MSPINIT_CB_ID MSP init callback ID.
  *           @arg @ref HAL_DFSDM_FILTER_MSPDEINIT_CB_ID MSP de-init callback ID.
  * @retval HAL status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_Filter_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name>        <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>,
                                                      <parameter><decl><type><name>HAL_DFSDM_Filter_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>HAL_DFSDM_FILTER_STATE_READY</name> <operator>==</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_DFSDM_FILTER_REGCONV_COMPLETE_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegConvCpltCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_FilterRegConvCpltCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_DFSDM_FILTER_REGCONV_HALFCOMPLETE_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegConvHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_FilterRegConvHalfCpltCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_DFSDM_FILTER_INJCONV_COMPLETE_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvCpltCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_FilterInjConvCpltCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_DFSDM_FILTER_INJCONV_HALFCOMPLETE_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_FilterInjConvHalfCpltCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_DFSDM_FILTER_ERROR_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_FilterErrorCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_DFSDM_FILTER_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_FilterMspInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_DFSDM_FILTER_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_FilterMspDeInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* update the error code */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>DFSDM_FILTER_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name>HAL_DFSDM_FILTER_STATE_RESET</name> <operator>==</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_DFSDM_FILTER_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_FilterMspInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_DFSDM_FILTER_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_FilterMspDeInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* update the error code */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>DFSDM_FILTER_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* update the error code */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>DFSDM_FILTER_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Register a user DFSDM filter analog watchdog callback
  *         to be used instead of the weak predefined callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @param  pCallback pointer to the DFSDM filter analog watchdog callback function.
  * @retval HAL status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_Filter_RegisterAwdCallback</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name>      <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>,
                                                       <parameter><decl><type><name>pDFSDM_Filter_AwdCallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* update the error code */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>DFSDM_FILTER_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>HAL_DFSDM_FILTER_STATE_READY</name> <operator>==</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>AwdCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* update the error code */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>DFSDM_FILTER_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister a user DFSDM filter analog watchdog callback.
  *         DFSDM filter AWD callback is redirected to the weak predefined callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_Filter_UnRegisterAwdCallback</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>HAL_DFSDM_FILTER_STATE_READY</name> <operator>==</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>AwdCallback</name></name> <operator>=</operator> <name>HAL_DFSDM_FilterAwdCallback</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* update the error code */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>DFSDM_FILTER_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_DFSDM_REGISTER_CALLBACKS */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DFSDM_Exported_Functions_Group2_Filter Filter control functions
 *  @brief    Filter control functions
 *
@verbatim
  ==============================================================================
                    ##### Filter control functions #####
  ==============================================================================
    [..]  This section provides functions allowing to:
      (+) Select channel and enable/disable continuous mode for regular conversion.
      (+) Select channels for injected conversion.
@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to select channel and to enable/disable
  *         continuous mode for regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @param  Channel Channel for regular conversion.
  *         This parameter can be a value of @ref DFSDM_Channel_Selection.
  * @param  ContinuousMode Enable/disable continuous mode for regular conversion.
  *         This parameter can be a value of @ref DFSDM_ContinuousMode.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterConfigRegChannel</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>,
                                                   <parameter><decl><type><name>uint32_t</name></type>                    <name>Channel</name></decl></parameter>,
                                                   <parameter><decl><type><name>uint32_t</name></type>                    <name>ContinuousMode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_REGULAR_CHANNEL</name><argument_list>(<argument><expr><name>Channel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CONTINUOUS_MODE</name><argument_list>(<argument><expr><name>ContinuousMode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check DFSDM filter state */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> 
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_ERROR</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Configure channel and continuous mode for regular conversion */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR1_RCH</name> <operator>|</operator> <name>DFSDM_FLTCR1_RCONT</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>ContinuousMode</name> <operator>==</operator> <name>DFSDM_CONTINUOUS_CONV_ON</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>Channel</name> <operator>&amp;</operator> <name>DFSDM_MSB_MASK</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>DFSDM_FLTCR1_MSB_RCH_OFFSET</name><operator>)</operator> <operator>|</operator>
                                                     <name>DFSDM_FLTCR1_RCONT</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>Channel</name> <operator>&amp;</operator> <name>DFSDM_MSB_MASK</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>DFSDM_FLTCR1_MSB_RCH_OFFSET</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* Store continuous mode information */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegularContMode</name></name> <operator>=</operator> <name>ContinuousMode</name></expr>;</expr_stmt>
  </block_content>}</block></if>  
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to select channels for injected conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @param  Channel Channels for injected conversion.
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterConfigInjChannel</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>,
                                                   <parameter><decl><type><name>uint32_t</name></type>                    <name>Channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_INJECTED_CHANNEL</name><argument_list>(<argument><expr><name>Channel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check DFSDM filter state */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> 
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_ERROR</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Configure channel for injected conversion */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTJCHGR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name>Channel</name> <operator>&amp;</operator> <name>DFSDM_LSB_MASK</name><operator>)</operator></expr>;</expr_stmt>
    <comment type="block">/* Store number of injected channels */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedChannelsNbr</name></name> <operator>=</operator> <call><name>DFSDM_GetInjChannelsNbr</name><argument_list>(<argument><expr><name>Channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Update number of injected channels remaining */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvRemaining</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedScanMode</name></name> <operator>==</operator> <name>ENABLE</name><operator>)</operator></expr> ?</condition><then> \
                                      <expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedChannelsNbr</name></name></expr> </then><else>: <expr><literal type="number">1U</literal></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DFSDM_Exported_Functions_Group3_Filter Filter operation functions
 *  @brief    Filter operation functions
 *
@verbatim
  ==============================================================================
                    ##### Filter operation functions #####
  ==============================================================================
    [..]  This section provides functions allowing to:
      (+) Start conversion of regular/injected channel.
      (+) Poll for the end of regular/injected conversion.
      (+) Stop conversion of regular/injected channel.
      (+) Start conversion of regular/injected channel and enable interrupt.
      (+) Call the callback functions at the end of regular/injected conversions.
      (+) Stop conversion of regular/injected channel and disable interrupt.
      (+) Start conversion of regular/injected channel and enable DMA transfer.
      (+) Stop conversion of regular/injected channel and disable DMA transfer.
      (+) Start analog watchdog and enable interrupt.
      (+) Call the callback function when analog watchdog occurs.
      (+) Stop analog watchdog and disable interrupt.
      (+) Start extreme detector.
      (+) Stop extreme detector.
      (+) Get result of regular channel conversion.
      (+) Get result of injected channel conversion.
      (+) Get extreme detector maximum and minimum values.
      (+) Get conversion time.
      (+) Handle DFSDM interrupt request.
@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to start regular conversion in polling mode.
  * @note   This function should be called only when DFSDM filter instance is 
  *         in idle state or if injected conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterRegularStart</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check DFSDM filter state */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_READY</name><operator>)</operator> <operator>||</operator> \
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_INJ</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Start regular conversion */</comment>
    <expr_stmt><expr><call><name>DFSDM_RegConvStart</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to poll for the end of regular conversion.
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterPollForRegConversion</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>,
                                                       <parameter><decl><type><name>uint32_t</name></type>                    <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check DFSDM filter state */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_REG</name><operator>)</operator> <operator>&amp;&amp;</operator> \
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_REG_INJ</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Get timeout */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>  

    <comment type="block">/* Wait end of regular conversion */</comment>
    <while>while<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_REOCF</name><operator>)</operator> <operator>!=</operator> <name>DFSDM_FLTISR_REOCF</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check the Timeout */</comment>
      <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call><operator>-</operator><name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Return timeout status */</comment>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <comment type="block">/* Check if overrun occurs */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_ROVRF</name><operator>)</operator> <operator>==</operator> <name>DFSDM_FLTISR_ROVRF</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Update error code and call error callback */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>DFSDM_FILTER_ERROR_REGULAR_OVERRUN</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_DFSDM_FilterErrorCallback</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <comment type="block">/* Clear regular overrun flag */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <name>DFSDM_FLTICR_CLRROVRF</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Update DFSDM filter state only if not continuous conversion and SW trigger */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegularContMode</name></name> <operator>==</operator> <name>DFSDM_CONTINUOUS_CONV_OFF</name><operator>)</operator> <operator>&amp;&amp;</operator> \
       <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegularTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SW_TRIGGER</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_REG</name><operator>)</operator></expr> ?</condition><then> \
                             <expr><name>HAL_DFSDM_FILTER_STATE_READY</name></expr> </then><else>: <expr><name>HAL_DFSDM_FILTER_STATE_INJ</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Return function status */</comment>
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to stop regular conversion in polling mode.
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterRegularStop</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check DFSDM filter state */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_REG</name><operator>)</operator> <operator>&amp;&amp;</operator> \
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_REG_INJ</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Stop regular conversion */</comment>
    <expr_stmt><expr><call><name>DFSDM_RegConvStop</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to start regular conversion in interrupt mode.
  * @note   This function should be called only when DFSDM filter instance is 
  *         in idle state or if injected conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterRegularStart_IT</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check DFSDM filter state */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_READY</name><operator>)</operator> <operator>||</operator> \
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_INJ</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable interrupts for regular conversions */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>|=</operator> <operator>(</operator><name>DFSDM_FLTCR2_REOCIE</name> <operator>|</operator> <name>DFSDM_FLTCR2_ROVRIE</name><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Start regular conversion */</comment>
    <expr_stmt><expr><call><name>DFSDM_RegConvStart</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to stop regular conversion in interrupt mode.
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterRegularStop_IT</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check DFSDM filter state */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_REG</name><operator>)</operator> <operator>&amp;&amp;</operator> \
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_REG_INJ</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Disable interrupts for regular conversions */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR2_REOCIE</name> <operator>|</operator> <name>DFSDM_FLTCR2_ROVRIE</name><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Stop regular conversion */</comment>
    <expr_stmt><expr><call><name>DFSDM_RegConvStop</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to start regular conversion in DMA mode.
  * @note   This function should be called only when DFSDM filter instance is 
  *         in idle state or if injected conversion is ongoing.
  *         Please note that data on buffer will contain signed regular conversion
  *         value on 24 most significant bits and corresponding channel on 3 least
  *         significant bits.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @param  pData The destination buffer address.
  * @param  Length The length of data to be transferred from DFSDM filter to memory.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterRegularStart_DMA</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>,
                                                   <parameter><decl><type><name>int32_t</name>                    <modifier>*</modifier></type><name>pData</name></decl></parameter>,
                                                   <parameter><decl><type><name>uint32_t</name></type>                    <name>Length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check destination address and length */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Length</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Check that DMA is enabled for regular conversion */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;</operator> <name>DFSDM_FLTCR1_RDMAEN</name><operator>)</operator> <operator>!=</operator> <name>DFSDM_FLTCR1_RDMAEN</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Check parameters compatibility */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegularTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SW_TRIGGER</name><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegularContMode</name></name> <operator>==</operator> <name>DFSDM_CONTINUOUS_CONV_OFF</name><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaReg</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>DMA_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><name>Length</name> <operator>!=</operator> <literal type="number">1U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegularTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SW_TRIGGER</name><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegularContMode</name></name> <operator>==</operator> <name>DFSDM_CONTINUOUS_CONV_OFF</name><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaReg</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>DMA_CIRCULAR</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Check DFSDM filter state */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_READY</name><operator>)</operator> <operator>||</operator> \
          <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_INJ</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set callbacks on DMA handler */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaReg</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>DFSDM_DMARegularConvCplt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaReg</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>DFSDM_DMAError</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaReg</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaReg</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>DMA_CIRCULAR</name><operator>)</operator></expr> ?</condition><then>\
                                                   <expr><name>DFSDM_DMARegularHalfConvCplt</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    
    <comment type="block">/* Start DMA in interrupt mode */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaReg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTRDATAR</name></name></expr></argument>, \
                        <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>pData</name></expr></argument>, <argument><expr><name>Length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set DFSDM filter in error state */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DFSDM_FILTER_STATE_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Start regular conversion */</comment>
      <expr_stmt><expr><call><name>DFSDM_RegConvStart</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to start regular conversion in DMA mode and to get
  *         only the 16 most significant bits of conversion.
  * @note   This function should be called only when DFSDM filter instance is 
  *         in idle state or if injected conversion is ongoing.
  *         Please note that data on buffer will contain signed 16 most significant
  *         bits of regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @param  pData The destination buffer address.
  * @param  Length The length of data to be transferred from DFSDM filter to memory.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterRegularMsbStart_DMA</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>,
                                                      <parameter><decl><type><name>int16_t</name>                    <modifier>*</modifier></type><name>pData</name></decl></parameter>,
                                                      <parameter><decl><type><name>uint32_t</name></type>                    <name>Length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check destination address and length */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Length</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Check that DMA is enabled for regular conversion */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;</operator> <name>DFSDM_FLTCR1_RDMAEN</name><operator>)</operator> <operator>!=</operator> <name>DFSDM_FLTCR1_RDMAEN</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Check parameters compatibility */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegularTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SW_TRIGGER</name><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegularContMode</name></name> <operator>==</operator> <name>DFSDM_CONTINUOUS_CONV_OFF</name><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaReg</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>DMA_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><name>Length</name> <operator>!=</operator> <literal type="number">1U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegularTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SW_TRIGGER</name><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegularContMode</name></name> <operator>==</operator> <name>DFSDM_CONTINUOUS_CONV_OFF</name><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaReg</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>DMA_CIRCULAR</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Check DFSDM filter state */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_READY</name><operator>)</operator> <operator>||</operator> \
          <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_INJ</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set callbacks on DMA handler */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaReg</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>DFSDM_DMARegularConvCplt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaReg</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>DFSDM_DMAError</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaReg</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaReg</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>DMA_CIRCULAR</name><operator>)</operator></expr> ?</condition><then>\
                                                   <expr><name>DFSDM_DMARegularHalfConvCplt</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    
    <comment type="block">/* Start DMA in interrupt mode */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaReg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTRDATAR</name></name><operator>)</operator> <operator>+</operator> <literal type="number">2U</literal></expr></argument>, \
                        <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>pData</name></expr></argument>, <argument><expr><name>Length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set DFSDM filter in error state */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DFSDM_FILTER_STATE_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Start regular conversion */</comment>
      <expr_stmt><expr><call><name>DFSDM_RegConvStart</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to stop regular conversion in DMA mode.
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterRegularStop_DMA</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check DFSDM filter state */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_REG</name><operator>)</operator> <operator>&amp;&amp;</operator> \
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_REG_INJ</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Stop current DMA transfer */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaReg</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set DFSDM filter in error state */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DFSDM_FILTER_STATE_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Stop regular conversion */</comment>
      <expr_stmt><expr><call><name>DFSDM_RegConvStop</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to get regular conversion value.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @param  Channel Corresponding channel of regular conversion.
  * @retval Regular conversion value
  */</comment>
<function><type><name>int32_t</name></type> <name>HAL_DFSDM_FilterGetRegularValue</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>,
                                        <parameter><decl><type><name>uint32_t</name>                   <modifier>*</modifier></type><name>Channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>reg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><name>Channel</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get value of data register for regular channel */</comment>
  <expr_stmt><expr><name>reg</name> <operator>=</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTRDATAR</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* Extract channel and regular conversion value */</comment>
  <expr_stmt><expr><operator>*</operator><name>Channel</name> <operator>=</operator> <operator>(</operator><name>reg</name> <operator>&amp;</operator> <name>DFSDM_FLTRDATAR_RDATACH</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>reg</name> <operator>&amp;</operator> <name>DFSDM_FLTRDATAR_RDATA</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>DFSDM_FLTRDATAR_RDATA_Pos</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* return regular conversion value */</comment>
  <return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to start injected conversion in polling mode.
  * @note   This function should be called only when DFSDM filter instance is 
  *         in idle state or if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterInjectedStart</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check DFSDM filter state */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_READY</name><operator>)</operator> <operator>||</operator> \
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_REG</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Start injected conversion */</comment>
    <expr_stmt><expr><call><name>DFSDM_InjConvStart</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to poll for the end of injected conversion.
  * @note   This function should be called only if injected conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterPollForInjConversion</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>,
                                                       <parameter><decl><type><name>uint32_t</name></type>                    <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check DFSDM filter state */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_INJ</name><operator>)</operator> <operator>&amp;&amp;</operator> \
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_REG_INJ</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Get timeout */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>  

    <comment type="block">/* Wait end of injected conversions */</comment>
    <while>while<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_JEOCF</name><operator>)</operator> <operator>!=</operator> <name>DFSDM_FLTISR_JEOCF</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check the Timeout */</comment>
      <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call><operator>-</operator><name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Return timeout status */</comment>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <comment type="block">/* Check if overrun occurs */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_JOVRF</name><operator>)</operator> <operator>==</operator> <name>DFSDM_FLTISR_JOVRF</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Update error code and call error callback */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>DFSDM_FILTER_ERROR_INJECTED_OVERRUN</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_DFSDM_FilterErrorCallback</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <comment type="block">/* Clear injected overrun flag */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <name>DFSDM_FLTICR_CLRJOVRF</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Update remaining injected conversions */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvRemaining</name></name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvRemaining</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Update DFSDM filter state only if trigger is software */</comment>
      <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SW_TRIGGER</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_INJ</name><operator>)</operator></expr> ?</condition><then> \
                               <expr><name>HAL_DFSDM_FILTER_STATE_READY</name></expr> </then><else>: <expr><name>HAL_DFSDM_FILTER_STATE_REG</name></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* end of injected sequence, reset the value */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvRemaining</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedScanMode</name></name> <operator>==</operator> <name>ENABLE</name><operator>)</operator></expr> ?</condition><then> \
                                         <expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedChannelsNbr</name></name></expr> </then><else>: <expr><literal type="number">1U</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Return function status */</comment>
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to stop injected conversion in polling mode.
  * @note   This function should be called only if injected conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterInjectedStop</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check DFSDM filter state */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_INJ</name><operator>)</operator> <operator>&amp;&amp;</operator> \
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_REG_INJ</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Stop injected conversion */</comment>
    <expr_stmt><expr><call><name>DFSDM_InjConvStop</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to start injected conversion in interrupt mode.
  * @note   This function should be called only when DFSDM filter instance is 
  *         in idle state or if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterInjectedStart_IT</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check DFSDM filter state */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_READY</name><operator>)</operator> <operator>||</operator> \
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_REG</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable interrupts for injected conversions */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>|=</operator> <operator>(</operator><name>DFSDM_FLTCR2_JEOCIE</name> <operator>|</operator> <name>DFSDM_FLTCR2_JOVRIE</name><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Start injected conversion */</comment>
    <expr_stmt><expr><call><name>DFSDM_InjConvStart</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to stop injected conversion in interrupt mode.
  * @note   This function should be called only if injected conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterInjectedStop_IT</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check DFSDM filter state */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_INJ</name><operator>)</operator> <operator>&amp;&amp;</operator> \
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_REG_INJ</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Disable interrupts for injected conversions */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR2_JEOCIE</name> <operator>|</operator> <name>DFSDM_FLTCR2_JOVRIE</name><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Stop injected conversion */</comment>
    <expr_stmt><expr><call><name>DFSDM_InjConvStop</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to start injected conversion in DMA mode.
  * @note   This function should be called only when DFSDM filter instance is 
  *         in idle state or if regular conversion is ongoing.
  *         Please note that data on buffer will contain signed injected conversion
  *         value on 24 most significant bits and corresponding channel on 3 least
  *         significant bits.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @param  pData The destination buffer address.
  * @param  Length The length of data to be transferred from DFSDM filter to memory.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterInjectedStart_DMA</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>,
                                                    <parameter><decl><type><name>int32_t</name>                    <modifier>*</modifier></type><name>pData</name></decl></parameter>,
                                                    <parameter><decl><type><name>uint32_t</name></type>                    <name>Length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check destination address and length */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Length</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Check that DMA is enabled for injected conversion */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;</operator> <name>DFSDM_FLTCR1_JDMAEN</name><operator>)</operator> <operator>!=</operator> <name>DFSDM_FLTCR1_JDMAEN</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Check parameters compatibility */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SW_TRIGGER</name><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaInj</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>DMA_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><name>Length</name> <operator>&gt;</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvRemaining</name></name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SW_TRIGGER</name><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaInj</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>DMA_CIRCULAR</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Check DFSDM filter state */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_READY</name><operator>)</operator> <operator>||</operator> \
          <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_REG</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set callbacks on DMA handler */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaInj</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>DFSDM_DMAInjectedConvCplt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaInj</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>DFSDM_DMAError</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaInj</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaInj</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>DMA_CIRCULAR</name><operator>)</operator></expr> ?</condition><then>\
                                                   <expr><name>DFSDM_DMAInjectedHalfConvCplt</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    
    <comment type="block">/* Start DMA in interrupt mode */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaInj</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTJDATAR</name></name></expr></argument>, \
                        <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>pData</name></expr></argument>, <argument><expr><name>Length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set DFSDM filter in error state */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DFSDM_FILTER_STATE_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Start injected conversion */</comment>
      <expr_stmt><expr><call><name>DFSDM_InjConvStart</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to start injected conversion in DMA mode and to get
  *         only the 16 most significant bits of conversion.
  * @note   This function should be called only when DFSDM filter instance is 
  *         in idle state or if regular conversion is ongoing.
  *         Please note that data on buffer will contain signed 16 most significant
  *         bits of injected conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @param  pData The destination buffer address.
  * @param  Length The length of data to be transferred from DFSDM filter to memory.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterInjectedMsbStart_DMA</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>,
                                                       <parameter><decl><type><name>int16_t</name>                    <modifier>*</modifier></type><name>pData</name></decl></parameter>,
                                                       <parameter><decl><type><name>uint32_t</name></type>                    <name>Length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check destination address and length */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Length</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Check that DMA is enabled for injected conversion */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;</operator> <name>DFSDM_FLTCR1_JDMAEN</name><operator>)</operator> <operator>!=</operator> <name>DFSDM_FLTCR1_JDMAEN</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Check parameters compatibility */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SW_TRIGGER</name><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaInj</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>DMA_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><name>Length</name> <operator>&gt;</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvRemaining</name></name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SW_TRIGGER</name><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaInj</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>DMA_CIRCULAR</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Check DFSDM filter state */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_READY</name><operator>)</operator> <operator>||</operator> \
          <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_REG</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set callbacks on DMA handler */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaInj</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>DFSDM_DMAInjectedConvCplt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaInj</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>DFSDM_DMAError</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaInj</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaInj</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>DMA_CIRCULAR</name><operator>)</operator></expr> ?</condition><then>\
                                                   <expr><name>DFSDM_DMAInjectedHalfConvCplt</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    
    <comment type="block">/* Start DMA in interrupt mode */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaInj</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTJDATAR</name></name><operator>)</operator> <operator>+</operator> <literal type="number">2U</literal></expr></argument>, \
                        <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>pData</name></expr></argument>, <argument><expr><name>Length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set DFSDM filter in error state */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DFSDM_FILTER_STATE_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Start injected conversion */</comment>
      <expr_stmt><expr><call><name>DFSDM_InjConvStart</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to stop injected conversion in DMA mode.
  * @note   This function should be called only if injected conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterInjectedStop_DMA</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check DFSDM filter state */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_INJ</name><operator>)</operator> <operator>&amp;&amp;</operator> \
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DFSDM_FILTER_STATE_REG_INJ</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Stop current DMA transfer */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>hdmaInj</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set DFSDM filter in error state */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DFSDM_FILTER_STATE_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Stop regular conversion */</comment>
      <expr_stmt><expr><call><name>DFSDM_InjConvStop</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to get injected conversion value.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @param  Channel Corresponding channel of injected conversion.
  * @retval Injected conversion value
  */</comment>
<function><type><name>int32_t</name></type> <name>HAL_DFSDM_FilterGetInjectedValue</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>, 
                                         <parameter><decl><type><name>uint32_t</name>                   <modifier>*</modifier></type><name>Channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>reg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><name>Channel</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get value of data register for injected channel */</comment>
  <expr_stmt><expr><name>reg</name> <operator>=</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTJDATAR</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* Extract channel and injected conversion value */</comment>
  <expr_stmt><expr><operator>*</operator><name>Channel</name> <operator>=</operator> <operator>(</operator><name>reg</name> <operator>&amp;</operator> <name>DFSDM_FLTJDATAR_JDATACH</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>reg</name> <operator>&amp;</operator> <name>DFSDM_FLTJDATAR_JDATA</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>DFSDM_FLTJDATAR_JDATA_Pos</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* return regular conversion value */</comment>
  <return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to start filter analog watchdog in interrupt mode.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @param  awdParam DFSDM filter analog watchdog parameters.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterAwdStart_IT</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name>   <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>,
                                              <parameter><decl><type><name>DFSDM_Filter_AwdParamTypeDef</name> <modifier>*</modifier></type><name>awdParam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_AWD_DATA_SOURCE</name><argument_list>(<argument><expr><name><name>awdParam</name><operator>-&gt;</operator><name>DataSource</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_INJECTED_CHANNEL</name><argument_list>(<argument><expr><name><name>awdParam</name><operator>-&gt;</operator><name>Channel</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_AWD_THRESHOLD</name><argument_list>(<argument><expr><name><name>awdParam</name><operator>-&gt;</operator><name>HighThreshold</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_AWD_THRESHOLD</name><argument_list>(<argument><expr><name><name>awdParam</name><operator>-&gt;</operator><name>LowThreshold</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_BREAK_SIGNALS</name><argument_list>(<argument><expr><name><name>awdParam</name><operator>-&gt;</operator><name>HighBreakSignal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_BREAK_SIGNALS</name><argument_list>(<argument><expr><name><name>awdParam</name><operator>-&gt;</operator><name>LowBreakSignal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check DFSDM filter state */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_RESET</name><operator>)</operator> <operator>||</operator> \
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_ERROR</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Set analog watchdog data source */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR1_AWFSEL</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <name><name>awdParam</name><operator>-&gt;</operator><name>DataSource</name></name></expr>;</expr_stmt>

    <comment type="block">/* Set thresholds and break signals */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTAWHTR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTAWHTR_AWHT</name> <operator>|</operator> <name>DFSDM_FLTAWHTR_BKAWH</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTAWHTR</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>awdParam</name><operator>-&gt;</operator><name>HighThreshold</name></name> <operator>&lt;&lt;</operator> <name>DFSDM_FLTAWHTR_AWHT_Pos</name><operator>)</operator> <operator>|</operator> \
                                           <name><name>awdParam</name><operator>-&gt;</operator><name>HighBreakSignal</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTAWLTR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTAWLTR_AWLT</name> <operator>|</operator> <name>DFSDM_FLTAWLTR_BKAWL</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTAWLTR</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>awdParam</name><operator>-&gt;</operator><name>LowThreshold</name></name> <operator>&lt;&lt;</operator> <name>DFSDM_FLTAWLTR_AWLT_Pos</name><operator>)</operator> <operator>|</operator> \
                                           <name><name>awdParam</name><operator>-&gt;</operator><name>LowBreakSignal</name></name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Set channels and interrupt for analog watchdog */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR2_AWDCH</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>awdParam</name><operator>-&gt;</operator><name>Channel</name></name> <operator>&amp;</operator> <name>DFSDM_LSB_MASK</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>DFSDM_FLTCR2_AWDCH_Pos</name><operator>)</operator> <operator>|</operator> \
                                        <name>DFSDM_FLTCR2_AWDIE</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to stop filter analog watchdog in interrupt mode.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterAwdStop_IT</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check DFSDM filter state */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_RESET</name><operator>)</operator> <operator>||</operator> \
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_ERROR</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Reset channels for analog watchdog and deactivate interrupt */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR2_AWDCH</name> <operator>|</operator> <name>DFSDM_FLTCR2_AWDIE</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Clear all analog watchdog flags */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTAWCFR</name></name> <operator>=</operator> <operator>(</operator><name>DFSDM_FLTAWCFR_CLRAWHTF</name> <operator>|</operator> <name>DFSDM_FLTAWCFR_CLRAWLTF</name><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Reset thresholds and break signals */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTAWHTR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTAWHTR_AWHT</name> <operator>|</operator> <name>DFSDM_FLTAWHTR_BKAWH</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTAWLTR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTAWLTR_AWLT</name> <operator>|</operator> <name>DFSDM_FLTAWLTR_BKAWL</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Reset analog watchdog data source */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR1_AWFSEL</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to start extreme detector feature.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @param  Channel Channels where extreme detector is enabled.
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterExdStart</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>,
                                           <parameter><decl><type><name>uint32_t</name></type>                    <name>Channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_INJECTED_CHANNEL</name><argument_list>(<argument><expr><name>Channel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check DFSDM filter state */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_RESET</name><operator>)</operator> <operator>||</operator> \
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_ERROR</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Set channels for extreme detector */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR2_EXCH</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>Channel</name> <operator>&amp;</operator> <name>DFSDM_LSB_MASK</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>DFSDM_FLTCR2_EXCH_Pos</name><operator>)</operator></expr>;</expr_stmt>    
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to stop extreme detector feature.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DFSDM_FilterExdStop</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type>     <name>reg1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type>     <name>reg2</name></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check DFSDM filter state */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_RESET</name><operator>)</operator> <operator>||</operator> \
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_ERROR</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Reset channels for extreme detector */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR2_EXCH</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Clear extreme detector values */</comment>
    <expr_stmt><expr><name>reg1</name> <operator>=</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTEXMAX</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>reg2</name> <operator>=</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTEXMIN</name></name></expr>;</expr_stmt>    
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>reg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* To avoid GCC warning */</comment>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* To avoid GCC warning */</comment>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to get extreme detector maximum value.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @param  Channel Corresponding channel.
  * @retval Extreme detector maximum value
  *         This value is between Min_Data = -8388608 and Max_Data = 8388607.
  */</comment>
<function><type><name>int32_t</name></type> <name>HAL_DFSDM_FilterGetExdMaxValue</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>,
                                       <parameter><decl><type><name>uint32_t</name>                   <modifier>*</modifier></type><name>Channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>reg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><name>Channel</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get value of extreme detector maximum register */</comment>
  <expr_stmt><expr><name>reg</name> <operator>=</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTEXMAX</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* Extract channel and extreme detector maximum value */</comment>
  <expr_stmt><expr><operator>*</operator><name>Channel</name> <operator>=</operator> <operator>(</operator><name>reg</name> <operator>&amp;</operator> <name>DFSDM_FLTEXMAX_EXMAXCH</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>reg</name> <operator>&amp;</operator> <name>DFSDM_FLTEXMAX_EXMAX</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>DFSDM_FLTEXMAX_EXMAX_Pos</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* return extreme detector maximum value */</comment>
  <return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to get extreme detector minimum value.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @param  Channel Corresponding channel.
  * @retval Extreme detector minimum value
  *         This value is between Min_Data = -8388608 and Max_Data = 8388607.
  */</comment>
<function><type><name>int32_t</name></type> <name>HAL_DFSDM_FilterGetExdMinValue</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>,
                                       <parameter><decl><type><name>uint32_t</name>                   <modifier>*</modifier></type><name>Channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>reg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><name>Channel</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get value of extreme detector minimum register */</comment>
  <expr_stmt><expr><name>reg</name> <operator>=</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTEXMIN</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* Extract channel and extreme detector minimum value */</comment>
  <expr_stmt><expr><operator>*</operator><name>Channel</name> <operator>=</operator> <operator>(</operator><name>reg</name> <operator>&amp;</operator> <name>DFSDM_FLTEXMIN_EXMINCH</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>reg</name> <operator>&amp;</operator> <name>DFSDM_FLTEXMIN_EXMIN</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>DFSDM_FLTEXMIN_EXMIN_Pos</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* return extreme detector minimum value */</comment>
  <return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to get conversion time value.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval Conversion time value
  * @note   To get time in second, this value has to be divided by DFSDM clock frequency.
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_DFSDM_FilterGetConvTimeValue</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>reg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_FILTER_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get value of conversion timer register */</comment>
  <expr_stmt><expr><name>reg</name> <operator>=</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCNVTIMR</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* Extract conversion time value */</comment>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>reg</name> <operator>&amp;</operator> <name>DFSDM_FLTCNVTIMR_CNVCNT</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>DFSDM_FLTCNVTIMR_CNVCNT_Pos</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* return extreme detector minimum value */</comment>
  <return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_DFSDM_IRQHandler</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check if overrun occurs during regular conversion */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_ROVRF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> \
     <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;</operator> <name>DFSDM_FLTCR2_ROVRIE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear regular overrun flag */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <name>DFSDM_FLTICR_CLRROVRF</name></expr>;</expr_stmt>

    <comment type="block">/* Update error code */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>DFSDM_FILTER_ERROR_REGULAR_OVERRUN</name></expr>;</expr_stmt>

    <comment type="block">/* Call error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_DFSDM_FilterErrorCallback</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if>
  <comment type="block">/* Check if overrun occurs during injected conversion */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_JOVRF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;</operator> <name>DFSDM_FLTCR2_JOVRIE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear injected overrun flag */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <name>DFSDM_FLTICR_CLRJOVRF</name></expr>;</expr_stmt>

    <comment type="block">/* Update error code */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>DFSDM_FILTER_ERROR_INJECTED_OVERRUN</name></expr>;</expr_stmt>

    <comment type="block">/* Call error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_DFSDM_FilterErrorCallback</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if>
  <comment type="block">/* Check if end of regular conversion */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_REOCF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;</operator> <name>DFSDM_FLTCR2_REOCIE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Call regular conversion complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegConvCpltCallback</name></name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_DFSDM_FilterRegConvCpltCallback</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* End of conversion if mode is not continuous and software trigger */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegularContMode</name></name> <operator>==</operator> <name>DFSDM_CONTINUOUS_CONV_OFF</name><operator>)</operator> <operator>&amp;&amp;</operator> \
       <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegularTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SW_TRIGGER</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable interrupts for regular conversions */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR2_REOCIE</name><operator>)</operator></expr>;</expr_stmt>

      <comment type="block">/* Update DFSDM filter state */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_REG</name><operator>)</operator></expr> ?</condition><then> \
                             <expr><name>HAL_DFSDM_FILTER_STATE_READY</name></expr> </then><else>: <expr><name>HAL_DFSDM_FILTER_STATE_INJ</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Check if end of injected conversion */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_JEOCF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;</operator> <name>DFSDM_FLTCR2_JEOCIE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Call injected conversion complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvCpltCallback</name></name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_DFSDM_FilterInjConvCpltCallback</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Update remaining injected conversions */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvRemaining</name></name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvRemaining</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* End of conversion if trigger is software */</comment>
      <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SW_TRIGGER</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Disable interrupts for injected conversions */</comment>
        <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR2_JEOCIE</name><operator>)</operator></expr>;</expr_stmt>

        <comment type="block">/* Update DFSDM filter state */</comment>
        <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_INJ</name><operator>)</operator></expr> ?</condition><then> \
                               <expr><name>HAL_DFSDM_FILTER_STATE_READY</name></expr> </then><else>: <expr><name>HAL_DFSDM_FILTER_STATE_REG</name></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* end of injected sequence, reset the value */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvRemaining</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedScanMode</name></name> <operator>==</operator> <name>ENABLE</name><operator>)</operator></expr> ?</condition><then> \
                                         <expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedChannelsNbr</name></name></expr> </then><else>: <expr><literal type="number">1U</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Check if analog watchdog occurs */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_AWDF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;</operator> <name>DFSDM_FLTCR2_AWDIE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>reg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>threshold</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>channel</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
    
    <comment type="block">/* Get channel and threshold */</comment>
    <expr_stmt><expr><name>reg</name> <operator>=</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTAWSR</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>threshold</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>reg</name> <operator>&amp;</operator> <name>DFSDM_FLTAWSR_AWLTF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr> ?</condition><then> <expr><name>DFSDM_AWD_LOW_THRESHOLD</name></expr> </then><else>: <expr><name>DFSDM_AWD_HIGH_THRESHOLD</name></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>threshold</name> <operator>==</operator> <name>DFSDM_AWD_HIGH_THRESHOLD</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>reg</name> <operator>=</operator> <name>reg</name> <operator>&gt;&gt;</operator> <name>DFSDM_FLTAWSR_AWHTF_Pos</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>reg</name> <operator>&amp;</operator> <literal type="number">1U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>channel</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>reg</name> <operator>=</operator> <name>reg</name> <operator>&gt;&gt;</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <comment type="block">/* Clear analog watchdog flag */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTAWCFR</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>threshold</name> <operator>==</operator> <name>DFSDM_AWD_HIGH_THRESHOLD</name><operator>)</operator></expr> ?</condition><then> \
                                        <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTAWSR_AWHTF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr> </then><else>: \
                                        <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>channel</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

    <comment type="block">/* Call analog watchdog callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>AwdCallback</name></name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_DFSDM_FilterAwdCallback</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if>
  <comment type="block">/* Check if clock absence occurs */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>DFSDM1_Filter0</name><operator>)</operator> <operator>&amp;&amp;</operator> \
         <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_CKABF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> \
         <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;</operator> <name>DFSDM_FLTCR2_CKABIE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>reg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>channel</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>reg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_CKABF</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>DFSDM_FLTISR_CKABF_Pos</name><operator>)</operator></expr>;</expr_stmt>

    <while>while<condition>(<expr><name>channel</name> <operator>&lt;</operator> <name>DFSDM1_CHANNEL_NUMBER</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check if flag is set and corresponding channel is enabled */</comment>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>reg</name> <operator>&amp;</operator> <literal type="number">1U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a_dfsdm1ChannelHandle</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Check clock absence has been enabled for this channel */</comment>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>a_dfsdm1ChannelHandle</name><index>[<expr><name>channel</name></expr>]</index></name><operator>-&gt;</operator><name><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;</operator> <name>DFSDM_CHCFGR1_CKABEN</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Clear clock absence flag */</comment>
          <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRCKABF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

          <comment type="block">/* Call clock absence callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
          <expr_stmt><expr><name><name>a_dfsdm1ChannelHandle</name><index>[<expr><name>channel</name></expr>]</index></name><operator>-&gt;</operator><call><name>CkabCallback</name><argument_list>(<argument><expr><name><name>a_dfsdm1ChannelHandle</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <expr_stmt><expr><call><name>HAL_DFSDM_ChannelCkabCallback</name><argument_list>(<argument><expr><name><name>a_dfsdm1ChannelHandle</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>channel</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>reg</name> <operator>=</operator> <name>reg</name> <operator>&gt;&gt;</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>     
  <comment type="block">/* Check if clock absence occurs */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>DFSDM2_Filter0</name><operator>)</operator> <operator>&amp;&amp;</operator> \
         <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_CKABF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> \
         <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;</operator> <name>DFSDM_FLTCR2_CKABIE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>reg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>channel</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>reg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_CKABF</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>DFSDM_FLTISR_CKABF_Pos</name><operator>)</operator></expr>;</expr_stmt>

    <while>while<condition>(<expr><name>channel</name> <operator>&lt;</operator> <name>DFSDM2_CHANNEL_NUMBER</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check if flag is set and corresponding channel is enabled */</comment>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>reg</name> <operator>&amp;</operator> <literal type="number">1U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a_dfsdm2ChannelHandle</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Check clock absence has been enabled for this channel */</comment>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>a_dfsdm2ChannelHandle</name><index>[<expr><name>channel</name></expr>]</index></name><operator>-&gt;</operator><name><name>Instance</name><operator>-&gt;</operator><name>CHCFGR1</name></name> <operator>&amp;</operator> <name>DFSDM_CHCFGR1_CKABEN</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Clear clock absence flag */</comment>
          <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRCKABF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

          <comment type="block">/* Call clock absence callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
          <expr_stmt><expr><name><name>a_dfsdm2ChannelHandle</name><index>[<expr><name>channel</name></expr>]</index></name><operator>-&gt;</operator><call><name>CkabCallback</name><argument_list>(<argument><expr><name><name>a_dfsdm2ChannelHandle</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <expr_stmt><expr><call><name>HAL_DFSDM_ChannelCkabCallback</name><argument_list>(<argument><expr><name><name>a_dfsdm2ChannelHandle</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>channel</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>reg</name> <operator>=</operator> <name>reg</name> <operator>&gt;&gt;</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DFSDM2_Channel0 */</comment>  
  <comment type="block">/* Check if short circuit detection occurs */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>DFSDM1_Filter0</name><operator>)</operator> <operator>&amp;&amp;</operator> \
         <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_SCDF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> \
         <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;</operator> <name>DFSDM_FLTCR2_SCDIE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>reg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>channel</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
    
    <comment type="block">/* Get channel */</comment>
    <expr_stmt><expr><name>reg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_SCDF</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>DFSDM_FLTISR_SCDF_Pos</name><operator>)</operator></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>reg</name> <operator>&amp;</operator> <literal type="number">1U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>channel</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>reg</name> <operator>=</operator> <name>reg</name> <operator>&gt;&gt;</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    
    <comment type="block">/* Clear short circuit detection flag */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRSCDF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Call short circuit detection callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><name><name>a_dfsdm1ChannelHandle</name><index>[<expr><name>channel</name></expr>]</index></name><operator>-&gt;</operator><call><name>ScdCallback</name><argument_list>(<argument><expr><name><name>a_dfsdm1ChannelHandle</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_DFSDM_ChannelScdCallback</name><argument_list>(<argument><expr><name><name>a_dfsdm1ChannelHandle</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>   
  <comment type="block">/* Check if short circuit detection occurs */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>DFSDM2_Filter0</name><operator>)</operator> <operator>&amp;&amp;</operator> \
         <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_SCDF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> \
         <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR2</name></name> <operator>&amp;</operator> <name>DFSDM_FLTCR2_SCDIE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>reg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>channel</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
    
    <comment type="block">/* Get channel */</comment>
    <expr_stmt><expr><name>reg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTISR</name></name> <operator>&amp;</operator> <name>DFSDM_FLTISR_SCDF</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>DFSDM_FLTISR_SCDF_Pos</name><operator>)</operator></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>reg</name> <operator>&amp;</operator> <literal type="number">1U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>channel</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>reg</name> <operator>=</operator> <name>reg</name> <operator>&gt;&gt;</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    
    <comment type="block">/* Clear short circuit detection flag */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTICR</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DFSDM_FLTICR_CLRSCDF_Pos</name> <operator>+</operator> <name>channel</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Call short circuit detection callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><name><name>a_dfsdm2ChannelHandle</name><index>[<expr><name>channel</name></expr>]</index></name><operator>-&gt;</operator><call><name>ScdCallback</name><argument_list>(<argument><expr><name><name>a_dfsdm2ChannelHandle</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_DFSDM_ChannelScdCallback</name><argument_list>(<argument><expr><name><name>a_dfsdm2ChannelHandle</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DFSDM2_Channel0 */</comment>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Regular conversion complete callback. 
  * @note   In interrupt mode, user has to read conversion value in this function
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DFSDM_FilterRegConvCpltCallback</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Half regular conversion complete callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DFSDM_FilterRegConvHalfCpltCallback</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Injected conversion complete callback. 
  * @note   In interrupt mode, user has to read conversion value in this function
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DFSDM_FilterInjConvCpltCallback</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Half injected conversion complete callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DFSDM_FilterInjConvHalfCpltCallback</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvHalfCpltCallback could be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Filter analog watchdog callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @param  Channel Corresponding channel.
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DFSDM_FilterAwdCallback</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>,
                                        <parameter><decl><type><name>uint32_t</name></type> <name>Channel</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Threshold</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>Channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>Threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DFSDM_FilterErrorCallback</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DFSDM_Exported_Functions_Group4_Filter Filter state functions
 *  @brief    Filter state functions
 *
@verbatim
  ==============================================================================
                     ##### Filter state functions #####
  ==============================================================================
    [..]  This section provides functions allowing to:
      (+) Get the DFSDM filter state.
      (+) Get the DFSDM filter error.
@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to get the current DFSDM filter handle state.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval DFSDM filter state.
  */</comment>
<function><type><name>HAL_DFSDM_Filter_StateTypeDef</name></type> <name>HAL_DFSDM_FilterGetState</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Return DFSDM filter handle state */</comment>
  <return>return <expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to get the current DFSDM filter error.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval DFSDM filter error code.
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_DFSDM_FilterGetError</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name> <modifier>*</modifier></type><name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DFSDM_Exported_Functions_Group5_Filter MultiChannel operation functions
 *  @brief    Filter state functions
 *
@verbatim
  ==============================================================================
                     ##### Filter MultiChannel operation functions #####
  ==============================================================================
    [..]  This section provides functions allowing to:
      (+) Control the DFSDM Multi channel delay block
@endverbatim
  * @{
  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYSCFG_MCHDLYCR_BSCKSEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Select the DFSDM2 as clock source for the bitstream clock.
  * @note   The SYSCFG clock marco __HAL_RCC_SYSCFG_CLK_ENABLE() must be called 
  *         before HAL_DFSDM_BitstreamClock_Start()  
  */</comment>
<function><type><name>void</name></type> <name>HAL_DFSDM_BitstreamClock_Start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
  
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator><operator>(</operator><operator>~</operator><name>SYSCFG_MCHDLYCR_BSCKSEL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name>  <operator>=</operator> <operator>(</operator><name>tmp</name><operator>|</operator><name>SYSCFG_MCHDLYCR_BSCKSEL</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Stop the DFSDM2 as clock source for the bitstream clock.
  * @note   The SYSCFG clock marco __HAL_RCC_SYSCFG_CLK_ENABLE() must be called 
  *         before HAL_DFSDM_BitstreamClock_Stop()     
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_DFSDM_BitstreamClock_Stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt> 
  
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator><operator>(</operator><operator>~</operator><name>SYSCFG_MCHDLYCR_BSCKSEL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name>  <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable Delay Clock for DFSDM1/2.
  * @param MCHDLY HAL_MCHDLY_CLOCK_DFSDM2.
  *               HAL_MCHDLY_CLOCK_DFSDM1.
  * @note   The SYSCFG clock marco __HAL_RCC_SYSCFG_CLK_ENABLE() must be called 
  *         before HAL_DFSDM_DisableDelayClock()     
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_DFSDM_DisableDelayClock</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>MCHDLY</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt> 
  
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_DELAY_CLOCK</name><argument_list>(<argument><expr><name>MCHDLY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>MCHDLY</name> <operator>==</operator> <name>HAL_MCHDLY_CLOCK_DFSDM2</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator><operator>(</operator><operator>~</operator><name>SYSCFG_MCHDLYCR_MCHDLY2EN</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator><operator>(</operator><operator>~</operator><name>SYSCFG_MCHDLYCR_MCHDLY1EN</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name>  <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enable Delay Clock for DFSDM1/2.
  * @param MCHDLY HAL_MCHDLY_CLOCK_DFSDM2.
  *               HAL_MCHDLY_CLOCK_DFSDM1.
  * @note   The SYSCFG clock marco __HAL_RCC_SYSCFG_CLK_ENABLE() must be called 
  *         before HAL_DFSDM_EnableDelayClock()       
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_DFSDM_EnableDelayClock</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>MCHDLY</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt> 

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_DELAY_CLOCK</name><argument_list>(<argument><expr><name>MCHDLY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <operator>~</operator><name>MCHDLY</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name>  <operator>=</operator> <operator>(</operator><name>tmp</name><operator>|</operator><name>MCHDLY</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Select the source for CKin signals for DFSDM1/2.
  * @param source DFSDM2_CKIN_PAD.
  *               DFSDM2_CKIN_DM.
  *               DFSDM1_CKIN_PAD.
  *               DFSDM1_CKIN_DM.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_DFSDM_ClockIn_SourceSelection</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt> 
  
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CLOCKIN_SELECTION</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM2_CKIN_PAD</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM2_CKIN_DM</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator>  <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>~</operator><name>SYSCFG_MCHDLYCR_DFSDM2CFG</name><operator>)</operator></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><name>source</name> <operator>==</operator> <name>HAL_DFSDM2_CKIN_PAD</name></expr>)</condition> 
    <block>{<block_content>
      <expr_stmt><expr><name>source</name> <operator>=</operator> <literal type="number">0x000000U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator>  <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>~</operator><name>SYSCFG_MCHDLYCR_DFSDM1CFG</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name> <operator>=</operator> <operator>(</operator><name>source</name><operator>|</operator><name>tmp</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Select the source for CKOut signals for DFSDM1/2.
  * @param source: DFSDM2_CKOUT_DFSDM2.
  *                DFSDM2_CKOUT_M27. 
  *                DFSDM1_CKOUT_DFSDM1.
  *                DFSDM1_CKOUT_M27.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_DFSDM_ClockOut_SourceSelection</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt> 
  
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_CLOCKOUT_SELECTION</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM2_CKOUT_DFSDM2</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM2_CKOUT_M27</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator>  <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>~</operator><name>SYSCFG_MCHDLYCR_DFSDM2CKOSEL</name><operator>)</operator></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><name>source</name> <operator>==</operator> <name>HAL_DFSDM2_CKOUT_DFSDM2</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>source</name> <operator>=</operator> <literal type="number">0x000U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator>  <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>~</operator><name>SYSCFG_MCHDLYCR_DFSDM1CKOSEL</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name> <operator>=</operator> <operator>(</operator><name>source</name><operator>|</operator><name>tmp</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Select the source for DataIn0 signals for DFSDM1/2.
  * @param source DATAIN0_DFSDM2_PAD.
  *               DATAIN0_DFSDM2_DATAIN1. 
  *               DATAIN0_DFSDM1_PAD.
  *               DATAIN0_DFSDM1_DATAIN1.                  
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_DFSDM_DataIn0_SourceSelection</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt> 

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_DATAIN0_SRC_SELECTION</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DATAIN0_DFSDM2_PAD</name><operator>)</operator><operator>||</operator> <operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DATAIN0_DFSDM2_DATAIN1</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator>  <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>~</operator><name>SYSCFG_MCHDLYCR_DFSDM2D0SEL</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>source</name> <operator>==</operator> <name>HAL_DATAIN0_DFSDM2_PAD</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>source</name> <operator>=</operator> <literal type="number">0x00000U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator>  <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>~</operator><name>SYSCFG_MCHDLYCR_DFSDM1D0SEL</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name> <operator>=</operator> <operator>(</operator><name>source</name><operator>|</operator><name>tmp</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Select the source for DataIn2 signals for DFSDM1/2.
  * @param source DATAIN2_DFSDM2_PAD.
  *               DATAIN2_DFSDM2_DATAIN3. 
  *               DATAIN2_DFSDM1_PAD.
  *               DATAIN2_DFSDM1_DATAIN3.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_DFSDM_DataIn2_SourceSelection</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt> 

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_DATAIN2_SRC_SELECTION</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DATAIN2_DFSDM2_PAD</name><operator>)</operator><operator>||</operator> <operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DATAIN2_DFSDM2_DATAIN3</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator>  <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>~</operator><name>SYSCFG_MCHDLYCR_DFSDM2D2SEL</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>source</name> <operator>==</operator> <name>HAL_DATAIN2_DFSDM2_PAD</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>source</name> <operator>=</operator> <literal type="number">0x0000U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>     
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator>  <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>~</operator><name>SYSCFG_MCHDLYCR_DFSDM1D2SEL</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name> <operator>=</operator> <operator>(</operator><name>source</name><operator>|</operator><name>tmp</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Select the source for DataIn4 signals for DFSDM2.
  * @param source DATAIN4_DFSDM2_PAD.
  *               DATAIN4_DFSDM2_DATAIN5
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_DFSDM_DataIn4_SourceSelection</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt> 

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_DATAIN4_SRC_SELECTION</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator>  <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>~</operator><name>SYSCFG_MCHDLYCR_DFSDM2D4SEL</name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name> <operator>=</operator> <operator>(</operator><name>source</name><operator>|</operator><name>tmp</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Select the source for DataIn6 signals for DFSDM2.
  * @param source DATAIN6_DFSDM2_PAD.
  *               DATAIN6_DFSDM2_DATAIN7.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_DFSDM_DataIn6_SourceSelection</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt> 

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_DATAIN6_SRC_SELECTION</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>tmp</name> <operator>=</operator>  <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>~</operator><name>SYSCFG_MCHDLYCR_DFSDM2D6SEL</name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name> <operator>=</operator> <operator>(</operator><name>source</name><operator>|</operator><name>tmp</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configure the distribution of the bitstream clock gated from TIM4_OC 
  *         for DFSDM1 or TIM3_OC for DFSDM2 
  * @param source DFSDM1_CLKIN0_TIM4OC2
  *               DFSDM1_CLKIN2_TIM4OC2
  *               DFSDM1_CLKIN1_TIM4OC1
  *               DFSDM1_CLKIN3_TIM4OC1
  *               DFSDM2_CLKIN0_TIM3OC4
  *               DFSDM2_CLKIN4_TIM3OC4
  *               DFSDM2_CLKIN1_TIM3OC3
  *               DFSDM2_CLKIN5_TIM3OC3
  *               DFSDM2_CLKIN2_TIM3OC2
  *               DFSDM2_CLKIN6_TIM3OC2
  *               DFSDM2_CLKIN3_TIM3OC1
  *               DFSDM2_CLKIN7_TIM3OC1
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_DFSDM_BitStreamClkDistribution_Config</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt> 

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_BITSTREM_CLK_DISTRIBUTION</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM1_CLKIN0_TIM4OC2</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM1_CLKIN2_TIM4OC2</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator>  <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>~</operator><name>SYSCFG_MCHDLYCR_DFSDM1CK02SEL</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM1_CLKIN1_TIM4OC1</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM1_CLKIN3_TIM4OC1</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator>  <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>~</operator><name>SYSCFG_MCHDLYCR_DFSDM1CK13SEL</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else   if <condition>(<expr><operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM2_CLKIN0_TIM3OC4</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM2_CLKIN4_TIM3OC4</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator>  <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>~</operator><name>SYSCFG_MCHDLYCR_DFSDM2CK04SEL</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM2_CLKIN1_TIM3OC3</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM2_CLKIN5_TIM3OC3</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator>  <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>~</operator><name>SYSCFG_MCHDLYCR_DFSDM2CK15SEL</name><operator>)</operator></expr>;</expr_stmt>
    
  </block_content>}</block></if><if type="elseif">else  if <condition>(<expr><operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM2_CLKIN2_TIM3OC2</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM2_CLKIN6_TIM3OC2</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator>  <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>~</operator><name>SYSCFG_MCHDLYCR_DFSDM2CK26SEL</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator>  <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>~</operator><name>SYSCFG_MCHDLYCR_DFSDM2CK37SEL</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM1_CLKIN0_TIM4OC2</name><operator>)</operator> <operator>||</operator><operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM1_CLKIN1_TIM4OC1</name><operator>)</operator><operator>||</operator>
     <operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM2_CLKIN0_TIM3OC4</name><operator>)</operator> <operator>||</operator><operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM2_CLKIN1_TIM3OC3</name><operator>)</operator><operator>||</operator>
     <operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM2_CLKIN2_TIM3OC2</name><operator>)</operator> <operator>||</operator><operator>(</operator><name>source</name> <operator>==</operator> <name>HAL_DFSDM2_CLKIN3_TIM3OC1</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>source</name> <operator>=</operator> <literal type="number">0x0000U</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name> <operator>=</operator> <operator>(</operator><name>source</name><operator>|</operator><name>tmp</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configure multi channel delay block: Use DFSDM2 audio clock source as input 
  *         clock for DFSDM1 and DFSDM2 filters to Synchronize DFSDMx filters.
  *         Set the path of the DFSDM2 clock output (dfsdm2_ckout) to the
  *         DFSDM1/2 CkInx and data inputs channels by configuring following MCHDLY muxes
  *         or demuxes: M1, M2, M3, M4, M5, M6, M7, M8, DM1, DM2, DM3, DM4, DM5, DM6,
  *         M9, M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20 based on the
  *         contains of the DFSDM_MultiChannelConfigTypeDef structure  
  * @param  mchdlystruct Structure of multi channel configuration
  * @retval None
  * @note   The SYSCFG clock marco __HAL_RCC_SYSCFG_CLK_ENABLE() must be called 
  *         before HAL_DFSDM_ConfigMultiChannelDelay()
  * @note   The HAL_DFSDM_ConfigMultiChannelDelay() function clears the SYSCFG-MCHDLYCR
  *         register before setting the new configuration.           
  */</comment>
<function><type><name>void</name></type> <name>HAL_DFSDM_ConfigMultiChannelDelay</name><parameter_list>(<parameter><decl><type><name>DFSDM_MultiChannelConfigTypeDef</name><modifier>*</modifier></type> <name>mchdlystruct</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>mchdlyreg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt> 
  
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_DFSDM1_CLKOUT</name><argument_list>(<argument><expr><name><name>mchdlystruct</name><operator>-&gt;</operator><name>DFSDM1ClockOut</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_DFSDM2_CLKOUT</name><argument_list>(<argument><expr><name><name>mchdlystruct</name><operator>-&gt;</operator><name>DFSDM2ClockOut</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_DFSDM1_CLKIN</name><argument_list>(<argument><expr><name><name>mchdlystruct</name><operator>-&gt;</operator><name>DFSDM1ClockIn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_DFSDM2_CLKIN</name><argument_list>(<argument><expr><name><name>mchdlystruct</name><operator>-&gt;</operator><name>DFSDM2ClockIn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_DFSDM1_BIT_CLK</name><argument_list>(<argument><expr><operator>(</operator><name><name>mchdlystruct</name><operator>-&gt;</operator><name>DFSDM1BitClkDistribution</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_DFSDM2_BIT_CLK</name><argument_list>(<argument><expr><name><name>mchdlystruct</name><operator>-&gt;</operator><name>DFSDM2BitClkDistribution</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_DFSDM1_DATA_DISTRIBUTION</name><argument_list>(<argument><expr><name><name>mchdlystruct</name><operator>-&gt;</operator><name>DFSDM1DataDistribution</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DFSDM_DFSDM2_DATA_DISTRIBUTION</name><argument_list>(<argument><expr><name><name>mchdlystruct</name><operator>-&gt;</operator><name>DFSDM2DataDistribution</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>mchdlyreg</name> <operator>=</operator> <operator>(</operator><name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name> <operator>&amp;</operator> <literal type="number">0x80103U</literal><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>SYSCFG</name><operator>-&gt;</operator><name>MCHDLYCR</name></name> <operator>=</operator> <operator>(</operator><name>mchdlyreg</name> <operator>|</operator><operator>(</operator><name><name>mchdlystruct</name><operator>-&gt;</operator><name>DFSDM1ClockOut</name></name><operator>)</operator><operator>|</operator><operator>(</operator><name><name>mchdlystruct</name><operator>-&gt;</operator><name>DFSDM2ClockOut</name></name><operator>)</operator><operator>|</operator>
                     <operator>(</operator><name><name>mchdlystruct</name><operator>-&gt;</operator><name>DFSDM1ClockIn</name></name><operator>)</operator><operator>|</operator><operator>(</operator><name><name>mchdlystruct</name><operator>-&gt;</operator><name>DFSDM2ClockIn</name></name><operator>)</operator><operator>|</operator>
                     <operator>(</operator><name><name>mchdlystruct</name><operator>-&gt;</operator><name>DFSDM1BitClkDistribution</name></name><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>mchdlystruct</name><operator>-&gt;</operator><name>DFSDM2BitClkDistribution</name></name><operator>)</operator><operator>|</operator>
                     <operator>(</operator><name><name>mchdlystruct</name><operator>-&gt;</operator><name>DFSDM1DataDistribution</name></name><operator>)</operator><operator>|</operator> <operator>(</operator><name><name>mchdlystruct</name><operator>-&gt;</operator><name>DFSDM2DataDistribution</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SYSCFG_MCHDLYCR_BSCKSEL */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<comment type="block">/* End of exported functions -------------------------------------------------*/</comment>

<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup DFSDM_Private_Functions DFSDM Private Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DFSDM_DMARegularHalfConvCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>   
<block>{<block_content>
  <comment type="block">/* Get DFSDM filter handle */</comment>
  <decl_stmt><decl><type><name>DFSDM_Filter_HandleTypeDef</name><modifier>*</modifier></type> <name>hdfsdm_filter</name> <init>= <expr><operator>(</operator><name>DFSDM_Filter_HandleTypeDef</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Call regular half conversion complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegConvHalfCpltCallback</name></name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_DFSDM_FilterRegConvHalfCpltCallback</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DFSDM_DMARegularConvCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>   
<block>{<block_content>
  <comment type="block">/* Get DFSDM filter handle */</comment>
  <decl_stmt><decl><type><name>DFSDM_Filter_HandleTypeDef</name><modifier>*</modifier></type> <name>hdfsdm_filter</name> <init>= <expr><operator>(</operator><name>DFSDM_Filter_HandleTypeDef</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Call regular conversion complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegConvCpltCallback</name></name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_DFSDM_FilterRegConvCpltCallback</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA half transfer complete callback for injected conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DFSDM_DMAInjectedHalfConvCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>   
<block>{<block_content>
  <comment type="block">/* Get DFSDM filter handle */</comment>
  <decl_stmt><decl><type><name>DFSDM_Filter_HandleTypeDef</name><modifier>*</modifier></type> <name>hdfsdm_filter</name> <init>= <expr><operator>(</operator><name>DFSDM_Filter_HandleTypeDef</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Call injected half conversion complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvHalfCpltCallback</name></name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_DFSDM_FilterInjConvHalfCpltCallback</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA transfer complete callback for injected conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DFSDM_DMAInjectedConvCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>   
<block>{<block_content>
  <comment type="block">/* Get DFSDM filter handle */</comment>
  <decl_stmt><decl><type><name>DFSDM_Filter_HandleTypeDef</name><modifier>*</modifier></type> <name>hdfsdm_filter</name> <init>= <expr><operator>(</operator><name>DFSDM_Filter_HandleTypeDef</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Call injected conversion complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvCpltCallback</name></name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_DFSDM_FilterInjConvCpltCallback</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DFSDM_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>   
<block>{<block_content>
  <comment type="block">/* Get DFSDM filter handle */</comment>
  <decl_stmt><decl><type><name>DFSDM_Filter_HandleTypeDef</name><modifier>*</modifier></type> <name>hdfsdm_filter</name> <init>= <expr><operator>(</operator><name>DFSDM_Filter_HandleTypeDef</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Update error code */</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>DFSDM_FILTER_ERROR_DMA</name></expr>;</expr_stmt>

  <comment type="block">/* Call error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DFSDM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_DFSDM_FilterErrorCallback</name><argument_list>(<argument><expr><name>hdfsdm_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>DFSDM_GetInjChannelsNbr</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>Channels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>nbChannels</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name></decl>;</decl_stmt>
  
  <comment type="block">/* Get the number of channels from bitfield */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name>Channels</name> <operator>&amp;</operator> <name>DFSDM_LSB_MASK</name><operator>)</operator></expr>;</expr_stmt>
  <while>while<condition>(<expr><name>tmp</name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">1U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>nbChannels</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>nbChannels</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>DFSDM_GetChannelFromInstance</name><parameter_list>(<parameter><decl><type><name>DFSDM_Channel_TypeDef</name><modifier>*</modifier></type> <name>Instance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>channel</name> <init>= <expr><literal type="number">0xFFU</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Get channel from instance */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DFSDM2_Channel0</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Instance</name> <operator>==</operator> <name>DFSDM1_Channel0</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Instance</name> <operator>==</operator> <name>DFSDM2_Channel0</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name>Instance</name> <operator>==</operator> <name>DFSDM1_Channel1</name><operator>)</operator> <operator>||</operator>  <operator>(</operator><name>Instance</name> <operator>==</operator> <name>DFSDM2_Channel1</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name>Instance</name> <operator>==</operator> <name>DFSDM1_Channel2</name><operator>)</operator> <operator>||</operator>  <operator>(</operator><name>Instance</name> <operator>==</operator> <name>DFSDM2_Channel2</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name>Instance</name> <operator>==</operator> <name>DFSDM1_Channel3</name><operator>)</operator> <operator>||</operator>  <operator>(</operator><name>Instance</name> <operator>==</operator> <name>DFSDM2_Channel3</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <literal type="number">3U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name>Instance</name> <operator>==</operator> <name>DFSDM2_Channel4</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <literal type="number">4U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name>Instance</name> <operator>==</operator> <name>DFSDM2_Channel5</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <literal type="number">5U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name>Instance</name> <operator>==</operator> <name>DFSDM2_Channel6</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <literal type="number">6U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name>Instance</name> <operator>==</operator> <name>DFSDM2_Channel7</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <literal type="number">7U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* channel = 0xFFU;*/</comment>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if<condition>(<expr><name>Instance</name> <operator>==</operator> <name>DFSDM1_Channel0</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name>Instance</name> <operator>==</operator> <name>DFSDM1_Channel1</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name>Instance</name> <operator>==</operator> <name>DFSDM1_Channel2</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name>Instance</name> <operator>==</operator> <name>DFSDM1_Channel3</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>channel</name> <operator>=</operator> <literal type="number">3U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* channel = 0xFFU;*/</comment>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(DFSDM2_Channel0) */</comment>

  <return>return <expr><name>channel</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DFSDM_RegConvStart</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name><modifier>*</modifier></type> <name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check regular trigger */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegularTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SW_TRIGGER</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Software start of regular conversion */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <name>DFSDM_FLTCR1_RSWSTART</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <comment type="block">/* synchronous trigger */</comment>
  <block>{<block_content>
    <comment type="block">/* Disable DFSDM filter */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR1_DFEN</name><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Set RSYNC bit in DFSDM_FLTCR1 register */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <name>DFSDM_FLTCR1_RSYNC</name></expr>;</expr_stmt>

    <comment type="block">/* Enable DFSDM  filter */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <name>DFSDM_FLTCR1_DFEN</name></expr>;</expr_stmt>
    
    <comment type="block">/* If injected conversion was in progress, restart it */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_INJ</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SW_TRIGGER</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <name>DFSDM_FLTCR1_JSWSTART</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* Update remaining injected conversions */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvRemaining</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedScanMode</name></name> <operator>==</operator> <name>ENABLE</name><operator>)</operator></expr> ?</condition><then> \
                                         <expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedChannelsNbr</name></name></expr> </then><else>: <expr><literal type="number">1U</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Update DFSDM filter state */</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_READY</name><operator>)</operator></expr> ?</condition><then> \
                          <expr><name>HAL_DFSDM_FILTER_STATE_REG</name></expr> </then><else>: <expr><name>HAL_DFSDM_FILTER_STATE_REG_INJ</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DFSDM_RegConvStop</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name><modifier>*</modifier></type> <name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable DFSDM filter */</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR1_DFEN</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegularTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SYNC_TRIGGER</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR1_RSYNC</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Enable DFSDM filter */</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <name>DFSDM_FLTCR1_DFEN</name></expr>;</expr_stmt>
  
  <comment type="block">/* If injected conversion was in progress, restart it */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_REG_INJ</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SW_TRIGGER</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <name>DFSDM_FLTCR1_JSWSTART</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Update remaining injected conversions */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvRemaining</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedScanMode</name></name> <operator>==</operator> <name>ENABLE</name><operator>)</operator></expr> ?</condition><then> \
                                       <expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedChannelsNbr</name></name></expr> </then><else>: <expr><literal type="number">1U</literal></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Update DFSDM filter state */</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_REG</name><operator>)</operator></expr> ?</condition><then> \
                          <expr><name>HAL_DFSDM_FILTER_STATE_READY</name></expr> </then><else>: <expr><name>HAL_DFSDM_FILTER_STATE_INJ</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to really start injected conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DFSDM_InjConvStart</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name><modifier>*</modifier></type> <name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check injected trigger */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SW_TRIGGER</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Software start of injected conversion */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <name>DFSDM_FLTCR1_JSWSTART</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <comment type="block">/* external or synchronous trigger */</comment>
  <block>{<block_content>
    <comment type="block">/* Disable DFSDM filter */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR1_DFEN</name><operator>)</operator></expr>;</expr_stmt>
      
    <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SYNC_TRIGGER</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set JSYNC bit in DFSDM_FLTCR1 register */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <name>DFSDM_FLTCR1_JSYNC</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="block">/* external trigger */</comment>
    <block>{<block_content>
      <comment type="block">/* Set JEXTEN[1:0] bits in DFSDM_FLTCR1 register */</comment>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>ExtTriggerEdge</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <comment type="block">/* Enable DFSDM filter */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <name>DFSDM_FLTCR1_DFEN</name></expr>;</expr_stmt>

    <comment type="block">/* If regular conversion was in progress, restart it */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_REG</name><operator>)</operator> <operator>&amp;&amp;</operator> \
       <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegularTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SW_TRIGGER</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <name>DFSDM_FLTCR1_RSWSTART</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Update DFSDM filter state */</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_READY</name><operator>)</operator></expr> ?</condition><then> \
                         <expr><name>HAL_DFSDM_FILTER_STATE_INJ</name></expr> </then><else>: <expr><name>HAL_DFSDM_FILTER_STATE_REG_INJ</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function allows to really stop injected conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DFSDM_InjConvStop</name><parameter_list>(<parameter><decl><type><name>DFSDM_Filter_HandleTypeDef</name><modifier>*</modifier></type> <name>hdfsdm_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable DFSDM filter */</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR1_DFEN</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* If injected trigger was synchronous, reset JSYNC bit in DFSDM_FLTCR1 register */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SYNC_TRIGGER</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR1_JSYNC</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_EXT_TRIGGER</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Reset JEXTEN[1:0] bits in DFSDM_FLTCR1 register */</comment>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DFSDM_FLTCR1_JEXTEN</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>

  <else>else
  <block>{<block_content>
    <comment type="block">/* Nothing to do */</comment>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Enable DFSDM filter */</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <name>DFSDM_FLTCR1_DFEN</name></expr>;</expr_stmt>
  
  <comment type="block">/* If regular conversion was in progress, restart it */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_REG_INJ</name><operator>)</operator> <operator>&amp;&amp;</operator> \
     <operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>RegularTrigger</name></name> <operator>==</operator> <name>DFSDM_FILTER_SW_TRIGGER</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTCR1</name></name> <operator>|=</operator> <name>DFSDM_FLTCR1_RSWSTART</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Update remaining injected conversions */</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjConvRemaining</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedScanMode</name></name> <operator>==</operator> <name>ENABLE</name><operator>)</operator></expr> ?</condition><then> \
                                     <expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>InjectedChannelsNbr</name></name></expr> </then><else>: <expr><literal type="number">1U</literal></expr></else></ternary></expr>;</expr_stmt>

  <comment type="block">/* Update DFSDM filter state */</comment>
  <expr_stmt><expr><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hdfsdm_filter</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DFSDM_FILTER_STATE_INJ</name><operator>)</operator></expr> ?</condition><then> \
                          <expr><name>HAL_DFSDM_FILTER_STATE_READY</name></expr> </then><else>: <expr><name>HAL_DFSDM_FILTER_STATE_REG</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<comment type="block">/* End of private functions --------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx || STM32F413xx || STM32F423xx */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_DFSDM_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
