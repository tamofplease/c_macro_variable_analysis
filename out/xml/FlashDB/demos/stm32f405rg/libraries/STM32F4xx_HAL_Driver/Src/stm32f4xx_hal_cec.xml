<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cec.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_cec.c
  * @author  MCD Application Team
  * @brief   CEC HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the High Definition Multimedia Interface
  *          Consumer Electronics Control Peripheral (CEC).
  *           + Initialization and de-initialization function
  *           + IO operation function
  *           + Peripheral Control function
  *
  *
  @verbatim
 ===============================================================================
                        ##### How to use this driver #####
 ===============================================================================
    [..]
    The CEC HAL driver can be used as follow:

    (#) Declare a CEC_HandleTypeDef handle structure.
    (#) Initialize the CEC low level resources by implementing the HAL_CEC_MspInit ()API:
        (##) Enable the CEC interface clock.
        (##) CEC pins configuration:
            (+++) Enable the clock for the CEC GPIOs.
            (+++) Configure these CEC pins as alternate function pull-up.
        (##) NVIC configuration if you need to use interrupt process (HAL_CEC_Transmit_IT()
             and HAL_CEC_Receive_IT() APIs):
            (+++) Configure the CEC interrupt priority.
            (+++) Enable the NVIC CEC IRQ handle.
            (+++) The specific CEC interrupts (Transmission complete interrupt,
                  RXNE interrupt and Error Interrupts) will be managed using the macros
                  __HAL_CEC_ENABLE_IT() and __HAL_CEC_DISABLE_IT() inside the transmit
                  and receive process.

    (#) Program the Signal Free Time (SFT) and SFT option, Tolerance, reception stop in
        in case of Bit Rising Error, Error-Bit generation conditions, device logical
        address and Listen mode in the hcec Init structure.

    (#) Initialize the CEC registers by calling the HAL_CEC_Init() API.

  [..]
    (@) This API (HAL_CEC_Init()) configures also the low level Hardware (GPIO, CLOCK, CORTEX...etc)
        by calling the customed HAL_CEC_MspInit() API.
  *** Callback registration ***
  =============================================

  The compilation define  USE_HAL_CEC_REGISTER_CALLBACKS when set to 1
  allows the user to configure dynamically the driver callbacks.
  Use Functions @ref HAL_CEC_RegisterCallback() or HAL_CEC_RegisterXXXCallback()
  to register an interrupt callback.

  Function @ref HAL_CEC_RegisterCallback() allows to register following callbacks:
    (+) TxCpltCallback     : Tx Transfer completed callback.
    (+) ErrorCallback      : callback for error detection.
    (+) MspInitCallback    : CEC MspInit.
    (+) MspDeInitCallback  : CEC MspDeInit.
  This function takes as parameters the HAL peripheral handle, the Callback ID
  and a pointer to the user callback function.

  For specific callback HAL_CEC_RxCpltCallback use dedicated register callbacks
  @ref HAL_CEC_RegisterRxCpltCallback().

  Use function @ref HAL_CEC_UnRegisterCallback() to reset a callback to the default
  weak function.
  @ref HAL_CEC_UnRegisterCallback() takes as parameters the HAL peripheral handle,
  and the Callback ID.
  This function allows to reset following callbacks:
    (+) TxCpltCallback     : Tx Transfer completed callback.
    (+) ErrorCallback      : callback for error detection.
    (+) MspInitCallback    : CEC MspInit.
    (+) MspDeInitCallback  : CEC MspDeInit.

  For callback HAL_CEC_RxCpltCallback use dedicated unregister callback :
  @ref HAL_CEC_UnRegisterRxCpltCallback().

  By default, after the @ref HAL_CEC_Init() and when the state is HAL_CEC_STATE_RESET
  all callbacks are set to the corresponding weak functions :
  examples @ref HAL_CEC_TxCpltCallback() , @ref HAL_CEC_RxCpltCallback().
  Exception done for MspInit and MspDeInit functions that are
  reset to the legacy weak function in the @ref HAL_CEC_Init()/ @ref HAL_CEC_DeInit() only when
  these callbacks are null (not registered beforehand).
  if not, MspInit or MspDeInit are not null, the @ref HAL_CEC_Init() / @ref HAL_CEC_DeInit()
  keep and use the user MspInit/MspDeInit functions (registered beforehand)

  Callbacks can be registered/unregistered in HAL_CEC_STATE_READY state only.
  Exception done MspInit/MspDeInit callbacks that can be registered/unregistered
  in HAL_CEC_STATE_READY or HAL_CEC_STATE_RESET state,
  thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
  In that case first register the MspInit/MspDeInit user callbacks
  using @ref HAL_CEC_RegisterCallback() before calling @ref HAL_CEC_DeInit()
  or @ref HAL_CEC_Init() function.

  When the compilation define USE_HAL_CEC_REGISTER_CALLBACKS is set to 0 or
  not defined, the callback registration feature is not available and all callbacks
  are set to the corresponding weak functions.
  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup CEC CEC
  * @brief HAL CEC module driver
  * @{
  */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_CEC_MODULE_ENABLED</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CEC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup CEC_Private_Constants CEC Private Constants
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup CEC_Private_Functions CEC Private Functions
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Exported functions ---------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup CEC_Exported_Functions CEC Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup CEC_Exported_Functions_Group1 Initialization and de-initialization functions
  *  @brief    Initialization and Configuration functions
  *
@verbatim
===============================================================================
            ##### Initialization and Configuration functions #####
 ===============================================================================
    [..]
    This subsection provides a set of functions allowing to initialize the CEC
      (+) The following parameters need to be configured:
        (++) SignalFreeTime
        (++) Tolerance
        (++) BRERxStop                 (RX stopped or not upon Bit Rising Error)
        (++) BREErrorBitGen            (Error-Bit generation in case of Bit Rising Error)
        (++) LBPEErrorBitGen           (Error-Bit generation in case of Long Bit Period Error)
        (++) BroadcastMsgNoErrorBitGen (Error-bit generation in case of broadcast message error)
        (++) SignalFreeTimeOption      (SFT Timer start definition)
        (++) OwnAddress                (CEC device address)
        (++) ListenMode

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief Initializes the CEC mode according to the specified
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CEC_Init</name><parameter_list>(<parameter><decl><type><name>CEC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the CEC handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hcec</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>RxBuffer</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CEC_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hcec</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CEC_SIGNALFREETIME</name><argument_list>(<argument><expr><name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SignalFreeTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CEC_TOLERANCE</name><argument_list>(<argument><expr><name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Tolerance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CEC_BRERXSTOP</name><argument_list>(<argument><expr><name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BRERxStop</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CEC_BREERRORBITGEN</name><argument_list>(<argument><expr><name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BREErrorBitGen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CEC_LBPEERRORBITGEN</name><argument_list>(<argument><expr><name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>LBPEErrorBitGen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CEC_BROADCASTERROR_NO_ERRORBIT_GENERATION</name><argument_list>(<argument><expr><name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BroadcastMsgNoErrorBitGen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CEC_SFTOP</name><argument_list>(<argument><expr><name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SignalFreeTimeOption</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CEC_LISTENING_MODE</name><argument_list>(<argument><expr><name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ListenMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CEC_OWN_ADDRESS</name><argument_list>(<argument><expr><name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OwnAddress</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CEC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>hcec</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_CEC_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>TxCpltCallback</name></name>  <operator>=</operator> <name>HAL_CEC_TxCpltCallback</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak TxCpltCallback  */</comment>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>RxCpltCallback</name></name> <operator>=</operator> <name>HAL_CEC_RxCpltCallback</name></expr>;</expr_stmt>   <comment type="block">/* Legacy weak RxCpltCallback */</comment>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>HAL_CEC_ErrorCallback</name></expr>;</expr_stmt>     <comment type="block">/* Legacy weak ErrorCallback */</comment>

    <if_stmt><if>if <condition>(<expr><name><name>hcec</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_CEC_MspInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MspInit  */</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>hcec</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><name><name>hcec</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_CEC_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>
    <comment type="block">/* Init the low level hardware : GPIO, CLOCK */</comment>
    <expr_stmt><expr><call><name>HAL_CEC_MspInit</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CEC_REGISTER_CALLBACKS */</comment>

  <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_CEC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CEC_DISABLE</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Write to CEC Control Register */</comment>
  <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>=</operator> <name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SignalFreeTime</name></name> <operator>|</operator> <name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Tolerance</name></name> <operator>|</operator> <name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BRERxStop</name></name> <operator>|</operator> \
                         <name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BREErrorBitGen</name></name> <operator>|</operator> <name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>LBPEErrorBitGen</name></name> <operator>|</operator> <name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BroadcastMsgNoErrorBitGen</name></name> <operator>|</operator> \
                         <name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SignalFreeTimeOption</name></name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OwnAddress</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator> \
                         <name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ListenMode</name></name></expr>;</expr_stmt>

  <comment type="block">/* Enable the following CEC Transmission/Reception interrupts as
    * well as the following CEC Transmission/Reception Errors interrupts
    * Rx Byte Received IT
    * End of Reception IT
    * Rx overrun
    * Rx bit rising error
    * Rx short bit period error
    * Rx long bit period error
    * Rx missing acknowledge
    * Tx Byte Request IT
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */</comment>
  <expr_stmt><expr><call><name>__HAL_CEC_ENABLE_IT</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>, <argument><expr><name>CEC_IT_RXBR</name> <operator>|</operator> <name>CEC_IT_RXEND</name> <operator>|</operator> <name>CEC_IER_RX_ALL_ERR</name> <operator>|</operator> <name>CEC_IT_TXBR</name> <operator>|</operator> <name>CEC_IT_TXEND</name> <operator>|</operator>
                      <name>CEC_IER_TX_ALL_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the CEC Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CEC_ENABLE</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_CEC_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_CEC_STATE_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_CEC_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DeInitializes the CEC peripheral
  * @param hcec CEC handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CEC_DeInit</name><parameter_list>(<parameter><decl><type><name>CEC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the CEC handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>hcec</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CEC_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hcec</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_CEC_STATE_BUSY</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CEC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>hcec</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_CEC_MspDeInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MspDeInit  */</comment>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name><name>hcec</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name>HAL_CEC_MspDeInit</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CEC_REGISTER_CALLBACKS */</comment>

  <comment type="block">/* Disable the Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CEC_DISABLE</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Clear Flags */</comment>
  <expr_stmt><expr><call><name>__HAL_CEC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>, <argument><expr><name>CEC_FLAG_TXEND</name> <operator>|</operator> <name>CEC_FLAG_TXBR</name> <operator>|</operator> <name>CEC_FLAG_RXBR</name> <operator>|</operator> <name>CEC_FLAG_RXEND</name> <operator>|</operator> <name>CEC_ISR_ALL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the following CEC Transmission/Reception interrupts as
    * well as the following CEC Transmission/Reception Errors interrupts
    * Rx Byte Received IT
    * End of Reception IT
    * Rx overrun
    * Rx bit rising error
    * Rx short bit period error
    * Rx long bit period error
    * Rx missing acknowledge
    * Tx Byte Request IT
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */</comment>
  <expr_stmt><expr><call><name>__HAL_CEC_DISABLE_IT</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>, <argument><expr><name>CEC_IT_RXBR</name> <operator>|</operator> <name>CEC_IT_RXEND</name> <operator>|</operator> <name>CEC_IER_RX_ALL_ERR</name> <operator>|</operator> <name>CEC_IT_TXBR</name> <operator>|</operator> <name>CEC_IT_TXEND</name> <operator>|</operator>
                       <name>CEC_IER_TX_ALL_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_CEC_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_CEC_STATE_RESET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_CEC_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Initializes the Own Address of the CEC device
  * @param hcec CEC handle
  * @param  CEC_OwnAddress The CEC own address.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CEC_SetDeviceAddress</name><parameter_list>(<parameter><decl><type><name>CEC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcec</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>CEC_OwnAddress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CEC_OWN_ADDRESS</name><argument_list>(<argument><expr><name>CEC_OwnAddress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcec</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_CEC_STATE_READY</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hcec</name><operator>-&gt;</operator><name>RxState</name></name> <operator>==</operator> <name>HAL_CEC_STATE_READY</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_CEC_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Disable the Peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_CEC_DISABLE</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>CEC_OwnAddress</name> <operator>!=</operator> <name>CEC_OWN_ADDRESS_NONE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>CEC_OwnAddress</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CEC_CFGR_OAR</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_CEC_STATE_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_CEC_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the Peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_CEC_ENABLE</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return  <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief CEC MSP Init
  * @param hcec CEC handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_CEC_MspInit</name><parameter_list>(<parameter><decl><type><name>CEC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_MspInit can be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief CEC MSP DeInit
  * @param hcec CEC handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_CEC_MspDeInit</name><parameter_list>(<parameter><decl><type><name>CEC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_MspDeInit can be implemented in the user file
   */</comment>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CEC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User CEC Callback
  *         To be used instead of the weak predefined callback
  * @param  hcec CEC handle
  * @param  CallbackID ID of the callback to be registered
  *         This parameter can be one of the following values:
  *          @arg @ref HAL_CEC_TX_CPLT_CB_ID Tx Complete callback ID
  *          @arg @ref HAL_CEC_ERROR_CB_ID Error callback ID
  *          @arg @ref HAL_CEC_MSPINIT_CB_ID MspInit callback ID
  *          @arg @ref HAL_CEC_MSPDEINIT_CB_ID MspDeInit callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CEC_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>CEC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcec</name></decl></parameter>, <parameter><decl><type><name>HAL_CEC_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>,
                                           <parameter><decl><type><name>pCEC_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CEC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hcec</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_CEC_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_CEC_TX_CPLT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>TxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_CEC_ERROR_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_CEC_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_CEC_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CEC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hcec</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_CEC_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_CEC_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_CEC_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CEC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CEC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister an CEC Callback
  *         CEC callabck is redirected to the weak predefined callback
  * @param hcec uart handle
  * @param CallbackID ID of the callback to be unregistered
  *         This parameter can be one of the following values:
  *          @arg @ref HAL_CEC_TX_CPLT_CB_ID Tx Complete callback ID
  *          @arg @ref HAL_CEC_ERROR_CB_ID Error callback ID
  *          @arg @ref HAL_CEC_MSPINIT_CB_ID MspInit callback ID
  *          @arg @ref HAL_CEC_MSPDEINIT_CB_ID MspDeInit callback ID
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CEC_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>CEC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcec</name></decl></parameter>, <parameter><decl><type><name>HAL_CEC_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hcec</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_CEC_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_CEC_TX_CPLT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>TxCpltCallback</name></name> <operator>=</operator> <name>HAL_CEC_TxCpltCallback</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak  TxCpltCallback */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_CEC_ERROR_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>HAL_CEC_ErrorCallback</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak ErrorCallback   */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_CEC_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_CEC_MspInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_CEC_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_CEC_MspDeInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CEC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hcec</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_CEC_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_CEC_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_CEC_MspInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_CEC_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_CEC_MspDeInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CEC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CEC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Register CEC RX complete Callback
  *         To be used instead of the weak HAL_CEC_RxCpltCallback() predefined callback
  * @param  hcec CEC handle
  * @param  pCallback pointer to the Rx transfer compelete Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CEC_RegisterRxCpltCallback</name><parameter_list>(<parameter><decl><type><name>CEC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcec</name></decl></parameter>, <parameter><decl><type><name>pCEC_RxCallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CEC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>HAL_CEC_STATE_READY</name> <operator>==</operator> <name><name>hcec</name><operator>-&gt;</operator><name>RxState</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>RxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CEC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  UnRegister CEC RX complete Callback
  *         CEC RX complete Callback is redirected to the weak HAL_CEC_RxCpltCallback() predefined callback
  * @param  hcec CEC handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CEC_UnRegisterRxCpltCallback</name><parameter_list>(<parameter><decl><type><name>CEC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>HAL_CEC_STATE_READY</name> <operator>==</operator> <name><name>hcec</name><operator>-&gt;</operator><name>RxState</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>RxCpltCallback</name></name> <operator>=</operator> <name>HAL_CEC_RxCpltCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak  CEC RxCpltCallback  */</comment>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CEC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CEC_REGISTER_CALLBACKS */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup CEC_Exported_Functions_Group2 Input and Output operation functions
  *  @brief CEC Transmit/Receive functions
  *
@verbatim
 ===============================================================================
                      ##### IO operation functions #####
 ===============================================================================
    This subsection provides a set of functions allowing to manage the CEC data transfers.

    (#) The CEC handle must contain the initiator (TX side) and the destination (RX side)
        logical addresses (4-bit long addresses, 0xF for broadcast messages destination)

    (#) The communication is performed using Interrupts.
           These API's return the HAL status.
           The end of the data processing will be indicated through the
           dedicated CEC IRQ when using Interrupt mode.
           The HAL_CEC_TxCpltCallback(), HAL_CEC_RxCpltCallback() user callbacks
           will be executed respectively at the end of the transmit or Receive process
           The HAL_CEC_ErrorCallback() user callback will be executed when a communication
           error is detected

    (#) API's with Interrupt are :
         (+) HAL_CEC_Transmit_IT()
         (+) HAL_CEC_IRQHandler()

    (#) A set of User Callbacks are provided:
         (+) HAL_CEC_TxCpltCallback()
         (+) HAL_CEC_RxCpltCallback()
         (+) HAL_CEC_ErrorCallback()

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief Send data in interrupt mode
  * @param hcec CEC handle
  * @param InitiatorAddress Initiator address
  * @param DestinationAddress destination logical address
  * @param pData pointer to input byte data buffer
  * @param Size amount of data to be sent in bytes (without counting the header).
  *              0 means only the header is sent (ping operation).
  *              Maximum TX size is 15 bytes (1 opcode and up to 14 operands).
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CEC_Transmit_IT</name><parameter_list>(<parameter><decl><type><name>CEC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcec</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>InitiatorAddress</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>DestinationAddress</name></decl></parameter>,
                                      <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* if the IP isn't already busy and if there is no previous transmission
     already pending due to arbitration lost */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hcec</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_CEC_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>Size</name> <operator>&gt;</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CEC_ADDRESS</name><argument_list>(<argument><expr><name>DestinationAddress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CEC_ADDRESS</name><argument_list>(<argument><expr><name>InitiatorAddress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CEC_MSGSIZE</name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_CEC_STATE_BUSY_TX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_CEC_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* initialize the number of bytes to send,
      * 0 means only one header is sent (ping operation) */</comment>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>Size</name></expr>;</expr_stmt>

    <comment type="block">/* in case of no payload (Size = 0), sender is only pinging the system;
       Set TX End of Message (TXEOM) bit, must be set before writing data to TXDR */</comment>
    <if_stmt><if>if <condition>(<expr><name>Size</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>__HAL_CEC_LAST_BYTE_TX_SET</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* send header block */</comment>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>InitiatorAddress</name> <operator>&lt;&lt;</operator> <name>CEC_INITIATOR_LSB_POS</name><operator>)</operator> <operator>|</operator> <name>DestinationAddress</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Set TX Start of Message  (TXSOM) bit */</comment>
    <expr_stmt><expr><call><name>__HAL_CEC_FIRST_BYTE_TX_SET</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>

  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Get size of the received frame.
  * @param hcec CEC handle
  * @retval Frame size
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_CEC_GetLastReceivedFrameSize</name><parameter_list>(<parameter><decl><type><name>CEC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hcec</name><operator>-&gt;</operator><name>RxXferSize</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Change Rx Buffer.
  * @param hcec CEC handle
  * @param Rxbuffer Rx Buffer
  * @note  This function can be called only inside the HAL_CEC_RxCpltCallback()
  * @retval Frame size
  */</comment>
<function><type><name>void</name></type> <name>HAL_CEC_ChangeRxBuffer</name><parameter_list>(<parameter><decl><type><name>CEC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcec</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Rxbuffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>RxBuffer</name></name> <operator>=</operator> <name>Rxbuffer</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_CEC_IRQHandler</name><parameter_list>(<parameter><decl><type><name>CEC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcec</name></decl></parameter>)</parameter_list>
<block>{<block_content>

  <comment type="block">/* save interrupts register for further error or interrupts handling purposes */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>reg</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>reg</name> <operator>=</operator> <name><name>hcec</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name></expr>;</expr_stmt>


  <comment type="block">/* ----------------------------Arbitration Lost Management----------------------------------*/</comment>
  <comment type="block">/* CEC TX arbitration error interrupt occurred --------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg</name> <operator>&amp;</operator> <name>CEC_FLAG_ARBLST</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_CEC_ERROR_ARBLST</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_CEC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>, <argument><expr><name>CEC_FLAG_ARBLST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* ----------------------------Rx Management----------------------------------*/</comment>
  <comment type="block">/* CEC RX byte received interrupt  ---------------------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg</name> <operator>&amp;</operator> <name>CEC_FLAG_RXBR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* reception is starting */</comment>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_CEC_STATE_BUSY_RX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>RxXferSize</name></name><operator>++</operator></expr>;</expr_stmt>
    <comment type="block">/* read received byte */</comment>
    <expr_stmt><expr><operator>*</operator><name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>RxBuffer</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name><name>hcec</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>RXDR</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>RxBuffer</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_CEC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>, <argument><expr><name>CEC_FLAG_RXBR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* CEC RX end received interrupt  ---------------------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg</name> <operator>&amp;</operator> <name>CEC_FLAG_RXEND</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* clear IT */</comment>
    <expr_stmt><expr><call><name>__HAL_CEC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>, <argument><expr><name>CEC_FLAG_RXEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Rx process is completed, restore hcec-&gt;RxState to Ready */</comment>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_CEC_STATE_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_CEC_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>RxBuffer</name></name> <operator>-=</operator> <name><name>hcec</name><operator>-&gt;</operator><name>RxXferSize</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CEC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hcec</name><operator>-&gt;</operator><name>RxCpltCallback</name></name><argument_list>(<argument><expr><name>hcec</name></expr></argument>, <argument><expr><name><name>hcec</name><operator>-&gt;</operator><name>RxXferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_CEC_RxCpltCallback</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>, <argument><expr><name><name>hcec</name><operator>-&gt;</operator><name>RxXferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CEC_REGISTER_CALLBACKS */</comment>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* ----------------------------Tx Management----------------------------------*/</comment>
  <comment type="block">/* CEC TX byte request interrupt ------------------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg</name> <operator>&amp;</operator> <name>CEC_FLAG_TXBR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>hcec</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* if this is the last byte transmission, set TX End of Message (TXEOM) bit */</comment>
      <expr_stmt><expr><call><name>__HAL_CEC_LAST_BYTE_TX_SET</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name> <operator>=</operator> <operator>*</operator><name><name>hcec</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name> <operator>=</operator> <operator>*</operator><name><name>hcec</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>TxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* clear Tx-Byte request flag */</comment>
    <expr_stmt><expr><call><name>__HAL_CEC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>, <argument><expr><name>CEC_FLAG_TXBR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* CEC TX end interrupt ------------------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg</name> <operator>&amp;</operator> <name>CEC_FLAG_TXEND</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_CEC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>, <argument><expr><name>CEC_FLAG_TXEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Tx process is ended, restore hcec-&gt;gState to Ready */</comment>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_CEC_STATE_READY</name></expr>;</expr_stmt>
    <comment type="block">/* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_CEC_ERROR_NONE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CEC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hcec</name><operator>-&gt;</operator><name>TxCpltCallback</name></name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_CEC_TxCpltCallback</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CEC_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* ----------------------------Rx/Tx Error Management----------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg</name> <operator>&amp;</operator> <operator>(</operator><name>CEC_ISR_RXOVR</name> <operator>|</operator> <name>CEC_ISR_BRE</name> <operator>|</operator> <name>CEC_ISR_SBPE</name> <operator>|</operator> <name>CEC_ISR_LBPE</name> <operator>|</operator> <name>CEC_ISR_RXACKE</name> <operator>|</operator> <name>CEC_ISR_TXUDR</name> <operator>|</operator> <name>CEC_ISR_TXERR</name> <operator>|</operator>
              <name>CEC_ISR_TXACKE</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_CEC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>, <argument><expr><name>HAL_CEC_ERROR_RXOVR</name> <operator>|</operator> <name>HAL_CEC_ERROR_BRE</name> <operator>|</operator> <name>CEC_FLAG_LBPE</name> <operator>|</operator> <name>CEC_FLAG_SBPE</name> <operator>|</operator>
                         <name>HAL_CEC_ERROR_RXACKE</name> <operator>|</operator> <name>HAL_CEC_ERROR_TXUDR</name> <operator>|</operator> <name>HAL_CEC_ERROR_TXERR</name> <operator>|</operator> <name>HAL_CEC_ERROR_TXACKE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg</name> <operator>&amp;</operator> <operator>(</operator><name>CEC_ISR_RXOVR</name> <operator>|</operator> <name>CEC_ISR_BRE</name> <operator>|</operator> <name>CEC_ISR_SBPE</name> <operator>|</operator> <name>CEC_ISR_LBPE</name> <operator>|</operator> <name>CEC_ISR_RXACKE</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>RxBuffer</name></name> <operator>-=</operator> <name><name>hcec</name><operator>-&gt;</operator><name>RxXferSize</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_CEC_STATE_READY</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>reg</name> <operator>&amp;</operator> <name>CEC_ISR_ARBLST</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>reg</name> <operator>&amp;</operator> <operator>(</operator><name>CEC_ISR_TXUDR</name> <operator>|</operator> <name>CEC_ISR_TXERR</name> <operator>|</operator> <name>CEC_ISR_TXACKE</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the CEC state ready to be able to start again the process */</comment>
      <expr_stmt><expr><name><name>hcec</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_CEC_STATE_READY</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Nothing todo*/</comment>
    </block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CEC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Error  Call Back */</comment>
    <expr_stmt><expr><call><name>HAL_CEC_ErrorCallback</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CEC_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Nothing todo*/</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_CEC_TxCpltCallback</name><parameter_list>(<parameter><decl><type><name>CEC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Rx Transfer completed callback
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_CEC_RxCpltCallback</name><parameter_list>(<parameter><decl><type><name>CEC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcec</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>RxFrameSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>RxFrameSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_CEC_ErrorCallback</name><parameter_list>(<parameter><decl><type><name>CEC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hcec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */</comment>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup CEC_Exported_Functions_Group3 Peripheral Control function
  *  @brief   CEC control functions
  *
@verbatim
 ===============================================================================
                      ##### Peripheral Control function #####
 ===============================================================================
    [..]
    This subsection provides a set of functions allowing to control the CEC.
     (+) HAL_CEC_GetState() API can be helpful to check in run-time the state of the CEC peripheral.
     (+) HAL_CEC_GetError() API can be helpful to check in run-time the error of the CEC peripheral.
@endverbatim
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @brief return the CEC state
  * @param hcec pointer to a CEC_HandleTypeDef structure that contains
  *              the configuration information for the specified CEC module.
  * @retval HAL state
  */</comment>
<function><type><name>HAL_CEC_StateTypeDef</name></type> <name>HAL_CEC_GetState</name><parameter_list>(<parameter><decl><type><name>CEC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>temp1</name> <operator>=</operator> <name><name>hcec</name><operator>-&gt;</operator><name>gState</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>temp2</name> <operator>=</operator> <name><name>hcec</name><operator>-&gt;</operator><name>RxState</name></name></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><name>HAL_CEC_StateTypeDef</name><operator>)</operator><operator>(</operator><name>temp1</name> <operator>|</operator> <name>temp2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the CEC error code
  * @param  hcec  pointer to a CEC_HandleTypeDef structure that contains
  *              the configuration information for the specified CEC.
  * @retval CEC Error Code
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_CEC_GetError</name><parameter_list>(<parameter><decl><type><name>CEC_HandleTypeDef</name> <modifier>*</modifier></type><name>hcec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hcec</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CEC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_CEC_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
