<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_i2c_ex.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_i2c_ex.c
  * @author  MCD Application Team
  * @brief   I2C Extension HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of I2C extension peripheral:
  *           + Extension features functions
  *
  @verbatim
  ==============================================================================
               ##### I2C peripheral extension features  #####
  ==============================================================================

  [..] Comparing to other previous devices, the I2C interface for STM32F427xx/437xx/
       429xx/439xx devices contains the following additional features :

       (+) Possibility to disable or enable Analog Noise Filter
       (+) Use of a configured Digital Noise Filter

                     ##### How to use this driver #####
  ==============================================================================
  [..] This driver provides functions to configure Noise Filter
    (#) Configure I2C Analog noise filter using the function HAL_I2C_AnalogFilter_Config()
    (#) Configure I2C Digital noise filter using the function HAL_I2C_DigitalFilter_Config()

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup I2CEx I2CEx
  * @brief I2C HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_I2C_MODULE_ENABLED</name></cpp:ifdef>

<cpp:if>#<cpp:directive>if</cpp:directive>  <expr><call><name>defined</name><argument_list>(<argument><expr><name>I2C_FLTR_ANOFF</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>defined</name><argument_list>(<argument><expr><name>I2C_FLTR_DNF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup I2CEx_Exported_Functions I2C Exported Functions
  * @{
  */</comment>


<comment type="block" format="doxygen">/** @defgroup I2CEx_Exported_Functions_Group1 Extension features functions
 *  @brief   Extension features functions
 *
@verbatim
 ===============================================================================
                      ##### Extension features functions #####
 ===============================================================================
    [..] This section provides functions allowing to:
      (+) Configure Noise Filters

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Configures I2C Analog noise filter.
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_I2CEx_ConfigAnalogFilter</name><parameter_list>(<parameter><decl><type><name>I2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>AnalogFilter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_I2C_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hi2c</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_I2C_ANALOG_FILTER</name><argument_list>(<argument><expr><name>AnalogFilter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_I2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2C_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Disable the selected I2C peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_I2C_DISABLE</name><argument_list>(<argument><expr><name>hi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Reset I2Cx ANOFF bit */</comment>
    <expr_stmt><expr><name><name>hi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>I2C_FLTR_ANOFF</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Disable the analog filter */</comment>
    <expr_stmt><expr><name><name>hi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTR</name></name> <operator>|=</operator> <name>AnalogFilter</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>__HAL_I2C_ENABLE</name><argument_list>(<argument><expr><name>hi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2C_STATE_READY</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configures I2C Digital noise filter.
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_I2CEx_ConfigDigitalFilter</name><parameter_list>(<parameter><decl><type><name>I2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DigitalFilter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>tmpreg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_I2C_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hi2c</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_I2C_DIGITAL_FILTER</name><argument_list>(<argument><expr><name>DigitalFilter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_I2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2C_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Disable the selected I2C peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_I2C_DISABLE</name><argument_list>(<argument><expr><name>hi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get the old register value */</comment>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>hi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTR</name></name></expr>;</expr_stmt>

    <comment type="block">/* Reset I2Cx DNF bit [3:0] */</comment>
    <expr_stmt><expr><name>tmpreg</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>I2C_FLTR_DNF</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Set I2Cx DNF coefficient */</comment>
    <expr_stmt><expr><name>tmpreg</name> <operator>|=</operator> <name>DigitalFilter</name></expr>;</expr_stmt>

    <comment type="block">/* Store the new register value */</comment>
    <expr_stmt><expr><name><name>hi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FLTR</name></name> <operator>=</operator> <name>tmpreg</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>__HAL_I2C_ENABLE</name><argument_list>(<argument><expr><name>hi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2C_STATE_READY</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_I2C_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
