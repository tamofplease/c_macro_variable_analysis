<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_rtc.c
  * @author  MCD Application Team
  * @brief   RTC HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the Real Time Clock (RTC) peripheral:
  *           + Initialization and de-initialization functions
  *           + RTC Time and Date functions
  *           + RTC Alarm functions
  *           + Peripheral Control functions
  *           + Peripheral State functions
  *
  @verbatim
  ==============================================================================
              ##### Backup Domain Operating Condition #####
  ==============================================================================
  [..] The real-time clock (RTC), the RTC backup registers, and the backup
       SRAM (BKP SRAM) can be powered from the VBAT voltage when the main
       VDD supply is powered off.
       To retain the content of the RTC backup registers, backup SRAM, and supply
       the RTC when VDD is turned off, VBAT pin can be connected to an optional
       standby voltage supplied by a battery or by another source.

  [..] To allow the RTC operating even when the main digital supply (VDD) is turned
       off, the VBAT pin powers the following blocks:
    (#) The RTC
    (#) The LSE oscillator
    (#) The backup SRAM when the low power backup regulator is enabled
    (#) PC13 to PC15 I/Os, plus PI8 I/O (when available)

  [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
       the following pins are available:
    (#) PC14 and PC15 can be used as either GPIO or LSE pins
    (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
    (#) PI8 can be used as a GPIO or as the RTC_AF2 pin

  [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT
       because VDD is not present), the following pins are available:
    (#) PC14 and PC15 can be used as LSE pins only
    (#) PC13 can be used as the RTC_AF1 pin
    (#) PI8 can be used as the RTC_AF2 pin

                   ##### Backup Domain Reset #####
  ==================================================================
  [..] The backup domain reset sets all RTC registers and the RCC_BDCR register
       to their reset values. The BKPSRAM is not affected by this reset. The only
       way to reset the BKPSRAM is through the Flash interface by requesting
       a protection level change from 1 to 0.
  [..] A backup domain reset is generated when one of the following events occurs:
    (#) Software reset, triggered by setting the BDRST bit in the
        RCC Backup domain control register (RCC_BDCR).
    (#) VDD or VBAT power on, if both supplies have previously been powered off.

                   ##### Backup Domain Access #####
  ==================================================================
  [..] After reset, the backup domain (RTC registers, RTC backup data
       registers and backup SRAM) is protected against possible unwanted write
       accesses.
  [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
    (+) Enable the Power Controller (PWR) APB1 interface clock using the
        __HAL_RCC_PWR_CLK_ENABLE() function.
    (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
    (+) Select the RTC clock source using the __HAL_RCC_RTC_CONFIG() function.
    (+) Enable RTC Clock using the __HAL_RCC_RTC_ENABLE() function.


                  ##### How to use this driver #####
  ==================================================================
  [..]
    (+) Enable the RTC domain access (see description in the section above).
    (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour
        format using the HAL_RTC_Init() function.

  *** Time and Date configuration ***
  ===================================
  [..]
    (+) To configure the RTC Calendar (Time and Date) use the HAL_RTC_SetTime()
        and HAL_RTC_SetDate() functions.
    (+) To read the RTC Calendar, use the HAL_RTC_GetTime() and HAL_RTC_GetDate() functions.

  *** Alarm configuration ***
  ===========================
  [..]
    (+) To configure the RTC Alarm use the HAL_RTC_SetAlarm() function.
        You can also configure the RTC Alarm with interrupt mode using the HAL_RTC_SetAlarm_IT() function.
    (+) To read the RTC Alarm, use the HAL_RTC_GetAlarm() function.

                  ##### RTC and low power modes #####
  ==================================================================
  [..] The MCU can be woken up from a low power mode by an RTC alternate
       function.
  [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B),
       RTC wake-up, RTC tamper event detection and RTC time stamp event detection.
       These RTC alternate functions can wake up the system from the Stop and
       Standby low power modes.
  [..] The system can also wake up from low power modes without depending
       on an external interrupt (Auto-wake-up mode), by using the RTC alarm
       or the RTC wake-up events.
  [..] The RTC provides a programmable time base for waking up from the
       Stop or Standby mode at regular intervals.
       Wake-up from STOP and STANDBY modes is possible only when the RTC clock source
       is LSE or LSI.

  *** Callback registration ***
  =============================================

  The compilation define  USE_HAL_RTC_REGISTER_CALLBACKS when set to 1
  allows the user to configure dynamically the driver callbacks.
  Use Function @ref HAL_RTC_RegisterCallback() to register an interrupt callback.

  Function @ref HAL_RTC_RegisterCallback() allows to register following callbacks:
    (+) AlarmAEventCallback          : RTC Alarm A Event callback.
    (+) AlarmBEventCallback          : RTC Alarm B Event callback.
    (+) TimeStampEventCallback       : RTC TimeStamp Event callback.
    (+) WakeUpTimerEventCallback     : RTC WakeUpTimer Event callback.
    (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
    (+) Tamper2EventCallback         : RTC Tamper 2 Event callback.
    (+) MspInitCallback              : RTC MspInit callback.
    (+) MspDeInitCallback            : RTC MspDeInit callback.
  This function takes as parameters the HAL peripheral handle, the Callback ID
  and a pointer to the user callback function.

  Use function @ref HAL_RTC_UnRegisterCallback() to reset a callback to the default
  weak function.
  @ref HAL_RTC_UnRegisterCallback() takes as parameters the HAL peripheral handle,
  and the Callback ID.
  This function allows to reset following callbacks:
    (+) AlarmAEventCallback          : RTC Alarm A Event callback.
    (+) AlarmBEventCallback          : RTC Alarm B Event callback.
    (+) TimeStampEventCallback       : RTC TimeStamp Event callback.
    (+) WakeUpTimerEventCallback     : RTC WakeUpTimer Event callback.
    (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
    (+) Tamper2EventCallback         : RTC Tamper 2 Event callback.
    (+) MspInitCallback              : RTC MspInit callback.
    (+) MspDeInitCallback            : RTC MspDeInit callback.

  By default, after the @ref HAL_RTC_Init() and when the state is HAL_RTC_STATE_RESET,
  all callbacks are set to the corresponding weak functions :
  examples @ref AlarmAEventCallback(), @ref WakeUpTimerEventCallback().
  Exception done for MspInit and MspDeInit callbacks that are reset to the legacy weak function
  in the @ref HAL_RTC_Init()/@ref HAL_RTC_DeInit() only when these callbacks are null
  (not registered beforehand).
  If not, MspInit or MspDeInit are not null, @ref HAL_RTC_Init()/@ref HAL_RTC_DeInit()
  keep and use the user MspInit/MspDeInit callbacks (registered beforehand)

  Callbacks can be registered/unregistered in HAL_RTC_STATE_READY state only.
  Exception done MspInit/MspDeInit that can be registered/unregistered
  in HAL_RTC_STATE_READY or HAL_RTC_STATE_RESET state,
  thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
  In that case first register the MspInit/MspDeInit user callbacks
  using @ref HAL_RTC_RegisterCallback() before calling @ref HAL_RTC_DeInit()
  or @ref HAL_RTC_Init() function.

  When The compilation define USE_HAL_RTC_REGISTER_CALLBACKS is set to 0 or
  not defined, the callback registration feature is not available and all callbacks
  are set to the corresponding weak functions.
   @endverbatim

  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RTC RTC
  * @brief RTC HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_RTC_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup RTC_Exported_Functions RTC Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RTC_Exported_Functions_Group1 Initialization and de-initialization functions
 *  @brief    Initialization and Configuration functions
 *
@verbatim
 ===============================================================================
              ##### Initialization and de-initialization functions #####
 ===============================================================================
   [..] This section provides functions allowing to initialize and configure the
         RTC Prescaler (Synchronous and Asynchronous), RTC Hour format, disable
         RTC registers Write protection, enter and exit the RTC initialization mode,
         RTC registers synchronization check and reference clock detection enable.
         (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base.
             It is split into 2 programmable prescalers to minimize power consumption.
             (++) A 7-bit asynchronous prescaler and a 13-bit synchronous prescaler.
             (++) When both prescalers are used, it is recommended to configure the
                 asynchronous prescaler to a high value to minimize power consumption.
         (#) All RTC registers are Write protected. Writing to the RTC registers
             is enabled by writing a key into the Write Protection register, RTC_WPR.
         (#) To configure the RTC Calendar, user application should enter
             initialization mode. In this mode, the calendar counter is stopped
             and its value can be updated. When the initialization sequence is
             complete, the calendar restarts counting after 4 RTCCLK cycles.
         (#) To read the calendar through the shadow registers after Calendar
             initialization, calendar update or after wake-up from low power modes
             the software must first clear the RSF flag. The software must then
             wait until it is set again before reading the calendar, which means
             that the calendar registers have been correctly copied into the
             RTC_TR and RTC_DR shadow registers.The HAL_RTC_WaitForSynchro() function
             implements the above software sequence (RSF clear and RSF check).

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the RTC peripheral
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_Init</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the RTC peripheral state */</comment>
  <if_stmt><if>if<condition>(<expr><name>hrtc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
     <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOUR_FORMAT</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HourFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ASYNCH_PREDIV</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AsynchPrediv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_SYNCH_PREDIV</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SynchPrediv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name> <argument_list>(<argument><expr><call><name>IS_RTC_OUTPUT</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutPut</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name> <argument_list>(<argument><expr><call><name>IS_RTC_OUTPUT_POL</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutPutPolarity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_OUTPUT_TYPE</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutPutType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_RTC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_RTC_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>AlarmAEventCallback</name></name>          <operator>=</operator>  <name>HAL_RTC_AlarmAEventCallback</name></expr>;</expr_stmt>        <comment type="block">/* Legacy weak AlarmAEventCallback      */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>AlarmBEventCallback</name></name>          <operator>=</operator>  <name>HAL_RTCEx_AlarmBEventCallback</name></expr>;</expr_stmt>      <comment type="block">/* Legacy weak AlarmBEventCallback      */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>TimeStampEventCallback</name></name>       <operator>=</operator>  <name>HAL_RTCEx_TimeStampEventCallback</name></expr>;</expr_stmt>   <comment type="block">/* Legacy weak TimeStampEventCallback   */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>WakeUpTimerEventCallback</name></name>     <operator>=</operator>  <name>HAL_RTCEx_WakeUpTimerEventCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak WakeUpTimerEventCallback */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Tamper1EventCallback</name></name>         <operator>=</operator>  <name>HAL_RTCEx_Tamper1EventCallback</name></expr>;</expr_stmt>     <comment type="block">/* Legacy weak Tamper1EventCallback     */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Tamper2EventCallback</name></name>         <operator>=</operator>  <name>HAL_RTCEx_Tamper2EventCallback</name></expr>;</expr_stmt>     <comment type="block">/* Legacy weak Tamper2EventCallback     */</comment>

    <if_stmt><if>if<condition>(<expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_RTC_MspInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>hrtc</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_RTC_MspDeInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if<condition>(<expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_RTC_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

    <comment type="block">/* Initialize RTC MSP */</comment>
    <expr_stmt><expr><call><name>HAL_RTC_MspInit</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (USE_HAL_RTC_REGISTER_CALLBACKS) */</comment>

  <comment type="block">/* Set RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set Initialization mode */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>RTC_EnterInitMode</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable the write protection for RTC registers */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set RTC state */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Clear RTC_CR FMT, OSEL and POL Bits */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><operator>(</operator><name>RTC_CR_FMT</name> <operator>|</operator> <name>RTC_CR_OSEL</name> <operator>|</operator> <name>RTC_CR_POL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <comment type="block">/* Set RTC_CR register */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HourFormat</name></name> <operator>|</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutPut</name></name> <operator>|</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutPutPolarity</name></name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Configure the RTC PRER */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>PRER</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SynchPrediv</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>PRER</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AsynchPrediv</name></name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Exit Initialization mode */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><name>RTC_ISR_INIT</name></expr>;</expr_stmt>

    <comment type="block">/* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RTC_CR_BYPSHAD</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><call><name>HAL_RTC_WaitForSynchro</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the write protection for RTC registers */</comment>
        <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TAFCR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><name>RTC_TAFCR_ALARMOUTTYPE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TAFCR</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutPutType</name></name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Enable the write protection for RTC registers */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set RTC state */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitializes the RTC peripheral
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @note   This function doesn't reset the RTC Backup Data registers.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_DeInit</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Set RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set Initialization mode */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>RTC_EnterInitMode</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable the write protection for RTC registers */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set RTC state */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Reset TR, DR and CR registers */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TR</name></name> <operator>=</operator> <literal type="number">0x00000000U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <literal type="number">0x00002101U</literal></expr>;</expr_stmt>
    <comment type="block">/* Reset All CR bits except CR[2:0] */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <literal type="number">0x00000007U</literal></expr>;</expr_stmt>

    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait till WUTWF flag is set and if Time out is reached exit */</comment>
    <while>while<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name><operator>)</operator> <operator>&amp;</operator> <name>RTC_ISR_WUTWF</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RTC_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the write protection for RTC registers */</comment>
        <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Set RTC state */</comment>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>

        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Reset all RTC CR register bits */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <literal type="number">0x00000000U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>WUTR</name></name> <operator>=</operator> <literal type="number">0x0000FFFFU</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>PRER</name></name> <operator>=</operator> <literal type="number">0x007F00FFU</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CALIBR</name></name> <operator>=</operator> <literal type="number">0x00000000U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRMAR</name></name> <operator>=</operator> <literal type="number">0x00000000U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRMBR</name></name> <operator>=</operator> <literal type="number">0x00000000U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SHIFTR</name></name> <operator>=</operator> <literal type="number">0x00000000U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CALR</name></name> <operator>=</operator> <literal type="number">0x00000000U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRMASSR</name></name> <operator>=</operator> <literal type="number">0x00000000U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRMBSSR</name></name> <operator>=</operator> <literal type="number">0x00000000U</literal></expr>;</expr_stmt>

    <comment type="block">/* Reset ISR register and exit initialization mode */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name> <operator>=</operator> <literal type="number">0x00000000U</literal></expr>;</expr_stmt>

    <comment type="block">/* Reset Tamper and alternate functions configuration register */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TAFCR</name></name> <operator>=</operator> <literal type="number">0x00000000U</literal></expr>;</expr_stmt>

    <comment type="block">/* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RTC_CR_BYPSHAD</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><call><name>HAL_RTC_WaitForSynchro</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the write protection for RTC registers */</comment>
        <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_RTC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_RTC_MspDeInit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* DeInit the low level hardware: CLOCK, NVIC.*/</comment>
  <expr_stmt><expr><call><name><name>hrtc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* De-Initialize RTC MSP */</comment>
  <expr_stmt><expr><call><name>HAL_RTC_MspDeInit</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (USE_HAL_RTC_REGISTER_CALLBACKS) */</comment>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_RTC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User RTC Callback
  *         To be used instead of the weak predefined callback
  * @param  hrtc RTC handle
  * @param  CallbackID ID of the callback to be registered
  *         This parameter can be one of the following values:
  *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
  *          @arg @ref HAL_RTC_ALARM_B_EVENT_CB_ID          Alarm B Event Callback ID
  *          @arg @ref HAL_RTC_TIMESTAMP_EVENT_CB_ID        TimeStamp Event Callback ID
  *          @arg @ref HAL_RTC_WAKEUPTIMER_EVENT_CB_ID      Wake-Up Timer Event Callback ID
  *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
  *          @arg @ref HAL_RTC_TAMPER2_EVENT_CB_ID          Tamper 2 Callback ID
  *          @arg @ref HAL_RTC_MSPINIT_CB_ID                Msp Init callback ID
  *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID              Msp DeInit callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>HAL_RTC_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>, <parameter><decl><type><name>pRTC_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>HAL_RTC_STATE_READY</name> <operator>==</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_RTC_ALARM_A_EVENT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>AlarmAEventCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_RTC_ALARM_B_EVENT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>AlarmBEventCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_RTC_TIMESTAMP_EVENT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>TimeStampEventCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_RTC_WAKEUPTIMER_EVENT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>WakeUpTimerEventCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_RTC_TAMPER1_EVENT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Tamper1EventCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_RTC_TAMPER2_EVENT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Tamper2EventCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

   <case>case <expr><name>HAL_RTC_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

   <case>case <expr><name>HAL_RTC_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <default>default :</default>
     <comment type="block">/* Return error status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name>HAL_RTC_STATE_RESET</name> <operator>==</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_RTC_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

   <case>case <expr><name>HAL_RTC_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <default>default :</default>
     <comment type="block">/* Return error status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister an RTC Callback
  *         RTC callabck is redirected to the weak predefined callback
  * @param  hrtc RTC handle
  * @param  CallbackID ID of the callback to be unregistered
  *         This parameter can be one of the following values:
  *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
  *          @arg @ref HAL_RTC_ALARM_B_EVENT_CB_ID          Alarm B Event Callback ID
  *          @arg @ref HAL_RTC_TIMESTAMP_EVENT_CB_ID        TimeStamp Event Callback ID
  *          @arg @ref HAL_RTC_WAKEUPTIMER_EVENT_CB_ID      Wake-Up Timer Event Callback ID
  *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
  *          @arg @ref HAL_RTC_TAMPER2_EVENT_CB_ID          Tamper 2 Callback ID
  *          @arg @ref HAL_RTC_MSPINIT_CB_ID Msp Init callback ID
  *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID Msp DeInit callback ID
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>HAL_RTC_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>HAL_RTC_STATE_READY</name> <operator>==</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_RTC_ALARM_A_EVENT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>AlarmAEventCallback</name></name> <operator>=</operator> <name>HAL_RTC_AlarmAEventCallback</name></expr>;</expr_stmt>         <comment type="block">/* Legacy weak AlarmAEventCallback    */</comment>
      <break>break;</break>

    <case>case <expr><name>HAL_RTC_ALARM_B_EVENT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>AlarmBEventCallback</name></name> <operator>=</operator> <name>HAL_RTCEx_AlarmBEventCallback</name></expr>;</expr_stmt>          <comment type="block">/* Legacy weak AlarmBEventCallback */</comment>
      <break>break;</break>

    <case>case <expr><name>HAL_RTC_TIMESTAMP_EVENT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>TimeStampEventCallback</name></name> <operator>=</operator> <name>HAL_RTCEx_TimeStampEventCallback</name></expr>;</expr_stmt>    <comment type="block">/* Legacy weak TimeStampEventCallback    */</comment>
      <break>break;</break>

    <case>case <expr><name>HAL_RTC_WAKEUPTIMER_EVENT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>WakeUpTimerEventCallback</name></name> <operator>=</operator> <name>HAL_RTCEx_WakeUpTimerEventCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak WakeUpTimerEventCallback */</comment>
      <break>break;</break>

    <case>case <expr><name>HAL_RTC_TAMPER1_EVENT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Tamper1EventCallback</name></name> <operator>=</operator> <name>HAL_RTCEx_Tamper1EventCallback</name></expr>;</expr_stmt>         <comment type="block">/* Legacy weak Tamper1EventCallback   */</comment>
      <break>break;</break>

    <case>case <expr><name>HAL_RTC_TAMPER2_EVENT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Tamper2EventCallback</name></name> <operator>=</operator> <name>HAL_RTCEx_Tamper2EventCallback</name></expr>;</expr_stmt>         <comment type="block">/* Legacy weak Tamper2EventCallback         */</comment>
      <break>break;</break>

    <case>case <expr><name>HAL_RTC_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_RTC_MspInit</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_RTC_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_RTC_MspDeInit</name></expr>;</expr_stmt>
      <break>break;</break>

    <default>default :</default>
     <comment type="block">/* Return error status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name>HAL_RTC_STATE_RESET</name> <operator>==</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_RTC_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_RTC_MspInit</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_RTC_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_RTC_MspDeInit</name></expr>;</expr_stmt>
      <break>break;</break>

    <default>default :</default>
     <comment type="block">/* Return error status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_RTC_REGISTER_CALLBACKS */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the RTC MSP.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_RTC_MspInit</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name><modifier>*</modifier></type> <name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitializes the RTC MSP.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_RTC_MspDeInit</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name><modifier>*</modifier></type> <name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_MspDeInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RTC_Exported_Functions_Group2 RTC Time and Date functions
 *  @brief   RTC Time and Date functions
 *
@verbatim
 ===============================================================================
                 ##### RTC Time and Date functions #####
 ===============================================================================

 [..] This section provides functions allowing to configure Time and Date features

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Sets RTC current time.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  sTime Pointer to Time structure
  * @param  Format Specifies the format of the entered parameters.
  *          This parameter can be one of the following values:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_SetTime</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>RTC_TimeTypeDef</name> <modifier>*</modifier></type><name>sTime</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

 <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_FORMAT</name><argument_list>(<argument><expr><name>Format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_DAYLIGHT_SAVING</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>DayLightSaving</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_STORE_OPERATION</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>StoreOperation</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>Format</name> <operator>==</operator> <name>RTC_FORMAT_BIN</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RTC_CR_FMT</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOUR12</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOURFORMAT12</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>TimeFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>sTime</name><operator>-&gt;</operator><name>TimeFormat</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOUR24</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_MINUTES</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Minutes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_SECONDS</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Seconds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Hours</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator> \
                        <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Minutes</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>|</operator> \
                        <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Seconds</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> \
                        <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTime</name><operator>-&gt;</operator><name>TimeFormat</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RTC_CR_FMT</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOUR12</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOURFORMAT12</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>TimeFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>sTime</name><operator>-&gt;</operator><name>TimeFormat</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOUR24</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_MINUTES</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Minutes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_SECONDS</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Seconds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sTime</name><operator>-&gt;</operator><name>Hours</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sTime</name><operator>-&gt;</operator><name>Minutes</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTime</name><operator>-&gt;</operator><name>Seconds</name></name><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sTime</name><operator>-&gt;</operator><name>TimeFormat</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set Initialization mode */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>RTC_EnterInitMode</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable the write protection for RTC registers */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set RTC state */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Set the RTC_TR register */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <name>RTC_TR_RESERVED_MASK</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Clear the bits to be configured */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><name>RTC_CR_BCK</name></expr>;</expr_stmt>

    <comment type="block">/* Configure the RTC_CR register */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sTime</name><operator>-&gt;</operator><name>DayLightSaving</name></name> <operator>|</operator> <name><name>sTime</name><operator>-&gt;</operator><name>StoreOperation</name></name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Exit Initialization mode */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><name>RTC_ISR_INIT</name></expr>;</expr_stmt>

    <comment type="block">/* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RTC_CR_BYPSHAD</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><call><name>HAL_RTC_WaitForSynchro</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the write protection for RTC registers */</comment>
        <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Enable the write protection for RTC registers */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

   <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Gets RTC current time.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  sTime Pointer to Time structure
  * @param  Format Specifies the format of the entered parameters.
  *          This parameter can be one of the following values:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @note  You can use SubSeconds and SecondFraction (sTime structure fields returned) to convert SubSeconds
  *        value in second fraction ratio with time unit following generic formula:
  *        Second fraction ratio * time_unit= [(SecondFraction-SubSeconds)/(SecondFraction+1)] * time_unit
  *        This conversion can be performed only if no shift operation is pending (ie. SHFP=0) when PREDIV_S &gt;= SS
  * @note You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_GetTime</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>RTC_TimeTypeDef</name> <modifier>*</modifier></type><name>sTime</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_FORMAT</name><argument_list>(<argument><expr><name>Format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get subseconds structure field from the corresponding register */</comment>
  <expr_stmt><expr><name><name>sTime</name><operator>-&gt;</operator><name>SubSeconds</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SSR</name></name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Get SecondFraction structure field from the corresponding register field*/</comment>
  <expr_stmt><expr><name><name>sTime</name><operator>-&gt;</operator><name>SecondFraction</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>PRER</name></name> <operator>&amp;</operator> <name>RTC_PRER_PREDIV_S</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Get the TR register */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TR</name></name> <operator>&amp;</operator> <name>RTC_TR_RESERVED_MASK</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Fill the structure fields with the read parameters */</comment>
  <expr_stmt><expr><name><name>sTime</name><operator>-&gt;</operator><name>Hours</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <operator>(</operator><name>RTC_TR_HT</name> <operator>|</operator> <name>RTC_TR_HU</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sTime</name><operator>-&gt;</operator><name>Minutes</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <operator>(</operator><name>RTC_TR_MNT</name> <operator>|</operator> <name>RTC_TR_MNU</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sTime</name><operator>-&gt;</operator><name>Seconds</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <operator>(</operator><name>RTC_TR_ST</name> <operator>|</operator> <name>RTC_TR_SU</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sTime</name><operator>-&gt;</operator><name>TimeFormat</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <operator>(</operator><name>RTC_TR_PM</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Check the input parameters format */</comment>
  <if_stmt><if>if<condition>(<expr><name>Format</name> <operator>==</operator> <name>RTC_FORMAT_BIN</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Convert the time structure parameters to Binary format */</comment>
    <expr_stmt><expr><name><name>sTime</name><operator>-&gt;</operator><name>Hours</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sTime</name><operator>-&gt;</operator><name>Minutes</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Minutes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sTime</name><operator>-&gt;</operator><name>Seconds</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Seconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sets RTC current date.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  sDate Pointer to date structure
  * @param  Format specifies the format of the entered parameters.
  *          This parameter can be one of the following values:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_SetDate</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>RTC_DateTypeDef</name> <modifier>*</modifier></type><name>sDate</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>datetmpreg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

 <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_FORMAT</name><argument_list>(<argument><expr><name>Format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 <comment type="block">/* Process Locked */</comment>
 <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Format</name> <operator>==</operator> <name>RTC_FORMAT_BIN</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>sDate</name><operator>-&gt;</operator><name>Month</name></name> <operator>&amp;</operator> <literal type="number">0x10U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x10U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>sDate</name><operator>-&gt;</operator><name>Month</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>sDate</name><operator>-&gt;</operator><name>Month</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>~</operator><operator>(</operator><literal type="number">0x10U</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x0AU</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_WEEKDAY</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>WeekDay</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>Format</name> <operator>==</operator> <name>RTC_FORMAT_BIN</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_YEAR</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Year</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_MONTH</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Month</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_DATE</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Date</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <expr_stmt><expr><name>datetmpreg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Year</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator> \
                 <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Month</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>|</operator> \
                 <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Date</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> \
                 <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sDate</name><operator>-&gt;</operator><name>WeekDay</name></name> <operator>&lt;&lt;</operator> <literal type="number">13U</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_YEAR</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Year</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_MONTH</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Month</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_DATE</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Date</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>datetmpreg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sDate</name><operator>-&gt;</operator><name>Year</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator> \
                  <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sDate</name><operator>-&gt;</operator><name>Month</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>|</operator> \
                  <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sDate</name><operator>-&gt;</operator><name>Date</name></name><operator>)</operator> <operator>|</operator> \
                  <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sDate</name><operator>-&gt;</operator><name>WeekDay</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">13U</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set Initialization mode */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>RTC_EnterInitMode</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable the write protection for RTC registers */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set RTC state*/</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Set the RTC_DR register */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>datetmpreg</name> <operator>&amp;</operator> <name>RTC_DR_RESERVED_MASK</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Exit Initialization mode */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><name>RTC_ISR_INIT</name></expr>;</expr_stmt>

    <comment type="block">/* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RTC_CR_BYPSHAD</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><call><name>HAL_RTC_WaitForSynchro</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the write protection for RTC registers */</comment>
        <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Enable the write protection for RTC registers */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr> ;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Gets RTC current date.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  sDate Pointer to Date structure
  * @param  Format Specifies the format of the entered parameters.
  *          This parameter can be one of the following values:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @note You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_GetDate</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>RTC_DateTypeDef</name> <modifier>*</modifier></type><name>sDate</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>datetmpreg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_FORMAT</name><argument_list>(<argument><expr><name>Format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the DR register */</comment>
  <expr_stmt><expr><name>datetmpreg</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>&amp;</operator> <name>RTC_DR_RESERVED_MASK</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Fill the structure fields with the read parameters */</comment>
  <expr_stmt><expr><name><name>sDate</name><operator>-&gt;</operator><name>Year</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>datetmpreg</name> <operator>&amp;</operator> <operator>(</operator><name>RTC_DR_YT</name> <operator>|</operator> <name>RTC_DR_YU</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sDate</name><operator>-&gt;</operator><name>Month</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>datetmpreg</name> <operator>&amp;</operator> <operator>(</operator><name>RTC_DR_MT</name> <operator>|</operator> <name>RTC_DR_MU</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sDate</name><operator>-&gt;</operator><name>Date</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>datetmpreg</name> <operator>&amp;</operator> <operator>(</operator><name>RTC_DR_DT</name> <operator>|</operator> <name>RTC_DR_DU</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sDate</name><operator>-&gt;</operator><name>WeekDay</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>datetmpreg</name> <operator>&amp;</operator> <operator>(</operator><name>RTC_DR_WDU</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">13U</literal><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Check the input parameters format */</comment>
  <if_stmt><if>if<condition>(<expr><name>Format</name> <operator>==</operator> <name>RTC_FORMAT_BIN</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Convert the date structure parameters to Binary format */</comment>
    <expr_stmt><expr><name><name>sDate</name><operator>-&gt;</operator><name>Year</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sDate</name><operator>-&gt;</operator><name>Month</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Month</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sDate</name><operator>-&gt;</operator><name>Date</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RTC_Exported_Functions_Group3 RTC Alarm functions
 *  @brief   RTC Alarm functions
 *
@verbatim
 ===============================================================================
                 ##### RTC Alarm functions #####
 ===============================================================================

 [..] This section provides functions allowing to configure Alarm feature

@endverbatim
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @brief  Sets the specified RTC Alarm.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  sAlarm Pointer to Alarm structure
  * @param  Format Specifies the format of the entered parameters.
  *          This parameter can be one of the following values:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_SetAlarm</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>RTC_AlarmTypeDef</name> <modifier>*</modifier></type><name>sAlarm</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>subsecondtmpreg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_FORMAT</name><argument_list>(<argument><expr><name>Format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>Alarm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM_MASK</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmMask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM_DATE_WEEKDAY_SEL</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDaySel</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM_SUB_SECOND_VALUE</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>SubSeconds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM_SUB_SECOND_MASK</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmSubSecondMask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>Format</name> <operator>==</operator> <name>RTC_FORMAT_BIN</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RTC_CR_FMT</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOUR12</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOURFORMAT12</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>TimeFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>TimeFormat</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOUR24</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_MINUTES</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_SECONDS</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDaySel</name></name> <operator>==</operator> <name>RTC_ALARMDATEWEEKDAYSEL_DATE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM_DATE_WEEKDAY_DATE</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDay</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDay</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>TimeFormat</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDay</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">24U</literal><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDaySel</name></name><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmMask</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RTC_CR_FMT</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOUR12</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOURFORMAT12</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>TimeFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>TimeFormat</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOUR24</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_MINUTES</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_SECONDS</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDaySel</name></name> <operator>==</operator> <name>RTC_ALARMDATEWEEKDAYSEL_DATE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM_DATE_WEEKDAY_DATE</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDay</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDay</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>TimeFormat</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDay</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24U</literal><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDaySel</name></name><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmMask</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Configure the Alarm A or Alarm B Sub Second registers */</comment>
  <expr_stmt><expr><name>subsecondtmpreg</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>SubSeconds</name></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmSubSecondMask</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Configure the Alarm register */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>sAlarm</name><operator>-&gt;</operator><name>Alarm</name></name> <operator>==</operator> <name>RTC_ALARM_A</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the Alarm A interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARMA_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* In case of interrupt mode is used, the interrupt source must disabled */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARM_DISABLE_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_IT_ALRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait till RTC ALRAWF flag is set and if Time out is reached exit */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RTC_ALARM_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_ALRAWF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RTC_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the write protection for RTC registers */</comment>
        <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRMAR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>tmpreg</name></expr>;</expr_stmt>
    <comment type="block">/* Configure the Alarm A Sub Second register */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRMASSR</name></name> <operator>=</operator> <name>subsecondtmpreg</name></expr>;</expr_stmt>
    <comment type="block">/* Configure the Alarm state: Enable Alarm */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARMA_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Disable the Alarm B interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARMB_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* In case of interrupt mode is used, the interrupt source must disabled */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARM_DISABLE_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_IT_ALRB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait till RTC ALRBWF flag is set and if Time out is reached exit */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RTC_ALARM_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_ALRBWF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RTC_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the write protection for RTC registers */</comment>
        <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRMBR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>tmpreg</name></expr>;</expr_stmt>
    <comment type="block">/* Configure the Alarm B Sub Second register */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRMBSSR</name></name> <operator>=</operator> <name>subsecondtmpreg</name></expr>;</expr_stmt>
    <comment type="block">/* Configure the Alarm state: Enable Alarm */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARMB_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sets the specified RTC Alarm with Interrupt
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  sAlarm Pointer to Alarm structure
  * @param  Format Specifies the format of the entered parameters.
  *          This parameter can be one of the following values:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_SetAlarm_IT</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>RTC_AlarmTypeDef</name> <modifier>*</modifier></type><name>sAlarm</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>subsecondtmpreg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>count</name> <init>= <expr><name>RTC_TIMEOUT_VALUE</name>  <operator>*</operator> <operator>(</operator><name>SystemCoreClock</name> <operator>/</operator> <literal type="number">32U</literal> <operator>/</operator> <literal type="number">1000U</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_FORMAT</name><argument_list>(<argument><expr><name>Format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>Alarm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM_MASK</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmMask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM_DATE_WEEKDAY_SEL</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDaySel</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM_SUB_SECOND_VALUE</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>SubSeconds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM_SUB_SECOND_MASK</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmSubSecondMask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>Format</name> <operator>==</operator> <name>RTC_FORMAT_BIN</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RTC_CR_FMT</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOUR12</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOURFORMAT12</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>TimeFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>TimeFormat</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOUR24</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_MINUTES</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_SECONDS</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDaySel</name></name> <operator>==</operator> <name>RTC_ALARMDATEWEEKDAYSEL_DATE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM_DATE_WEEKDAY_DATE</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDay</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDay</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>TimeFormat</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDay</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">24U</literal><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDaySel</name></name><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmMask</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RTC_CR_FMT</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOUR12</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOURFORMAT12</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>TimeFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>TimeFormat</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOUR24</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_MINUTES</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_SECONDS</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDaySel</name></name> <operator>==</operator> <name>RTC_ALARMDATEWEEKDAYSEL_DATE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM_DATE_WEEKDAY_DATE</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDay</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDay</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>TimeFormat</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDay</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24U</literal><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDaySel</name></name><operator>)</operator> <operator>|</operator> \
              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmMask</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Configure the Alarm A or Alarm B Sub Second registers */</comment>
  <expr_stmt><expr><name>subsecondtmpreg</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>SubSeconds</name></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmSubSecondMask</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Configure the Alarm register */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>sAlarm</name><operator>-&gt;</operator><name>Alarm</name></name> <operator>==</operator> <name>RTC_ALARM_A</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the Alarm A interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARMA_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear flag alarm A */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARM_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_ALRAF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait till RTC ALRAWF flag is set and if Time out is reached exit */</comment>
    <do>do
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>count</name><operator>--</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the write protection for RTC registers */</comment>
        <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    while <condition>(<expr><call><name>__HAL_RTC_ALARM_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_ALRAWF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>;</do>

    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRMAR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>tmpreg</name></expr>;</expr_stmt>
    <comment type="block">/* Configure the Alarm A Sub Second register */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRMASSR</name></name> <operator>=</operator> <name>subsecondtmpreg</name></expr>;</expr_stmt>
    <comment type="block">/* Configure the Alarm state: Enable Alarm */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARMA_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Configure the Alarm interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARM_ENABLE_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>,<argument><expr><name>RTC_IT_ALRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Disable the Alarm B interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARMB_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear flag alarm B */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARM_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_ALRBF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait till RTC ALRBWF flag is set and if Time out is reached exit */</comment>
    <do>do
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>count</name><operator>--</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the write protection for RTC registers */</comment>
        <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    while <condition>(<expr><call><name>__HAL_RTC_ALARM_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_ALRBWF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>;</do>

    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRMBR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>tmpreg</name></expr>;</expr_stmt>
    <comment type="block">/* Configure the Alarm B Sub Second register */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRMBSSR</name></name> <operator>=</operator> <name>subsecondtmpreg</name></expr>;</expr_stmt>
    <comment type="block">/* Configure the Alarm state: Enable Alarm */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARMB_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Configure the Alarm interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARM_ENABLE_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_IT_ALRB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* RTC Alarm Interrupt Configuration: EXTI configuration */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_ALARM_EXTI_ENABLE_IT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>EXTI</name><operator>-&gt;</operator><name>RTSR</name></name> <operator>|=</operator> <name>RTC_EXTI_LINE_ALARM_EVENT</name></expr>;</expr_stmt>

  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Deactivate the specified RTC Alarm
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  Alarm Specifies the Alarm.
  *          This parameter can be one of the following values:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_DeactivateAlarm</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Alarm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM</name><argument_list>(<argument><expr><name>Alarm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>Alarm</name> <operator>==</operator> <name>RTC_ALARM_A</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* AlarmA */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARMA_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* In case of interrupt mode is used, the interrupt source must disabled */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARM_DISABLE_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_IT_ALRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait till RTC ALRxWF flag is set and if Time out is reached exit */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RTC_ALARM_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_ALRAWF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RTC_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the write protection for RTC registers */</comment>
        <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* AlarmB */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARMB_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* In case of interrupt mode is used, the interrupt source must disabled */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARM_DISABLE_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>,<argument><expr><name>RTC_IT_ALRB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait till RTC ALRxWF flag is set and if Time out is reached exit */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RTC_ALARM_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_ALRBWF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RTC_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the write protection for RTC registers */</comment>
        <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Enable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Gets the RTC Alarm value and masks.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  sAlarm Pointer to Date structure
  * @param  Alarm Specifies the Alarm.
  *          This parameter can be one of the following values:
  *             @arg RTC_ALARM_A: AlarmA
  *             @arg RTC_ALARM_B: AlarmB
  * @param  Format Specifies the format of the entered parameters.
  *          This parameter can be one of the following values:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_GetAlarm</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>RTC_AlarmTypeDef</name> <modifier>*</modifier></type><name>sAlarm</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Alarm</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>subsecondtmpreg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_FORMAT</name><argument_list>(<argument><expr><name>Format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM</name><argument_list>(<argument><expr><name>Alarm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>Alarm</name> <operator>==</operator> <name>RTC_ALARM_A</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* AlarmA */</comment>
    <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>Alarm</name></name> <operator>=</operator> <name>RTC_ALARM_A</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRMAR</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>subsecondtmpreg</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRMASSR</name></name> <operator>)</operator> <operator>&amp;</operator> <name>RTC_ALRMASSR_SS</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>Alarm</name></name> <operator>=</operator> <name>RTC_ALARM_B</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRMBR</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>subsecondtmpreg</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRMBSSR</name></name><operator>)</operator> <operator>&amp;</operator> <name>RTC_ALRMBSSR_SS</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Fill the structure with the read parameters */</comment>
  <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <operator>(</operator><name>RTC_ALRMAR_HT</name> <operator>|</operator> <name>RTC_ALRMAR_HU</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <operator>(</operator><name>RTC_ALRMAR_MNT</name> <operator>|</operator> <name>RTC_ALRMAR_MNU</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <operator>(</operator><name>RTC_ALRMAR_ST</name> <operator>|</operator> <name>RTC_ALRMAR_SU</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>TimeFormat</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <name>RTC_ALRMAR_PM</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>SubSeconds</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>subsecondtmpreg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDay</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <operator>(</operator><name>RTC_ALRMAR_DT</name> <operator>|</operator> <name>RTC_ALRMAR_DU</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDaySel</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <name>RTC_ALRMAR_WDSEL</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmMask</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <name>RTC_ALARMMASK_ALL</name><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>Format</name> <operator>==</operator> <name>RTC_FORMAT_BIN</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name> <operator>=</operator> <call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name> <operator>=</operator> <call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name> <operator>=</operator> <call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDay</name></name> <operator>=</operator> <call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmDateWeekDay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles Alarm interrupt request.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RTC_AlarmIRQHandler</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name><modifier>*</modifier></type> <name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_RTC_ALARM_GET_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_IT_ALRA</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Get the status of the Interrupt */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RTC_IT_ALRA</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* AlarmA callback */</comment>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_RTC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hrtc</name><operator>-&gt;</operator><name>AlarmAEventCallback</name></name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_RTC_AlarmAEventCallback</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_RTC_REGISTER_CALLBACKS */</comment>

      <comment type="block">/* Clear the Alarm interrupt pending bit */</comment>
      <expr_stmt><expr><call><name>__HAL_RTC_ALARM_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>,<argument><expr><name>RTC_FLAG_ALRAF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><call><name>__HAL_RTC_ALARM_GET_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_IT_ALRB</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Get the status of the Interrupt */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RTC_IT_ALRB</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* AlarmB callback */</comment>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_RTC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hrtc</name><operator>-&gt;</operator><name>AlarmBEventCallback</name></name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_RTCEx_AlarmBEventCallback</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_RTC_REGISTER_CALLBACKS */</comment>

      <comment type="block">/* Clear the Alarm interrupt pending bit */</comment>
      <expr_stmt><expr><call><name>__HAL_RTC_ALARM_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>,<argument><expr><name>RTC_FLAG_ALRBF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Clear the EXTI's line Flag for RTC Alarm */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_ALARM_EXTI_CLEAR_FLAG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Alarm A callback.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_RTC_AlarmAEventCallback</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles AlarmA Polling request.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_PollForAlarmAEvent</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <while>while<condition>(<expr><call><name>__HAL_RTC_ALARM_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_ALRAF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator><operator>||</operator><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Clear the Alarm interrupt pending bit */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_ALARM_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_ALRAF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RTC_Exported_Functions_Group4 Peripheral Control functions
 *  @brief   Peripheral Control functions
 *
@verbatim
 ===============================================================================
                     ##### Peripheral Control functions #####
 ===============================================================================
    [..]
    This subsection provides functions allowing to
      (+) Wait for RTC Time and Date Synchronization

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are
  *         synchronized with RTC APB clock.
  * @note   The RTC Resynchronization mode is write protected, use the
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @note   To read the calendar through the shadow registers after Calendar
  *         initialization, calendar update or after wake-up from low power modes
  *         the software must first clear the RSF flag.
  *         The software must then wait until it is set again before reading
  *         the calendar, which means that the calendar registers have been
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_WaitForSynchro</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name><modifier>*</modifier></type> <name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Clear RSF flag */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RTC_RSF_MASK</name></expr>;</expr_stmt>

    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait the registers to be synchronised */</comment>
  <while>while<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name> <operator>&amp;</operator> <name>RTC_ISR_RSF</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RTC_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RTC_Exported_Functions_Group5 Peripheral State functions
 *  @brief   Peripheral State functions
 *
@verbatim
 ===============================================================================
                     ##### Peripheral State functions #####
 ===============================================================================
    [..]
    This subsection provides functions allowing to
      (+) Get RTC state

@endverbatim
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @brief  Returns the RTC state.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL state
  */</comment>
<function><type><name>HAL_RTCStateTypeDef</name></type> <name>HAL_RTC_GetState</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name><modifier>*</modifier></type> <name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Enters the RTC Initialization mode.
  * @note   The RTC Initialization mode is write protected, use the
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>RTC_EnterInitMode</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name><modifier>*</modifier></type> <name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check if the Initialization mode is set */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name> <operator>&amp;</operator> <name>RTC_ISR_INITF</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set the Initialization mode */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RTC_INIT_MASK</name></expr>;</expr_stmt>

    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait till RTC is in INIT state and if Time out is reached exit */</comment>
    <while>while<condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name> <operator>&amp;</operator> <name>RTC_ISR_INITF</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RTC_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */</comment>
<function><type><name>uint8_t</name></type> <name>RTC_ByteToBcd2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>Value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>bcdhigh</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <while>while<condition>(<expr><name>Value</name> <operator>&gt;=</operator> <literal type="number">10U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>bcdhigh</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>Value</name> <operator>-=</operator> <literal type="number">10U</literal></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return  <expr><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>bcdhigh</name> <operator>&lt;&lt;</operator> <literal type="number">4U</literal><operator>)</operator> <operator>|</operator> <name>Value</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */</comment>
<function><type><name>uint8_t</name></type> <name>RTC_Bcd2ToByte</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>Value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>Value</name> <operator>&amp;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xF0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x4</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>tmp</name> <operator>+</operator> <operator>(</operator><name>Value</name> <operator>&amp;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x0F</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_RTC_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
