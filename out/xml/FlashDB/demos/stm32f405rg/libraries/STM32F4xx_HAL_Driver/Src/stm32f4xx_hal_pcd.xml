<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_pcd.c
  * @author  MCD Application Team
  * @brief   PCD HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the USB Peripheral Controller:
  *           + Initialization and de-initialization functions
  *           + IO operation functions
  *           + Peripheral Control functions
  *           + Peripheral State functions
  *
  @verbatim
  ==============================================================================
                    ##### How to use this driver #####
  ==============================================================================
    [..]
      The PCD HAL driver can be used as follows:

     (#) Declare a PCD_HandleTypeDef handle structure, for example:
         PCD_HandleTypeDef  hpcd;

     (#) Fill parameters of Init structure in HCD handle

     (#) Call HAL_PCD_Init() API to initialize the PCD peripheral (Core, Device core, ...)

     (#) Initialize the PCD low level resources through the HAL_PCD_MspInit() API:
         (##) Enable the PCD/USB Low Level interface clock using
              (+++) __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
              (+++) __HAL_RCC_USB_OTG_HS_CLK_ENABLE(); (For High Speed Mode)

         (##) Initialize the related GPIO clocks
         (##) Configure PCD pin-out
         (##) Configure PCD NVIC interrupt

     (#)Associate the Upper USB device stack to the HAL PCD Driver:
         (##) hpcd.pData = pdev;

     (#)Enable PCD transmission and reception:
         (##) HAL_PCD_Start();

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup PCD PCD
  * @brief PCD HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_PCD_MODULE_ENABLED</name></cpp:ifdef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_FS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_HS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Private types -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private constants ---------------------------------------------------------*/</comment>
<comment type="block">/* Private macros ------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup PCD_Private_Macros PCD Private Macros
  * @{
  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCD_MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(((a) &lt; (b)) ? (a) : (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCD_MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(((a) &gt; (b)) ? (a) : (b))</cpp:value></cpp:define>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private functions prototypes ----------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup PCD_Private_Functions PCD Private Functions
  * @{
  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_FS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_HS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>PCD_WriteEmptyTxFifo</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>epnum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>PCD_EP_OutXfrComplete_int</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>epnum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>PCD_EP_OutSetupPacket_int</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>epnum</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined (USB_OTG_FS) || defined (USB_OTG_HS) */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup PCD_Exported_Functions PCD Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup PCD_Exported_Functions_Group1 Initialization and de-initialization functions
 *  @brief    Initialization and Configuration functions
 *
@verbatim
 ===============================================================================
            ##### Initialization and de-initialization functions #####
 ===============================================================================
    [..]  This section provides functions allowing to:

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the PCD according to the specified
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_Init</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Check the PCD handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>hpcd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_PCD_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>USBx</name> <operator>=</operator> <name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCD_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>SOFCallback</name></name> <operator>=</operator> <name>HAL_PCD_SOFCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>SetupStageCallback</name></name> <operator>=</operator> <name>HAL_PCD_SetupStageCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ResetCallback</name></name> <operator>=</operator> <name>HAL_PCD_ResetCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>SuspendCallback</name></name> <operator>=</operator> <name>HAL_PCD_SuspendCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ResumeCallback</name></name> <operator>=</operator> <name>HAL_PCD_ResumeCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ConnectCallback</name></name> <operator>=</operator> <name>HAL_PCD_ConnectCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>DisconnectCallback</name></name> <operator>=</operator> <name>HAL_PCD_DisconnectCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>DataOutStageCallback</name></name> <operator>=</operator> <name>HAL_PCD_DataOutStageCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>DataInStageCallback</name></name> <operator>=</operator> <name>HAL_PCD_DataInStageCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ISOOUTIncompleteCallback</name></name> <operator>=</operator> <name>HAL_PCD_ISOOUTIncompleteCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ISOINIncompleteCallback</name></name> <operator>=</operator> <name>HAL_PCD_ISOINIncompleteCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>LPMCallback</name></name> <operator>=</operator> <name>HAL_PCDEx_LPM_Callback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>BCDCallback</name></name> <operator>=</operator> <name>HAL_PCDEx_BCD_Callback</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_PCD_MspInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Init the low level hardware : GPIO, CLOCK, NVIC... */</comment>
    <expr_stmt><expr><call><name>HAL_PCD_MspInit</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (USE_HAL_PCD_REGISTER_CALLBACKS) */</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_PCD_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable DMA mode for FS instance */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>USBx</name><operator>-&gt;</operator><name>CID</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x1U</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Disable the Interrupts */</comment>
  <expr_stmt><expr><call><name>__HAL_PCD_DISABLE</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*Init the Core (common init.) */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>USB_CoreInit</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_PCD_STATE_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Force Device Mode*/</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_SetCurrentMode</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>USB_DEVICE_MODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Init endpoints structures */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dev_endpoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <comment type="block">/* Init ep structure */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>IN_ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_in</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>IN_ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>IN_ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tx_fifo_num</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <comment type="block">/* Control until ep is activated */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>IN_ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>EP_TYPE_CTRL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>IN_ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maxpacket</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>IN_ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xfer_buff</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>IN_ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xfer_len</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dev_endpoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>OUT_ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_in</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>OUT_ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <comment type="block">/* Control until ep is activated */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>OUT_ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>EP_TYPE_CTRL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>OUT_ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maxpacket</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>OUT_ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xfer_buff</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>OUT_ep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xfer_len</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Init Device */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>USB_DevInit</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_PCD_STATE_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>USB_Address</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_PCD_STATE_READY</name></expr>;</expr_stmt>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Cx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Activate LPM */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>lpm_enable</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>HAL_PCDEx_ActivateLPM</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_DevDisconnect</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_DeInit</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the PCD handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>hpcd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_PCD_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Stop Device */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>HAL_PCD_Stop</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_PCD_MspDeInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MspDeInit  */</comment>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* DeInit the low level hardware: CLOCK, NVIC.*/</comment>
  <expr_stmt><expr><call><name>HAL_PCD_MspDeInit</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>

  <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_PCD_STATE_RESET</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the PCD MSP.
  * @param  hpcd PCD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCD_MspInit</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_MspInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitializes PCD MSP.
  * @param  hpcd PCD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCD_MspDeInit</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_MspDeInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User USB PCD Callback
  *         To be used instead of the weak predefined callback
  * @param  hpcd USB PCD handle
  * @param  CallbackID ID of the callback to be registered
  *         This parameter can be one of the following values:
  *          @arg @ref HAL_PCD_SOF_CB_ID USB PCD SOF callback ID
  *          @arg @ref HAL_PCD_SETUPSTAGE_CB_ID USB PCD Setup callback ID
  *          @arg @ref HAL_PCD_RESET_CB_ID USB PCD Reset callback ID
  *          @arg @ref HAL_PCD_SUSPEND_CB_ID USB PCD Suspend callback ID
  *          @arg @ref HAL_PCD_RESUME_CB_ID USB PCD Resume callback ID
  *          @arg @ref HAL_PCD_CONNECT_CB_ID USB PCD Connect callback ID
  *          @arg @ref HAL_PCD_DISCONNECT_CB_ID OTG PCD Disconnect callback ID
  *          @arg @ref HAL_PCD_MSPINIT_CB_ID MspDeInit callback ID
  *          @arg @ref HAL_PCD_MSPDEINIT_CB_ID MspDeInit callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>HAL_PCD_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>, <parameter><decl><type><name>pPCD_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_PCD_SOF_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>SOFCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_PCD_SETUPSTAGE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>SetupStageCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_PCD_RESET_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ResetCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_PCD_SUSPEND_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>SuspendCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_PCD_RESUME_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ResumeCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_PCD_CONNECT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ConnectCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_PCD_DISCONNECT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>DisconnectCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_PCD_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_PCD_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCD_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_PCD_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_PCD_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister an USB PCD Callback
  *         USB PCD callabck is redirected to the weak predefined callback
  * @param  hpcd USB PCD handle
  * @param  CallbackID ID of the callback to be unregistered
  *         This parameter can be one of the following values:
  *          @arg @ref HAL_PCD_SOF_CB_ID USB PCD SOF callback ID
  *          @arg @ref HAL_PCD_SETUPSTAGE_CB_ID USB PCD Setup callback ID
  *          @arg @ref HAL_PCD_RESET_CB_ID USB PCD Reset callback ID
  *          @arg @ref HAL_PCD_SUSPEND_CB_ID USB PCD Suspend callback ID
  *          @arg @ref HAL_PCD_RESUME_CB_ID USB PCD Resume callback ID
  *          @arg @ref HAL_PCD_CONNECT_CB_ID USB PCD Connect callback ID
  *          @arg @ref HAL_PCD_DISCONNECT_CB_ID OTG PCD Disconnect callback ID
  *          @arg @ref HAL_PCD_MSPINIT_CB_ID MspDeInit callback ID
  *          @arg @ref HAL_PCD_MSPDEINIT_CB_ID MspDeInit callback ID
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>HAL_PCD_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Setup Legacy weak Callbacks  */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_PCD_SOF_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>SOFCallback</name></name> <operator>=</operator> <name>HAL_PCD_SOFCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_PCD_SETUPSTAGE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>SetupStageCallback</name></name> <operator>=</operator> <name>HAL_PCD_SetupStageCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_PCD_RESET_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ResetCallback</name></name> <operator>=</operator> <name>HAL_PCD_ResetCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_PCD_SUSPEND_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>SuspendCallback</name></name> <operator>=</operator> <name>HAL_PCD_SuspendCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_PCD_RESUME_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ResumeCallback</name></name> <operator>=</operator> <name>HAL_PCD_ResumeCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_PCD_CONNECT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ConnectCallback</name></name> <operator>=</operator> <name>HAL_PCD_ConnectCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_PCD_DISCONNECT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>DisconnectCallback</name></name> <operator>=</operator> <name>HAL_PCD_DisconnectCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_PCD_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_PCD_MspInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_PCD_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_PCD_MspDeInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCD_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_PCD_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_PCD_MspInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_PCD_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_PCD_MspDeInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Register USB PCD Data OUT Stage Callback
  *         To be used instead of the weak HAL_PCD_DataOutStageCallback() predefined callback
  * @param  hpcd PCD handle
  * @param  pCallback pointer to the USB PCD Data OUT Stage Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_RegisterDataOutStageCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>pPCD_DataOutStageCallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>DataOutStageCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  UnRegister the USB PCD Data OUT Stage Callback
  *         USB PCD Data OUT Stage Callback is redirected to the weak HAL_PCD_DataOutStageCallback() predefined callback
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_UnRegisterDataOutStageCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>DataOutStageCallback</name></name> <operator>=</operator> <name>HAL_PCD_DataOutStageCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak DataOutStageCallback  */</comment>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Register USB PCD Data IN Stage Callback
  *         To be used instead of the weak HAL_PCD_DataInStageCallback() predefined callback
  * @param  hpcd PCD handle
  * @param  pCallback pointer to the USB PCD Data IN Stage Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_RegisterDataInStageCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>pPCD_DataInStageCallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>DataInStageCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  UnRegister the USB PCD Data IN Stage Callback
  *         USB PCD Data OUT Stage Callback is redirected to the weak HAL_PCD_DataInStageCallback() predefined callback
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_UnRegisterDataInStageCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>DataInStageCallback</name></name> <operator>=</operator> <name>HAL_PCD_DataInStageCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak DataInStageCallback  */</comment>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Register USB PCD Iso OUT incomplete Callback
  *         To be used instead of the weak HAL_PCD_ISOOUTIncompleteCallback() predefined callback
  * @param  hpcd PCD handle
  * @param  pCallback pointer to the USB PCD Iso OUT incomplete Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_RegisterIsoOutIncpltCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>pPCD_IsoOutIncpltCallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ISOOUTIncompleteCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  UnRegister the USB PCD Iso OUT incomplete Callback
  *         USB PCD Iso OUT incomplete Callback is redirected to the weak HAL_PCD_ISOOUTIncompleteCallback() predefined callback
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_UnRegisterIsoOutIncpltCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ISOOUTIncompleteCallback</name></name> <operator>=</operator> <name>HAL_PCD_ISOOUTIncompleteCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak ISOOUTIncompleteCallback  */</comment>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Register USB PCD Iso IN incomplete Callback
  *         To be used instead of the weak HAL_PCD_ISOINIncompleteCallback() predefined callback
  * @param  hpcd PCD handle
  * @param  pCallback pointer to the USB PCD Iso IN incomplete Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_RegisterIsoInIncpltCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>pPCD_IsoInIncpltCallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ISOINIncompleteCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  UnRegister the USB PCD Iso IN incomplete Callback
  *         USB PCD Iso IN incomplete Callback is redirected to the weak HAL_PCD_ISOINIncompleteCallback() predefined callback
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_UnRegisterIsoInIncpltCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ISOINIncompleteCallback</name></name> <operator>=</operator> <name>HAL_PCD_ISOINIncompleteCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak ISOINIncompleteCallback  */</comment>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Register USB PCD BCD Callback
  *         To be used instead of the weak HAL_PCDEx_BCD_Callback() predefined callback
  * @param  hpcd PCD handle
  * @param  pCallback pointer to the USB PCD BCD Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_RegisterBcdCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>pPCD_BcdCallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>BCDCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  UnRegister the USB PCD BCD Callback
  *         USB BCD Callback is redirected to the weak HAL_PCDEx_BCD_Callback() predefined callback
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_UnRegisterBcdCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>BCDCallback</name></name> <operator>=</operator> <name>HAL_PCDEx_BCD_Callback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak HAL_PCDEx_BCD_Callback  */</comment>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Register USB PCD LPM Callback
  *         To be used instead of the weak HAL_PCDEx_LPM_Callback() predefined callback
  * @param  hpcd PCD handle
  * @param  pCallback pointer to the USB PCD LPM Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_RegisterLpmCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>pPCD_LpmCallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>LPMCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  UnRegister the USB PCD LPM Callback
  *         USB LPM Callback is redirected to the weak HAL_PCDEx_LPM_Callback() predefined callback
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_UnRegisterLpmCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>LPMCallback</name></name> <operator>=</operator> <name>HAL_PCDEx_LPM_Callback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak HAL_PCDEx_LPM_Callback  */</comment>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_PCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup PCD_Exported_Functions_Group2 Input and Output operation functions
 *  @brief   Data transfers functions
 *
@verbatim
 ===============================================================================
                      ##### IO operation functions #####
 ===============================================================================
    [..]
    This subsection provides a set of functions allowing to manage the PCD data
    transfers.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_Start</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_FS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_HS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name> <init>= <expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined (USB_OTG_FS) || defined (USB_OTG_HS) */</comment>

  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_FS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_HS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>battery_charging_enable</name></name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>(</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>phy_itface</name></name> <operator>!=</operator> <name>USB_OTG_ULPI_PHY</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable USB Transceiver */</comment>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>|=</operator> <name>USB_OTG_GCCFG_PWRDWN</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined (USB_OTG_FS) || defined (USB_OTG_HS) */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_DevConnect</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_PCD_ENABLE</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_Stop</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_PCD_DISABLE</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>USB_StopDevice</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_DevDisconnect</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_FS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_HS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>void</name></type> <name>HAL_PCD_IRQHandler</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name> <init>= <expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ep_intr</name></decl>, <decl><type ref="prev"/><name>epint</name></decl>, <decl><type ref="prev"/><name>epnum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>fifoemptymsk</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>USB_OTG_EPTypeDef</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

  <comment type="block">/* ensure that we are in device mode */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>USB_GetMode</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>USB_OTG_MODE_DEVICE</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* avoid spurious interrupt */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_PCD_IS_INVALID_INTERRUPT</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>__HAL_PCD_GET_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_MMIS</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* incorrect mode, acknowledge the interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_PCD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_MMIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>__HAL_PCD_GET_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_OEPINT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>epnum</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

      <comment type="block">/* Read in the device interrupt bits */</comment>
      <expr_stmt><expr><name>ep_intr</name> <operator>=</operator> <call><name>USB_ReadDevAllOutEpInterrupt</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>ep_intr</name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ep_intr</name> <operator>&amp;</operator> <literal type="number">0x1U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name>epint</name> <operator>=</operator> <call><name>USB_ReadDevOutEPInterrupt</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>epint</name> <operator>&amp;</operator> <name>USB_OTG_DOEPINT_XFRC</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DOEPINT_XFRC</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><call><name>CLEAR_OUT_EP_INTR</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>, <argument><expr><name>USB_OTG_DOEPINT_XFRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>PCD_EP_OutXfrComplete_int</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>epint</name> <operator>&amp;</operator> <name>USB_OTG_DOEPINT_STUP</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DOEPINT_STUP</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Class B setup phase done for previous decoded setup */</comment>
            <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>PCD_EP_OutSetupPacket_int</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CLEAR_OUT_EP_INTR</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>, <argument><expr><name>USB_OTG_DOEPINT_STUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>epint</name> <operator>&amp;</operator> <name>USB_OTG_DOEPINT_OTEPDIS</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DOEPINT_OTEPDIS</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><call><name>CLEAR_OUT_EP_INTR</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>, <argument><expr><name>USB_OTG_DOEPINT_OTEPDIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <comment type="block">/* Clear Status Phase Received interrupt */</comment>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>epint</name> <operator>&amp;</operator> <name>USB_OTG_DOEPINT_OTEPSPR</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DOEPINT_OTEPSPR</name></expr>)</condition>
          <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
            <block>{<block_content>
              <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_EP0_OutStart</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Setup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>CLEAR_OUT_EP_INTR</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>, <argument><expr><name>USB_OTG_DOEPINT_OTEPSPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <comment type="block">/* Clear OUT NAK interrupt */</comment>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>epint</name> <operator>&amp;</operator> <name>USB_OTG_DOEPINT_NAK</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DOEPINT_NAK</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><call><name>CLEAR_OUT_EP_INTR</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>, <argument><expr><name>USB_OTG_DOEPINT_NAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>epnum</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>ep_intr</name> <operator>&gt;&gt;=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>__HAL_PCD_GET_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_IEPINT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Read in the device interrupt bits */</comment>
      <expr_stmt><expr><name>ep_intr</name> <operator>=</operator> <call><name>USB_ReadDevAllInEpInterrupt</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>epnum</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>ep_intr</name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ep_intr</name> <operator>&amp;</operator> <literal type="number">0x1U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition> <comment type="block">/* In ITR */</comment>
        <block>{<block_content>
          <expr_stmt><expr><name>epint</name> <operator>=</operator> <call><name>USB_ReadDevInEPInterrupt</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>epint</name> <operator>&amp;</operator> <name>USB_OTG_DIEPINT_XFRC</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DIEPINT_XFRC</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><name>fifoemptymsk</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">0x1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>epnum</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DIEPEMPMSK</name></name> <operator>&amp;=</operator> <operator>~</operator><name>fifoemptymsk</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>CLEAR_IN_EP_INTR</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>, <argument><expr><name>USB_OTG_DIEPINT_XFRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
            <block>{<block_content>
              <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>IN_ep</name><index>[<expr><name>epnum</name></expr>]</index></name><operator>.</operator><name>xfer_buff</name> <operator>+=</operator> <name><name>hpcd</name><operator>-&gt;</operator><name>IN_ep</name><index>[<expr><name>epnum</name></expr>]</index></name><operator>.</operator><name>maxpacket</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
            <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>DataInStageCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><call><name>HAL_PCD_DataInStageCallback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>

            <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
            <block>{<block_content>
              <comment type="block">/* this is ZLP, so prepare EP0 for next setup */</comment>
              <if_stmt><if>if <condition>(<expr><operator>(</operator><name>epnum</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hpcd</name><operator>-&gt;</operator><name>IN_ep</name><index>[<expr><name>epnum</name></expr>]</index></name><operator>.</operator><name>xfer_len</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
              <block>{<block_content>
                <comment type="block">/* prepare to rx more setup packets */</comment>
                <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_EP0_OutStart</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Setup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>epint</name> <operator>&amp;</operator> <name>USB_OTG_DIEPINT_TOC</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DIEPINT_TOC</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><call><name>CLEAR_IN_EP_INTR</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>, <argument><expr><name>USB_OTG_DIEPINT_TOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>epint</name> <operator>&amp;</operator> <name>USB_OTG_DIEPINT_ITTXFE</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DIEPINT_ITTXFE</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><call><name>CLEAR_IN_EP_INTR</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>, <argument><expr><name>USB_OTG_DIEPINT_ITTXFE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>epint</name> <operator>&amp;</operator> <name>USB_OTG_DIEPINT_INEPNE</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DIEPINT_INEPNE</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><call><name>CLEAR_IN_EP_INTR</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>, <argument><expr><name>USB_OTG_DIEPINT_INEPNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>epint</name> <operator>&amp;</operator> <name>USB_OTG_DIEPINT_EPDISD</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DIEPINT_EPDISD</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><call><name>CLEAR_IN_EP_INTR</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>, <argument><expr><name>USB_OTG_DIEPINT_EPDISD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>epint</name> <operator>&amp;</operator> <name>USB_OTG_DIEPINT_TXFE</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DIEPINT_TXFE</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>PCD_WriteEmptyTxFifo</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>epnum</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>ep_intr</name> <operator>&gt;&gt;=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Handle Resume Interrupt */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_PCD_GET_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_WKUINT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear the Remote Wake-up Signaling */</comment>
      <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DCTL</name></name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_DCTL_RWUSIG</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>LPM_State</name></name> <operator>==</operator> <name>LPM_L1</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>LPM_State</name></name> <operator>=</operator> <name>LPM_L0</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>LPMCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>PCD_LPM_L0_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_PCDEx_LPM_Callback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>PCD_LPM_L0_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>ResumeCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_PCD_ResumeCallback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name>__HAL_PCD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_WKUINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Handle Suspend Interrupt */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_PCD_GET_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_USBSUSP</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DSTS</name></name> <operator>&amp;</operator> <name>USB_OTG_DSTS_SUSPSTS</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DSTS_SUSPSTS</name></expr>)</condition>
      <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>SuspendCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_PCD_SuspendCallback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>__HAL_PCD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_USBSUSP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Cx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* Handle LPM Interrupt */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_PCD_GET_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_LPMINT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>__HAL_PCD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_LPMINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>LPM_State</name></name> <operator>==</operator> <name>LPM_L0</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>LPM_State</name></name> <operator>=</operator> <name>LPM_L1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>BESL</name></name> <operator>=</operator> <operator>(</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>GLPMCFG</name></name> <operator>&amp;</operator> <name>USB_OTG_GLPMCFG_BESL</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2U</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>LPMCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>PCD_LPM_L1_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_PCDEx_LPM_Callback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>PCD_LPM_L1_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>SuspendCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_PCD_SuspendCallback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */</comment>
    <comment type="block">/* Handle Reset Interrupt */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_PCD_GET_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_USBRST</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DCTL</name></name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_DCTL_RWUSIG</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_FlushTxFifo</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><literal type="number">0x10U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dev_endpoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
      <block>{<block_content>
        <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPINT</name> <operator>=</operator> <literal type="number">0xFB7FU</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_DIEPCTL_STALL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPINT</name> <operator>=</operator> <literal type="number">0xFB7FU</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_DOEPCTL_STALL</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DAINTMSK</name></name> <operator>|=</operator> <literal type="number">0x10001U</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>use_dedicated_ep1</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DOUTEP1MSK</name></name> <operator>|=</operator> <name>USB_OTG_DOEPMSK_STUPM</name> <operator>|</operator>
                                   <name>USB_OTG_DOEPMSK_XFRCM</name> <operator>|</operator>
                                   <name>USB_OTG_DOEPMSK_EPDM</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DINEP1MSK</name></name> <operator>|=</operator> <name>USB_OTG_DIEPMSK_TOM</name> <operator>|</operator>
                                  <name>USB_OTG_DIEPMSK_XFRCM</name> <operator>|</operator>
                                  <name>USB_OTG_DIEPMSK_EPDM</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DOEPMSK</name></name> <operator>|=</operator> <name>USB_OTG_DOEPMSK_STUPM</name> <operator>|</operator>
                                <name>USB_OTG_DOEPMSK_XFRCM</name> <operator>|</operator>
                                <name>USB_OTG_DOEPMSK_EPDM</name> <operator>|</operator>
                                <name>USB_OTG_DOEPMSK_OTEPSPRM</name> <operator>|</operator>
                                <name>USB_OTG_DOEPMSK_NAKM</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DIEPMSK</name></name> <operator>|=</operator> <name>USB_OTG_DIEPMSK_TOM</name> <operator>|</operator>
                                <name>USB_OTG_DIEPMSK_XFRCM</name> <operator>|</operator>
                                <name>USB_OTG_DIEPMSK_EPDM</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <comment type="block">/* Set Default Address to 0 */</comment>
      <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_DCFG_DAD</name></expr>;</expr_stmt>

      <comment type="block">/* setup EP0 to receive SETUP packets */</comment>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_EP0_OutStart</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name></expr></argument>,
                             <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Setup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>__HAL_PCD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_USBRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Handle Enumeration done Interrupt */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_PCD_GET_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_ENUMDNE</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_ActivateSetup</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>speed</name></name> <operator>=</operator> <call><name>USB_GetDevSpeed</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Set USB Turnaround time */</comment>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_SetTurnaroundTime</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>,
                                  <argument><expr><call><name>HAL_RCC_GetHCLKFreq</name><argument_list>()</argument_list></call></expr></argument>,
                                  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>speed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>ResetCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_PCD_ResetCallback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>

      <expr_stmt><expr><call><name>__HAL_PCD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_ENUMDNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Handle RxQLevel Interrupt */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_PCD_GET_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_RXFLVL</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>USB_MASK_INTERRUPT</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_RXFLVL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>USBx</name><operator>-&gt;</operator><name>GRXSTSP</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>&amp;</operator><name><name>hpcd</name><operator>-&gt;</operator><name>OUT_ep</name><index>[<expr><name>temp</name> <operator>&amp;</operator> <name>USB_OTG_GRXSTSP_EPNUM</name></expr>]</index></name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>temp</name> <operator>&amp;</operator> <name>USB_OTG_GRXSTSP_PKTSTS</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>==</operator>  <name>STS_DATA_UPDT</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>temp</name> <operator>&amp;</operator> <name>USB_OTG_GRXSTSP_BCNT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_ReadPacket</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_buff</name></name></expr></argument>,
                               <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>temp</name> <operator>&amp;</operator> <name>USB_OTG_GRXSTSP_BCNT</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_buff</name></name> <operator>+=</operator> <operator>(</operator><name>temp</name> <operator>&amp;</operator> <name>USB_OTG_GRXSTSP_BCNT</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_count</name></name> <operator>+=</operator> <operator>(</operator><name>temp</name> <operator>&amp;</operator> <name>USB_OTG_GRXSTSP_BCNT</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>temp</name> <operator>&amp;</operator> <name>USB_OTG_GRXSTSP_PKTSTS</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>==</operator>  <name>STS_SETUP_UPDT</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_ReadPacket</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Setup</name></name></expr></argument>, <argument><expr><literal type="number">8U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_count</name></name> <operator>+=</operator> <operator>(</operator><name>temp</name> <operator>&amp;</operator> <name>USB_OTG_GRXSTSP_BCNT</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* ... */</comment>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>USB_UNMASK_INTERRUPT</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_RXFLVL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Handle SOF Interrupt */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_PCD_GET_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_SOF</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>SOFCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_PCD_SOFCallback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>

      <expr_stmt><expr><call><name>__HAL_PCD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_SOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Handle Incomplete ISO IN Interrupt */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_PCD_GET_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_IISOIXFR</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */</comment>
      <expr_stmt><expr><name>epnum</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>ISOINIncompleteCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_PCD_ISOINIncompleteCallback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>

      <expr_stmt><expr><call><name>__HAL_PCD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_IISOIXFR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Handle Incomplete ISO OUT Interrupt */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_PCD_GET_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_PXFR_INCOMPISOOUT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */</comment>
      <expr_stmt><expr><name>epnum</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>ISOOUTIncompleteCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_PCD_ISOOUTIncompleteCallback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>

      <expr_stmt><expr><call><name>__HAL_PCD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_PXFR_INCOMPISOOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Handle Connection event Interrupt */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_PCD_GET_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_SRQINT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>ConnectCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_PCD_ConnectCallback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>

      <expr_stmt><expr><call><name>__HAL_PCD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_SRQINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Handle Disconnection event Interrupt */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_PCD_GET_FLAG</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_OTGINT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>GOTGINT</name></name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>temp</name> <operator>&amp;</operator> <name>USB_OTG_GOTGINT_SEDET</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_GOTGINT_SEDET</name></expr>)</condition>
      <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>DisconnectCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_PCD_DisconnectCallback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>GOTGINT</name></name> <operator>|=</operator> <name>temp</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined (USB_OTG_FS) || defined (USB_OTG_HS) */</comment>


<comment type="block" format="doxygen">/**
  * @brief  Data OUT stage callback.
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCD_DataOutStageCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>epnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Data IN stage callback
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCD_DataInStageCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>epnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCD_SetupStageCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCD_SOFCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCD_ResetCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCD_SuspendCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCD_ResumeCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Incomplete ISO OUT callback.
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCD_ISOOUTIncompleteCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>epnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Incomplete ISO IN callback.
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCD_ISOINIncompleteCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>epnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCD_ConnectCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCD_DisconnectCallback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup PCD_Exported_Functions_Group3 Peripheral Control functions
 *  @brief   management functions
 *
@verbatim
 ===============================================================================
                      ##### Peripheral Control functions #####
 ===============================================================================
    [..]
    This subsection provides a set of functions allowing to control the PCD data
    transfers.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Connect the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_DevConnect</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_FS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_HS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name> <init>= <expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined (USB_OTG_FS) || defined (USB_OTG_HS) */</comment>

  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_FS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_HS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>battery_charging_enable</name></name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>(</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>phy_itface</name></name> <operator>!=</operator> <name>USB_OTG_ULPI_PHY</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable USB Transceiver */</comment>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>|=</operator> <name>USB_OTG_GCCFG_PWRDWN</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined (USB_OTG_FS) || defined (USB_OTG_HS) */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_DevConnect</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disconnect the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_DevDisconnect</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_DevDisconnect</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Set the USB Device address.
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_SetAddress</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>USB_Address</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_SetDevAddress</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @brief  Open and configure an endpoint.
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_EP_Open</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>ep_addr</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>ep_mps</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>ep_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type>  <name>ret</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PCD_EPTypeDef</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ep_addr</name> <operator>&amp;</operator> <literal type="number">0x80U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>&amp;</operator><name><name>hpcd</name><operator>-&gt;</operator><name>IN_ep</name><index>[<expr><name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>is_in</name></name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>&amp;</operator><name><name>hpcd</name><operator>-&gt;</operator><name>OUT_ep</name><index>[<expr><name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>is_in</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>maxpacket</name></name> <operator>=</operator> <name>ep_mps</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ep_type</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>is_in</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Assign a Tx FIFO */</comment>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>tx_fifo_num</name></name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Set initial data PID. */</comment>
  <if_stmt><if>if <condition>(<expr><name>ep_type</name> <operator>==</operator> <name>EP_TYPE_BULK</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>data_pid_start</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_ActivateEndpoint</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Deactivate an endpoint.
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_EP_Close</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>ep_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>PCD_EPTypeDef</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ep_addr</name> <operator>&amp;</operator> <literal type="number">0x80U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>&amp;</operator><name><name>hpcd</name><operator>-&gt;</operator><name>IN_ep</name><index>[<expr><name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>is_in</name></name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>&amp;</operator><name><name>hpcd</name><operator>-&gt;</operator><name>OUT_ep</name><index>[<expr><name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>is_in</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>num</name></name>   <operator>=</operator> <name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_DeactivateEndpoint</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  Receive an amount of data.
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_EP_Receive</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>ep_addr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>PCD_EPTypeDef</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>&amp;</operator><name><name>hpcd</name><operator>-&gt;</operator><name>OUT_ep</name><index>[<expr><name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/*setup and start the Xfer */</comment>
  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_buff</name></name> <operator>=</operator> <name>pBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_count</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>is_in</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>dma_addr</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>pBuf</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_EP0StartXfer</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_EPStartXfer</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Get Received Data Size
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_PCD_EP_GetRxCount</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>ep_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hpcd</name><operator>-&gt;</operator><name>OUT_ep</name><index>[<expr><name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name></expr>]</index></name><operator>.</operator><name>xfer_count</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @brief  Send an amount of data
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_EP_Transmit</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>ep_addr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>PCD_EPTypeDef</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>&amp;</operator><name><name>hpcd</name><operator>-&gt;</operator><name>IN_ep</name><index>[<expr><name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/*setup and start the Xfer */</comment>
  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_buff</name></name> <operator>=</operator> <name>pBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_count</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>is_in</name></name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>dma_addr</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>pBuf</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_EP0StartXfer</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_EPStartXfer</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Set a STALL condition over an endpoint
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_EP_SetStall</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>ep_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>PCD_EPTypeDef</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name><operator>)</operator> <operator>&gt;</operator> <name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dev_endpoints</name></name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x80U</literal> <operator>&amp;</operator> <name>ep_addr</name><operator>)</operator> <operator>==</operator> <literal type="number">0x80U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>&amp;</operator><name><name>hpcd</name><operator>-&gt;</operator><name>IN_ep</name><index>[<expr><name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>is_in</name></name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>&amp;</operator><name><name>hpcd</name><operator>-&gt;</operator><name>OUT_ep</name><index>[<expr><name>ep_addr</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>is_in</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>is_stall</name></name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_EPSetStall</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_EP0_OutStart</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Setup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Clear a STALL condition over in an endpoint
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_EP_ClrStall</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>ep_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>PCD_EPTypeDef</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ep_addr</name> <operator>&amp;</operator> <literal type="number">0x0FU</literal><operator>)</operator> <operator>&gt;</operator> <name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dev_endpoints</name></name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x80U</literal> <operator>&amp;</operator> <name>ep_addr</name><operator>)</operator> <operator>==</operator> <literal type="number">0x80U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>&amp;</operator><name><name>hpcd</name><operator>-&gt;</operator><name>IN_ep</name><index>[<expr><name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>is_in</name></name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>&amp;</operator><name><name>hpcd</name><operator>-&gt;</operator><name>OUT_ep</name><index>[<expr><name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>is_in</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>is_stall</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_EPClearStall</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Flush an endpoint
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_EP_Flush</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>ep_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ep_addr</name> <operator>&amp;</operator> <literal type="number">0x80U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_FlushTxFifo</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_FlushRxFifo</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Activate remote wakeup signalling
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_ActivateRemoteWakeup</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>(</operator><call><name>USB_ActivateRemoteWakeup</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  De-activate remote wakeup signalling.
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCD_DeActivateRemoteWakeup</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>(</operator><call><name>USB_DeActivateRemoteWakeup</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup PCD_Exported_Functions_Group4 Peripheral State functions
 *  @brief   Peripheral State functions
 *
@verbatim
 ===============================================================================
                      ##### Peripheral State functions #####
 ===============================================================================
    [..]
    This subsection permits to get in run-time the status of the peripheral
    and the data flow.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Return the PCD handle state.
  * @param  hpcd PCD handle
  * @retval HAL state
  */</comment>
<function><type><name>PCD_StateTypeDef</name></type> <name>HAL_PCD_GetState</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hpcd</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup PCD_Private_Functions
  * @{
  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_FS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_HS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Check FIFO for the next packet to be loaded.
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>PCD_WriteEmptyTxFifo</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>epnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name> <init>= <expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>USB_OTG_EPTypeDef</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>len32b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>fifoemptymsk</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>&amp;</operator><name><name>hpcd</name><operator>-&gt;</operator><name>IN_ep</name><index>[<expr><name>epnum</name></expr>]</index></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_count</name></name> <operator>&gt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>-</operator> <name><name>ep</name><operator>-&gt;</operator><name>xfer_count</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>maxpacket</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>maxpacket</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>len32b</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">3U</literal><operator>)</operator> <operator>/</operator> <literal type="number">4U</literal></expr>;</expr_stmt>

  <while>while <condition>(<expr><operator>(</operator><operator>(</operator><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DTXFSTS</name> <operator>&amp;</operator> <name>USB_OTG_DTXFSTS_INEPTFSAV</name><operator>)</operator> <operator>&gt;=</operator> <name>len32b</name><operator>)</operator> <operator>&amp;&amp;</operator>
         <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>xfer_count</name></name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Write the FIFO */</comment>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>-</operator> <name><name>ep</name><operator>-&gt;</operator><name>xfer_count</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>maxpacket</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>maxpacket</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>len32b</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">3U</literal><operator>)</operator> <operator>/</operator> <literal type="number">4U</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_WritePacket</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_buff</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>epnum</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>len</name></expr></argument>,
                          <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_buff</name></name>  <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_count</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>&lt;=</operator> <name><name>ep</name><operator>-&gt;</operator><name>xfer_count</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>fifoemptymsk</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">0x1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>epnum</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DIEPEMPMSK</name></name> <operator>&amp;=</operator> <operator>~</operator><name>fifoemptymsk</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  process EP OUT transfer complete interrupt.
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>PCD_EP_OutXfrComplete_int</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>epnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name> <init>= <expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>gSNPSiD</name> <init>= <expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>USBx</name><operator>-&gt;</operator><name>CID</name></name> <operator>+</operator> <literal type="number">0x1U</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>DoepintReg</name> <init>= <expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPINT</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>DoepintReg</name> <operator>&amp;</operator> <name>USB_OTG_DOEPINT_STUP</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DOEPINT_STUP</name></expr>)</condition> <comment type="block">/* Class C */</comment>
    <block>{<block_content>
      <comment type="block">/* StupPktRcvd = 1 this is a setup packet */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>gSNPSiD</name> <operator>&gt;</operator> <name>USB_OTG_CORE_ID_300A</name><operator>)</operator> <operator>&amp;&amp;</operator>
          <operator>(</operator><operator>(</operator><name>DoepintReg</name> <operator>&amp;</operator> <name>USB_OTG_DOEPINT_STPKTRX</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DOEPINT_STPKTRX</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>CLEAR_OUT_EP_INTR</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>, <argument><expr><name>USB_OTG_DOEPINT_STPKTRX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Inform the upper layer that a setup packet is available */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>SetupStageCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_PCD_SetupStageCallback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>

      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_EP0_OutStart</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Setup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CLEAR_OUT_EP_INTR</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>, <argument><expr><name>USB_OTG_DOEPINT_STUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>DoepintReg</name> <operator>&amp;</operator> <name>USB_OTG_DOEPINT_OTEPSPR</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DOEPINT_OTEPSPR</name></expr>)</condition> <comment type="block">/* Class E */</comment>
    <block>{<block_content>
      <expr_stmt><expr><call><name>CLEAR_OUT_EP_INTR</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>, <argument><expr><name>USB_OTG_DOEPINT_OTEPSPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>DoepintReg</name> <operator>&amp;</operator> <operator>(</operator><name>USB_OTG_DOEPINT_STUP</name> <operator>|</operator> <name>USB_OTG_DOEPINT_OTEPSPR</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* StupPktRcvd = 1 this is a setup packet */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>gSNPSiD</name> <operator>&gt;</operator> <name>USB_OTG_CORE_ID_300A</name><operator>)</operator> <operator>&amp;&amp;</operator>
          <operator>(</operator><operator>(</operator><name>DoepintReg</name> <operator>&amp;</operator> <name>USB_OTG_DOEPINT_STPKTRX</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DOEPINT_STPKTRX</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>CLEAR_OUT_EP_INTR</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>, <argument><expr><name>USB_OTG_DOEPINT_STPKTRX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* out data packet received over EP0 */</comment>
        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>OUT_ep</name><index>[<expr><name>epnum</name></expr>]</index></name><operator>.</operator><name>xfer_count</name> <operator>=</operator>
          <name><name>hpcd</name><operator>-&gt;</operator><name>OUT_ep</name><index>[<expr><name>epnum</name></expr>]</index></name><operator>.</operator><name>maxpacket</name> <operator>-</operator>
          <operator>(</operator><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPTSIZ</name> <operator>&amp;</operator> <name>USB_OTG_DOEPTSIZ_XFRSIZ</name><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>OUT_ep</name><index>[<expr><name>epnum</name></expr>]</index></name><operator>.</operator><name>xfer_buff</name> <operator>+=</operator> <name><name>hpcd</name><operator>-&gt;</operator><name>OUT_ep</name><index>[<expr><name>epnum</name></expr>]</index></name><operator>.</operator><name>maxpacket</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>DataOutStageCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_PCD_DataOutStageCallback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>epnum</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hpcd</name><operator>-&gt;</operator><name>OUT_ep</name><index>[<expr><name>epnum</name></expr>]</index></name><operator>.</operator><name>xfer_len</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* this is ZLP, so prepare EP0 for next setup */</comment>
          <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_EP0_OutStart</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Setup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* ... */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>gSNPSiD</name> <operator>==</operator> <name>USB_OTG_CORE_ID_310A</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* StupPktRcvd = 1 this is a setup packet */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>DoepintReg</name> <operator>&amp;</operator> <name>USB_OTG_DOEPINT_STPKTRX</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DOEPINT_STPKTRX</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>CLEAR_OUT_EP_INTR</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>, <argument><expr><name>USB_OTG_DOEPINT_STPKTRX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>DoepintReg</name> <operator>&amp;</operator> <name>USB_OTG_DOEPINT_OTEPSPR</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DOEPINT_OTEPSPR</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>CLEAR_OUT_EP_INTR</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>, <argument><expr><name>USB_OTG_DOEPINT_OTEPSPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>DataOutStageCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_PCD_DataOutStageCallback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>DataOutStageCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_PCD_DataOutStageCallback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>epnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  process EP OUT setup packet received interrupt.
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>PCD_EP_OutSetupPacket_int</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>epnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name> <init>= <expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>gSNPSiD</name> <init>= <expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>USBx</name><operator>-&gt;</operator><name>CID</name></name> <operator>+</operator> <literal type="number">0x1U</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>DoepintReg</name> <init>= <expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPINT</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* StupPktRcvd = 1 pending setup packet int */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>gSNPSiD</name> <operator>&gt;</operator> <name>USB_OTG_CORE_ID_300A</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><operator>(</operator><name>DoepintReg</name> <operator>&amp;</operator> <name>USB_OTG_DOEPINT_STPKTRX</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DOEPINT_STPKTRX</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>CLEAR_OUT_EP_INTR</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>, <argument><expr><name>USB_OTG_DOEPINT_STPKTRX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>gSNPSiD</name> <operator>==</operator> <name>USB_OTG_CORE_ID_310A</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><operator>(</operator><name>DoepintReg</name> <operator>&amp;</operator> <name>USB_OTG_DOEPINT_STPKTRX</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DOEPINT_STPKTRX</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>CLEAR_OUT_EP_INTR</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>, <argument><expr><name>USB_OTG_DOEPINT_STPKTRX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Inform the upper layer that a setup packet is available */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>SetupStageCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_PCD_SetupStageCallback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>gSNPSiD</name> <operator>&gt;</operator> <name>USB_OTG_CORE_ID_300A</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_EP0_OutStart</name><argument_list>(<argument><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Setup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined (USB_OTG_FS) || defined (USB_OTG_HS) */</comment>


<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined (USB_OTG_FS) || defined (USB_OTG_HS) */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_PCD_MODULE_ENABLED */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
