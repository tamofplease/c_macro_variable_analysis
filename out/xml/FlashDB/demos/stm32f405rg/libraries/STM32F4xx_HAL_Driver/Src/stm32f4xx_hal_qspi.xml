<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_qspi.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_qspi.c
  * @author  MCD Application Team
  * @brief   QSPI HAL module driver.
  *          This file provides firmware functions to manage the following 
  *          functionalities of the QuadSPI interface (QSPI).
  *           + Initialization and de-initialization functions
  *           + Indirect functional mode management
  *           + Memory-mapped functional mode management
  *           + Auto-polling functional mode management
  *           + Interrupts and flags management
  *           + DMA channel configuration for indirect functional mode
  *           + Errors management and abort functionality
  *
  *
  @verbatim
 ===============================================================================
                        ##### How to use this driver #####
 ===============================================================================
  [..]
    *** Initialization ***
    ======================
    [..]
      (#) As prerequisite, fill in the HAL_QSPI_MspInit() :
        (++) Enable QuadSPI clock interface with __HAL_RCC_QSPI_CLK_ENABLE().
        (++) Reset QuadSPI IP with __HAL_RCC_QSPI_FORCE_RESET() and __HAL_RCC_QSPI_RELEASE_RESET().
        (++) Enable the clocks for the QuadSPI GPIOS with __HAL_RCC_GPIOx_CLK_ENABLE().
        (++) Configure these QuadSPI pins in alternate mode using HAL_GPIO_Init().
        (++) If interrupt mode is used, enable and configure QuadSPI global
            interrupt with HAL_NVIC_SetPriority() and HAL_NVIC_EnableIRQ().
        (++) If DMA mode is used, enable the clocks for the QuadSPI DMA channel 
            with __HAL_RCC_DMAx_CLK_ENABLE(), configure DMA with HAL_DMA_Init(), 
            link it with QuadSPI handle using __HAL_LINKDMA(), enable and configure 
            DMA channel global interrupt with HAL_NVIC_SetPriority() and HAL_NVIC_EnableIRQ().
      (#) Configure the flash size, the clock prescaler, the fifo threshold, the
          clock mode, the sample shifting and the CS high time using the HAL_QSPI_Init() function.

    *** Indirect functional mode ***
    ================================
    [..]
      (#) Configure the command sequence using the HAL_QSPI_Command() or HAL_QSPI_Command_IT() 
          functions :
         (++) Instruction phase : the mode used and if present the instruction opcode.
         (++) Address phase : the mode used and if present the size and the address value.
         (++) Alternate-bytes phase : the mode used and if present the size and the alternate 
             bytes values.
         (++) Dummy-cycles phase : the number of dummy cycles (mode used is same as data phase).
         (++) Data phase : the mode used and if present the number of bytes.
         (++) Double Data Rate (DDR) mode : the activation (or not) of this mode and the delay 
             if activated.
         (++) Sending Instruction Only Once (SIOO) mode : the activation (or not) of this mode.
      (#) If no data is required for the command, it is sent directly to the memory :
         (++) In polling mode, the output of the function is done when the transfer is complete.
         (++) In interrupt mode, HAL_QSPI_CmdCpltCallback() will be called when the transfer is complete.
      (#) For the indirect write mode, use HAL_QSPI_Transmit(), HAL_QSPI_Transmit_DMA() or 
          HAL_QSPI_Transmit_IT() after the command configuration :
         (++) In polling mode, the output of the function is done when the transfer is complete.
         (++) In interrupt mode, HAL_QSPI_FifoThresholdCallback() will be called when the fifo threshold 
             is reached and HAL_QSPI_TxCpltCallback() will be called when the transfer is complete.
         (++) In DMA mode, HAL_QSPI_TxHalfCpltCallback() will be called at the half transfer and 
             HAL_QSPI_TxCpltCallback() will be called when the transfer is complete.
      (#) For the indirect read mode, use HAL_QSPI_Receive(), HAL_QSPI_Receive_DMA() or 
          HAL_QSPI_Receive_IT() after the command configuration :
         (++) In polling mode, the output of the function is done when the transfer is complete.
         (++) In interrupt mode, HAL_QSPI_FifoThresholdCallback() will be called when the fifo threshold 
             is reached and HAL_QSPI_RxCpltCallback() will be called when the transfer is complete.
         (++) In DMA mode, HAL_QSPI_RxHalfCpltCallback() will be called at the half transfer and 
             HAL_QSPI_RxCpltCallback() will be called when the transfer is complete.

    *** Auto-polling functional mode ***
    ====================================
    [..]
      (#) Configure the command sequence and the auto-polling functional mode using the 
          HAL_QSPI_AutoPolling() or HAL_QSPI_AutoPolling_IT() functions :
         (++) Instruction phase : the mode used and if present the instruction opcode.
         (++) Address phase : the mode used and if present the size and the address value.
         (++) Alternate-bytes phase : the mode used and if present the size and the alternate 
             bytes values.
         (++) Dummy-cycles phase : the number of dummy cycles (mode used is same as data phase).
         (++) Data phase : the mode used.
         (++) Double Data Rate (DDR) mode : the activation (or not) of this mode and the delay 
             if activated.
         (++) Sending Instruction Only Once (SIOO) mode : the activation (or not) of this mode.
         (++) The size of the status bytes, the match value, the mask used, the match mode (OR/AND),
             the polling interval and the automatic stop activation.
      (#) After the configuration :
         (++) In polling mode, the output of the function is done when the status match is reached. The
             automatic stop is activated to avoid an infinite loop.
         (++) In interrupt mode, HAL_QSPI_StatusMatchCallback() will be called each time the status match is reached.

    *** Memory-mapped functional mode ***
    =====================================
    [..]
      (#) Configure the command sequence and the memory-mapped functional mode using the 
          HAL_QSPI_MemoryMapped() functions :
         (++) Instruction phase : the mode used and if present the instruction opcode.
         (++) Address phase : the mode used and the size.
         (++) Alternate-bytes phase : the mode used and if present the size and the alternate 
             bytes values.
         (++) Dummy-cycles phase : the number of dummy cycles (mode used is same as data phase).
         (++) Data phase : the mode used.
         (++) Double Data Rate (DDR) mode : the activation (or not) of this mode and the delay 
             if activated.
         (++) Sending Instruction Only Once (SIOO) mode : the activation (or not) of this mode.
         (++) The timeout activation and the timeout period.
      (#) After the configuration, the QuadSPI will be used as soon as an access on the AHB is done on 
          the address range. HAL_QSPI_TimeOutCallback() will be called when the timeout expires.

    *** Errors management and abort functionality ***
    ==================================================
    [..]
      (#) HAL_QSPI_GetError() function gives the error raised during the last operation.
      (#) HAL_QSPI_Abort() and HAL_QSPI_AbortIT() functions aborts any on-going operation and 
          flushes the fifo :
         (++) In polling mode, the output of the function is done when the transfer 
              complete bit is set and the busy bit cleared.
         (++) In interrupt mode, HAL_QSPI_AbortCpltCallback() will be called when 
              the transfer complete bi is set.

    *** Control functions ***
    =========================
    [..]
      (#) HAL_QSPI_GetState() function gives the current state of the HAL QuadSPI driver.
      (#) HAL_QSPI_SetTimeout() function configures the timeout value used in the driver.
      (#) HAL_QSPI_SetFifoThreshold() function configures the threshold on the Fifo of the QSPI IP.
      (#) HAL_QSPI_GetFifoThreshold() function gives the current of the Fifo's threshold

    *** Callback registration ***
    =============================================
    [..]
      The compilation define  USE_HAL_QSPI_REGISTER_CALLBACKS when set to 1
      allows the user to configure dynamically the driver callbacks.

      Use Functions @ref HAL_QSPI_RegisterCallback() to register a user callback,
      it allows to register following callbacks:
        (+) ErrorCallback : callback when error occurs.
        (+) AbortCpltCallback : callback when abort is completed.
        (+) FifoThresholdCallback : callback when the fifo threshold is reached.
        (+) CmdCpltCallback : callback when a command without data is completed.
        (+) RxCpltCallback : callback when a reception transfer is completed.
        (+) TxCpltCallback : callback when a transmission transfer is completed.
        (+) RxHalfCpltCallback : callback when half of the reception transfer is completed.
        (+) TxHalfCpltCallback : callback when half of the transmission transfer is completed.
        (+) StatusMatchCallback : callback when a status match occurs.
        (+) TimeOutCallback : callback when the timeout perioed expires.
        (+) MspInitCallback    : QSPI MspInit.
        (+) MspDeInitCallback  : QSPI MspDeInit.
      This function takes as parameters the HAL peripheral handle, the Callback ID
      and a pointer to the user callback function.

      Use function @ref HAL_QSPI_UnRegisterCallback() to reset a callback to the default
      weak (surcharged) function. It allows to reset following callbacks:
        (+) ErrorCallback : callback when error occurs.
        (+) AbortCpltCallback : callback when abort is completed.
        (+) FifoThresholdCallback : callback when the fifo threshold is reached.
        (+) CmdCpltCallback : callback when a command without data is completed.
        (+) RxCpltCallback : callback when a reception transfer is completed.
        (+) TxCpltCallback : callback when a transmission transfer is completed.
        (+) RxHalfCpltCallback : callback when half of the reception transfer is completed.
        (+) TxHalfCpltCallback : callback when half of the transmission transfer is completed.
        (+) StatusMatchCallback : callback when a status match occurs.
        (+) TimeOutCallback : callback when the timeout perioed expires.
        (+) MspInitCallback    : QSPI MspInit.
        (+) MspDeInitCallback  : QSPI MspDeInit.
      This function) takes as parameters the HAL peripheral handle and the Callback ID.

      By default, after the @ref HAL_QSPI_Init and if the state is HAL_QSPI_STATE_RESET
      all callbacks are reset to the corresponding legacy weak (surcharged) functions.
      Exception done for MspInit and MspDeInit callbacks that are respectively
      reset to the legacy weak (surcharged) functions in the @ref HAL_QSPI_Init
      and @ref  HAL_QSPI_DeInit only when these callbacks are null (not registered beforehand).
      If not, MspInit or MspDeInit are not null, the @ref HAL_QSPI_Init and @ref HAL_QSPI_DeInit
      keep and use the user MspInit/MspDeInit callbacks (registered beforehand)

      Callbacks can be registered/unregistered in READY state only.
      Exception done for MspInit/MspDeInit callbacks that can be registered/unregistered
      in READY or RESET state, thus registered (user) MspInit/DeInit callbacks can be used
      during the Init/DeInit.
      In that case first register the MspInit/MspDeInit user callbacks
      using @ref HAL_QSPI_RegisterCallback before calling @ref HAL_QSPI_DeInit
      or @ref HAL_QSPI_Init function.

      When The compilation define USE_HAL_QSPI_REGISTER_CALLBACKS is set to 0 or
      not defined, the callback registering feature is not available
      and weak (surcharged) callbacks are used.

    *** Workarounds linked to Silicon Limitation ***
    ====================================================
    [..]
      (#) Workarounds Implemented inside HAL Driver
         (++) Extra data written in the FIFO at the end of a read transfer

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2017 STMicroelectronics. 
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the 
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup QSPI QSPI
  * @brief QSPI HAL module driver
  * @{
  */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_QSPI_MODULE_ENABLED</name></cpp:ifdef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
    
<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup QSPI_Private_Constants 
  * @{
  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE</name></cpp:macro> <cpp:value>0x00000000U</cpp:value></cpp:define>                     <comment type="block" format="doxygen">/*!&lt;Indirect write mode*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSPI_FUNCTIONAL_MODE_INDIRECT_READ</name></cpp:macro>  <cpp:value>((uint32_t)QUADSPI_CCR_FMODE_0)</cpp:value></cpp:define> <comment type="block" format="doxygen">/*!&lt;Indirect read mode*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSPI_FUNCTIONAL_MODE_AUTO_POLLING</name></cpp:macro>   <cpp:value>((uint32_t)QUADSPI_CCR_FMODE_1)</cpp:value></cpp:define> <comment type="block" format="doxygen">/*!&lt;Automatic polling mode*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED</name></cpp:macro>  <cpp:value>((uint32_t)QUADSPI_CCR_FMODE)</cpp:value></cpp:define>   <comment type="block" format="doxygen">/*!&lt;Memory-mapped mode*/</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
  
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup QSPI_Private_Macros QSPI Private Macros
  * @{
  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_QSPI_FUNCTIONAL_MODE</name><parameter_list>(<parameter><type><name>MODE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((MODE) == QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE) || \
                                       ((MODE) == QSPI_FUNCTIONAL_MODE_INDIRECT_READ)  || \
                                       ((MODE) == QSPI_FUNCTIONAL_MODE_AUTO_POLLING)   || \
                                       ((MODE) == QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))</cpp:value></cpp:define>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
                                         
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup QSPI_Private_Functions QSPI Private Functions
  * @{
  */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>QSPI_DMARxCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>QSPI_DMATxCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>QSPI_DMARxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>QSPI_DMATxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>QSPI_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>QSPI_DMAAbortCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>QSPI_WaitFlagStateUntilTimeout</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Flag</name></decl></parameter>, <parameter><decl><type><name>FlagStatus</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>QSPI_Config</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>, <parameter><decl><type><name>QSPI_CommandTypeDef</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>FunctionalMode</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
  
<comment type="block">/* Exported functions ---------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup QSPI_Exported_Functions QSPI Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup QSPI_Exported_Functions_Group1 Initialization/de-initialization functions 
  *  @brief    Initialization and Configuration functions 
  *
@verbatim    
===============================================================================
            ##### Initialization and Configuration functions #####
 ===============================================================================
    [..]
    This subsection provides a set of functions allowing to :
      (+) Initialize the QuadSPI.
      (+) De-initialize the QuadSPI.
      
@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief Initializes the QSPI mode according to the specified parameters
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_QSPI_Init</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the QSPI handle allocation */</comment>
  <if_stmt><if>if<condition>(<expr><name>hqspi</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_CLOCK_PRESCALER</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockPrescaler</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_FIFO_THRESHOLD</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FifoThreshold</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_SSHIFT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SampleShifting</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_FLASH_SIZE</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FlashSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_CS_HIGH_TIME</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ChipSelectHighTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_CLOCK_MODE</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DUAL_FLASH_MODE</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DualFlash</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DualFlash</name></name> <operator>!=</operator> <name>QSPI_DUALFLASH_ENABLE</name></expr> )</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_FLASH_ID</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FlashID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
  <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_RESET</name></expr>)</condition>
  <block>{<block_content> 
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_QSPI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/* Reset Callback pointers in HAL_QSPI_STATE_RESET only */</comment>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCallback</name></name>         <operator>=</operator> <name>HAL_QSPI_ErrorCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name>     <operator>=</operator> <name>HAL_QSPI_AbortCpltCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>FifoThresholdCallback</name></name> <operator>=</operator> <name>HAL_QSPI_FifoThresholdCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>CmdCpltCallback</name></name>       <operator>=</operator> <name>HAL_QSPI_CmdCpltCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxCpltCallback</name></name>        <operator>=</operator> <name>HAL_QSPI_RxCpltCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxCpltCallback</name></name>        <operator>=</operator> <name>HAL_QSPI_TxCpltCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name>    <operator>=</operator> <name>HAL_QSPI_RxHalfCpltCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name>    <operator>=</operator> <name>HAL_QSPI_TxHalfCpltCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>StatusMatchCallback</name></name>   <operator>=</operator> <name>HAL_QSPI_StatusMatchCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TimeOutCallback</name></name>       <operator>=</operator> <name>HAL_QSPI_TimeOutCallback</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_QSPI_MspInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>hqspi</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Init the low level hardware : GPIO, CLOCK */</comment>
    <expr_stmt><expr><call><name>HAL_QSPI_MspInit</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Configure the default timeout for the QSPI memory access */</comment>
    <expr_stmt><expr><call><name>HAL_QSPI_SetTimeout</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>HAL_QPSI_TIMEOUT_DEFAULT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Configure QSPI FIFO Threshold */</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CR_FTHRES</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FifoThreshold</name></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till BUSY flag reset */</comment>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>QSPI_WaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_BUSY</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
                
    <comment type="block">/* Configure QSPI Clock Prescaler and Sample Shift */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>,<argument><expr><operator>(</operator><name>QUADSPI_CR_PRESCALER</name> <operator>|</operator> <name>QUADSPI_CR_SSHIFT</name> <operator>|</operator> <name>QUADSPI_CR_FSEL</name> <operator>|</operator> <name>QUADSPI_CR_DFM</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockPrescaler</name></name> <operator>&lt;&lt;</operator> <literal type="number">24U</literal><operator>)</operator><operator>|</operator> <name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SampleShifting</name></name> <operator>|</operator> <name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FlashID</name></name><operator>|</operator> <name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DualFlash</name></name> <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    <comment type="block">/* Configure QSPI Flash Size, CS High Time and Clock Mode */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DCR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>QUADSPI_DCR_FSIZE</name> <operator>|</operator> <name>QUADSPI_DCR_CSHT</name> <operator>|</operator> <name>QUADSPI_DCR_CKMODE</name><operator>)</operator></expr></argument>, 
               <argument><expr><operator>(</operator><operator>(</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FlashSize</name></name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator> <name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ChipSelectHighTime</name></name> <operator>|</operator> <name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockMode</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Enable the QSPI peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_QSPI_ENABLE</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <comment type="block">/* Set QSPI error code to none */</comment>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_QSPI_ERROR_NONE</name></expr>;</expr_stmt>  

    <comment type="block">/* Initialize the QSPI state */</comment>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_READY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DeInitializes the QSPI peripheral 
  * @param hqspi qspi handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_QSPI_DeInit</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the QSPI handle allocation */</comment>
  <if_stmt><if>if<condition>(<expr><name>hqspi</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the QSPI Peripheral Clock */</comment>
  <expr_stmt><expr><call><name>__HAL_QSPI_DISABLE</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_QSPI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_QSPI_MspDeInit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name><name>hqspi</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* DeInit the low level hardware: GPIO, CLOCK, NVIC... */</comment>
  <expr_stmt><expr><call><name>HAL_QSPI_MspDeInit</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Set QSPI error code to none */</comment>
  <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_QSPI_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Initialize the QSPI state */</comment>
  <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief QSPI MSP Init
  * @param hqspi QSPI handle
  * @retval None
  */</comment>
 <function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_QSPI_MspInit</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief QSPI MSP DeInit
  * @param hqspi QSPI handle
  * @retval None
  */</comment>
 <function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_QSPI_MspDeInit</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspDeInit can be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup QSPI_Exported_Functions_Group2 IO operation functions 
  *  @brief QSPI Transmit/Receive functions 
  *
@verbatim   
 ===============================================================================
                      ##### IO operation functions #####
 ===============================================================================
       [..]
    This subsection provides a set of functions allowing to :
      (+) Handle the interrupts.
      (+) Handle the command sequence.
      (+) Transmit data in blocking, interrupt or DMA mode.
      (+) Receive data in blocking, interrupt or DMA mode.
      (+) Manage the auto-polling functional mode.
      (+) Manage the memory-mapped functional mode.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief This function handles QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None.
  */</comment>
<function><type><name>void</name></type> <name>HAL_QSPI_IRQHandler</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name> <modifier>*</modifier></type><name>data_reg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>flag</name> <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>itsource</name> <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* QSPI Fifo Threshold interrupt occurred ----------------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>QSPI_FLAG_FT</name><operator>)</operator><operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itsource</name> <operator>&amp;</operator> <name>QSPI_IT_FT</name><operator>)</operator><operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>data_reg</name> <operator>=</operator> <operator>&amp;</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_BUSY_INDIRECT_TX</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Transmission process */</comment>
      <while>while<condition>(<expr><call><name>__HAL_QSPI_GET_FLAG</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_FT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Fill the FIFO until it is full */</comment>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data_reg</name> <operator>=</operator> <operator>*</operator><name><name>hqspi</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <comment type="block">/* No more data available for the transfer */</comment>
          <comment type="block">/* Disable the QSPI FIFO Threshold Interrupt */</comment>
          <expr_stmt><expr><call><name>__HAL_QSPI_DISABLE_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_IT_FT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_BUSY_INDIRECT_RX</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Receiving Process */</comment>
      <while>while<condition>(<expr><call><name>__HAL_QSPI_GET_FLAG</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_FT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Read the FIFO until it is empty */</comment>
          <expr_stmt><expr><operator>*</operator><name><name>hqspi</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data_reg</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <comment type="block">/* All data have been received for the transfer */</comment>
          <comment type="block">/* Disable the QSPI FIFO Threshold Interrupt */</comment>
          <expr_stmt><expr><call><name>__HAL_QSPI_DISABLE_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_IT_FT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* FIFO Threshold callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_QSPI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hqspi</name><operator>-&gt;</operator><name>FifoThresholdCallback</name></name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_QSPI_FifoThresholdCallback</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if>

  <comment type="block">/* QSPI Transfer Complete interrupt occurred -------------------------------*/</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>QSPI_FLAG_TC</name><operator>)</operator><operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itsource</name> <operator>&amp;</operator> <name>QSPI_IT_TC</name><operator>)</operator><operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear interrupt */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FCR</name></name></expr></argument>, <argument><expr><name>QSPI_FLAG_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_QSPI_DISABLE_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_IT_TC</name> <operator>|</operator> <name>QSPI_IT_TE</name> <operator>|</operator> <name>QSPI_IT_FT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Transfer complete callback */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_BUSY_INDIRECT_TX</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>QUADSPI_CR_DMAEN</name><operator>)</operator><operator>!=</operator> <name>RESET</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */</comment>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CR_DMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Disable the DMA channel */</comment>
        <expr_stmt><expr><call><name>__HAL_DMA_DISABLE</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Clear Busy bit */</comment>
      <expr_stmt><expr><call><name>HAL_QSPI_Abort_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Change state of QSPI */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_READY</name></expr>;</expr_stmt>

      <comment type="block">/* TX Complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_QSPI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hqspi</name><operator>-&gt;</operator><name>TxCpltCallback</name></name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_QSPI_TxCpltCallback</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_BUSY_INDIRECT_RX</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>QUADSPI_CR_DMAEN</name><operator>)</operator><operator>!=</operator> <name>RESET</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */</comment>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CR_DMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Disable the DMA channel */</comment>
        <expr_stmt><expr><call><name>__HAL_DMA_DISABLE</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><name>data_reg</name> <operator>=</operator> <operator>&amp;</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</expr_stmt>
        <while>while<condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>QUADSPI_SR_FLEVEL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Read the last data received in the FIFO until it is empty */</comment>
            <expr_stmt><expr><operator>*</operator><name><name>hqspi</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data_reg</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* All data have been received for the transfer */</comment>
            <break>break;</break>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></else></if_stmt>
      <comment type="block">/* Workaround - Extra data written in the FIFO at the end of a read transfer */</comment>
      <expr_stmt><expr><call><name>HAL_QSPI_Abort_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Change state of QSPI */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_READY</name></expr>;</expr_stmt>

      <comment type="block">/* RX Complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_QSPI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hqspi</name><operator>-&gt;</operator><name>RxCpltCallback</name></name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_QSPI_RxCpltCallback</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_BUSY</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Change state of QSPI */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_READY</name></expr>;</expr_stmt>

      <comment type="block">/* Command Complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_QSPI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hqspi</name><operator>-&gt;</operator><name>CmdCpltCallback</name></name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_QSPI_CmdCpltCallback</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_ABORT</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Change state of QSPI */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_READY</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>==</operator> <name>HAL_QSPI_ERROR_NONE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Abort called by the user */</comment>

        <comment type="block">/* Abort Complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_QSPI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hqspi</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_QSPI_AbortCpltCallback</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if>
      <else>else 
      <block>{<block_content>
        <comment type="block">/* Abort due to an error (eg :  DMA error) */</comment>

        <comment type="block">/* Error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_QSPI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_QSPI_ErrorCallback</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>

  <comment type="block">/* QSPI Status Match interrupt occurred ------------------------------------*/</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>QSPI_FLAG_SM</name><operator>)</operator><operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itsource</name> <operator>&amp;</operator> <name>QSPI_IT_SM</name><operator>)</operator><operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear interrupt */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FCR</name></name></expr></argument>, <argument><expr><name>QSPI_FLAG_SM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   
    <comment type="block">/* Check if the automatic poll mode stop is activated */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CR_APMS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the QSPI Transfer Error and Status Match Interrupts */</comment>
      <expr_stmt><expr><call><name>__HAL_QSPI_DISABLE_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><operator>(</operator><name>QSPI_IT_SM</name> <operator>|</operator> <name>QSPI_IT_TE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Change state of QSPI */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_READY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Status match callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_QSPI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hqspi</name><operator>-&gt;</operator><name>StatusMatchCallback</name></name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_QSPI_StatusMatchCallback</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if>

  <comment type="block">/* QSPI Transfer Error interrupt occurred ----------------------------------*/</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>QSPI_FLAG_TE</name><operator>)</operator><operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itsource</name> <operator>&amp;</operator> <name>QSPI_IT_TE</name><operator>)</operator><operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear interrupt */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FCR</name></name></expr></argument>, <argument><expr><name>QSPI_FLAG_TE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Disable all the QSPI Interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_QSPI_DISABLE_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_IT_SM</name> <operator>|</operator> <name>QSPI_IT_TC</name> <operator>|</operator> <name>QSPI_IT_TE</name> <operator>|</operator> <name>QSPI_IT_FT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set error code */</comment>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_TRANSFER</name></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>QUADSPI_CR_DMAEN</name><operator>)</operator><operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */</comment>
      <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CR_DMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Disable the DMA channel */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>QSPI_DMAAbortCplt</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Set error code to DMA */</comment>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_DMA</name></expr>;</expr_stmt>

        <comment type="block">/* Change state of QSPI */</comment>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_READY</name></expr>;</expr_stmt>
        
        <comment type="block">/* Error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_QSPI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_QSPI_ErrorCallback</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Change state of QSPI */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_READY</name></expr>;</expr_stmt>
      
      <comment type="block">/* Error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_QSPI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_QSPI_ErrorCallback</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>

  <comment type="block">/* QSPI Timeout interrupt occurred -----------------------------------------*/</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>QSPI_FLAG_TO</name><operator>)</operator><operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itsource</name> <operator>&amp;</operator> <name>QSPI_IT_TO</name><operator>)</operator><operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear interrupt */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FCR</name></name></expr></argument>, <argument><expr><name>QSPI_FLAG_TO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Timeout callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_QSPI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hqspi</name><operator>-&gt;</operator><name>TimeOutCallback</name></name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_QSPI_TimeOutCallback</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Sets the command configuration. 
  * @param hqspi QSPI handle
  * @param cmd  structure that contains the command configuration information
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_QSPI_Command</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>, <parameter><decl><type><name>QSPI_CommandTypeDef</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_INSTRUCTION_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>InstructionMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>InstructionMode</name></name> <operator>!=</operator> <name>QSPI_INSTRUCTION_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_INSTRUCTION</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>Instruction</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ADDRESS_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name> <operator>!=</operator> <name>QSPI_ADDRESS_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ADDRESS_SIZE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AddressSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ALTERNATE_BYTES_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name> <operator>!=</operator> <name>QSPI_ALTERNATE_BYTES_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ALTERNATE_BYTES_SIZE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AlternateBytesSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DUMMY_CYCLES</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DummyCycles</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DATA_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DataMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DDR_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DdrMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DDR_HHC</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DdrHoldHalfCycle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_SIOO_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>SIOOMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_QSPI_ERROR_NONE</name></expr>;</expr_stmt>
    
    <comment type="block">/* Update QSPI state */</comment>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_BUSY</name></expr>;</expr_stmt>   
    
    <comment type="block">/* Wait till BUSY flag reset */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>QSPI_WaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_BUSY</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Call the configuration function */</comment>
      <expr_stmt><expr><call><name>QSPI_Config</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>DataMode</name></name> <operator>==</operator> <name>QSPI_DATA_NONE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* When there is no data phase, the transfer start as soon as the configuration is done 
        so wait until TC flag is set to go back in idle state */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>QSPI_WaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_TC</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>__HAL_QSPI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="block">/* Update QSPI state */</comment>
          <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_READY</name></expr>;</expr_stmt>   
        </block_content>}</block></if></if_stmt>
        
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Update QSPI state */</comment>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_READY</name></expr>;</expr_stmt>   
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_BUSY</name></expr>;</expr_stmt>   
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Sets the command configuration in interrupt mode. 
  * @param hqspi QSPI handle
  * @param cmd  structure that contains the command configuration information
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_QSPI_Command_IT</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>, <parameter><decl><type><name>QSPI_CommandTypeDef</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_INSTRUCTION_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>InstructionMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>InstructionMode</name></name> <operator>!=</operator> <name>QSPI_INSTRUCTION_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_INSTRUCTION</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>Instruction</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ADDRESS_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name> <operator>!=</operator> <name>QSPI_ADDRESS_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ADDRESS_SIZE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AddressSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ALTERNATE_BYTES_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name> <operator>!=</operator> <name>QSPI_ALTERNATE_BYTES_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ALTERNATE_BYTES_SIZE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AlternateBytesSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DUMMY_CYCLES</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DummyCycles</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DATA_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DataMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DDR_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DdrMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DDR_HHC</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DdrHoldHalfCycle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_SIOO_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>SIOOMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_QSPI_ERROR_NONE</name></expr>;</expr_stmt>
    
    <comment type="block">/* Update QSPI state */</comment>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_BUSY</name></expr>;</expr_stmt>   
    
    <comment type="block">/* Wait till BUSY flag reset */</comment>
   <expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Timeout</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>SystemCoreClock</name> <operator>/</operator> <literal type="number">16U</literal> <operator>/</operator> <literal type="number">1000U</literal><operator>)</operator></expr>;</expr_stmt>
   <do>do 
   <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name>count</name><operator>--</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
     <block>{<block_content> 
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_QSPI_STATE_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_TIMEOUT</name></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
   </block_content>}</block> 
   while <condition>(<expr><operator>(</operator><call><name>__HAL_QSPI_GET_FLAG</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_BUSY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>RESET</name></expr>)</condition>;</do>
   
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>DataMode</name></name> <operator>==</operator> <name>QSPI_DATA_NONE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Clear interrupt */</comment>
        <expr_stmt><expr><call><name>__HAL_QSPI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_TE</name> <operator>|</operator> <name>QSPI_FLAG_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Call the configuration function */</comment>
      <expr_stmt><expr><call><name>QSPI_Config</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>DataMode</name></name> <operator>==</operator> <name>QSPI_DATA_NONE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* When there is no data phase, the transfer start as soon as the configuration is done 
        so activate TC and TE interrupts */</comment>
        <comment type="block">/* Process unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Enable the QSPI Transfer Error Interrupt */</comment>
        <expr_stmt><expr><call><name>__HAL_QSPI_ENABLE_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_IT_TE</name> <operator>|</operator> <name>QSPI_IT_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Update QSPI state */</comment>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_READY</name></expr>;</expr_stmt>   

        <comment type="block">/* Process unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_BUSY</name></expr>;</expr_stmt>   

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Transmit an amount of data in blocking mode. 
  * @param hqspi QSPI handle
  * @param pData pointer to data buffer
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_QSPI_Transmit</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
   <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name> <modifier>*</modifier></type><name>data_reg</name> <init>= <expr><operator>&amp;</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_QSPI_ERROR_NONE</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>pData</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
      <comment type="block">/* Update state */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_BUSY_INDIRECT_TX</name></expr>;</expr_stmt>
      
      <comment type="block">/* Configure counters and size of the handle */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DLR</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxXferSize</name></name> <operator>=</operator> <call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DLR</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    
      <comment type="block">/* Configure QSPI: CCR register with functional as indirect write */</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CCR_FMODE</name></expr></argument>, <argument><expr><name>QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Wait until FT flag is set to send data */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>QSPI_WaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_FT</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content> 
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data_reg</name> <operator>=</operator> <operator>*</operator><name><name>hqspi</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
    
      <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Wait until TC flag is set to go back in idle state */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>QSPI_WaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_TC</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Clear Transfer Complete bit */</comment>
          <expr_stmt><expr><call><name>__HAL_QSPI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="block">/* Clear Busy bit */</comment>
          <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>HAL_QSPI_Abort</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    
      <comment type="block">/* Update QSPI state */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_READY</name></expr>;</expr_stmt>    
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_BUSY</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief Receive an amount of data in blocking mode 
  * @param hqspi QSPI handle
  * @param pData pointer to data buffer
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_QSPI_Receive</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>addr_reg</name> <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>AR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name> <modifier>*</modifier></type><name>data_reg</name> <init>= <expr><operator>&amp;</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_QSPI_ERROR_NONE</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>pData</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
      <comment type="block">/* Update state */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_BUSY_INDIRECT_RX</name></expr>;</expr_stmt>
    
      <comment type="block">/* Configure counters and size of the handle */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DLR</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DLR</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>

      <comment type="block">/* Configure QSPI: CCR register with functional as indirect read */</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CCR_FMODE</name></expr></argument>, <argument><expr><name>QSPI_FUNCTIONAL_MODE_INDIRECT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Start the transfer by re-writing the address in AR register */</comment>
      <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>AR</name></name></expr></argument>, <argument><expr><name>addr_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <while>while<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Wait until FT or TC flag is set to read received data */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>QSPI_WaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><operator>(</operator><name>QSPI_FLAG_FT</name> <operator>|</operator> <name>QSPI_FLAG_TC</name><operator>)</operator></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if  <condition>(<expr><name>status</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content> 
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name><name>hqspi</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data_reg</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
    
      <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Wait until TC flag is set to go back in idle state */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>QSPI_WaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_TC</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if  <condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Clear Transfer Complete bit */</comment>
          <expr_stmt><expr><call><name>__HAL_QSPI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
         <comment type="block">/* Workaround - Extra data written in the FIFO at the end of a read transfer */</comment>
         <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>HAL_QSPI_Abort</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Update QSPI state */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_READY</name></expr>;</expr_stmt>    
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_BUSY</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Send an amount of data in interrupt mode 
  * @param  hqspi QSPI handle
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_QSPI_Transmit_IT</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list>
<block>{<block_content>  
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_QSPI_ERROR_NONE</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>pData</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
      <comment type="block">/* Update state */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_BUSY_INDIRECT_TX</name></expr>;</expr_stmt>

      <comment type="block">/* Configure counters and size of the handle */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DLR</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxXferSize</name></name> <operator>=</operator> <call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DLR</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    
      <comment type="block">/* Configure QSPI: CCR register with functional as indirect write */</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CCR_FMODE</name></expr></argument>, <argument><expr><name>QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <comment type="block">/* Clear interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_QSPI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_TE</name> <operator>|</operator> <name>QSPI_FLAG_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */</comment>
      <expr_stmt><expr><call><name>__HAL_QSPI_ENABLE_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_IT_TE</name> <operator>|</operator> <name>QSPI_IT_FT</name> <operator>|</operator> <name>QSPI_IT_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>

      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receive an amount of data in no-blocking mode with Interrupt
  * @param  hqspi QSPI handle
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_QSPI_Receive_IT</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>addr_reg</name> <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>AR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_QSPI_ERROR_NONE</name></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><name>pData</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
      <comment type="block">/* Update state */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_BUSY_INDIRECT_RX</name></expr>;</expr_stmt>
    
      <comment type="block">/* Configure counters and size of the handle */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DLR</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DLR</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>

      <comment type="block">/* Configure QSPI: CCR register with functional as indirect read */</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CCR_FMODE</name></expr></argument>, <argument><expr><name>QSPI_FUNCTIONAL_MODE_INDIRECT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Start the transfer by re-writing the address in AR register */</comment>
      <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>AR</name></name></expr></argument>, <argument><expr><name>addr_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Clear interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_QSPI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_TE</name> <operator>|</operator> <name>QSPI_FLAG_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */</comment>
      <expr_stmt><expr><call><name>__HAL_QSPI_ENABLE_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_IT_TE</name> <operator>|</operator> <name>QSPI_IT_FT</name> <operator>|</operator> <name>QSPI_IT_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>

      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_BUSY</name></expr>;</expr_stmt>   

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sends an amount of data in non blocking mode with DMA. 
  * @param  hqspi QSPI handle
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @note   If DMA peripheral access is configured as halfword, the number 
  *         of data and the fifo threshold should be aligned on halfword
  * @note   If DMA peripheral access is configured as word, the number 
  *         of data and the fifo threshold should be aligned on word
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_QSPI_Transmit_DMA</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>data_size</name> <init>= <expr><operator>(</operator><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DLR</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear the error code */</comment>                
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_QSPI_ERROR_NONE</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>pData</name> <operator>!=</operator> <name>NULL</name></expr> )</condition> 
    <block>{<block_content>
      <comment type="block">/* Configure counters of the handle */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PeriphDataAlignment</name></name> <operator>==</operator> <name>DMA_PDATAALIGN_BYTE</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PeriphDataAlignment</name></name> <operator>==</operator> <name>DMA_PDATAALIGN_HALFWORD</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>data_size</name> <operator>%</operator> <literal type="number">2U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FifoThreshold</name></name> <operator>%</operator> <literal type="number">2U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* The number of data or the fifo threshold is not aligned on halfword 
          =&gt; no transfer possible with DMA peripheral access configured as halfword */</comment>
          <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>

          <comment type="block">/* Process unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <operator>(</operator><name>data_size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PeriphDataAlignment</name></name> <operator>==</operator> <name>DMA_PDATAALIGN_WORD</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>data_size</name> <operator>%</operator> <literal type="number">4U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FifoThreshold</name></name> <operator>%</operator> <literal type="number">4U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* The number of data or the fifo threshold is not aligned on word 
          =&gt; no transfer possible with DMA peripheral access configured as word */</comment>
          <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>

          <comment type="block">/* Process unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <operator>(</operator><name>data_size</name> <operator>&gt;&gt;</operator> <literal type="number">2U</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
      <comment type="block">/* Update state */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_BUSY_INDIRECT_TX</name></expr>;</expr_stmt>

      <comment type="block">/* Clear interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_QSPI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><operator>(</operator><name>QSPI_FLAG_TE</name> <operator>|</operator> <name>QSPI_FLAG_TC</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Configure size and pointer of the handle */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxXferSize</name></name> <operator>=</operator> <name><name>hqspi</name><operator>-&gt;</operator><name>TxXferCount</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>

      <comment type="block">/* Configure QSPI: CCR register with functional mode as indirect write */</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CCR_FMODE</name></expr></argument>, <argument><expr><name>QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Set the QSPI DMA transfer complete callback */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>QSPI_DMATxCplt</name></expr>;</expr_stmt>

      <comment type="block">/* Set the QSPI DMA Half transfer complete callback */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>QSPI_DMATxHalfCplt</name></expr>;</expr_stmt>

      <comment type="block">/* Set the DMA error callback */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>QSPI_DMAError</name></expr>;</expr_stmt>

      <comment type="block">/* Clear the DMA abort callback */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>QSPI1_V2_1L</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <comment type="block">/* Bug "ES0305 section 2.1.8 In some specific cases, DMA2 data corruption occurs when managing
         AHB and APB2 peripherals in a concurrent way" Workaround Implementation:
         Change the following configuration of DMA peripheral
           - Enable peripheral increment
           - Disable memory increment
           - Set DMA direction as peripheral to memory mode */</comment>

        <comment type="block">/* Enable peripheral increment mode of the DMA */</comment>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PeriphInc</name></name> <operator>=</operator> <name>DMA_PINC_ENABLE</name></expr>;</expr_stmt>

        <comment type="block">/* Disable memory increment mode of the DMA */</comment>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>MemInc</name></name> <operator>=</operator> <name>DMA_MINC_DISABLE</name></expr>;</expr_stmt>
        
        <comment type="block">/* Update peripheral/memory increment mode bits */</comment>
        <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>DMA_SxCR_MINC</name> <operator>|</operator> <name>DMA_SxCR_PINC</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>MemInc</name></name> <operator>|</operator> <name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PeriphInc</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Configure the direction of the DMA */</comment>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Direction</name></name> <operator>=</operator> <name>DMA_PERIPH_TO_MEMORY</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>        
      <comment type="block">/* Configure the direction of the DMA */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Direction</name></name> <operator>=</operator> <name>DMA_MEMORY_TO_PERIPH</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* QSPI1_V2_1L */</comment>

      <comment type="block">/* Update direction mode bit */</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>DMA_SxCR_DIR</name></expr></argument>, <argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Direction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Enable the QSPI transmit DMA Channel */</comment>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pData</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></argument>, <argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxXferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Enable the QSPI transfer error Interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_QSPI_ENABLE_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_IT_TE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Enable the DMA transfer by setting the DMAEN bit in the QSPI CR register */</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CR_DMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>

      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_BUSY</name></expr>;</expr_stmt>   

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receives an amount of data in non blocking mode with DMA. 
  * @param  hqspi QSPI handle
  * @param  pData pointer to data buffer.
  * @note   This function is used only in Indirect Read Mode
  * @note   If DMA peripheral access is configured as halfword, the number 
  *         of data and the fifo threshold should be aligned on halfword
  * @note   If DMA peripheral access is configured as word, the number 
  *         of data and the fifo threshold should be aligned on word
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_QSPI_Receive_DMA</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>addr_reg</name> <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>AR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>data_size</name> <init>= <expr><operator>(</operator><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DLR</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_QSPI_ERROR_NONE</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>pData</name> <operator>!=</operator> <name>NULL</name></expr> )</condition> 
    <block>{<block_content>
      <comment type="block">/* Configure counters of the handle */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PeriphDataAlignment</name></name> <operator>==</operator> <name>DMA_PDATAALIGN_BYTE</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PeriphDataAlignment</name></name> <operator>==</operator> <name>DMA_PDATAALIGN_HALFWORD</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>data_size</name> <operator>%</operator> <literal type="number">2U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FifoThreshold</name></name> <operator>%</operator> <literal type="number">2U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* The number of data or the fifo threshold is not aligned on halfword 
          =&gt; no transfer possible with DMA peripheral access configured as halfword */</comment>
          <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>

          <comment type="block">/* Process unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <operator>(</operator><name>data_size</name> <operator>&gt;&gt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PeriphDataAlignment</name></name> <operator>==</operator> <name>DMA_PDATAALIGN_WORD</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>data_size</name> <operator>%</operator> <literal type="number">4U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FifoThreshold</name></name> <operator>%</operator> <literal type="number">4U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* The number of data or the fifo threshold is not aligned on word 
          =&gt; no transfer possible with DMA peripheral access configured as word */</comment>
          <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>

          <comment type="block">/* Process unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <operator>(</operator><name>data_size</name> <operator>&gt;&gt;</operator> <literal type="number">2U</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Update state */</comment>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_BUSY_INDIRECT_RX</name></expr>;</expr_stmt>

        <comment type="block">/* Clear interrupt */</comment>
        <expr_stmt><expr><call><name>__HAL_QSPI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><operator>(</operator><name>QSPI_FLAG_TE</name> <operator>|</operator> <name>QSPI_FLAG_TC</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Configure size and pointer of the handle */</comment>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <name><name>hqspi</name><operator>-&gt;</operator><name>RxXferCount</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>

        <comment type="block">/* Set the QSPI DMA transfer complete callback */</comment>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>QSPI_DMARxCplt</name></expr>;</expr_stmt>

        <comment type="block">/* Set the QSPI DMA Half transfer complete callback */</comment>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>QSPI_DMARxHalfCplt</name></expr>;</expr_stmt>

        <comment type="block">/* Set the DMA error callback */</comment>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>QSPI_DMAError</name></expr>;</expr_stmt>

        <comment type="block">/* Clear the DMA abort callback */</comment>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>QSPI1_V2_1L</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <comment type="block">/* Bug "ES0305 section 2.1.8 In some specific cases, DMA2 data corruption occurs when managing
         AHB and APB2 peripherals in a concurrent way" Workaround Implementation:
         Change the following configuration of DMA peripheral
           - Enable peripheral increment
           - Disable memory increment
           - Set DMA direction as memory to peripheral mode
           - 4 Extra words (32-bits) are added for read operation to guarantee
              the last data is transferred from DMA FIFO to RAM memory */</comment>

        <comment type="block">/* Enable peripheral increment of the DMA */</comment>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PeriphInc</name></name> <operator>=</operator> <name>DMA_PINC_ENABLE</name></expr>;</expr_stmt>

        <comment type="block">/* Disable memory increment of the DMA */</comment>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>MemInc</name></name> <operator>=</operator> <name>DMA_MINC_DISABLE</name></expr>;</expr_stmt>

        <comment type="block">/* Update peripheral/memory increment mode bits */</comment>
        <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>DMA_SxCR_MINC</name> <operator>|</operator> <name>DMA_SxCR_PINC</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>MemInc</name></name> <operator>|</operator> <name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PeriphInc</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Configure the direction of the DMA */</comment>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Direction</name></name> <operator>=</operator> <name>DMA_MEMORY_TO_PERIPH</name></expr>;</expr_stmt>

        <comment type="block">/* 4 Extra words (32-bits) are needed for read operation to guarantee 
        the last data is transferred from DMA FIFO to RAM memory */</comment>
        <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DLR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>data_size</name> <operator>-</operator> <literal type="number">1U</literal> <operator>+</operator> <literal type="number">16U</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Update direction mode bit */</comment>
        <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>DMA_SxCR_DIR</name></expr></argument>, <argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Direction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Configure QSPI: CCR register with functional as indirect read */</comment>
        <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CCR_FMODE</name></expr></argument>, <argument><expr><name>QSPI_FUNCTIONAL_MODE_INDIRECT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Start the transfer by re-writing the address in AR register */</comment>
        <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>AR</name></name></expr></argument>, <argument><expr><name>addr_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Enable the DMA Channel */</comment>
        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pData</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxXferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Enable the DMA transfer by setting the DMAEN bit in the QSPI CR register */</comment>
        <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CR_DMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Process unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Enable the QSPI transfer error Interrupt */</comment>
        <expr_stmt><expr><call><name>__HAL_QSPI_ENABLE_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_IT_TE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <comment type="block">/* Configure the direction of the DMA */</comment>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Direction</name></name> <operator>=</operator> <name>DMA_PERIPH_TO_MEMORY</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>DMA_SxCR_DIR</name></expr></argument>, <argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Direction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Enable the DMA Channel */</comment>
        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pData</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxXferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Configure QSPI: CCR register with functional as indirect read */</comment>
        <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CCR_FMODE</name></expr></argument>, <argument><expr><name>QSPI_FUNCTIONAL_MODE_INDIRECT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Start the transfer by re-writing the address in AR register */</comment>
        <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>AR</name></name></expr></argument>, <argument><expr><name>addr_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Process unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Enable the QSPI transfer error Interrupt */</comment>
        <expr_stmt><expr><call><name>__HAL_QSPI_ENABLE_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_IT_TE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Enable the DMA transfer by setting the DMAEN bit in the QSPI CR register */</comment>
        <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CR_DMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* QSPI1_V2_1L */</comment>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>

      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_BUSY</name></expr>;</expr_stmt> 

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configure the QSPI Automatic Polling Mode in blocking mode. 
  * @param  hqspi QSPI handle
  * @param  cmd structure that contains the command configuration information.
  * @param  cfg structure that contains the polling configuration information.
  * @param  Timeout  Time out duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_QSPI_AutoPolling</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>, <parameter><decl><type><name>QSPI_CommandTypeDef</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>QSPI_AutoPollingTypeDef</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_INSTRUCTION_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>InstructionMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>InstructionMode</name></name> <operator>!=</operator> <name>QSPI_INSTRUCTION_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_INSTRUCTION</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>Instruction</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ADDRESS_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name> <operator>!=</operator> <name>QSPI_ADDRESS_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ADDRESS_SIZE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AddressSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ALTERNATE_BYTES_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name> <operator>!=</operator> <name>QSPI_ALTERNATE_BYTES_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ALTERNATE_BYTES_SIZE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AlternateBytesSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DUMMY_CYCLES</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DummyCycles</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DATA_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DataMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DDR_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DdrMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DDR_HHC</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DdrHoldHalfCycle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_SIOO_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>SIOOMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_INTERVAL</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>Interval</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_STATUS_BYTES_SIZE</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>StatusBytesSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_MATCH_MODE</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>MatchMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_QSPI_ERROR_NONE</name></expr>;</expr_stmt>
    
    <comment type="block">/* Update state */</comment>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_BUSY_AUTO_POLLING</name></expr>;</expr_stmt>
    
    <comment type="block">/* Wait till BUSY flag reset */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>QSPI_WaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_BUSY</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Configure QSPI: PSMAR register with the status match value */</comment>
      <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>PSMAR</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>Match</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Configure QSPI: PSMKR register with the status mask value */</comment>
      <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>PSMKR</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>Mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Configure QSPI: PIR register with the interval value */</comment>
      <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>PIR</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>Interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Configure QSPI: CR register with Match mode and Automatic stop enabled 
      (otherwise there will be an infinite loop in blocking mode) */</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>QUADSPI_CR_PMM</name> <operator>|</operator> <name>QUADSPI_CR_APMS</name><operator>)</operator></expr></argument>, 
               <argument><expr><operator>(</operator><name><name>cfg</name><operator>-&gt;</operator><name>MatchMode</name></name> <operator>|</operator> <name>QSPI_AUTOMATIC_STOP_ENABLE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Call the configuration function */</comment>
      <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>NbData</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>StatusBytesSize</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QSPI_Config</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>QSPI_FUNCTIONAL_MODE_AUTO_POLLING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Wait until SM flag is set to go back in idle state */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>QSPI_WaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_SM</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>__HAL_QSPI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_SM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Update state */</comment>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_READY</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_BUSY</name></expr>;</expr_stmt>   
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configure the QSPI Automatic Polling Mode in non-blocking mode. 
  * @param  hqspi QSPI handle
  * @param  cmd structure that contains the command configuration information.
  * @param  cfg structure that contains the polling configuration information.
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_QSPI_AutoPolling_IT</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>, <parameter><decl><type><name>QSPI_CommandTypeDef</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>QSPI_AutoPollingTypeDef</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_INSTRUCTION_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>InstructionMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>InstructionMode</name></name> <operator>!=</operator> <name>QSPI_INSTRUCTION_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_INSTRUCTION</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>Instruction</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ADDRESS_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name> <operator>!=</operator> <name>QSPI_ADDRESS_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ADDRESS_SIZE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AddressSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ALTERNATE_BYTES_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name> <operator>!=</operator> <name>QSPI_ALTERNATE_BYTES_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ALTERNATE_BYTES_SIZE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AlternateBytesSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DUMMY_CYCLES</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DummyCycles</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DATA_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DataMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DDR_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DdrMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DDR_HHC</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DdrHoldHalfCycle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_SIOO_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>SIOOMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_INTERVAL</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>Interval</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_STATUS_BYTES_SIZE</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>StatusBytesSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_MATCH_MODE</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>MatchMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_AUTOMATIC_STOP</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>AutomaticStop</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_QSPI_ERROR_NONE</name></expr>;</expr_stmt>
    
    <comment type="block">/* Update state */</comment>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_BUSY_AUTO_POLLING</name></expr>;</expr_stmt>

    <comment type="block">/* Wait till BUSY flag reset */</comment>
    <expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Timeout</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>SystemCoreClock</name> <operator>/</operator> <literal type="number">16U</literal> <operator>/</operator> <literal type="number">1000U</literal><operator>)</operator></expr>;</expr_stmt>
    <do>do 
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>count</name><operator>--</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content> 
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_QSPI_STATE_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_TIMEOUT</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block> 
    while <condition>(<expr><operator>(</operator><call><name>__HAL_QSPI_GET_FLAG</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_BUSY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>RESET</name></expr>)</condition>;</do>
    
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Configure QSPI: PSMAR register with the status match value */</comment>
      <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>PSMAR</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>Match</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Configure QSPI: PSMKR register with the status mask value */</comment>
      <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>PSMKR</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>Mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Configure QSPI: PIR register with the interval value */</comment>
      <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>PIR</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>Interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Configure QSPI: CR register with Match mode and Automatic stop mode */</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>QUADSPI_CR_PMM</name> <operator>|</operator> <name>QUADSPI_CR_APMS</name><operator>)</operator></expr></argument>, 
               <argument><expr><operator>(</operator><name><name>cfg</name><operator>-&gt;</operator><name>MatchMode</name></name> <operator>|</operator> <name><name>cfg</name><operator>-&gt;</operator><name>AutomaticStop</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Clear interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_QSPI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_TE</name> <operator>|</operator> <name>QSPI_FLAG_SM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Call the configuration function */</comment>
      <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>NbData</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>StatusBytesSize</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QSPI_Config</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>QSPI_FUNCTIONAL_MODE_AUTO_POLLING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
      <comment type="block">/* Enable the QSPI Transfer Error and status match Interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_QSPI_ENABLE_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><operator>(</operator><name>QSPI_IT_SM</name> <operator>|</operator> <name>QSPI_IT_TE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_BUSY</name></expr>;</expr_stmt>   

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configure the Memory Mapped mode. 
  * @param  hqspi QSPI handle
  * @param  cmd structure that contains the command configuration information.
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_QSPI_MemoryMapped</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>, <parameter><decl><type><name>QSPI_CommandTypeDef</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>QSPI_MemoryMappedTypeDef</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_INSTRUCTION_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>InstructionMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>InstructionMode</name></name> <operator>!=</operator> <name>QSPI_INSTRUCTION_NONE</name></expr>)</condition>
  <block>{<block_content>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_INSTRUCTION</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>Instruction</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ADDRESS_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name> <operator>!=</operator> <name>QSPI_ADDRESS_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ADDRESS_SIZE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AddressSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ALTERNATE_BYTES_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name> <operator>!=</operator> <name>QSPI_ALTERNATE_BYTES_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_ALTERNATE_BYTES_SIZE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AlternateBytesSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DUMMY_CYCLES</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DummyCycles</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DATA_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DataMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DDR_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DdrMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_DDR_HHC</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>DdrHoldHalfCycle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_SIOO_MODE</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>SIOOMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_TIMEOUT_ACTIVATION</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>TimeOutActivation</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_QSPI_ERROR_NONE</name></expr>;</expr_stmt>
    
    <comment type="block">/* Update state */</comment>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_BUSY_MEM_MAPPED</name></expr>;</expr_stmt>
    
    <comment type="block">/* Wait till BUSY flag reset */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>QSPI_WaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_BUSY</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Configure QSPI: CR register with timeout counter enable */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CR_TCEN</name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>TimeOutActivation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>-&gt;</operator><name>TimeOutActivation</name></name> <operator>==</operator> <name>QSPI_TIMEOUT_COUNTER_ENABLE</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_TIMEOUT_PERIOD</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>TimeOutPeriod</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Configure QSPI: LPTR register with the low-power timeout value */</comment>
        <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>LPTR</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>TimeOutPeriod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Clear interrupt */</comment>
        <expr_stmt><expr><call><name>__HAL_QSPI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_TO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Enable the QSPI TimeOut Interrupt */</comment>
        <expr_stmt><expr><call><name>__HAL_QSPI_ENABLE_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_IT_TO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Call the configuration function */</comment>
      <expr_stmt><expr><call><name>QSPI_Config</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_BUSY</name></expr>;</expr_stmt>   
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Transfer Error callbacks
  * @param  hqspi QSPI handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_QSPI_ErrorCallback</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_QSPI_AbortCpltCallback</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_QSPI_CmdCpltCallback</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Rx Transfer completed callbacks.
  * @param  hqspi QSPI handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_QSPI_RxCpltCallback</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hqspi QSPI handle
  * @retval None
  */</comment>
 <function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_QSPI_TxCpltCallback</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hqspi QSPI handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_QSPI_RxHalfCpltCallback</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_QSPI_RxHalfCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hqspi QSPI handle
  * @retval None
  */</comment>
 <function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_QSPI_TxHalfCpltCallback</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_QSPI_TxHalfCpltCallback could be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  FIFO Threshold callbacks
  * @param  hqspi QSPI handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_QSPI_FifoThresholdCallback</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Status Match callbacks
  * @param  hqspi QSPI handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_QSPI_StatusMatchCallback</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Timeout callbacks
  * @param  hqspi QSPI handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_QSPI_TimeOutCallback</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_QSPI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User QSPI Callback
  *         To be used instead of the weak (surcharged) predefined callback
  * @param hqspi : QSPI handle
  * @param CallbackId : ID of the callback to be registered
  *        This parameter can be one of the following values:
  *          @arg @ref HAL_QSPI_ERROR_CB_ID          QSPI Error Callback ID
  *          @arg @ref HAL_QSPI_ABORT_CB_ID          QSPI Abort Callback ID
  *          @arg @ref HAL_QSPI_FIFO_THRESHOLD_CB_ID QSPI FIFO Threshold Callback ID
  *          @arg @ref HAL_QSPI_CMD_CPLT_CB_ID       QSPI Command Complete Callback ID
  *          @arg @ref HAL_QSPI_RX_CPLT_CB_ID        QSPI Rx Complete Callback ID
  *          @arg @ref HAL_QSPI_TX_CPLT_CB_ID        QSPI Tx Complete Callback ID
  *          @arg @ref HAL_QSPI_RX_HALF_CPLT_CB_ID   QSPI Rx Half Complete Callback ID
  *          @arg @ref HAL_QSPI_TX_HALF_CPLT_CB_ID   QSPI Tx Half Complete Callback ID
  *          @arg @ref HAL_QSPI_STATUS_MATCH_CB_ID   QSPI Status Match Callback ID
  *          @arg @ref HAL_QSPI_TIMEOUT_CB_ID        QSPI Timeout Callback ID
  *          @arg @ref HAL_QSPI_MSP_INIT_CB_ID       QSPI MspInit callback ID
  *          @arg @ref HAL_QSPI_MSP_DEINIT_CB_ID     QSPI MspDeInit callback ID
  * @param pCallback : pointer to the Callback function
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_QSPI_RegisterCallback</name> <parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>, <parameter><decl><type><name>HAL_QSPI_CallbackIDTypeDef</name></type> <name>CallbackId</name></decl></parameter>, <parameter><decl><type><name>pQSPI_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackId</name></expr>)</condition>
    <block>{<block_content>
    <case>case  <expr><name>HAL_QSPI_ERROR_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_ABORT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_FIFO_THRESHOLD_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>FifoThresholdCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_CMD_CPLT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>CmdCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_RX_CPLT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_TX_CPLT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_RX_HALF_CPLT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_TX_HALF_CPLT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_STATUS_MATCH_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>StatusMatchCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_TIMEOUT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TimeOutCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_MSP_INIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_MSP_DEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* Update the error code */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackId</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_QSPI_MSP_INIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_MSP_DEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* Update the error code */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister a User QSPI Callback
  *         QSPI Callback is redirected to the weak (surcharged) predefined callback
  * @param hqspi : QSPI handle
  * @param CallbackId : ID of the callback to be unregistered
  *        This parameter can be one of the following values:
  *          @arg @ref HAL_QSPI_ERROR_CB_ID          QSPI Error Callback ID
  *          @arg @ref HAL_QSPI_ABORT_CB_ID          QSPI Abort Callback ID
  *          @arg @ref HAL_QSPI_FIFO_THRESHOLD_CB_ID QSPI FIFO Threshold Callback ID
  *          @arg @ref HAL_QSPI_CMD_CPLT_CB_ID       QSPI Command Complete Callback ID
  *          @arg @ref HAL_QSPI_RX_CPLT_CB_ID        QSPI Rx Complete Callback ID
  *          @arg @ref HAL_QSPI_TX_CPLT_CB_ID        QSPI Tx Complete Callback ID
  *          @arg @ref HAL_QSPI_RX_HALF_CPLT_CB_ID   QSPI Rx Half Complete Callback ID
  *          @arg @ref HAL_QSPI_TX_HALF_CPLT_CB_ID   QSPI Tx Half Complete Callback ID
  *          @arg @ref HAL_QSPI_STATUS_MATCH_CB_ID   QSPI Status Match Callback ID
  *          @arg @ref HAL_QSPI_TIMEOUT_CB_ID        QSPI Timeout Callback ID
  *          @arg @ref HAL_QSPI_MSP_INIT_CB_ID       QSPI MspInit callback ID
  *          @arg @ref HAL_QSPI_MSP_DEINIT_CB_ID     QSPI MspDeInit callback ID
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_QSPI_UnRegisterCallback</name> <parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>, <parameter><decl><type><name>HAL_QSPI_CallbackIDTypeDef</name></type> <name>CallbackId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackId</name></expr>)</condition>
    <block>{<block_content>
    <case>case  <expr><name>HAL_QSPI_ERROR_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>HAL_QSPI_ErrorCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_ABORT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name> <operator>=</operator> <name>HAL_QSPI_AbortCpltCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_FIFO_THRESHOLD_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>FifoThresholdCallback</name></name> <operator>=</operator> <name>HAL_QSPI_FifoThresholdCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_CMD_CPLT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>CmdCpltCallback</name></name> <operator>=</operator> <name>HAL_QSPI_CmdCpltCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_RX_CPLT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxCpltCallback</name></name> <operator>=</operator> <name>HAL_QSPI_RxCpltCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_TX_CPLT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxCpltCallback</name></name> <operator>=</operator> <name>HAL_QSPI_TxCpltCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_RX_HALF_CPLT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_QSPI_RxHalfCpltCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_TX_HALF_CPLT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_QSPI_TxHalfCpltCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_STATUS_MATCH_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>StatusMatchCallback</name></name> <operator>=</operator> <name>HAL_QSPI_StatusMatchCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_TIMEOUT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TimeOutCallback</name></name> <operator>=</operator> <name>HAL_QSPI_TimeOutCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_MSP_INIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_QSPI_MspInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_MSP_DEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_QSPI_MspDeInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* Update the error code */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackId</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_QSPI_MSP_INIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_QSPI_MspInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_QSPI_MSP_DEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_QSPI_MspDeInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* Update the error code */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup QSPI_Exported_Functions_Group3 Peripheral Control and State functions 
  *  @brief   QSPI control and State functions 
  *
@verbatim   
 ===============================================================================
                  ##### Peripheral Control and State functions #####
 ===============================================================================  
    [..]
    This subsection provides a set of functions allowing to :
      (+) Check in run-time the state of the driver. 
      (+) Check the error code set during last operation.
      (+) Abort any operation.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Return the QSPI handle state.
  * @param  hqspi QSPI handle
  * @retval HAL state
  */</comment>
<function><type><name>HAL_QSPI_StateTypeDef</name></type> <name>HAL_QSPI_GetState</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Return QSPI handle state */</comment>
  <return>return <expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
* @brief  Return the QSPI error code
* @param  hqspi QSPI handle
* @retval QSPI Error Code
*/</comment>
<function><type><name>uint32_t</name></type> <name>HAL_QSPI_GetError</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
* @brief  Abort the current transmission
* @param  hqspi QSPI handle
* @retval HAL status
*/</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_QSPI_Abort</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check if the state is in one of the busy states */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>&amp;</operator> <literal type="number">0x2U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>QUADSPI_CR_DMAEN</name><operator>)</operator><operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */</comment>
      <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CR_DMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Abort DMA channel */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_DMA</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>  
    
    <comment type="block">/* Configure QSPI: CR register with Abort request */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CR_ABORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Wait until TC flag is set to go back in idle state */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>QSPI_WaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_TC</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>__HAL_QSPI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Wait until BUSY flag is reset */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>QSPI_WaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_BUSY</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Update state */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_READY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi QSPI handle
* @retval HAL status
*/</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_QSPI_Abort_IT</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check if the state is in one of the busy states */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>&amp;</operator> <literal type="number">0x2U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Update QSPI state */</comment>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_ABORT</name></expr>;</expr_stmt>   
    
    <comment type="block">/* Disable all interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_QSPI_DISABLE_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><operator>(</operator><name>QSPI_IT_TO</name> <operator>|</operator> <name>QSPI_IT_SM</name> <operator>|</operator> <name>QSPI_IT_FT</name> <operator>|</operator> <name>QSPI_IT_TC</name> <operator>|</operator> <name>QSPI_IT_TE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>QUADSPI_CR_DMAEN</name><operator>)</operator><operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */</comment>
      <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CR_DMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Abort DMA channel */</comment>
      <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>QSPI_DMAAbortCplt</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>hdma</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Change state of QSPI */</comment>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_READY</name></expr>;</expr_stmt>
        
        <comment type="block">/* Abort Complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_QSPI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hqspi</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_QSPI_AbortCpltCallback</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Clear interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_QSPI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Enable the QSPI Transfer Complete Interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_QSPI_ENABLE_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_IT_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Configure QSPI: CR register with Abort request */</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CR_ABORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** @brief Set QSPI timeout
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_QSPI_SetTimeout</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Timeout</name></name> <operator>=</operator> <name>Timeout</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** @brief Set QSPI Fifo threshold.
  * @param  hqspi QSPI handle.
  * @param  Threshold Threshold of the Fifo (value between 1 and 16).
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_QSPI_SetFifoThreshold</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Threshold</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Synchronize init structure with new FIFO threshold value */</comment>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FifoThreshold</name></name> <operator>=</operator> <name>Threshold</name></expr>;</expr_stmt>
    
    <comment type="block">/* Configure QSPI FIFO Threshold */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CR_FTHRES</name></expr></argument>, 
               <argument><expr><operator>(</operator><operator>(</operator><name><name>hqspi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FifoThreshold</name></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>QUADSPI_CR_FTHRES_Pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_BUSY</name></expr>;</expr_stmt>   
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** @brief Get QSPI Fifo threshold.
  * @param  hqspi QSPI handle.
  * @retval Fifo threshold (value between 1 and 16)
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_QSPI_GetFifoThreshold</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>(</operator><operator>(</operator><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CR_FTHRES</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>QUADSPI_CR_FTHRES_Pos</name><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>
 
<comment type="block" format="doxygen">/**
  * @brief  DMA QSPI receive process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>QSPI_DMARxCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>  
<block>{<block_content>
  <decl_stmt><decl><type><name>QSPI_HandleTypeDef</name><modifier>*</modifier></type> <name>hqspi</name> <init>= <expr><operator>(</operator> <name>QSPI_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator> <operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Enable the QSPI transfer complete Interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_QSPI_ENABLE_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_IT_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA QSPI transmit process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>QSPI_DMATxCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>     
<block>{<block_content>
  <decl_stmt><decl><type><name>QSPI_HandleTypeDef</name><modifier>*</modifier></type> <name>hqspi</name> <init>= <expr><operator>(</operator> <name>QSPI_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator> <operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Enable the QSPI transfer complete Interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_QSPI_ENABLE_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_IT_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA QSPI receive process half complete callback 
  * @param  hdma  DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>QSPI_DMARxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>QSPI_HandleTypeDef</name><modifier>*</modifier></type> <name>hqspi</name> <init>= <expr><operator>(</operator><name>QSPI_HandleTypeDef</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_QSPI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hqspi</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_QSPI_RxHalfCpltCallback</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA QSPI transmit process half complete callback 
  * @param  hdma  DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>QSPI_DMATxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>QSPI_HandleTypeDef</name><modifier>*</modifier></type> <name>hqspi</name> <init>= <expr><operator>(</operator><name>QSPI_HandleTypeDef</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_QSPI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hqspi</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_QSPI_TxHalfCpltCallback</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA QSPI communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>QSPI_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>   
<block>{<block_content>
  <decl_stmt><decl><type><name>QSPI_HandleTypeDef</name><modifier>*</modifier></type> <name>hqspi</name> <init>= <expr><operator>(</operator> <name>QSPI_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator> <operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* if DMA error is FIFO error ignore it */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_GetError</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_DMA_ERROR_FE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name>   <operator>|=</operator> <name>HAL_QSPI_ERROR_DMA</name></expr>;</expr_stmt>
    
    <comment type="block">/* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CR_DMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Abort the QSPI */</comment>
    <expr_stmt><expr><call><name>HAL_QSPI_Abort_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>QSPI_DMAAbortCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>   
<block>{<block_content>
  <decl_stmt><decl><type><name>QSPI_HandleTypeDef</name><modifier>*</modifier></type> <name>hqspi</name> <init>= <expr><operator>(</operator> <name>QSPI_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator> <operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_QSPI_STATE_ABORT</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* DMA Abort called by QSPI abort */</comment>
    <comment type="block">/* Clear interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_QSPI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_FLAG_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Enable the QSPI Transfer Complete Interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_QSPI_ENABLE_IT</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>QSPI_IT_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Configure QSPI: CR register with Abort request */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>QUADSPI_CR_ABORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* DMA Abort called due to a transfer error interrupt */</comment>
    <comment type="block">/* Change state of QSPI */</comment>
    <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_QSPI_STATE_READY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Error callback */</comment>
    <expr_stmt><expr><call><name>HAL_QSPI_ErrorCallback</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @brief  Wait for a flag state until timeout.
  * @param  hqspi QSPI handle
  * @param  Flag Flag checked
  * @param  State Value of the flag expected
  * @param  Timeout Duration of the time out
  * @param  tickstart tick start value
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>QSPI_WaitFlagStateUntilTimeout</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Flag</name></decl></parameter>, 
                                                        <parameter><decl><type><name>FlagStatus</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Wait until flag is in expected state */</comment>    
  <while>while<condition>(<expr><operator>(</operator><name>FlagStatus</name><operator>)</operator><operator>(</operator><call><name>__HAL_QSPI_GET_FLAG</name><argument_list>(<argument><expr><name>hqspi</name></expr></argument>, <argument><expr><name>Flag</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>State</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if <condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_QSPI_STATE_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hqspi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_QSPI_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configure the communication registers.
  * @param  hqspi QSPI handle
  * @param  cmd structure that contains the command configuration information
  * @param  FunctionalMode functional mode to configured
  *           This parameter can be one of the following values:
  *            @arg QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE: Indirect write mode
  *            @arg QSPI_FUNCTIONAL_MODE_INDIRECT_READ: Indirect read mode
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>QSPI_Config</name><parameter_list>(<parameter><decl><type><name>QSPI_HandleTypeDef</name> <modifier>*</modifier></type><name>hqspi</name></decl></parameter>, <parameter><decl><type><name>QSPI_CommandTypeDef</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>FunctionalMode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_QSPI_FUNCTIONAL_MODE</name><argument_list>(<argument><expr><name>FunctionalMode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>DataMode</name></name> <operator>!=</operator> <name>QSPI_DATA_NONE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>FunctionalMode</name> <operator>!=</operator> <name>QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Configure QSPI: DLR register with the number of data to read or write */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DLR</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>NbData</name></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
      
  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>InstructionMode</name></name> <operator>!=</operator> <name>QSPI_INSTRUCTION_NONE</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name> <operator>!=</operator> <name>QSPI_ALTERNATE_BYTES_NONE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Configure QSPI: ABR register with alternate bytes value */</comment>
      <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ABR</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AlternateBytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name> <operator>!=</operator> <name>QSPI_ADDRESS_NONE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/*---- Command with instruction, address and alternate bytes ----*/</comment>
        <comment type="block">/* Configure QSPI: CCR register with all communications parameters */</comment>
        <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>DdrMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>DdrHoldHalfCycle</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>SIOOMode</name></name> <operator>|</operator>
                                         <name><name>cmd</name><operator>-&gt;</operator><name>DataMode</name></name> <operator>|</operator> <operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>DummyCycles</name></name> <operator>&lt;&lt;</operator> <literal type="number">18U</literal><operator>)</operator> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>AlternateBytesSize</name></name> <operator>|</operator>
                                         <name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>AddressSize</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name> <operator>|</operator>
                                         <name><name>cmd</name><operator>-&gt;</operator><name>InstructionMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>Instruction</name></name> <operator>|</operator> <name>FunctionalMode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>FunctionalMode</name> <operator>!=</operator> <name>QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Configure QSPI: AR register with address value */</comment>
          <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>AR</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>Address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/*---- Command with instruction and alternate bytes ----*/</comment>
        <comment type="block">/* Configure QSPI: CCR register with all communications parameters */</comment>
        <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>DdrMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>DdrHoldHalfCycle</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>SIOOMode</name></name> <operator>|</operator>
                                         <name><name>cmd</name><operator>-&gt;</operator><name>DataMode</name></name> <operator>|</operator> <operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>DummyCycles</name></name> <operator>&lt;&lt;</operator> <literal type="number">18U</literal><operator>)</operator> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>AlternateBytesSize</name></name> <operator>|</operator>
                                         <name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>InstructionMode</name></name> <operator>|</operator> 
                                         <name><name>cmd</name><operator>-&gt;</operator><name>Instruction</name></name> <operator>|</operator> <name>FunctionalMode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name> <operator>!=</operator> <name>QSPI_ADDRESS_NONE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/*---- Command with instruction and address ----*/</comment>
        <comment type="block">/* Configure QSPI: CCR register with all communications parameters */</comment>
        <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>DdrMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>DdrHoldHalfCycle</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>SIOOMode</name></name> <operator>|</operator>
                                         <name><name>cmd</name><operator>-&gt;</operator><name>DataMode</name></name> <operator>|</operator> <operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>DummyCycles</name></name> <operator>&lt;&lt;</operator> <literal type="number">18U</literal><operator>)</operator> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name> <operator>|</operator> 
                                         <name><name>cmd</name><operator>-&gt;</operator><name>AddressSize</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>InstructionMode</name></name> <operator>|</operator> 
                                         <name><name>cmd</name><operator>-&gt;</operator><name>Instruction</name></name> <operator>|</operator> <name>FunctionalMode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>FunctionalMode</name> <operator>!=</operator> <name>QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Configure QSPI: AR register with address value */</comment>
          <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>AR</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>Address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/*---- Command with only instruction ----*/</comment>
        <comment type="block">/* Configure QSPI: CCR register with all communications parameters */</comment>
        <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>DdrMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>DdrHoldHalfCycle</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>SIOOMode</name></name> <operator>|</operator>
                                         <name><name>cmd</name><operator>-&gt;</operator><name>DataMode</name></name> <operator>|</operator> <operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>DummyCycles</name></name> <operator>&lt;&lt;</operator> <literal type="number">18U</literal><operator>)</operator> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name> <operator>|</operator> 
                                         <name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>InstructionMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>Instruction</name></name>  <operator>|</operator> 
                                         <name>FunctionalMode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name> <operator>!=</operator> <name>QSPI_ALTERNATE_BYTES_NONE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Configure QSPI: ABR register with alternate bytes value */</comment>
      <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ABR</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>AlternateBytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name> <operator>!=</operator> <name>QSPI_ADDRESS_NONE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/*---- Command with address and alternate bytes ----*/</comment>
        <comment type="block">/* Configure QSPI: CCR register with all communications parameters */</comment>
        <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>DdrMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>DdrHoldHalfCycle</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>SIOOMode</name></name> <operator>|</operator>
                                         <name><name>cmd</name><operator>-&gt;</operator><name>DataMode</name></name> <operator>|</operator> <operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>DummyCycles</name></name> <operator>&lt;&lt;</operator> <literal type="number">18U</literal><operator>)</operator> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>AlternateBytesSize</name></name> <operator>|</operator>
                                         <name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>AddressSize</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name> <operator>|</operator>
                                         <name><name>cmd</name><operator>-&gt;</operator><name>InstructionMode</name></name> <operator>|</operator> <name>FunctionalMode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>FunctionalMode</name> <operator>!=</operator> <name>QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Configure QSPI: AR register with address value */</comment>
          <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>AR</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>Address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/*---- Command with only alternate bytes ----*/</comment>
        <comment type="block">/* Configure QSPI: CCR register with all communications parameters */</comment>
        <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>DdrMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>DdrHoldHalfCycle</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>SIOOMode</name></name> <operator>|</operator>
                                         <name><name>cmd</name><operator>-&gt;</operator><name>DataMode</name></name> <operator>|</operator> <operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>DummyCycles</name></name> <operator>&lt;&lt;</operator> <literal type="number">18U</literal><operator>)</operator> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>AlternateBytesSize</name></name> <operator>|</operator>
                                         <name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>InstructionMode</name></name> <operator>|</operator> 
                                         <name>FunctionalMode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name> <operator>!=</operator> <name>QSPI_ADDRESS_NONE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/*---- Command with only address ----*/</comment>
        <comment type="block">/* Configure QSPI: CCR register with all communications parameters */</comment>
        <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>DdrMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>DdrHoldHalfCycle</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>SIOOMode</name></name> <operator>|</operator>
                                         <name><name>cmd</name><operator>-&gt;</operator><name>DataMode</name></name> <operator>|</operator> <operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>DummyCycles</name></name> <operator>&lt;&lt;</operator> <literal type="number">18U</literal><operator>)</operator> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name> <operator>|</operator> 
                                         <name><name>cmd</name><operator>-&gt;</operator><name>AddressSize</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>InstructionMode</name></name> <operator>|</operator> 
                                         <name>FunctionalMode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>FunctionalMode</name> <operator>!=</operator> <name>QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Configure QSPI: AR register with address value */</comment>
          <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>AR</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>Address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/*---- Command with only data phase ----*/</comment>
        <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>DataMode</name></name> <operator>!=</operator> <name>QSPI_DATA_NONE</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Configure QSPI: CCR register with all communications parameters */</comment>
          <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hqspi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>DdrMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>DdrHoldHalfCycle</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>SIOOMode</name></name> <operator>|</operator>
                                           <name><name>cmd</name><operator>-&gt;</operator><name>DataMode</name></name> <operator>|</operator> <operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>DummyCycles</name></name> <operator>&lt;&lt;</operator> <literal type="number">18U</literal><operator>)</operator> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>AlternateByteMode</name></name> <operator>|</operator> 
                                           <name><name>cmd</name><operator>-&gt;</operator><name>AddressMode</name></name> <operator>|</operator> <name><name>cmd</name><operator>-&gt;</operator><name>InstructionMode</name></name> <operator>|</operator> <name>FunctionalMode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Vx || STM32F412Rx 
          STM32F413xx || STM32F423xx */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_QSPI_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
