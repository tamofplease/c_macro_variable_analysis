<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_tim_ex.c
  * @author  MCD Application Team
  * @brief   TIM HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the Timer Extended peripheral:
  *           + Time Hall Sensor Interface Initialization
  *           + Time Hall Sensor Interface Start
  *           + Time Complementary signal break and dead time configuration
  *           + Time Master and Slave synchronization configuration
  *           + Timer remapping capabilities configuration
  @verbatim
  ==============================================================================
                      ##### TIMER Extended features #####
  ==============================================================================
  [..]
    The Timer Extended features include:
    (#) Complementary outputs with programmable dead-time for :
        (++) Output Compare
        (++) PWM generation (Edge and Center-aligned Mode)
        (++) One-pulse mode output
    (#) Synchronization circuit to control the timer with external signals and to
        interconnect several timers together.
    (#) Break input to put the timer output signals in reset state or in a known state.
    (#) Supports incremental (quadrature) encoder and hall-sensor circuitry for
        positioning purposes

            ##### How to use this driver #####
  ==============================================================================
    [..]
     (#) Initialize the TIM low level resources by implementing the following functions
         depending on the selected feature:
           (++) Hall Sensor output : HAL_TIMEx_HallSensor_MspInit()

     (#) Initialize the TIM low level resources :
        (##) Enable the TIM interface clock using __HAL_RCC_TIMx_CLK_ENABLE();
        (##) TIM pins configuration
            (+++) Enable the clock for the TIM GPIOs using the following function:
              __HAL_RCC_GPIOx_CLK_ENABLE();
            (+++) Configure these TIM pins in Alternate function mode using HAL_GPIO_Init();

     (#) The external Clock can be configured, if needed (the default clock is the
         internal clock from the APBx), using the following function:
         HAL_TIM_ConfigClockSource, the clock configuration should be done before
         any start function.

     (#) Configure the TIM in the desired functioning mode using one of the
         initialization function of this driver:
          (++) HAL_TIMEx_HallSensor_Init() and HAL_TIMEx_ConfigCommutEvent(): to use the
               Timer Hall Sensor Interface and the commutation event with the corresponding
               Interrupt and DMA request if needed (Note that One Timer is used to interface
               with the Hall sensor Interface and another Timer should be used to use
               the commutation event).

     (#) Activate the TIM peripheral using one of the start functions:
           (++) Complementary Output Compare : HAL_TIMEx_OCN_Start(), HAL_TIMEx_OCN_Start_DMA(), HAL_TIMEx_OC_Start_IT()
           (++) Complementary PWM generation : HAL_TIMEx_PWMN_Start(), HAL_TIMEx_PWMN_Start_DMA(), HAL_TIMEx_PWMN_Start_IT()
           (++) Complementary One-pulse mode output : HAL_TIMEx_OnePulseN_Start(), HAL_TIMEx_OnePulseN_Start_IT()
           (++) Hall Sensor output : HAL_TIMEx_HallSensor_Start(), HAL_TIMEx_HallSensor_Start_DMA(), HAL_TIMEx_HallSensor_Start_IT().

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
*/</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup TIMEx TIMEx
  * @brief TIM Extended HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_TIM_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TIM_CCxNChannelCmd</name><parameter_list>(<parameter><decl><type><name>TIM_TypeDef</name> <modifier>*</modifier></type><name>TIMx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Channel</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ChannelNState</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup TIMEx_Exported_Functions TIM Extended Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup TIMEx_Exported_Functions_Group1 Extended Timer Hall Sensor functions
  * @brief    Timer Hall Sensor functions
  *
@verbatim
  ==============================================================================
                      ##### Timer Hall Sensor functions #####
  ==============================================================================
  [..]
    This section provides functions allowing to:
    (+) Initialize and configure TIM HAL Sensor.
    (+) De-initialize TIM HAL Sensor.
    (+) Start the Hall Sensor Interface.
    (+) Stop the Hall Sensor Interface.
    (+) Start the Hall Sensor Interface and enable interrupts.
    (+) Stop the Hall Sensor Interface and disable interrupts.
    (+) Start the Hall Sensor Interface and enable DMA transfers.
    (+) Stop the Hall Sensor Interface and disable DMA transfers.

@endverbatim
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @brief  Initializes the TIM Hall Sensor Interface and initialize the associated handle.
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_HallSensor_Init</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>TIM_HallSensor_InitTypeDef</name> <modifier>*</modifier></type><name>sConfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>TIM_OC_InitTypeDef</name></type> <name>OC_Config</name></decl>;</decl_stmt>

  <comment type="block">/* Check the TIM handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>htim</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_COUNTER_MODE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>CounterMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_CLOCKDIVISION_DIV</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockDivision</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_AUTORELOAD_PRELOAD</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AutoReloadPreload</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_IC_POLARITY</name><argument_list>(<argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>IC1Polarity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_IC_PRESCALER</name><argument_list>(<argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>IC1Prescaler</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_IC_FILTER</name><argument_list>(<argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>IC1Filter</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_TIM_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_TIM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/* Reset interrupt callbacks to legacy week callbacks */</comment>
    <expr_stmt><expr><call><name>TIM_ResetCallback</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>htim</name><operator>-&gt;</operator><name>HallSensor_MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>HallSensor_MspInitCallback</name></name> <operator>=</operator> <name>HAL_TIMEx_HallSensor_MspInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Init the low level hardware : GPIO, CLOCK, NVIC */</comment>
    <expr_stmt><expr><call><name><name>htim</name><operator>-&gt;</operator><name>HallSensor_MspInitCallback</name></name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */</comment>
    <expr_stmt><expr><call><name>HAL_TIMEx_HallSensor_MspInit</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_TIM_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Set the TIM state */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_TIM_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Configure the Time base in the Encoder Mode */</comment>
  <expr_stmt><expr><call><name>TIM_Base_SetConfig</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>htim</name><operator>-&gt;</operator><name>Init</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */</comment>
  <expr_stmt><expr><call><name>TIM_TI1_SetConfig</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>IC1Polarity</name></name></expr></argument>, <argument><expr><name>TIM_ICSELECTION_TRC</name></expr></argument>, <argument><expr><name><name>sConfig</name><operator>-&gt;</operator><name>IC1Filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Reset the IC1PSC Bits */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCMR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TIM_CCMR1_IC1PSC</name></expr>;</expr_stmt>
  <comment type="block">/* Set the IC1PSC value */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCMR1</name></name> <operator>|=</operator> <name><name>sConfig</name><operator>-&gt;</operator><name>IC1Prescaler</name></name></expr>;</expr_stmt>

  <comment type="block">/* Enable the Hall sensor interface (XOR function of the three inputs) */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>TIM_CR2_TI1S</name></expr>;</expr_stmt>

  <comment type="block">/* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TIM_SMCR_TS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>|=</operator> <name>TIM_TS_TI1F_ED</name></expr>;</expr_stmt>

  <comment type="block">/* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TIM_SMCR_SMS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>|=</operator> <name>TIM_SLAVEMODE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/</comment>
  <expr_stmt><expr><name><name>OC_Config</name><operator>.</operator><name>OCFastMode</name></name> <operator>=</operator> <name>TIM_OCFAST_DISABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>OC_Config</name><operator>.</operator><name>OCIdleState</name></name> <operator>=</operator> <name>TIM_OCIDLESTATE_RESET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>OC_Config</name><operator>.</operator><name>OCMode</name></name> <operator>=</operator> <name>TIM_OCMODE_PWM2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>OC_Config</name><operator>.</operator><name>OCNIdleState</name></name> <operator>=</operator> <name>TIM_OCNIDLESTATE_RESET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>OC_Config</name><operator>.</operator><name>OCNPolarity</name></name> <operator>=</operator> <name>TIM_OCNPOLARITY_HIGH</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>OC_Config</name><operator>.</operator><name>OCPolarity</name></name> <operator>=</operator> <name>TIM_OCPOLARITY_HIGH</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>OC_Config</name><operator>.</operator><name>Pulse</name></name> <operator>=</operator> <name><name>sConfig</name><operator>-&gt;</operator><name>Commutation_Delay</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>TIM_OC2_SetConfig</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>OC_Config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TIM_CR2_MMS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>TIM_TRGO_OC2REF</name></expr>;</expr_stmt>

  <comment type="block">/* Initialize the TIM state*/</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_TIM_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitializes the TIM Hall Sensor interface
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_HallSensor_DeInit</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_TIM_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the TIM Peripheral Clock */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_TIM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>htim</name><operator>-&gt;</operator><name>HallSensor_MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>HallSensor_MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_TIMEx_HallSensor_MspDeInit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name><name>htim</name><operator>-&gt;</operator><name>HallSensor_MspDeInitCallback</name></name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* DeInit the low level hardware: GPIO, CLOCK, NVIC */</comment>
  <expr_stmt><expr><call><name>HAL_TIMEx_HallSensor_MspDeInit</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_TIM_REGISTER_CALLBACKS */</comment>

  <comment type="block">/* Change TIM state */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_TIM_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_TIMEx_HallSensor_MspInit</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitializes TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_TIMEx_HallSensor_MspDeInit</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_HallSensor_Start</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpsmcr</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */</comment>
  <expr_stmt><expr><call><name>TIM_CCxChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>TIM_CHANNEL_1</name></expr></argument>, <argument><expr><name>TIM_CCx_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */</comment>
  <expr_stmt><expr><name>tmpsmcr</name> <operator>=</operator> <name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>&amp;</operator> <name>TIM_SMCR_SMS</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_TIM_SLAVEMODE_TRIGGER_ENABLED</name><argument_list>(<argument><expr><name>tmpsmcr</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_TIM_ENABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_HallSensor_Stop</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Input Capture channels 1, 2 and 3
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */</comment>
  <expr_stmt><expr><call><name>TIM_CCxChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>TIM_CHANNEL_1</name></expr></argument>, <argument><expr><name>TIM_CCx_DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_HallSensor_Start_IT</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpsmcr</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the capture compare Interrupts 1 event */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_CC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */</comment>
  <expr_stmt><expr><call><name>TIM_CCxChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>TIM_CHANNEL_1</name></expr></argument>, <argument><expr><name>TIM_CCx_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */</comment>
  <expr_stmt><expr><name>tmpsmcr</name> <operator>=</operator> <name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>&amp;</operator> <name>TIM_SMCR_SMS</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_TIM_SLAVEMODE_TRIGGER_ENABLED</name><argument_list>(<argument><expr><name>tmpsmcr</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_TIM_ENABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Stops the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_HallSensor_Stop_IT</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */</comment>
  <expr_stmt><expr><call><name>TIM_CCxChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>TIM_CHANNEL_1</name></expr></argument>, <argument><expr><name>TIM_CCx_DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the capture compare Interrupts event */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_CC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Starts the TIM Hall Sensor Interface in DMA mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_HallSensor_Start_DMA</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpsmcr</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_TIM_STATE_BUSY</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_TIM_STATE_READY</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>Length</name> <operator>&gt;</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_TIM_STATE_BUSY</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* nothing to do */</comment>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */</comment>
  <expr_stmt><expr><call><name>TIM_CCxChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>TIM_CHANNEL_1</name></expr></argument>, <argument><expr><name>TIM_CCx_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the DMA Input Capture 1 Callbacks */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC1</name></expr>]</index></name><operator>-&gt;</operator><name>XferCpltCallback</name> <operator>=</operator> <name>TIM_DMACaptureCplt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC1</name></expr>]</index></name><operator>-&gt;</operator><name>XferHalfCpltCallback</name> <operator>=</operator> <name>TIM_DMACaptureHalfCplt</name></expr>;</expr_stmt>
  <comment type="block">/* Set the DMA error callback */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC1</name></expr>]</index></name><operator>-&gt;</operator><name>XferErrorCallback</name> <operator>=</operator> <name>TIM_DMAError</name></expr> ;</expr_stmt>

  <comment type="block">/* Enable the DMA stream for Capture 1*/</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><name>Length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Enable the capture compare 1 Interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_DMA</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_DMA_CC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */</comment>
  <expr_stmt><expr><name>tmpsmcr</name> <operator>=</operator> <name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>&amp;</operator> <name>TIM_SMCR_SMS</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_TIM_SLAVEMODE_TRIGGER_ENABLED</name><argument_list>(<argument><expr><name>tmpsmcr</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_TIM_ENABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Stops the TIM Hall Sensor Interface in DMA mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_HallSensor_Stop_DMA</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */</comment>
  <expr_stmt><expr><call><name>TIM_CCxChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>TIM_CHANNEL_1</name></expr></argument>, <argument><expr><name>TIM_CCx_DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="block">/* Disable the capture compare Interrupts 1 event */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_DMA</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_DMA_CC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Disable the Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup TIMEx_Exported_Functions_Group2 Extended Timer Complementary Output Compare functions
  *  @brief   Timer Complementary Output Compare functions
  *
@verbatim
  ==============================================================================
              ##### Timer Complementary Output Compare functions #####
  ==============================================================================
  [..]
    This section provides functions allowing to:
    (+) Start the Complementary Output Compare/PWM.
    (+) Stop the Complementary Output Compare/PWM.
    (+) Start the Complementary Output Compare/PWM and enable interrupts.
    (+) Stop the Complementary Output Compare/PWM and disable interrupts.
    (+) Start the Complementary Output Compare/PWM and enable DMA transfers.
    (+) Stop the Complementary Output Compare/PWM and disable DMA transfers.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Starts the TIM Output Compare signal generation on the complementary
  *         output.
  * @param  htim TIM Output Compare handle
  * @param  Channel TIM Channel to be enabled
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_OCN_Start</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpsmcr</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_CCXN_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Capture compare channel N */</comment>
  <expr_stmt><expr><call><name>TIM_CCxNChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>, <argument><expr><name>TIM_CCxN_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Main Output */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_MOE_ENABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */</comment>
  <expr_stmt><expr><name>tmpsmcr</name> <operator>=</operator> <name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>&amp;</operator> <name>TIM_SMCR_SMS</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_TIM_SLAVEMODE_TRIGGER_ENABLED</name><argument_list>(<argument><expr><name>tmpsmcr</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_TIM_ENABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Stops the TIM Output Compare signal generation on the complementary
  *         output.
  * @param  htim TIM handle
  * @param  Channel TIM Channel to be disabled
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_OCN_Stop</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_CCXN_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Capture compare channel N */</comment>
  <expr_stmt><expr><call><name>TIM_CCxNChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>, <argument><expr><name>TIM_CCxN_DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Main Output */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_MOE_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Starts the TIM Output Compare signal generation in interrupt mode
  *         on the complementary output.
  * @param  htim TIM OC handle
  * @param  Channel TIM Channel to be enabled
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_OCN_Start_IT</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpsmcr</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_CCXN_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>Channel</name></expr>)</condition>
  <block>{<block_content>
    <case>case <expr><name>TIM_CHANNEL_1</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Enable the TIM Output Compare interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_CC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TIM_CHANNEL_2</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Enable the TIM Output Compare interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_CC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TIM_CHANNEL_3</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Enable the TIM Output Compare interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_CC3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>


    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <comment type="block">/* Enable the TIM Break interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_BREAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Capture compare channel N */</comment>
  <expr_stmt><expr><call><name>TIM_CCxNChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>, <argument><expr><name>TIM_CCxN_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Main Output */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_MOE_ENABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */</comment>
  <expr_stmt><expr><name>tmpsmcr</name> <operator>=</operator> <name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>&amp;</operator> <name>TIM_SMCR_SMS</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_TIM_SLAVEMODE_TRIGGER_ENABLED</name><argument_list>(<argument><expr><name>tmpsmcr</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_TIM_ENABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Stops the TIM Output Compare signal generation in interrupt mode
  *         on the complementary output.
  * @param  htim TIM Output Compare handle
  * @param  Channel TIM Channel to be disabled
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_OCN_Stop_IT</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpccer</name></decl>;</decl_stmt>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_CCXN_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>Channel</name></expr>)</condition>
  <block>{<block_content>
    <case>case <expr><name>TIM_CHANNEL_1</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Disable the TIM Output Compare interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_CC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TIM_CHANNEL_2</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Disable the TIM Output Compare interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_CC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TIM_CHANNEL_3</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Disable the TIM Output Compare interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_CC3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <comment type="block">/* Disable the Capture compare channel N */</comment>
  <expr_stmt><expr><call><name>TIM_CCxNChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>, <argument><expr><name>TIM_CCxN_DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the TIM Break interrupt (only if no more channel is active) */</comment>
  <expr_stmt><expr><name>tmpccer</name> <operator>=</operator> <name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCER</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpccer</name> <operator>&amp;</operator> <operator>(</operator><name>TIM_CCER_CC1NE</name> <operator>|</operator> <name>TIM_CCER_CC2NE</name> <operator>|</operator> <name>TIM_CCER_CC3NE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_BREAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Disable the Main Output */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_MOE_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Starts the TIM Output Compare signal generation in DMA mode
  *         on the complementary output.
  * @param  htim TIM Output Compare handle
  * @param  Channel TIM Channel to be enabled
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_OCN_Start_DMA</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Channel</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpsmcr</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_CCXN_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_TIM_STATE_BUSY</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_TIM_STATE_READY</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>Length</name> <operator>&gt;</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_TIM_STATE_BUSY</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* nothing to do  */</comment>
  </block_content>}</block></else></if_stmt>

  <switch>switch <condition>(<expr><name>Channel</name></expr>)</condition>
  <block>{<block_content>
    <case>case <expr><name>TIM_CHANNEL_1</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Set the DMA compare callbacks */</comment>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC1</name></expr>]</index></name><operator>-&gt;</operator><name>XferCpltCallback</name> <operator>=</operator> <name>TIM_DMADelayPulseCplt</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC1</name></expr>]</index></name><operator>-&gt;</operator><name>XferHalfCpltCallback</name> <operator>=</operator> <name>TIM_DMADelayPulseHalfCplt</name></expr>;</expr_stmt>

      <comment type="block">/* Set the DMA error callback */</comment>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC1</name></expr>]</index></name><operator>-&gt;</operator><name>XferErrorCallback</name> <operator>=</operator> <name>TIM_DMAError</name></expr> ;</expr_stmt>

      <comment type="block">/* Enable the DMA stream */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR1</name></name></expr></argument>, <argument><expr><name>Length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* Enable the TIM Output Compare DMA request */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_DMA</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_DMA_CC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TIM_CHANNEL_2</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Set the DMA compare callbacks */</comment>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC2</name></expr>]</index></name><operator>-&gt;</operator><name>XferCpltCallback</name> <operator>=</operator> <name>TIM_DMADelayPulseCplt</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC2</name></expr>]</index></name><operator>-&gt;</operator><name>XferHalfCpltCallback</name> <operator>=</operator> <name>TIM_DMADelayPulseHalfCplt</name></expr>;</expr_stmt>

      <comment type="block">/* Set the DMA error callback */</comment>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC2</name></expr>]</index></name><operator>-&gt;</operator><name>XferErrorCallback</name> <operator>=</operator> <name>TIM_DMAError</name></expr> ;</expr_stmt>

      <comment type="block">/* Enable the DMA stream */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC2</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR2</name></name></expr></argument>, <argument><expr><name>Length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* Enable the TIM Output Compare DMA request */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_DMA</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_DMA_CC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TIM_CHANNEL_3</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Set the DMA compare callbacks */</comment>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC3</name></expr>]</index></name><operator>-&gt;</operator><name>XferCpltCallback</name> <operator>=</operator> <name>TIM_DMADelayPulseCplt</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC3</name></expr>]</index></name><operator>-&gt;</operator><name>XferHalfCpltCallback</name> <operator>=</operator> <name>TIM_DMADelayPulseHalfCplt</name></expr>;</expr_stmt>

      <comment type="block">/* Set the DMA error callback */</comment>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC3</name></expr>]</index></name><operator>-&gt;</operator><name>XferErrorCallback</name> <operator>=</operator> <name>TIM_DMAError</name></expr> ;</expr_stmt>

      <comment type="block">/* Enable the DMA stream */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC3</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR3</name></name></expr></argument>, <argument><expr><name>Length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* Enable the TIM Output Compare DMA request */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_DMA</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_DMA_CC3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <comment type="block">/* Enable the Capture compare channel N */</comment>
  <expr_stmt><expr><call><name>TIM_CCxNChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>, <argument><expr><name>TIM_CCxN_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Main Output */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_MOE_ENABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */</comment>
  <expr_stmt><expr><name>tmpsmcr</name> <operator>=</operator> <name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>&amp;</operator> <name>TIM_SMCR_SMS</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_TIM_SLAVEMODE_TRIGGER_ENABLED</name><argument_list>(<argument><expr><name>tmpsmcr</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_TIM_ENABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Stops the TIM Output Compare signal generation in DMA mode
  *         on the complementary output.
  * @param  htim TIM Output Compare handle
  * @param  Channel TIM Channel to be disabled
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_OCN_Stop_DMA</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_CCXN_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>Channel</name></expr>)</condition>
  <block>{<block_content>
    <case>case <expr><name>TIM_CHANNEL_1</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Disable the TIM Output Compare DMA request */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_DMA</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_DMA_CC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TIM_CHANNEL_2</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Disable the TIM Output Compare DMA request */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_DMA</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_DMA_CC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TIM_CHANNEL_3</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Disable the TIM Output Compare DMA request */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_DMA</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_DMA_CC3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC3</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <comment type="block">/* Disable the Capture compare channel N */</comment>
  <expr_stmt><expr><call><name>TIM_CCxNChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>, <argument><expr><name>TIM_CCxN_DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Main Output */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_MOE_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change the htim state */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_TIM_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup TIMEx_Exported_Functions_Group3 Extended Timer Complementary PWM functions
  * @brief    Timer Complementary PWM functions
  *
@verbatim
  ==============================================================================
                 ##### Timer Complementary PWM functions #####
  ==============================================================================
  [..]
    This section provides functions allowing to:
    (+) Start the Complementary PWM.
    (+) Stop the Complementary PWM.
    (+) Start the Complementary PWM and enable interrupts.
    (+) Stop the Complementary PWM and disable interrupts.
    (+) Start the Complementary PWM and enable DMA transfers.
    (+) Stop the Complementary PWM and disable DMA transfers.
    (+) Start the Complementary Input Capture measurement.
    (+) Stop the Complementary Input Capture.
    (+) Start the Complementary Input Capture and enable interrupts.
    (+) Stop the Complementary Input Capture and disable interrupts.
    (+) Start the Complementary Input Capture and enable DMA transfers.
    (+) Stop the Complementary Input Capture and disable DMA transfers.
    (+) Start the Complementary One Pulse generation.
    (+) Stop the Complementary One Pulse.
    (+) Start the Complementary One Pulse and enable interrupts.
    (+) Stop the Complementary One Pulse and disable interrupts.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Starts the PWM signal generation on the complementary output.
  * @param  htim TIM handle
  * @param  Channel TIM Channel to be enabled
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_PWMN_Start</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpsmcr</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_CCXN_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the complementary PWM output  */</comment>
  <expr_stmt><expr><call><name>TIM_CCxNChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>, <argument><expr><name>TIM_CCxN_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Main Output */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_MOE_ENABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */</comment>
  <expr_stmt><expr><name>tmpsmcr</name> <operator>=</operator> <name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>&amp;</operator> <name>TIM_SMCR_SMS</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_TIM_SLAVEMODE_TRIGGER_ENABLED</name><argument_list>(<argument><expr><name>tmpsmcr</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_TIM_ENABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Stops the PWM signal generation on the complementary output.
  * @param  htim TIM handle
  * @param  Channel TIM Channel to be disabled
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_PWMN_Stop</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_CCXN_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the complementary PWM output  */</comment>
  <expr_stmt><expr><call><name>TIM_CCxNChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>, <argument><expr><name>TIM_CCxN_DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Main Output */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_MOE_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Starts the PWM signal generation in interrupt mode on the
  *         complementary output.
  * @param  htim TIM handle
  * @param  Channel TIM Channel to be disabled
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_PWMN_Start_IT</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpsmcr</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_CCXN_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>Channel</name></expr>)</condition>
  <block>{<block_content>
    <case>case <expr><name>TIM_CHANNEL_1</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Enable the TIM Capture/Compare 1 interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_CC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TIM_CHANNEL_2</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Enable the TIM Capture/Compare 2 interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_CC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TIM_CHANNEL_3</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Enable the TIM Capture/Compare 3 interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_CC3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <comment type="block">/* Enable the TIM Break interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_BREAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the complementary PWM output  */</comment>
  <expr_stmt><expr><call><name>TIM_CCxNChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>, <argument><expr><name>TIM_CCxN_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Main Output */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_MOE_ENABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */</comment>
  <expr_stmt><expr><name>tmpsmcr</name> <operator>=</operator> <name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>&amp;</operator> <name>TIM_SMCR_SMS</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_TIM_SLAVEMODE_TRIGGER_ENABLED</name><argument_list>(<argument><expr><name>tmpsmcr</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_TIM_ENABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Stops the PWM signal generation in interrupt mode on the
  *         complementary output.
  * @param  htim TIM handle
  * @param  Channel TIM Channel to be disabled
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_PWMN_Stop_IT</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpccer</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_CCXN_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>Channel</name></expr>)</condition>
  <block>{<block_content>
    <case>case <expr><name>TIM_CHANNEL_1</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Disable the TIM Capture/Compare 1 interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_CC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TIM_CHANNEL_2</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Disable the TIM Capture/Compare 2 interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_CC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TIM_CHANNEL_3</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Disable the TIM Capture/Compare 3 interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_CC3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <comment type="block">/* Disable the complementary PWM output  */</comment>
  <expr_stmt><expr><call><name>TIM_CCxNChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>, <argument><expr><name>TIM_CCxN_DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the TIM Break interrupt (only if no more channel is active) */</comment>
  <expr_stmt><expr><name>tmpccer</name> <operator>=</operator> <name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCER</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpccer</name> <operator>&amp;</operator> <operator>(</operator><name>TIM_CCER_CC1NE</name> <operator>|</operator> <name>TIM_CCER_CC2NE</name> <operator>|</operator> <name>TIM_CCER_CC3NE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_BREAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Disable the Main Output */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_MOE_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Starts the TIM PWM signal generation in DMA mode on the
  *         complementary output
  * @param  htim TIM handle
  * @param  Channel TIM Channel to be enabled
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_PWMN_Start_DMA</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Channel</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpsmcr</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_CCXN_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_TIM_STATE_BUSY</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_TIM_STATE_READY</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>Length</name> <operator>&gt;</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_TIM_STATE_BUSY</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* nothing to do */</comment>
  </block_content>}</block></else></if_stmt>
  <switch>switch <condition>(<expr><name>Channel</name></expr>)</condition>
  <block>{<block_content>
    <case>case <expr><name>TIM_CHANNEL_1</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Set the DMA compare callbacks */</comment>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC1</name></expr>]</index></name><operator>-&gt;</operator><name>XferCpltCallback</name> <operator>=</operator> <name>TIM_DMADelayPulseCplt</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC1</name></expr>]</index></name><operator>-&gt;</operator><name>XferHalfCpltCallback</name> <operator>=</operator> <name>TIM_DMADelayPulseHalfCplt</name></expr>;</expr_stmt>

      <comment type="block">/* Set the DMA error callback */</comment>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC1</name></expr>]</index></name><operator>-&gt;</operator><name>XferErrorCallback</name> <operator>=</operator> <name>TIM_DMAError</name></expr> ;</expr_stmt>

      <comment type="block">/* Enable the DMA stream */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR1</name></name></expr></argument>, <argument><expr><name>Length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* Enable the TIM Capture/Compare 1 DMA request */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_DMA</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_DMA_CC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TIM_CHANNEL_2</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Set the DMA compare callbacks */</comment>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC2</name></expr>]</index></name><operator>-&gt;</operator><name>XferCpltCallback</name> <operator>=</operator> <name>TIM_DMADelayPulseCplt</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC2</name></expr>]</index></name><operator>-&gt;</operator><name>XferHalfCpltCallback</name> <operator>=</operator> <name>TIM_DMADelayPulseHalfCplt</name></expr>;</expr_stmt>

      <comment type="block">/* Set the DMA error callback */</comment>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC2</name></expr>]</index></name><operator>-&gt;</operator><name>XferErrorCallback</name> <operator>=</operator> <name>TIM_DMAError</name></expr> ;</expr_stmt>

      <comment type="block">/* Enable the DMA stream */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC2</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR2</name></name></expr></argument>, <argument><expr><name>Length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* Enable the TIM Capture/Compare 2 DMA request */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_DMA</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_DMA_CC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TIM_CHANNEL_3</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Set the DMA compare callbacks */</comment>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC3</name></expr>]</index></name><operator>-&gt;</operator><name>XferCpltCallback</name> <operator>=</operator> <name>TIM_DMADelayPulseCplt</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC3</name></expr>]</index></name><operator>-&gt;</operator><name>XferHalfCpltCallback</name> <operator>=</operator> <name>TIM_DMADelayPulseHalfCplt</name></expr>;</expr_stmt>

      <comment type="block">/* Set the DMA error callback */</comment>
      <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC3</name></expr>]</index></name><operator>-&gt;</operator><name>XferErrorCallback</name> <operator>=</operator> <name>TIM_DMAError</name></expr> ;</expr_stmt>

      <comment type="block">/* Enable the DMA stream */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC3</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR3</name></name></expr></argument>, <argument><expr><name>Length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* Enable the TIM Capture/Compare 3 DMA request */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_DMA</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_DMA_CC3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <comment type="block">/* Enable the complementary PWM output  */</comment>
  <expr_stmt><expr><call><name>TIM_CCxNChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>, <argument><expr><name>TIM_CCxN_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Main Output */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_MOE_ENABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */</comment>
  <expr_stmt><expr><name>tmpsmcr</name> <operator>=</operator> <name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>&amp;</operator> <name>TIM_SMCR_SMS</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_TIM_SLAVEMODE_TRIGGER_ENABLED</name><argument_list>(<argument><expr><name>tmpsmcr</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_TIM_ENABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Stops the TIM PWM signal generation in DMA mode on the complementary
  *         output
  * @param  htim TIM handle
  * @param  Channel TIM Channel to be disabled
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_PWMN_Stop_DMA</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_CCXN_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>Channel</name></expr>)</condition>
  <block>{<block_content>
    <case>case <expr><name>TIM_CHANNEL_1</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Disable the TIM Capture/Compare 1 DMA request */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_DMA</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_DMA_CC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TIM_CHANNEL_2</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Disable the TIM Capture/Compare 2 DMA request */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_DMA</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_DMA_CC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TIM_CHANNEL_3</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Disable the TIM Capture/Compare 3 DMA request */</comment>
      <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_DMA</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_DMA_CC3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_CC3</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <comment type="block">/* Disable the complementary PWM output */</comment>
  <expr_stmt><expr><call><name>TIM_CCxNChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Channel</name></expr></argument>, <argument><expr><name>TIM_CCxN_DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Main Output */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_MOE_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change the htim state */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_TIM_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup TIMEx_Exported_Functions_Group4 Extended Timer Complementary One Pulse functions
  * @brief    Timer Complementary One Pulse functions
  *
@verbatim
  ==============================================================================
                ##### Timer Complementary One Pulse functions #####
  ==============================================================================
  [..]
    This section provides functions allowing to:
    (+) Start the Complementary One Pulse generation.
    (+) Stop the Complementary One Pulse.
    (+) Start the Complementary One Pulse and enable interrupts.
    (+) Stop the Complementary One Pulse and disable interrupts.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Starts the TIM One Pulse signal generation on the complementary
  *         output.
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel TIM Channel to be enabled
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_OnePulseN_Start</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>OutputChannel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_CCXN_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>OutputChannel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the complementary One Pulse output */</comment>
  <expr_stmt><expr><call><name>TIM_CCxNChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>OutputChannel</name></expr></argument>, <argument><expr><name>TIM_CCxN_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Main Output */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_MOE_ENABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Stops the TIM One Pulse signal generation on the complementary
  *         output.
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel TIM Channel to be disabled
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_OnePulseN_Stop</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>OutputChannel</name></decl></parameter>)</parameter_list>
<block>{<block_content>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_CCXN_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>OutputChannel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the complementary One Pulse output */</comment>
  <expr_stmt><expr><call><name>TIM_CCxNChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>OutputChannel</name></expr></argument>, <argument><expr><name>TIM_CCxN_DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Main Output */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_MOE_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Starts the TIM One Pulse signal generation in interrupt mode on the
  *         complementary channel.
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel TIM Channel to be enabled
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_OnePulseN_Start_IT</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>OutputChannel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_CCXN_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>OutputChannel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the TIM Capture/Compare 1 interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_CC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the TIM Capture/Compare 2 interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_CC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the complementary One Pulse output */</comment>
  <expr_stmt><expr><call><name>TIM_CCxNChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>OutputChannel</name></expr></argument>, <argument><expr><name>TIM_CCxN_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Main Output */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_MOE_ENABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Stops the TIM One Pulse signal generation in interrupt mode on the
  *         complementary channel.
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel TIM Channel to be disabled
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_OnePulseN_Stop_IT</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>OutputChannel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_CCXN_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>OutputChannel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the TIM Capture/Compare 1 interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_CC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the TIM Capture/Compare 2 interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_CC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the complementary One Pulse output */</comment>
  <expr_stmt><expr><call><name>TIM_CCxNChannelCmd</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>OutputChannel</name></expr></argument>, <argument><expr><name>TIM_CCxN_DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Main Output */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_MOE_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup TIMEx_Exported_Functions_Group5 Extended Peripheral Control functions
  * @brief    Peripheral Control functions
  *
@verbatim
  ==============================================================================
                    ##### Peripheral Control functions #####
  ==============================================================================
  [..]
    This section provides functions allowing to:
      (+) Configure the commutation event in case of use of the Hall sensor interface.
      (+) Configure Output channels for OC and PWM mode.

      (+) Configure Complementary channels, break features and dead time.
      (+) Configure Master synchronization.
      (+) Configure timer remapping capabilities.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Configure the TIM commutation event sequence.
  * @note  This function is mandatory to use the commutation event in order to
  *        update the configuration at each commutation detection on the TRGI input of the Timer,
  *        the typical use of this feature is with the use of another Timer(interface Timer)
  *        configured in Hall sensor interface, this interface Timer will generate the
  *        commutation at its TRGO output (connected to Timer used in this function) each time
  *        the TI1 of the Interface Timer detect a commutation at its input TI1.
  * @param  htim TIM handle
  * @param  InputTrigger the Internal trigger corresponding to the Timer Interfacing with the Hall sensor
  *          This parameter can be one of the following values:
  *            @arg TIM_TS_ITR0: Internal trigger 0 selected
  *            @arg TIM_TS_ITR1: Internal trigger 1 selected
  *            @arg TIM_TS_ITR2: Internal trigger 2 selected
  *            @arg TIM_TS_ITR3: Internal trigger 3 selected
  *            @arg TIM_TS_NONE: No trigger is needed
  * @param  CommutationSource the Commutation Event source
  *          This parameter can be one of the following values:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_ConfigCommutEvent</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type>  <name>InputTrigger</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type>  <name>CommutationSource</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_COMMUTATION_EVENT_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION</name><argument_list>(<argument><expr><name>InputTrigger</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>InputTrigger</name> <operator>==</operator> <name>TIM_TS_ITR0</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>InputTrigger</name> <operator>==</operator> <name>TIM_TS_ITR1</name><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name>InputTrigger</name> <operator>==</operator> <name>TIM_TS_ITR2</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>InputTrigger</name> <operator>==</operator> <name>TIM_TS_ITR3</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Select the Input trigger */</comment>
    <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TIM_SMCR_TS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>|=</operator> <name>InputTrigger</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Select the Capture Compare preload feature */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>TIM_CR2_CCPC</name></expr>;</expr_stmt>
  <comment type="block">/* Select the Commutation event source */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TIM_CR2_CCUS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>CommutationSource</name></expr>;</expr_stmt>

  <comment type="block">/* Disable Commutation Interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_COM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable Commutation DMA request */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_DMA</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_DMA_COM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configure the TIM commutation event sequence with interrupt.
  * @note  This function is mandatory to use the commutation event in order to
  *        update the configuration at each commutation detection on the TRGI input of the Timer,
  *        the typical use of this feature is with the use of another Timer(interface Timer)
  *        configured in Hall sensor interface, this interface Timer will generate the
  *        commutation at its TRGO output (connected to Timer used in this function) each time
  *        the TI1 of the Interface Timer detect a commutation at its input TI1.
  * @param  htim TIM handle
  * @param  InputTrigger the Internal trigger corresponding to the Timer Interfacing with the Hall sensor
  *          This parameter can be one of the following values:
  *            @arg TIM_TS_ITR0: Internal trigger 0 selected
  *            @arg TIM_TS_ITR1: Internal trigger 1 selected
  *            @arg TIM_TS_ITR2: Internal trigger 2 selected
  *            @arg TIM_TS_ITR3: Internal trigger 3 selected
  *            @arg TIM_TS_NONE: No trigger is needed
  * @param  CommutationSource the Commutation Event source
  *          This parameter can be one of the following values:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_ConfigCommutEvent_IT</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type>  <name>InputTrigger</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type>  <name>CommutationSource</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_COMMUTATION_EVENT_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION</name><argument_list>(<argument><expr><name>InputTrigger</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>InputTrigger</name> <operator>==</operator> <name>TIM_TS_ITR0</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>InputTrigger</name> <operator>==</operator> <name>TIM_TS_ITR1</name><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name>InputTrigger</name> <operator>==</operator> <name>TIM_TS_ITR2</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>InputTrigger</name> <operator>==</operator> <name>TIM_TS_ITR3</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Select the Input trigger */</comment>
    <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TIM_SMCR_TS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>|=</operator> <name>InputTrigger</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Select the Capture Compare preload feature */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>TIM_CR2_CCPC</name></expr>;</expr_stmt>
  <comment type="block">/* Select the Commutation event source */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TIM_CR2_CCUS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>CommutationSource</name></expr>;</expr_stmt>

  <comment type="block">/* Disable Commutation DMA request */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_DMA</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_DMA_COM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Commutation Interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_COM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configure the TIM commutation event sequence with DMA.
  * @note  This function is mandatory to use the commutation event in order to
  *        update the configuration at each commutation detection on the TRGI input of the Timer,
  *        the typical use of this feature is with the use of another Timer(interface Timer)
  *        configured in Hall sensor interface, this interface Timer will generate the
  *        commutation at its TRGO output (connected to Timer used in this function) each time
  *        the TI1 of the Interface Timer detect a commutation at its input TI1.
  * @note  The user should configure the DMA in his own software, in This function only the COMDE bit is set
  * @param  htim TIM handle
  * @param  InputTrigger the Internal trigger corresponding to the Timer Interfacing with the Hall sensor
  *          This parameter can be one of the following values:
  *            @arg TIM_TS_ITR0: Internal trigger 0 selected
  *            @arg TIM_TS_ITR1: Internal trigger 1 selected
  *            @arg TIM_TS_ITR2: Internal trigger 2 selected
  *            @arg TIM_TS_ITR3: Internal trigger 3 selected
  *            @arg TIM_TS_NONE: No trigger is needed
  * @param  CommutationSource the Commutation Event source
  *          This parameter can be one of the following values:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_ConfigCommutEvent_DMA</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type>  <name>InputTrigger</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type>  <name>CommutationSource</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_COMMUTATION_EVENT_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION</name><argument_list>(<argument><expr><name>InputTrigger</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>InputTrigger</name> <operator>==</operator> <name>TIM_TS_ITR0</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>InputTrigger</name> <operator>==</operator> <name>TIM_TS_ITR1</name><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name>InputTrigger</name> <operator>==</operator> <name>TIM_TS_ITR2</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>InputTrigger</name> <operator>==</operator> <name>TIM_TS_ITR3</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Select the Input trigger */</comment>
    <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TIM_SMCR_TS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>|=</operator> <name>InputTrigger</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Select the Capture Compare preload feature */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>TIM_CR2_CCPC</name></expr>;</expr_stmt>
  <comment type="block">/* Select the Commutation event source */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TIM_CR2_CCUS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>CommutationSource</name></expr>;</expr_stmt>

  <comment type="block">/* Enable the Commutation DMA Request */</comment>
  <comment type="block">/* Set the DMA Commutation Callback */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_COMMUTATION</name></expr>]</index></name><operator>-&gt;</operator><name>XferCpltCallback</name> <operator>=</operator> <name>TIMEx_DMACommutationCplt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_COMMUTATION</name></expr>]</index></name><operator>-&gt;</operator><name>XferHalfCpltCallback</name> <operator>=</operator> <name>TIMEx_DMACommutationHalfCplt</name></expr>;</expr_stmt>
  <comment type="block">/* Set the DMA error callback */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>hdma</name><index>[<expr><name>TIM_DMA_ID_COMMUTATION</name></expr>]</index></name><operator>-&gt;</operator><name>XferErrorCallback</name> <operator>=</operator> <name>TIM_DMAError</name></expr>;</expr_stmt>

  <comment type="block">/* Disable Commutation Interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_DISABLE_IT</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_IT_COM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Commutation DMA Request */</comment>
  <expr_stmt><expr><call><name>__HAL_TIM_ENABLE_DMA</name><argument_list>(<argument><expr><name>htim</name></expr></argument>, <argument><expr><name>TIM_DMA_COM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configures the TIM in master mode.
  * @param  htim TIM handle.
  * @param  sMasterConfig pointer to a TIM_MasterConfigTypeDef structure that
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_MasterConfigSynchronization</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>,
                                                        <parameter><decl><type><name>TIM_MasterConfigTypeDef</name> <modifier>*</modifier></type><name>sMasterConfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpcr2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpsmcr</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_SYNCHRO_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_TRGO_SOURCE</name><argument_list>(<argument><expr><name><name>sMasterConfig</name><operator>-&gt;</operator><name>MasterOutputTrigger</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_MSM_STATE</name><argument_list>(<argument><expr><name><name>sMasterConfig</name><operator>-&gt;</operator><name>MasterSlaveMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check input state */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change the handler state */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_TIM_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Get the TIMx CR2 register value */</comment>
  <expr_stmt><expr><name>tmpcr2</name> <operator>=</operator> <name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr>;</expr_stmt>

  <comment type="block">/* Get the TIMx SMCR register value */</comment>
  <expr_stmt><expr><name>tmpsmcr</name> <operator>=</operator> <name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name></expr>;</expr_stmt>

  <comment type="block">/* Reset the MMS Bits */</comment>
  <expr_stmt><expr><name>tmpcr2</name> <operator>&amp;=</operator> <operator>~</operator><name>TIM_CR2_MMS</name></expr>;</expr_stmt>
  <comment type="block">/* Select the TRGO source */</comment>
  <expr_stmt><expr><name>tmpcr2</name> <operator>|=</operator>  <name><name>sMasterConfig</name><operator>-&gt;</operator><name>MasterOutputTrigger</name></name></expr>;</expr_stmt>

  <comment type="block">/* Reset the MSM Bit */</comment>
  <expr_stmt><expr><name>tmpsmcr</name> <operator>&amp;=</operator> <operator>~</operator><name>TIM_SMCR_MSM</name></expr>;</expr_stmt>
  <comment type="block">/* Set master mode */</comment>
  <expr_stmt><expr><name>tmpsmcr</name> <operator>|=</operator> <name><name>sMasterConfig</name><operator>-&gt;</operator><name>MasterSlaveMode</name></name></expr>;</expr_stmt>

  <comment type="block">/* Update TIMx CR2 */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>=</operator> <name>tmpcr2</name></expr>;</expr_stmt>

  <comment type="block">/* Update TIMx SMCR */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SMCR</name></name> <operator>=</operator> <name>tmpsmcr</name></expr>;</expr_stmt>

  <comment type="block">/* Change the htim state */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_TIM_STATE_READY</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configures the Break feature, dead time, Lock level, OSSI/OSSR State
  *         and the AOE(automatic output enable).
  * @param  htim TIM handle
  * @param  sBreakDeadTimeConfig pointer to a TIM_ConfigBreakDeadConfigTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_ConfigBreakDeadTime</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>,
                                                <parameter><decl><type><name>TIM_BreakDeadTimeConfigTypeDef</name> <modifier>*</modifier></type><name>sBreakDeadTimeConfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Keep this variable initialized to 0 as it is used to configure BDTR register */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpbdtr</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_BREAK_INSTANCE</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_OSSR_STATE</name><argument_list>(<argument><expr><name><name>sBreakDeadTimeConfig</name><operator>-&gt;</operator><name>OffStateRunMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_OSSI_STATE</name><argument_list>(<argument><expr><name><name>sBreakDeadTimeConfig</name><operator>-&gt;</operator><name>OffStateIDLEMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_LOCK_LEVEL</name><argument_list>(<argument><expr><name><name>sBreakDeadTimeConfig</name><operator>-&gt;</operator><name>LockLevel</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_DEADTIME</name><argument_list>(<argument><expr><name><name>sBreakDeadTimeConfig</name><operator>-&gt;</operator><name>DeadTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_BREAK_STATE</name><argument_list>(<argument><expr><name><name>sBreakDeadTimeConfig</name><operator>-&gt;</operator><name>BreakState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_BREAK_POLARITY</name><argument_list>(<argument><expr><name><name>sBreakDeadTimeConfig</name><operator>-&gt;</operator><name>BreakPolarity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_AUTOMATIC_OUTPUT_STATE</name><argument_list>(<argument><expr><name><name>sBreakDeadTimeConfig</name><operator>-&gt;</operator><name>AutomaticOutput</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check input state */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */</comment>

  <comment type="block">/* Set the BDTR bits */</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name>tmpbdtr</name></expr></argument>, <argument><expr><name>TIM_BDTR_DTG</name></expr></argument>, <argument><expr><name><name>sBreakDeadTimeConfig</name><operator>-&gt;</operator><name>DeadTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name>tmpbdtr</name></expr></argument>, <argument><expr><name>TIM_BDTR_LOCK</name></expr></argument>, <argument><expr><name><name>sBreakDeadTimeConfig</name><operator>-&gt;</operator><name>LockLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name>tmpbdtr</name></expr></argument>, <argument><expr><name>TIM_BDTR_OSSI</name></expr></argument>, <argument><expr><name><name>sBreakDeadTimeConfig</name><operator>-&gt;</operator><name>OffStateIDLEMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name>tmpbdtr</name></expr></argument>, <argument><expr><name>TIM_BDTR_OSSR</name></expr></argument>, <argument><expr><name><name>sBreakDeadTimeConfig</name><operator>-&gt;</operator><name>OffStateRunMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name>tmpbdtr</name></expr></argument>, <argument><expr><name>TIM_BDTR_BKE</name></expr></argument>, <argument><expr><name><name>sBreakDeadTimeConfig</name><operator>-&gt;</operator><name>BreakState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name>tmpbdtr</name></expr></argument>, <argument><expr><name>TIM_BDTR_BKP</name></expr></argument>, <argument><expr><name><name>sBreakDeadTimeConfig</name><operator>-&gt;</operator><name>BreakPolarity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name>tmpbdtr</name></expr></argument>, <argument><expr><name>TIM_BDTR_AOE</name></expr></argument>, <argument><expr><name><name>sBreakDeadTimeConfig</name><operator>-&gt;</operator><name>AutomaticOutput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="block">/* Set TIMx_BDTR */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BDTR</name></name> <operator>=</operator> <name>tmpbdtr</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configures the TIMx Remapping input capabilities.
  * @param  htim TIM handle.
  * @param  Remap specifies the TIM remapping source.
  *         For TIM1, the parameter can have the following values:                   (**)
  *           @arg TIM_TIM1_TIM3_TRGO:  TIM1 ITR2 is connected to TIM3 TRGO
  *           @arg TIM_TIM1_LPTIM:      TIM1 ITR2 is connected to LPTIM1 output
  *
  *         For TIM2, the parameter can have the following values:                   (**)
  *           @arg TIM_TIM2_TIM8_TRGO:  TIM2 ITR1 is connected to TIM8 TRGO          (*)
  *           @arg TIM_TIM2_ETH_PTP:    TIM2 ITR1 is connected to PTP trigger output (*)
  *           @arg TIM_TIM2_USBFS_SOF:  TIM2 ITR1 is connected to OTG FS SOF
  *           @arg TIM_TIM2_USBHS_SOF:  TIM2 ITR1 is connected to OTG FS SOF
  *
  *         For TIM5, the parameter can have the following values:
  *           @arg TIM_TIM5_GPIO:       TIM5 TI4 is connected to GPIO
  *           @arg TIM_TIM5_LSI:        TIM5 TI4 is connected to LSI
  *           @arg TIM_TIM5_LSE:        TIM5 TI4 is connected to LSE
  *           @arg TIM_TIM5_RTC:        TIM5 TI4 is connected to the RTC wakeup interrupt
  *           @arg TIM_TIM5_TIM3_TRGO:  TIM5 ITR1 is connected to TIM3 TRGO          (*)
  *           @arg TIM_TIM5_LPTIM:      TIM5 ITR1 is connected to LPTIM1 output      (*)
  *
  *         For TIM9, the parameter can have the following values:                   (**)
  *           @arg TIM_TIM9_TIM3_TRGO:  TIM9 ITR1 is connected to TIM3 TRGO
  *           @arg TIM_TIM9_LPTIM:      TIM9 ITR1 is connected to LPTIM1 output
  *
  *         For TIM11, the parameter can have the following values:
  *           @arg TIM_TIM11_GPIO:     TIM11 TI1 is connected to GPIO
  *           @arg TIM_TIM11_HSE:      TIM11 TI1 is connected to HSE_RTC clock
  *           @arg TIM_TIM11_SPDIFRX:  TIM11 TI1 is connected to SPDIFRX_FRAME_SYNC  (*)
  *
  *         (*)  Value not defined in all devices. \n
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_TIMEx_RemapConfig</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Remap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TIM_REMAP</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Remap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LPTIM_OR_TIM1_ITR2_RMP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LPTIM_OR_TIM5_ITR1_RMP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LPTIM_OR_TIM5_ITR1_RMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>Remap</name> <operator>&amp;</operator> <name>LPTIM_REMAP_MASK</name><operator>)</operator> <operator>==</operator> <name>LPTIM_REMAP_MASK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Connect TIMx internal trigger to LPTIM1 output */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_LPTIM1_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>LPTIM1</name><operator>-&gt;</operator><name>OR</name></name></expr></argument>,
               <argument><expr><operator>(</operator><name>LPTIM_OR_TIM1_ITR2_RMP</name> <operator>|</operator> <name>LPTIM_OR_TIM5_ITR1_RMP</name> <operator>|</operator> <name>LPTIM_OR_TIM9_ITR1_RMP</name><operator>)</operator></expr></argument>,
               <argument><expr><name>Remap</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>LPTIM_REMAP_MASK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Set the Timer remapping configuration */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>OR</name></name></expr></argument>, <argument><expr><name>Remap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Set the Timer remapping configuration */</comment>
  <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>htim</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>OR</name></name></expr></argument>, <argument><expr><name>Remap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* LPTIM_OR_TIM1_ITR2_RMP &amp;&amp;  LPTIM_OR_TIM5_ITR1_RMP &amp;&amp; LPTIM_OR_TIM5_ITR1_RMP */</comment>

  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup TIMEx_Exported_Functions_Group6 Extended Callbacks functions
  * @brief    Extended Callbacks functions
  *
@verbatim
  ==============================================================================
                    ##### Extended Callbacks functions #####
  ==============================================================================
  [..]
    This section provides Extended TIM callback functions:
    (+) Timer Commutation callback
    (+) Timer Break callback

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_TIMEx_CommutCallback</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_TIMEx_CommutHalfCpltCallback</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_TIMEx_BreakCallback</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup TIMEx_Exported_Functions_Group7 Extended Peripheral State functions
  * @brief    Extended Peripheral State functions
  *
@verbatim
  ==============================================================================
                ##### Extended Peripheral State functions #####
  ==============================================================================
  [..]
    This subsection permits to get in run-time the status of the peripheral
    and the data flow.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Return the TIM Hall Sensor interface handle state.
  * @param  htim TIM Hall Sensor handle
  * @retval HAL state
  */</comment>
<function><type><name>HAL_TIM_StateTypeDef</name></type> <name>HAL_TIMEx_HallSensor_GetState</name><parameter_list>(<parameter><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>htim</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup TIMEx_Private_Functions TIM Extended Private Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  TIM DMA Commutation callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>TIMEx_DMACommutationCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name> <init>= <expr><operator>(</operator><name>TIM_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Change the htim state */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_TIM_STATE_READY</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_TIM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>htim</name><operator>-&gt;</operator><name>CommutationCallback</name></name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_TIMEx_CommutCallback</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_TIM_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  TIM DMA Commutation half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>TIMEx_DMACommutationHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>TIM_HandleTypeDef</name> <modifier>*</modifier></type><name>htim</name> <init>= <expr><operator>(</operator><name>TIM_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Change the htim state */</comment>
  <expr_stmt><expr><name><name>htim</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_TIM_STATE_READY</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_TIM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>htim</name><operator>-&gt;</operator><name>CommutationHalfCpltCallback</name></name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_TIMEx_CommutHalfCpltCallback</name><argument_list>(<argument><expr><name>htim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_TIM_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  Enables or disables the TIM Capture Compare Channel xN.
  * @param  TIMx to select the TIM peripheral
  * @param  Channel specifies the TIM Channel
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1
  *            @arg TIM_CHANNEL_2: TIM Channel 2
  *            @arg TIM_CHANNEL_3: TIM Channel 3
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>TIM_CCxNChannelCmd</name><parameter_list>(<parameter><decl><type><name>TIM_TypeDef</name> <modifier>*</modifier></type><name>TIMx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Channel</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ChannelNState</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>TIM_CCER_CC1NE</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>Channel</name> <operator>&amp;</operator> <literal type="number">0x1FU</literal><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* 0x1FU = 31 bits max shift */</comment>

  <comment type="block">/* Reset the CCxNE Bit */</comment>
  <expr_stmt><expr><name><name>TIMx</name><operator>-&gt;</operator><name>CCER</name></name> <operator>&amp;=</operator>  <operator>~</operator><name>tmp</name></expr>;</expr_stmt>

  <comment type="block">/* Set or reset the CCxNE Bit */</comment>
  <expr_stmt><expr><name><name>TIMx</name><operator>-&gt;</operator><name>CCER</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>ChannelNState</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>Channel</name> <operator>&amp;</operator> <literal type="number">0x1FU</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* 0x1FU = 31 bits max shift */</comment>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_TIM_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
