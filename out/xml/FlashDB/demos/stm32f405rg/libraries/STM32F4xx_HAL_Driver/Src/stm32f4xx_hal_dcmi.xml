<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dcmi.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_dcmi.c
  * @author  MCD Application Team
  * @brief   DCMI HAL module driver
  *          This file provides firmware functions to manage the following
  *          functionalities of the Digital Camera Interface (DCMI) peripheral:
  *           + Initialization and de-initialization functions
  *           + IO operation functions
  *           + Peripheral Control functions
  *           + Peripheral State and Error functions
  *           
  @verbatim
  ==============================================================================
                        ##### How to use this driver #####
  ==============================================================================
  [..]
      The sequence below describes how to use this driver to capture image
      from a camera module connected to the DCMI Interface.
      This sequence does not take into account the configuration of the
      camera module, which should be made before to configure and enable
      the DCMI to capture images.

    (#) Program the required configuration through following parameters:
        horizontal and vertical polarity, pixel clock polarity, Capture Rate,
        Synchronization Mode, code of the frame delimiter and data width 
        using HAL_DCMI_Init() function.

    (#) Configure the DMA2_Stream1 channel1 to transfer Data from DCMI DR
        register to the destination memory buffer.

    (#) Program the required configuration through following parameters:
        DCMI mode, destination memory Buffer address and the data length
        and enable capture using HAL_DCMI_Start_DMA() function.

    (#) Optionally, configure and Enable the CROP feature to select a rectangular
        window from the received image using HAL_DCMI_ConfigCrop()
        and HAL_DCMI_EnableCROP() functions

    (#) The capture can be stopped using HAL_DCMI_Stop() function.

    (#) To control DCMI state you can use the function HAL_DCMI_GetState().

     *** DCMI HAL driver macros list ***
     =============================================
     [..]
       Below the list of most used macros in DCMI HAL driver.
       
      (+) __HAL_DCMI_ENABLE: Enable the DCMI peripheral.
      (+) __HAL_DCMI_DISABLE: Disable the DCMI peripheral.
      (+) __HAL_DCMI_GET_FLAG: Get the DCMI pending flags.
      (+) __HAL_DCMI_CLEAR_FLAG: Clear the DCMI pending flags.
      (+) __HAL_DCMI_ENABLE_IT: Enable the specified DCMI interrupts.
      (+) __HAL_DCMI_DISABLE_IT: Disable the specified DCMI interrupts.
      (+) __HAL_DCMI_GET_IT_SOURCE: Check whether the specified DCMI interrupt has occurred or not.

     [..]
       (@) You can refer to the DCMI HAL driver header file for more useful macros
      
    *** Callback registration ***
    =============================

    The compilation define USE_HAL_DCMI_REGISTER_CALLBACKS when set to 1
    allows the user to configure dynamically the driver callbacks.
    Use functions @ref HAL_DCMI_RegisterCallback() to register a user callback.

    Function @ref HAL_DCMI_RegisterCallback() allows to register following callbacks:
      (+) FrameEventCallback : DCMI Frame Event.
      (+) VsyncEventCallback : DCMI Vsync Event.
      (+) LineEventCallback  : DCMI Line Event.
      (+) ErrorCallback      : DCMI error.
      (+) MspInitCallback    : DCMI MspInit.
      (+) MspDeInitCallback  : DCMI MspDeInit.
    This function takes as parameters the HAL peripheral handle, the callback ID
    and a pointer to the user callback function.

    Use function @ref HAL_DCMI_UnRegisterCallback() to reset a callback to the default
    weak (surcharged) function.
    @ref HAL_DCMI_UnRegisterCallback() takes as parameters the HAL peripheral handle,
    and the callback ID.
    This function allows to reset following callbacks:
      (+) FrameEventCallback : DCMI Frame Event.
      (+) VsyncEventCallback : DCMI Vsync Event.
      (+) LineEventCallback  : DCMI Line Event.
      (+) ErrorCallback      : DCMI error.
      (+) MspInitCallback    : DCMI MspInit.
      (+) MspDeInitCallback  : DCMI MspDeInit.

    By default, after the @ref HAL_DCMI_Init and if the state is HAL_DCMI_STATE_RESET
    all callbacks are reset to the corresponding legacy weak (surcharged) functions:
    examples @ref FrameEventCallback(), @ref HAL_DCMI_ErrorCallback().
    Exception done for MspInit and MspDeInit callbacks that are respectively
    reset to the legacy weak (surcharged) functions in the @ref HAL_DCMI_Init
    and @ref  HAL_DCMI_DeInit only when these callbacks are null (not registered beforehand).
    If not, MspInit or MspDeInit are not null, the @ref HAL_DCMI_Init and @ref HAL_DCMI_DeInit
    keep and use the user MspInit/MspDeInit callbacks (registered beforehand).

    Callbacks can be registered/unregistered in READY state only.
    Exception done for MspInit/MspDeInit callbacks that can be registered/unregistered
    in READY or RESET state, thus registered (user) MspInit/DeInit callbacks can be used
    during the Init/DeInit.
    In that case first register the MspInit/MspDeInit user callbacks
    using @ref HAL_DCMI_RegisterCallback before calling @ref HAL_DCMI_DeInit
    or @ref HAL_DCMI_Init function.

    When the compilation define USE_HAL_DCMI_REGISTER_CALLBACKS is set to 0 or
    not defined, the callback registering feature is not available
    and weak (surcharged) callbacks are used.
	
  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>
<comment type="block" format="doxygen">/** @defgroup DCMI DCMI
  * @brief DCMI HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_DCMI_MODULE_ENABLED</name></cpp:ifdef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F407xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F417xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator>\
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator>\
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAL_TIMEOUT_DCMI_STOP</name></cpp:macro>    <cpp:value>14U</cpp:value></cpp:define>  <comment type="block">/* Set timeout to 1s  */</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type>       <name>DCMI_DMAXferCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>       <name>DCMI_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup DCMI_Exported_Functions DCMI Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DCMI_Exported_Functions_Group1 Initialization and Configuration functions
  *  @brief   Initialization and Configuration functions
  *
@verbatim
 ===============================================================================
                ##### Initialization and Configuration functions #####
 ===============================================================================
    [..]  This section provides functions allowing to:
      (+) Initialize and configure the DCMI
      (+) De-initialize the DCMI 

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the DCMI according to the specified
  *         parameters in the DCMI_InitTypeDef and create the associated handle.
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */</comment>
<function><type><specifier>__weak</specifier> <name>HAL_StatusTypeDef</name></type> <name>HAL_DCMI_Init</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name> <modifier>*</modifier></type><name>hdcmi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the DCMI peripheral state */</comment>
  <if_stmt><if>if<condition>(<expr><name>hdcmi</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
     <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check function parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_PCKPOLARITY</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PCKPolarity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_VSPOLARITY</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>VSPolarity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_HSPOLARITY</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HSPolarity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_SYNCHRO</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SynchroMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_CAPTURE_RATE</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>CaptureRate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_EXTENDED_DATA</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ExtendedDataMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_MODE_JPEG</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>JPEGMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DCMI_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>
    <comment type="block">/* Init the low level hardware */</comment>
  <comment type="block">/* Init the DCMI Callback settings */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DCMI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>FrameEventCallback</name></name> <operator>=</operator> <name>HAL_DCMI_FrameEventCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak FrameEventCallback  */</comment> 
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>VsyncEventCallback</name></name> <operator>=</operator> <name>HAL_DCMI_VsyncEventCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak VsyncEventCallback  */</comment> 
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>LineEventCallback</name></name>  <operator>=</operator> <name>HAL_DCMI_LineEventCallback</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak LineEventCallback   */</comment>  
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>ErrorCallback</name></name>      <operator>=</operator> <name>HAL_DCMI_ErrorCallback</name></expr>;</expr_stmt>      <comment type="block">/* Legacy weak ErrorCallback       */</comment> 
    
    <if_stmt><if>if<condition>(<expr><name><name>hdcmi</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>  
    <block>{<block_content>
      <comment type="block">/* Legacy weak MspInit Callback        */</comment>
      <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_DCMI_MspInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Initialize the low level hardware (MSP) */</comment>
    <expr_stmt><expr><call><name><name>hdcmi</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  
    <comment type="block">/* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */</comment>
    <expr_stmt><expr><call><name>HAL_DCMI_MspInit</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (USE_HAL_DCMI_REGISTER_CALLBACKS) */</comment>
    <expr_stmt><expr><call><name>HAL_DCMI_MspInit</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Change the DCMI state */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DCMI_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Set DCMI parameters */</comment>
  <comment type="block">/* Configures the HS, VS, DE and PC polarity */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DCMI_CR_PCKPOL</name> <operator>|</operator> <name>DCMI_CR_HSPOL</name>  <operator>|</operator> <name>DCMI_CR_VSPOL</name>  <operator>|</operator> <name>DCMI_CR_EDM_0</name> <operator>|</operator>
                           <name>DCMI_CR_EDM_1</name>  <operator>|</operator> <name>DCMI_CR_FCRC_0</name> <operator>|</operator> <name>DCMI_CR_FCRC_1</name> <operator>|</operator> <name>DCMI_CR_JPEG</name>  <operator>|</operator>
                           <name>DCMI_CR_ESS</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator>  <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SynchroMode</name></name> <operator>|</operator> <name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>CaptureRate</name></name> <operator>|</operator> \
                                     <name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>VSPolarity</name></name>  <operator>|</operator> <name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HSPolarity</name></name>  <operator>|</operator> \
                                     <name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PCKPolarity</name></name> <operator>|</operator> <name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ExtendedDataMode</name></name> <operator>|</operator> \
                                     <name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>JPEGMode</name></name><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SynchroMode</name></name> <operator>==</operator> <name>DCMI_SYNCHRO_EMBEDDED</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ESCR</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SyncroCode</name><operator>.</operator><name>FrameStartCode</name></name><operator>)</operator>    <operator>|</operator>
                             <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SyncroCode</name><operator>.</operator><name>LineStartCode</name></name> <operator>&lt;&lt;</operator> <name>DCMI_POSITION_ESCR_LSC</name><operator>)</operator><operator>|</operator>
                             <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SyncroCode</name><operator>.</operator><name>LineEndCode</name></name> <operator>&lt;&lt;</operator> <name>DCMI_POSITION_ESCR_LEC</name><operator>)</operator> <operator>|</operator>
                             <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SyncroCode</name><operator>.</operator><name>FrameEndCode</name></name> <operator>&lt;&lt;</operator> <name>DCMI_POSITION_ESCR_FEC</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Enable the Line, Vsync, Error and Overrun interrupts */</comment>
  <expr_stmt><expr><call><name>__HAL_DCMI_ENABLE_IT</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>, <argument><expr><name>DCMI_IT_LINE</name> <operator>|</operator> <name>DCMI_IT_VSYNC</name> <operator>|</operator> <name>DCMI_IT_ERR</name> <operator>|</operator> <name>DCMI_IT_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Update error code */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DCMI_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Initialize the DCMI state*/</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name>  <operator>=</operator> <name>HAL_DCMI_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Deinitializes the DCMI peripheral registers to their default reset
  *         values.
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */</comment>

<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DCMI_DeInit</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name> <modifier>*</modifier></type><name>hdcmi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DCMI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>  
  <if_stmt><if>if<condition>(<expr><name><name>hdcmi</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>  
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_DCMI_MspDeInit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* De-Initialize the low level hardware (MSP) */</comment>
  <expr_stmt><expr><call><name><name>hdcmi</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */</comment>
  <expr_stmt><expr><call><name>HAL_DCMI_MspDeInit</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (USE_HAL_DCMI_REGISTER_CALLBACKS) */</comment>

  <comment type="block">/* Update error code */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DCMI_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Initialize the DCMI state*/</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DCMI_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the DCMI MSP.
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DCMI_MspInit</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name><modifier>*</modifier></type> <name>hdcmi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_MspInit could be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitializes the DCMI MSP.
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DCMI_MspDeInit</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name><modifier>*</modifier></type> <name>hdcmi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_MspDeInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<comment type="block" format="doxygen">/** @defgroup DCMI_Exported_Functions_Group2 IO operation functions
  *  @brief   IO operation functions
  *
@verbatim
 ===============================================================================
                      #####  IO operation functions  #####
 ===============================================================================
    [..]  This section provides functions allowing to:
      (+) Configure destination address and data length and
          Enables DCMI DMA request and enables DCMI capture
      (+) Stop the DCMI capture.
      (+) Handles DCMI interrupt request.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Enables DCMI DMA request and enables DCMI capture
  * @param  hdcmi     pointer to a DCMI_HandleTypeDef structure that contains
  *                    the configuration information for DCMI.
  * @param  DCMI_Mode DCMI capture mode snapshot or continuous grab.
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DCMI_Start_DMA</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name><modifier>*</modifier></type> <name>hdcmi</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DCMI_Mode</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Initialize the second memory address */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>SecondMemAddress</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check function parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_CAPTURE_MODE</name><argument_list>(<argument><expr><name>DCMI_Mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Lock the DCMI peripheral state */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DCMI_STATE_BUSY</name></expr>;</expr_stmt>
  
  <comment type="block">/* Enable DCMI by setting DCMIEN bit */</comment>
  <expr_stmt><expr><call><name>__HAL_DCMI_ENABLE</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Configure the DCMI Mode */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DCMI_CR_CM</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator>  <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>DCMI_Mode</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Set the DMA memory0 conversion complete callback */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>DCMI_DMAXferCplt</name></expr>;</expr_stmt>

  <comment type="block">/* Set the DMA error callback */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>DCMI_DMAError</name></expr>;</expr_stmt>

  <comment type="block">/* Set the dma abort callback */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  
  <comment type="block">/* Reset transfer counters value */</comment> 
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>XferTransferNumber</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>Length</name> <operator>&lt;=</operator> <literal type="number">0xFFFFU</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable the DMA Stream */</comment>
    <expr_stmt><expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><name>Length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <comment type="block">/* DCMI_DOUBLE_BUFFER Mode */</comment>
  <block>{<block_content>
    <comment type="block">/* Set the DMA memory1 conversion complete callback */</comment>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name><operator>-&gt;</operator><name>XferM1CpltCallback</name></name> <operator>=</operator> <name>DCMI_DMAXferCplt</name></expr>;</expr_stmt>

    <comment type="block">/* Initialize transfer parameters */</comment>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>Length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>pBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>

    <comment type="block">/* Get the number of buffer */</comment>
    <while>while<condition>(<expr><name><name>hdcmi</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>&gt;</operator> <literal type="number">0xFFFFU</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <operator>(</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>XferSize</name></name><operator>/</operator><literal type="number">2U</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <name><name>hdcmi</name><operator>-&gt;</operator><name>XferCount</name></name><operator>*</operator><literal type="number">2U</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Update DCMI counter  and transfer number*/</comment>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <operator>(</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>-</operator> <literal type="number">2U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>XferTransferNumber</name></name> <operator>=</operator> <name><name>hdcmi</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>

    <comment type="block">/* Update second memory address */</comment>
    <expr_stmt><expr><name>SecondMemAddress</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>pData</name> <operator>+</operator> <operator>(</operator><literal type="number">4U</literal><operator>*</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>XferSize</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Start DMA multi buffer transfer */</comment>
    <expr_stmt><expr><call><name>HAL_DMAEx_MultiBufferStart_IT</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><name>SecondMemAddress</name></expr></argument>, <argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Enable Capture */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <name>DCMI_CR_CAPTURE</name></expr>;</expr_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable DCMI DMA request and Disable DCMI capture
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DCMI_Stop</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name><modifier>*</modifier></type> <name>hdcmi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>count</name> <init>= <expr><name>SystemCoreClock</name> <operator>/</operator> <name>HAL_TIMEOUT_DCMI_STOP</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Lock the DCMI peripheral state */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DCMI_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable Capture */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DCMI_CR_CAPTURE</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Check if the DCMI capture effectively disabled */</comment>
  <do>do
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>count</name><operator>--</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Update error code */</comment>
      <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DCMI_ERROR_TIMEOUT</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_TIMEOUT</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  while<condition>(<expr><operator>(</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DCMI_CR_CAPTURE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>;</do>

  <comment type="block">/* Disable the DCMI */</comment>
  <expr_stmt><expr><call><name>__HAL_DCMI_DISABLE</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the DMA */</comment>
  <expr_stmt><expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Update error code */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DCMI_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Change DCMI state */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DCMI_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Suspend DCMI capture  
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI. 
  * @retval HAL status     
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DCMI_Suspend</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name><modifier>*</modifier></type> <name>hdcmi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>count</name> <init>= <expr><name>SystemCoreClock</name> <operator>/</operator> <name>HAL_TIMEOUT_DCMI_STOP</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DCMI_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Change DCMI state */</comment>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DCMI_STATE_SUSPENDED</name></expr>;</expr_stmt>

    <comment type="block">/* Disable Capture */</comment>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DCMI_CR_CAPTURE</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Check if the DCMI capture effectively disabled */</comment>
    <do>do
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>count</name><operator>--</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>        
        <comment type="block">/* Update error code */</comment>
        <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DCMI_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        
        <comment type="block">/* Change DCMI state */</comment>
        <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DCMI_STATE_READY</name></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_TIMEOUT</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    while<condition>(<expr><operator>(</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DCMI_CR_CAPTURE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
  </block_content>}</block></if></if_stmt>    
  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Resume DCMI capture  
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI. 
  * @retval HAL status     
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DCMI_Resume</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name><modifier>*</modifier></type> <name>hdcmi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DCMI_STATE_SUSPENDED</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Change DCMI state */</comment>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DCMI_STATE_BUSY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Disable Capture */</comment>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <name>DCMI_CR_CAPTURE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt> 
  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Handles DCMI interrupt request.
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_DCMI_IRQHandler</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name> <modifier>*</modifier></type><name>hdcmi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>isr_value</name> <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>MISR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Synchronization error interrupt management *******************************/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>isr_value</name> <operator>&amp;</operator> <name>DCMI_FLAG_ERRRI</name><operator>)</operator> <operator>==</operator> <name>DCMI_FLAG_ERRRI</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear the Synchronization error flag */</comment>
    <expr_stmt><expr><call><name>__HAL_DCMI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>, <argument><expr><name>DCMI_FLAG_ERRRI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update error code */</comment>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DCMI_ERROR_SYNC</name></expr>;</expr_stmt>

    <comment type="block">/* Change DCMI state */</comment>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DCMI_STATE_ERROR</name></expr>;</expr_stmt>
    
    <comment type="block">/* Set the synchronization error callback */</comment>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>DCMI_DMAError</name></expr>;</expr_stmt>

    <comment type="block">/* Abort the DMA Transfer */</comment>
    <expr_stmt><expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Overflow interrupt management ********************************************/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>isr_value</name> <operator>&amp;</operator> <name>DCMI_FLAG_OVRRI</name><operator>)</operator> <operator>==</operator> <name>DCMI_FLAG_OVRRI</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear the Overflow flag */</comment>
    <expr_stmt><expr><call><name>__HAL_DCMI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>, <argument><expr><name>DCMI_FLAG_OVRRI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update error code */</comment>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DCMI_ERROR_OVR</name></expr>;</expr_stmt>

    <comment type="block">/* Change DCMI state */</comment>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DCMI_STATE_ERROR</name></expr>;</expr_stmt>
    
    <comment type="block">/* Set the overflow callback */</comment>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>DCMI_DMAError</name></expr>;</expr_stmt>

    <comment type="block">/* Abort the DMA Transfer */</comment>
    <expr_stmt><expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Line Interrupt management ************************************************/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>isr_value</name> <operator>&amp;</operator> <name>DCMI_FLAG_LINERI</name><operator>)</operator> <operator>==</operator> <name>DCMI_FLAG_LINERI</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear the Line interrupt flag */</comment>
    <expr_stmt><expr><call><name>__HAL_DCMI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>, <argument><expr><name>DCMI_FLAG_LINERI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Line interrupt Callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DCMI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/*Call registered DCMI line event callback*/</comment>
    <expr_stmt><expr><call><name><name>hdcmi</name><operator>-&gt;</operator><name>LineEventCallback</name></name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  
    <expr_stmt><expr><call><name>HAL_DCMI_LineEventCallback</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_DCMI_REGISTER_CALLBACKS */</comment>     
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* VSYNC interrupt management ***********************************************/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>isr_value</name> <operator>&amp;</operator> <name>DCMI_FLAG_VSYNCRI</name><operator>)</operator> <operator>==</operator> <name>DCMI_FLAG_VSYNCRI</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear the VSYNC flag */</comment>
    <expr_stmt><expr><call><name>__HAL_DCMI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>, <argument><expr><name>DCMI_FLAG_VSYNCRI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* VSYNC Callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DCMI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/*Call registered DCMI vsync event callback*/</comment>
    <expr_stmt><expr><call><name><name>hdcmi</name><operator>-&gt;</operator><name>VsyncEventCallback</name></name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  
    <expr_stmt><expr><call><name>HAL_DCMI_VsyncEventCallback</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_DCMI_REGISTER_CALLBACKS */</comment> 
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* FRAME interrupt management ***********************************************/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>isr_value</name> <operator>&amp;</operator> <name>DCMI_FLAG_FRAMERI</name><operator>)</operator> <operator>==</operator> <name>DCMI_FLAG_FRAMERI</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* When snapshot mode, disable Vsync, Error and Overrun interrupts */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DCMI_CR_CM</name><operator>)</operator> <operator>==</operator> <name>DCMI_MODE_SNAPSHOT</name></expr>)</condition>
    <block>{<block_content> 
      <comment type="block">/* Disable the Line, Vsync, Error and Overrun interrupts */</comment>
      <expr_stmt><expr><call><name>__HAL_DCMI_DISABLE_IT</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>, <argument><expr><name>DCMI_IT_LINE</name> <operator>|</operator> <name>DCMI_IT_VSYNC</name> <operator>|</operator> <name>DCMI_IT_ERR</name> <operator>|</operator> <name>DCMI_IT_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Disable the Frame interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_DCMI_DISABLE_IT</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>, <argument><expr><name>DCMI_IT_FRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Frame Callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DCMI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/*Call registered DCMI frame event callback*/</comment>
    <expr_stmt><expr><call><name><name>hdcmi</name><operator>-&gt;</operator><name>FrameEventCallback</name></name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  
    <expr_stmt><expr><call><name>HAL_DCMI_FrameEventCallback</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_DCMI_REGISTER_CALLBACKS */</comment>      
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Error DCMI callback.
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DCMI_ErrorCallback</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name> <modifier>*</modifier></type><name>hdcmi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Line Event callback.
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DCMI_LineEventCallback</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name> <modifier>*</modifier></type><name>hdcmi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  VSYNC Event callback.
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DCMI_VsyncEventCallback</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name> <modifier>*</modifier></type><name>hdcmi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Frame Event callback.
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_DCMI_FrameEventCallback</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name> <modifier>*</modifier></type><name>hdcmi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DCMI_Exported_Functions_Group3 Peripheral Control functions
  *  @brief    Peripheral Control functions
  *
@verbatim
 ===============================================================================
                    ##### Peripheral Control functions #####
 ===============================================================================
[..]  This section provides functions allowing to:
      (+) Configure the CROP feature.
      (+) Enable/Disable the CROP feature.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Configure the DCMI CROP coordinate.
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @param  X0    DCMI window X offset
  * @param  Y0    DCMI window Y offset
  * @param  XSize DCMI Pixel per line
  * @param  YSize DCMI Line number
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DCMI_ConfigCrop</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name> <modifier>*</modifier></type><name>hdcmi</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>X0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Y0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>XSize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>YSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Lock the DCMI peripheral state */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DCMI_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_WINDOW_COORDINATE</name><argument_list>(<argument><expr><name>X0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_WINDOW_COORDINATE</name><argument_list>(<argument><expr><name>YSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_WINDOW_COORDINATE</name><argument_list>(<argument><expr><name>XSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_WINDOW_HEIGHT</name><argument_list>(<argument><expr><name>Y0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Configure CROP */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CWSIZER</name></name> <operator>=</operator> <operator>(</operator><name>XSize</name> <operator>|</operator> <operator>(</operator><name>YSize</name> <operator>&lt;&lt;</operator> <name>DCMI_POSITION_CWSIZE_VLINE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CWSTRTR</name></name> <operator>=</operator> <operator>(</operator><name>X0</name> <operator>|</operator> <operator>(</operator><name>Y0</name> <operator>&lt;&lt;</operator> <name>DCMI_POSITION_CWSTRT_VST</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Initialize the DCMI state*/</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name>  <operator>=</operator> <name>HAL_DCMI_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable the Crop feature.
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DCMI_DisableCrop</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name> <modifier>*</modifier></type><name>hdcmi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Lock the DCMI peripheral state */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DCMI_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable DCMI Crop feature */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>DCMI_CR_CROP</name></expr>;</expr_stmt>

  <comment type="block">/* Change the DCMI state*/</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DCMI_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enable the Crop feature.
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DCMI_EnableCrop</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name> <modifier>*</modifier></type><name>hdcmi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Lock the DCMI peripheral state */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DCMI_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Enable DCMI Crop feature */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>DCMI_CR_CROP</name></expr>;</expr_stmt>

  <comment type="block">/* Change the DCMI state*/</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DCMI_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DCMI_Exported_Functions_Group4 Peripheral State functions
  *  @brief    Peripheral State functions
  *
@verbatim
 ===============================================================================
               ##### Peripheral State and Errors functions #####
 ===============================================================================
    [..]
    This subsection provides functions allowing to
      (+) Check the DCMI state.
      (+) Get the specific DCMI error flag.

@endverbatim
  * @{
  */</comment> 

<comment type="block" format="doxygen">/**
  * @brief  Return the DCMI state
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL state
  */</comment>
<function><type><name>HAL_DCMI_StateTypeDef</name></type> <name>HAL_DCMI_GetState</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name> <modifier>*</modifier></type><name>hdcmi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the DCMI error code
  * @param  hdcmi  pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval DCMI Error Code
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_DCMI_GetError</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name> <modifier>*</modifier></type><name>hdcmi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hdcmi</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DCMI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief DCMI Callback registering
  * @param hdcmi        pointer to a DCMI_HandleTypeDef structure that contains
  *                     the configuration information for DCMI.
  * @param CallbackID   dcmi Callback ID
  * @param pCallback    pointer to DCMI_CallbackTypeDef structure
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DCMI_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name> <modifier>*</modifier></type><name>hdcmi</name></decl></parameter>, <parameter><decl><type><name>HAL_DCMI_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>, <parameter><decl><type><name>pDCMI_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* update the error code */</comment>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DCMI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>  
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DCMI_STATE_READY</name></expr>)</condition>
    <block>{<block_content>
      <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
      <block>{<block_content>
      <case>case <expr><name>HAL_DCMI_FRAME_EVENT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>FrameEventCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
        
      <case>case <expr><name>HAL_DCMI_VSYNC_EVENT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>VsyncEventCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break> 
        
      <case>case <expr><name>HAL_DCMI_LINE_EVENT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>LineEventCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
        
      <case>case <expr><name>HAL_DCMI_ERROR_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
        
      <case>case <expr><name>HAL_DCMI_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
        
      <case>case <expr><name>HAL_DCMI_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>	  
        
      <default>default :</default> 
        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DCMI_STATE_RESET</name></expr>)</condition>
    <block>{<block_content>
      <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
      <block>{<block_content>
      <case>case <expr><name>HAL_DCMI_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_DCMI_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>	  
        
      <default>default :</default> 
        <comment type="block">/* update the error code */</comment>
        <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DCMI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
        <comment type="block">/* update return status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></switch>		
    </block_content>}</block></if>  
    <else>else
    <block>{<block_content>
      <comment type="block">/* update the error code */</comment>
      <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DCMI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DCMI Callback Unregistering
  * @param hdcmi       dcmi handle
  * @param CallbackID  dcmi Callback ID
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DCMI_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name> <modifier>*</modifier></type><name>hdcmi</name></decl></parameter>, <parameter><decl><type><name>HAL_DCMI_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DCMI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_DCMI_FRAME_EVENT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>FrameEventCallback</name></name> <operator>=</operator> <name>HAL_DCMI_FrameEventCallback</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak  FrameEventCallback  */</comment> 
      <break>break;</break>
      
    <case>case <expr><name>HAL_DCMI_VSYNC_EVENT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>VsyncEventCallback</name></name> <operator>=</operator> <name>HAL_DCMI_VsyncEventCallback</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak VsyncEventCallback       */</comment> 
      <break>break;</break>
      
    <case>case <expr><name>HAL_DCMI_LINE_EVENT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>LineEventCallback</name></name> <operator>=</operator> <name>HAL_DCMI_LineEventCallback</name></expr>;</expr_stmt>    <comment type="block">/* Legacy weak LineEventCallback   */</comment>
      <break>break;</break>
      
    <case>case <expr><name>HAL_DCMI_ERROR_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>HAL_DCMI_ErrorCallback</name></expr>;</expr_stmt>           <comment type="block">/* Legacy weak ErrorCallback        */</comment> 
      <break>break;</break>  
      
    <case>case <expr><name>HAL_DCMI_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_DCMI_MspInit</name></expr>;</expr_stmt>
      <break>break;</break>
      
    <case>case <expr><name>HAL_DCMI_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_DCMI_MspDeInit</name></expr>;</expr_stmt>
      <break>break;</break>	  
      
    <default>default :</default> 
      <comment type="block">/* update the error code */</comment>
      <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DCMI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DCMI_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_DCMI_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_DCMI_MspInit</name></expr>;</expr_stmt>
      <break>break;</break>
      
    <case>case <expr><name>HAL_DCMI_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_DCMI_MspDeInit</name></expr>;</expr_stmt>
      <break>break;</break>	  
      
    <default>default :</default> 
      <comment type="block">/* update the error code */</comment>
      <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DCMI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>		
  </block_content>}</block></if>   
  <else>else
  <block>{<block_content>
    <comment type="block">/* update the error code */</comment>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_DCMI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_DCMI_REGISTER_CALLBACKS */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup DCMI_Private_Functions DCMI Private Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  DMA conversion complete callback.
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DCMI_DMAXferCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
 
  <decl_stmt><decl><type><name>DCMI_HandleTypeDef</name><modifier>*</modifier></type> <name>hdcmi</name> <init>= <expr><operator>(</operator> <name>DCMI_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator> <operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hdcmi</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update memory 0 address location */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name><operator>)</operator> <operator>&amp;</operator> <name>DMA_SxCR_CT</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>%</operator> <literal type="number">2U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tmp</name> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>M0AR</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>HAL_DMAEx_ChangeMemory</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>tmp</name> <operator>+</operator> <operator>(</operator><literal type="number">8U</literal><operator>*</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>XferSize</name></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>MEMORY0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="block">/* Update memory 1 address location */</comment>
    <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DMA_SxCR_CT</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>M1AR</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>HAL_DMAEx_ChangeMemory</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>tmp</name> <operator>+</operator> <operator>(</operator><literal type="number">8U</literal><operator>*</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>XferSize</name></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>MEMORY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Update memory 0 address location */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DMA_SxCR_CT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>M0AR</name></name> <operator>=</operator> <name><name>hdcmi</name><operator>-&gt;</operator><name>pBuffPtr</name></name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Update memory 1 address location */</comment>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DMA_SxCR_CT</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>hdcmi</name><operator>-&gt;</operator><name>pBuffPtr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>M1AR</name></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>+</operator> <operator>(</operator><literal type="number">4U</literal><operator>*</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>XferSize</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <name><name>hdcmi</name><operator>-&gt;</operator><name>XferTransferNumber</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Check if the frame is transferred */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdcmi</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>==</operator> <name><name>hdcmi</name><operator>-&gt;</operator><name>XferTransferNumber</name></name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable the Frame interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_DCMI_ENABLE_IT</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>, <argument><expr><name>DCMI_IT_FRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* When snapshot mode, set dcmi state to ready */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DCMI_CR_CM</name><operator>)</operator> <operator>==</operator> <name>DCMI_MODE_SNAPSHOT</name></expr>)</condition>
    <block>{<block_content>  
      <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_DCMI_STATE_READY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA error callback 
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DCMI_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>DCMI_HandleTypeDef</name><modifier>*</modifier></type> <name>hdcmi</name> <init>= <expr><operator>(</operator> <name>DCMI_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator> <operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hdcmi</name><operator>-&gt;</operator><name>DMA_Handle</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>!=</operator> <name>HAL_DMA_ERROR_FE</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Initialize the DCMI state*/</comment>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DCMI_STATE_READY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* DCMI error Callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_DCMI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/*Call registered DCMI error callback*/</comment>
    <expr_stmt><expr><call><name><name>hdcmi</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  
  <expr_stmt><expr><call><name>HAL_DCMI_ErrorCallback</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_DCMI_REGISTER_CALLBACKS */</comment>   

</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
  
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F407xx || STM32F417xx || STM32F427xx || STM32F437xx ||\
          STM32F429xx || STM32F439xx || STM32F446xx || STM32F469xx ||\
          STM32F479xx */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_DCMI_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
