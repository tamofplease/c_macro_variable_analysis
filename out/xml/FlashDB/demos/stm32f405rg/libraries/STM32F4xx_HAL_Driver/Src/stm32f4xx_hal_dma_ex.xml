<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma_ex.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_dma_ex.c
  * @author  MCD Application Team
  * @brief   DMA Extension HAL module driver
  *         This file provides firmware functions to manage the following 
  *         functionalities of the DMA Extension peripheral:
  *           + Extended features functions
  *
  @verbatim
  ==============================================================================
                        ##### How to use this driver #####
  ==============================================================================
  [..]
  The DMA Extension HAL driver can be used as follows:
   (#) Start a multi buffer transfer using the HAL_DMA_MultiBufferStart() function
       for polling mode or HAL_DMA_MultiBufferStart_IT() for interrupt mode.
                   
     -@-  In Memory-to-Memory transfer mode, Multi (Double) Buffer mode is not allowed.
     -@-  When Multi (Double) Buffer mode is enabled the, transfer is circular by default.
     -@-  In Multi (Double) buffer mode, it is possible to update the base address for 
          the AHB memory port on the fly (DMA_SxM0AR or DMA_SxM1AR) when the stream is enabled. 
  
  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DMAEx DMAEx
  * @brief DMA Extended HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_DMA_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block">/* Private types -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private Constants ---------------------------------------------------------*/</comment>
<comment type="block">/* Private macros ------------------------------------------------------------*/</comment>
<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup DMAEx_Private_Functions
  * @{
  */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DMA_MultiBufferSetConfig</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>SrcAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DstAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DataLength</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Exported functions ---------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @addtogroup DMAEx_Exported_Functions
  * @{
  */</comment>


<comment type="block" format="doxygen">/** @addtogroup DMAEx_Exported_Functions_Group1
  *
@verbatim   
 ===============================================================================
                #####  Extended features functions  #####
 ===============================================================================  
    [..]  This section provides functions allowing to:
      (+) Configure the source, destination address and data length and 
          Start MultiBuffer DMA transfer
      (+) Configure the source, destination address and data length and 
          Start MultiBuffer DMA transfer with interrupt
      (+) Change on the fly the memory0 or memory1 address.
      
@endverbatim
  * @{
  */</comment>


<comment type="block" format="doxygen">/**
  * @brief  Starts the multi_buffer DMA Transfer.
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.  
  * @param  SrcAddress The source memory Buffer address
  * @param  DstAddress The destination memory Buffer address
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMAEx_MultiBufferStart</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>SrcAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DstAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>SecondMemAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DataLength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA_BUFFER_SIZE</name><argument_list>(<argument><expr><name>DataLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Memory-to-memory transfer not supported in double buffering mode */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Direction</name></name> <operator>==</operator> <name>DMA_MEMORY_TO_MEMORY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_NOT_SUPPORTED</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><name>HAL_DMA_STATE_READY</name> <operator>==</operator> <name><name>hdma</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Change DMA peripheral state */</comment>
      <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA_STATE_BUSY</name></expr>;</expr_stmt> 
      
      <comment type="block">/* Enable the double buffer mode */</comment>
      <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA_SxCR_DBM</name></expr>;</expr_stmt>
      
      <comment type="block">/* Configure DMA Stream destination address */</comment>
      <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>M1AR</name></name> <operator>=</operator> <name>SecondMemAddress</name></expr>;</expr_stmt>
      
      <comment type="block">/* Configure the source, destination address and the data length */</comment>
      <expr_stmt><expr><call><name>DMA_MultiBufferSetConfig</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><name>SrcAddress</name></expr></argument>, <argument><expr><name>DstAddress</name></expr></argument>, <argument><expr><name>DataLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Enable the peripheral */</comment>
      <expr_stmt><expr><call><name>__HAL_DMA_ENABLE</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Return error status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_BUSY</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Starts the multi_buffer DMA Transfer with interrupt enabled.
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.  
  * @param  SrcAddress The source memory Buffer address
  * @param  DstAddress The destination memory Buffer address
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMAEx_MultiBufferStart_IT</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>SrcAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DstAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>SecondMemAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DataLength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA_BUFFER_SIZE</name><argument_list>(<argument><expr><name>DataLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Memory-to-memory transfer not supported in double buffering mode */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Direction</name></name> <operator>==</operator> <name>DMA_MEMORY_TO_MEMORY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_NOT_SUPPORTED</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Check callback functions */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>NULL</name> <operator>==</operator> <name><name>hdma</name><operator>-&gt;</operator><name>XferCpltCallback</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <name><name>hdma</name><operator>-&gt;</operator><name>XferM1CpltCallback</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <name><name>hdma</name><operator>-&gt;</operator><name>XferErrorCallback</name></name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_PARAM</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name>HAL_DMA_STATE_READY</name> <operator>==</operator> <name><name>hdma</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Change DMA peripheral state */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA_STATE_BUSY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Initialize the error code */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_NONE</name></expr>;</expr_stmt>
    
    <comment type="block">/* Enable the Double buffer mode */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA_SxCR_DBM</name></expr>;</expr_stmt>
    
    <comment type="block">/* Configure DMA Stream destination address */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>M1AR</name></name> <operator>=</operator> <name>SecondMemAddress</name></expr>;</expr_stmt>
    
    <comment type="block">/* Configure the source, destination address and the data length */</comment>
    <expr_stmt><expr><call><name>DMA_MultiBufferSetConfig</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><name>SrcAddress</name></expr></argument>, <argument><expr><name>DstAddress</name></expr></argument>, <argument><expr><name>DataLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    
    <comment type="block">/* Clear all flags */</comment>
    <expr_stmt><expr><call><name>__HAL_DMA_CLEAR_FLAG</name> <argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><call><name>__HAL_DMA_GET_TC_FLAG_INDEX</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_DMA_CLEAR_FLAG</name> <argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><call><name>__HAL_DMA_GET_HT_FLAG_INDEX</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_DMA_CLEAR_FLAG</name> <argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><call><name>__HAL_DMA_GET_TE_FLAG_INDEX</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_DMA_CLEAR_FLAG</name> <argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><call><name>__HAL_DMA_GET_DME_FLAG_INDEX</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_DMA_CLEAR_FLAG</name> <argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><call><name>__HAL_DMA_GET_FE_FLAG_INDEX</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable Common interrupts*/</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name>  <operator>|=</operator> <name>DMA_IT_TC</name> <operator>|</operator> <name>DMA_IT_TE</name> <operator>|</operator> <name>DMA_IT_DME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FCR</name></name> <operator>|=</operator> <name>DMA_IT_FE</name></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>XferM1HalfCpltCallback</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name>  <operator>|=</operator> <name>DMA_IT_HT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Enable the peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_DMA_ENABLE</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>     
    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	  
    
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_BUSY</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>  
  <return>return <expr><name>status</name></expr>;</return> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Change the memory0 or memory1 address on the fly.
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.  
  * @param  Address    The new address
  * @param  memory     the memory to be changed, This parameter can be one of 
  *                     the following values:
  *                      MEMORY0 /
  *                      MEMORY1
  * @note   The MEMORY0 address can be changed only when the current transfer use
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMAEx_ChangeMemory</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Address</name></decl></parameter>, <parameter><decl><type><name>HAL_DMA_MemoryTypeDef</name></type> <name>memory</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><name>memory</name> <operator>==</operator> <name>MEMORY0</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* change the memory0 address */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>M0AR</name></name> <operator>=</operator> <name>Address</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* change the memory1 address */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>M1AR</name></name> <operator>=</operator> <name>Address</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup DMAEx_Private_Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Set the DMA Transfer parameter.
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.  
  * @param  SrcAddress The source memory Buffer address
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DMA_MultiBufferSetConfig</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>SrcAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DstAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DataLength</name></decl></parameter>)</parameter_list>
<block>{<block_content>  
  <comment type="block">/* Configure DMA Stream data length */</comment>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>NDTR</name></name> <operator>=</operator> <name>DataLength</name></expr>;</expr_stmt>
  
  <comment type="block">/* Peripheral to Memory */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Direction</name></name><operator>)</operator> <operator>==</operator> <name>DMA_MEMORY_TO_PERIPH</name></expr>)</condition>
  <block>{<block_content>   
    <comment type="block">/* Configure DMA Stream destination address */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>PAR</name></name> <operator>=</operator> <name>DstAddress</name></expr>;</expr_stmt>
    
    <comment type="block">/* Configure DMA Stream source address */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>M0AR</name></name> <operator>=</operator> <name>SrcAddress</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Memory to Peripheral */</comment>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Configure DMA Stream source address */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>PAR</name></name> <operator>=</operator> <name>SrcAddress</name></expr>;</expr_stmt>
    
    <comment type="block">/* Configure DMA Stream destination address */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>M0AR</name></name> <operator>=</operator> <name>DstAddress</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_DMA_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
