<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_sai_ex.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_sai_ex.c
  * @author  MCD Application Team
  * @brief   SAI Extension HAL module driver.
  *          This file provides firmware functions to manage the following 
  *          functionalities of SAI extension peripheral:
  *           + Extension features functions
  *         
  @verbatim
  ==============================================================================
               ##### SAI peripheral extension features  #####
  ==============================================================================
           
  [..] Comparing to other previous devices, the SAI interface for STM32F446xx 
       devices contains the following additional features :
       
       (+) Possibility to be clocked from PLLR
   
                     ##### How to use this driver #####
  ==============================================================================
  [..] This driver provides functions to manage several sources to clock SAI
  
  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment> 

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup SAIEx SAIEx
  * @brief SAI Extension HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_SAI_MODULE_ENABLED</name></cpp:ifdef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block">/* SAI registers Masks */</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup SAI_Private_Functions  SAI Private Functions
  * @{
  */</comment>
 <comment type="block" format="doxygen">/**
  * @}
  */</comment>
  
<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup SAIEx_Exported_Functions SAI Extended Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup SAIEx_Exported_Functions_Group1 Extension features functions 
  *  @brief   Extension features functions
  *
@verbatim    
 ===============================================================================
                       ##### Extension features Functions #####
 ===============================================================================
    [..]
    This subsection provides a set of functions allowing to manage the possible 
    SAI clock sources.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Configure SAI Block synchronization mode
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.   
  * @retval SAI Clock Input 
  */</comment>
<function><type><name>void</name></type> <name>SAI_BlockSynchroConfig</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpregisterGCR</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call></expr></cpp:if>  
  <comment type="block">/* This setting must be done with both audio block (A &amp; B) disabled         */</comment>
  <switch>switch<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SynchroExt</name></name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>SAI_SYNCEXT_DISABLE</name></expr> :</case>
    <expr_stmt><expr><name>tmpregisterGCR</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>SAI_SYNCEXT_OUTBLOCKA_ENABLE</name></expr> :</case>
    <expr_stmt><expr><name>tmpregisterGCR</name> <operator>=</operator> <name>SAI_GCR_SYNCOUT_0</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>SAI_SYNCEXT_OUTBLOCKB_ENABLE</name></expr> :</case>
    <expr_stmt><expr><name>tmpregisterGCR</name> <operator>=</operator> <name>SAI_GCR_SYNCOUT_1</name></expr>;</expr_stmt>
    <break>break;</break>
  <default>default:</default>
    <expr_stmt><expr><name>tmpregisterGCR</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></switch>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Synchro</name></name><operator>)</operator> <operator>==</operator> <name>SAI_SYNCHRONOUS_EXT_SAI2</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmpregisterGCR</name> <operator>|=</operator> <name>SAI_GCR_SYNCIN_0</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>SAI1_Block_A</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>SAI1_Block_B</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>SAI1</name><operator>-&gt;</operator><name>GCR</name></name> <operator>=</operator> <name>tmpregisterGCR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else 
  <block>{<block_content>
    <expr_stmt><expr><name><name>SAI2</name><operator>-&gt;</operator><name>GCR</name></name> <operator>=</operator> <name>tmpregisterGCR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F446xx */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* This setting must be done with both audio block (A &amp; B) disabled         */</comment>
  <switch>switch<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SynchroExt</name></name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>SAI_SYNCEXT_DISABLE</name></expr> :</case>
    <expr_stmt><expr><name>tmpregisterGCR</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>SAI_SYNCEXT_OUTBLOCKA_ENABLE</name></expr> :</case>
    <expr_stmt><expr><name>tmpregisterGCR</name> <operator>=</operator> <name>SAI_GCR_SYNCOUT_0</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>SAI_SYNCEXT_OUTBLOCKB_ENABLE</name></expr> :</case>
    <expr_stmt><expr><name>tmpregisterGCR</name> <operator>=</operator> <name>SAI_GCR_SYNCOUT_1</name></expr>;</expr_stmt>
    <break>break;</break>
  <default>default:</default>
    <expr_stmt><expr><name>tmpregisterGCR</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><name><name>SAI1</name><operator>-&gt;</operator><name>GCR</name></name> <operator>=</operator> <name>tmpregisterGCR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */</comment> 
</block_content>}</block></function>
  <comment type="block" format="doxygen">/**
  * @brief  Get SAI Input Clock based on SAI source clock selection
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.   
  * @retval SAI Clock Input 
  */</comment>
<function><type><name>uint32_t</name></type> <name>SAI_GetInputClock</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>   
<block>{<block_content>
  <comment type="block">/* This variable used to store the SAI_CK_x (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>saiclocksource</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>SAI1_Block_A</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>SAI1_Block_B</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>saiclocksource</name> <operator>=</operator> <call><name>HAL_RCCEx_GetPeriphCLKFreq</name><argument_list>(<argument><expr><name>RCC_PERIPHCLK_SAI1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <comment type="block">/* SAI2_Block_A || SAI2_Block_B*/</comment>
  <block>{<block_content>
    <expr_stmt><expr><name>saiclocksource</name> <operator>=</operator> <call><name>HAL_RCCEx_GetPeriphCLKFreq</name><argument_list>(<argument><expr><name>RCC_PERIPHCLK_SAI2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F446xx */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call> <operator>||</operator> \
  <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>vcoinput</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>tmpreg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the SAI Block parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_CLK_SOURCE</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockSource</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
  <comment type="block">/* SAI Block clock source selection */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>SAI1_Block_A</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockSource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockSource</name></name> <operator>&lt;&lt;</operator> <literal type="number">2U</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* VCO Input Clock value calculation */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSI</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* In Case the PLL Source is HSI (Internal Clock) */</comment>
    <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>HSI_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* In Case the PLL Source is HSE (External Clock) */</comment>
    <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
 <comment type="block">/* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockSource</name></name> <operator>==</operator> <name>SAI_CLKSOURCE_PLLR</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Configure the PLLI2S division factor */</comment>
    <comment type="block">/* PLL_VCO Input  = PLL_SOURCE/PLLM */</comment>
    <comment type="block">/* PLL_VCO Output = PLL_VCO Input * PLLN */</comment>
    <comment type="block">/* SAI_CLK(first level) = PLL_VCO Output/PLLR */</comment>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLR</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>saiclocksource</name> <operator>=</operator> <operator>(</operator><name>vcoinput</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator><operator>)</operator><operator>/</operator><operator>(</operator><name>tmpreg</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */</comment>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_PLLDIVR</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
      
    <expr_stmt><expr><name>saiclocksource</name> <operator>=</operator> <name>saiclocksource</name><operator>/</operator><operator>(</operator><name>tmpreg</name><operator>)</operator></expr>;</expr_stmt> 

  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockSource</name></name> <operator>==</operator> <name>SAI_CLKSOURCE_PLLI2S</name></expr>)</condition>
  <block>{<block_content>        
    <comment type="block">/* Configure the PLLI2S division factor */</comment>
    <comment type="block">/* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */</comment>
    <comment type="block">/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */</comment>
    <comment type="block">/* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */</comment>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>saiclocksource</name> <operator>=</operator> <operator>(</operator><name>vcoinput</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator><operator>)</operator><operator>/</operator><operator>(</operator><name>tmpreg</name><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */</comment>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_PLLI2SDIVR</name><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt> 
    <expr_stmt><expr><name>saiclocksource</name> <operator>=</operator> <name>saiclocksource</name><operator>/</operator><operator>(</operator><name>tmpreg</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockSource</name></name> <operator>==</operator> <name>SAI_CLKSOURCE_HS</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Get the I2S source clock value */</comment>
      <expr_stmt><expr><name>saiclocksource</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSE_VALUE</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Get the I2S source clock value */</comment>
      <expr_stmt><expr><name>saiclocksource</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSI_VALUE</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else <comment type="block">/* sConfig-&gt;ClockSource == SAI_CLKSource_Ext */</comment>
  <block>{<block_content>
    <expr_stmt><expr><name>saiclocksource</name> <operator>=</operator> <name>EXTERNAL_CLOCK_VALUE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockSource</name></name> <operator>==</operator> <name>SAI_CLKSOURCE_PLLSAI</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Configure the PLLI2S division factor */</comment>
    <comment type="block">/* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */</comment>
    <comment type="block">/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */</comment>
    <comment type="block">/* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */</comment>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>saiclocksource</name> <operator>=</operator> <operator>(</operator><name>vcoinput</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator><operator>)</operator><operator>/</operator><operator>(</operator><name>tmpreg</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */</comment>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_PLLSAIDIVQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>saiclocksource</name> <operator>=</operator> <name>saiclocksource</name><operator>/</operator><operator>(</operator><name>tmpreg</name><operator>)</operator></expr>;</expr_stmt> 

  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockSource</name></name> <operator>==</operator> <name>SAI_CLKSOURCE_PLLI2S</name></expr>)</condition>
  <block>{<block_content>        
    <comment type="block">/* Configure the PLLI2S division factor */</comment>
    <comment type="block">/* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */</comment>
    <comment type="block">/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */</comment>
    <comment type="block">/* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */</comment>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>saiclocksource</name> <operator>=</operator> <operator>(</operator><name>vcoinput</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator><operator>)</operator><operator>/</operator><operator>(</operator><name>tmpreg</name><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */</comment>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_PLLI2SDIVQ</name><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt> 
    <expr_stmt><expr><name>saiclocksource</name> <operator>=</operator> <name>saiclocksource</name><operator>/</operator><operator>(</operator><name>tmpreg</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <comment type="block">/* sConfig-&gt;ClockSource == SAI_CLKSource_Ext */</comment>
  <block>{<block_content>
    <comment type="block">/* Enable the External Clock selection */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_I2S_CONFIG</name><argument_list>(<argument><expr><name>RCC_I2SCLKSOURCE_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>saiclocksource</name> <operator>=</operator> <name>EXTERNAL_CLOCK_VALUE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F413xx || STM32F423xx */</comment>  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */</comment>
       <comment type="block">/* the return result is the value of SAI clock */</comment>
  <return>return <expr><name>saiclocksource</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx  || STM32F446xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_SAI_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
