<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_rcc_ex.c
  * @author  MCD Application Team
  * @brief   Extension RCC HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities RCC extension peripheral:
  *           + Extended Peripheral Control functions
  *
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RCCEx RCCEx
  * @brief RCCEx HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_RCC_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup RCCEx_Private_Constants
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup RCCEx_Exported_Functions RCCEx Exported Functions
  *  @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RCCEx_Exported_Functions_Group1 Extended Peripheral Control functions
 *  @brief  Extended Peripheral Control functions
 *
@verbatim
 ===============================================================================
                ##### Extended Peripheral Control functions  #####
 ===============================================================================
    [..]
    This subsection provides a set of functions allowing to control the RCC Clocks
    frequencies.
    [..]
    (@) Important note: Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to
        select the RTC clock source; in this case the Backup domain will be reset in
        order to modify the RTC Clock source, as consequence RTC registers (including
        the backup registers) and RCC_BDCR register are set to their reset values.

@endverbatim
  * @{
  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Initializes the RCC extended peripherals clocks according to the specified
  *         parameters in the RCC_PeriphCLKInitTypeDef.
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         contains the configuration information for the Extended Peripherals
  *         clocks(I2S, SAI, LTDC RTC and TIM).
  *
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source; in this case the Backup domain will be reset in
  *         order to modify the RTC Clock source, as consequence RTC registers (including
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCCEx_PeriphCLKConfig</name><parameter_list>(<parameter><decl><type><name>RCC_PeriphCLKInitTypeDef</name>  <modifier>*</modifier></type><name>PeriphClkInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg1</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>plli2sp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>plli2sq</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>plli2sr</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pllsaip</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pllsaiq</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>plli2sused</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pllsaiused</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the peripheral clock selection parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PERIPHCLOCK</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*------------------------ I2S APB1 configuration --------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_I2S_APB1</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_I2S_APB1</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_I2SAPB1CLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb1ClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure I2S Clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_I2S_APB1_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb1ClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Enable the PLLI2S when it's used as clock source for I2S */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb1ClockSelection</name></name> <operator>==</operator> <name>RCC_I2SAPB1CLKSOURCE_PLLI2S</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>plli2sused</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*---------------------------- I2S APB2 configuration ----------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_I2S_APB2</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_I2S_APB2</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_I2SAPB2CLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb2ClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure I2S Clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_I2S_APB2_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb2ClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Enable the PLLI2S when it's used as clock source for I2S */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb2ClockSelection</name></name> <operator>==</operator> <name>RCC_I2SAPB2CLKSOURCE_PLLI2S</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>plli2sused</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*--------------------------- SAI1 configuration ---------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SAI1</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_SAI1</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_SAI1CLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Sai1ClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure SAI1 Clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_SAI1_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Sai1ClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Enable the PLLI2S when it's used as clock source for SAI */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Sai1ClockSelection</name></name> <operator>==</operator> <name>RCC_SAI1CLKSOURCE_PLLI2S</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>plli2sused</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Enable the PLLSAI when it's used as clock source for SAI */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Sai1ClockSelection</name></name> <operator>==</operator> <name>RCC_SAI1CLKSOURCE_PLLSAI</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>pllsaiused</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*-------------------------- SAI2 configuration ----------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SAI2</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_SAI2</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_SAI2CLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Sai2ClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure SAI2 Clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_SAI2_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Sai2ClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the PLLI2S when it's used as clock source for SAI */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Sai2ClockSelection</name></name> <operator>==</operator> <name>RCC_SAI2CLKSOURCE_PLLI2S</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>plli2sused</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Enable the PLLSAI when it's used as clock source for SAI */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Sai2ClockSelection</name></name> <operator>==</operator> <name>RCC_SAI2CLKSOURCE_PLLSAI</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>pllsaiused</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*----------------------------- RTC configuration --------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_RTC</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_RTC</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for RTC Parameters used to output RTCCLK */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_RTCCLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable Power Clock*/</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PWR_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable write access to Backup domain */</comment>
    <expr_stmt><expr><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <name>PWR_CR_DBP</name></expr>;</expr_stmt>

    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>(<expr><operator>(</operator><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>PWR_CR_DBP</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RCC_DBP_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <comment type="block">/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */</comment>
    <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>tmpreg1</name> <operator>!=</operator> <literal type="number">0x00000000U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>tmpreg1</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Store the content of BDCR register before the reset of Backup Domain */</comment>
      <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* RTC Clock selection can be changed only if the Backup Domain is reset */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_BACKUPRESET_FORCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>__HAL_RCC_BACKUPRESET_RELEASE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Restore the Content of BDCR register */</comment>
      <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>=</operator> <name>tmpreg1</name></expr>;</expr_stmt>

      <comment type="block">/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */</comment>
      <if_stmt><if>if<condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name></expr></argument>, <argument><expr><name>RCC_BDCR_LSEON</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Get tick */</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till LSE is ready */</comment>
        <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_LSERDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RCC_LSE_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>__HAL_RCC_RTC_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*---------------------------- TIM configuration ---------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_TIM</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_TIM</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Configure Timer Prescaler */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_TIMCLKPRESCALER</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>TIMPresSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*---------------------------- FMPI2C1 Configuration -----------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_FMPI2C1</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_FMPI2C1</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_FMPI2C1CLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Fmpi2c1ClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the FMPI2C1 clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_FMPI2C1_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Fmpi2c1ClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*------------------------------ CEC Configuration -------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_CEC</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_CEC</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_CECCLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>CecClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the CEC clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_CEC_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>CecClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*----------------------------- CLK48 Configuration ------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_CLK48</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_CLK48</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_CLK48CLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Clk48ClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the CLK48 clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_CLK48_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Clk48ClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the PLLSAI when it's used as clock source for CLK48 */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Clk48ClockSelection</name></name> <operator>==</operator> <name>RCC_CLK48CLKSOURCE_PLLSAIP</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>pllsaiused</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*----------------------------- SDIO Configuration -------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SDIO</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_SDIO</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_SDIOCLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SdioClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the SDIO clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_SDIO_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SdioClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*------------------------------ SPDIFRX Configuration ---------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SPDIFRX</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_SPDIFRX</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_SPDIFRXCLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SpdifClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the SPDIFRX clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_SPDIFRX_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SpdifClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Enable the PLLI2S when it's used as clock source for SPDIFRX */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SpdifClockSelection</name></name> <operator>==</operator> <name>RCC_SPDIFRXCLKSOURCE_PLLI2SP</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>plli2sused</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*---------------------------- PLLI2S Configuration ------------------------*/</comment>
  <comment type="block">/* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>plli2sused</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name> <operator>==</operator> <name>RCC_PERIPHCLK_PLLI2S</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the PLLI2S */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Wait till PLLI2S is disabled */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLI2SRDY</name></expr></argument>)</argument_list></call>  <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLI2S_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* return in case of Timeout detected */</comment>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* check for common PLLI2S Parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SM_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SM</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SN_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*------ In Case of PLLI2S is selected as source clock for I2S -----------*/</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_I2S_APB1</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_I2S_APB1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb1ClockSelection</name></name> <operator>==</operator> <name>RCC_I2SAPB1CLKSOURCE_PLLI2S</name><operator>)</operator><operator>)</operator> <operator>||</operator>
       <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_I2S_APB2</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_I2S_APB2</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb2ClockSelection</name></name> <operator>==</operator> <name>RCC_I2SAPB2CLKSOURCE_PLLI2S</name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* check for Parameters */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SR_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */</comment>
      <expr_stmt><expr><name>plli2sp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SP</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SP_Pos</name><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>plli2sq</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SQ_Pos</name><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* Configure the PLLI2S division factors */</comment>
      <comment type="block">/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */</comment>
      <comment type="block">/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SM</name></name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name></expr></argument> , <argument><expr><name>plli2sp</name></expr></argument>, <argument><expr><name>plli2sq</name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*------- In Case of PLLI2S is selected as source clock for SAI ----------*/</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SAI1</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_SAI1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Sai1ClockSelection</name></name> <operator>==</operator> <name>RCC_SAI1CLKSOURCE_PLLI2S</name><operator>)</operator><operator>)</operator> <operator>||</operator>
       <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SAI2</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_SAI2</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Sai2ClockSelection</name></name> <operator>==</operator> <name>RCC_SAI2CLKSOURCE_PLLI2S</name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check for PLLI2S Parameters */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SQ_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SQ</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Check for PLLI2S/DIVQ parameters */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2S_DIVQ_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2SDivQ</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */</comment>
      <expr_stmt><expr><name>plli2sp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SP</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SP_Pos</name><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>plli2sr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR_Pos</name><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* Configure the PLLI2S division factors */</comment>
      <comment type="block">/* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */</comment>
      <comment type="block">/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */</comment>
      <comment type="block">/* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SM</name></name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name></expr></argument> , <argument><expr><name>plli2sp</name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SQ</name></name></expr></argument>, <argument><expr><name>plli2sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2SDivQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SPDIFRX</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_SPDIFRX</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SpdifClockSelection</name></name> <operator>==</operator> <name>RCC_SPDIFRXCLKSOURCE_PLLI2SP</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* check for Parameters */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SP_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */</comment>
      <expr_stmt><expr><name>plli2sq</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SP</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SP_Pos</name><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>plli2sr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR_Pos</name><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* Configure the PLLI2S division factors */</comment>
      <comment type="block">/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */</comment>
      <comment type="block">/* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SM</name></name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name></expr></argument> , <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SP</name></name></expr></argument>, <argument><expr><name>plli2sq</name></expr></argument>, <argument><expr><name>plli2sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

     <comment type="block">/*----------------- In Case of PLLI2S is just selected  -----------------*/</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name> <operator>&amp;</operator> <name>RCC_PERIPHCLK_PLLI2S</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_PLLI2S</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check for Parameters */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SP_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SR_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SQ_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SQ</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Configure the PLLI2S division factors */</comment>
      <comment type="block">/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SM</name></name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name></expr></argument> , <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SP</name></name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SQ</name></name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Enable the PLLI2S */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Wait till PLLI2S is ready */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLI2SRDY</name></expr></argument>)</argument_list></call>  <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLI2S_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* return in case of Timeout detected */</comment>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*----------------------------- PLLSAI Configuration -----------------------*/</comment>
  <comment type="block">/* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */</comment>
  <if_stmt><if>if<condition>(<expr><name>pllsaiused</name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable PLLSAI Clock */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Wait till PLLSAI is disabled */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RCC_PLLSAI_GET_FLAG</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLSAI_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* return in case of Timeout detected */</comment>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Check the PLLSAI division factors */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAIM_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIM</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAIN_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*------ In Case of PLLSAI is selected as source clock for SAI -----------*/</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SAI1</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_SAI1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Sai1ClockSelection</name></name> <operator>==</operator> <name>RCC_SAI1CLKSOURCE_PLLSAI</name><operator>)</operator><operator>)</operator> <operator>||</operator>
       <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SAI2</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_SAI2</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Sai2ClockSelection</name></name> <operator>==</operator> <name>RCC_SAI2CLKSOURCE_PLLSAI</name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* check for PLLSAIQ Parameter */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAIQ_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIQ</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* check for PLLSAI/DIVQ Parameter */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAI_DIVQ_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAIDivQ</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */</comment>
      <expr_stmt><expr><name>pllsaip</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIP</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIP_Pos</name><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */</comment>
      <comment type="block">/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */</comment>
      <comment type="block">/* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIM</name></name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIN</name></name></expr></argument> , <argument><expr><name>pllsaip</name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIQ</name></name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAIDivQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/</comment>
    <comment type="block">/* In Case of PLLI2S is selected as source clock for CLK48 */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_CLK48</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_CLK48</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Clk48ClockSelection</name></name> <operator>==</operator> <name>RCC_CLK48CLKSOURCE_PLLSAIP</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* check for Parameters */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAIP_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */</comment>
      <expr_stmt><expr><name>pllsaiq</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIQ_Pos</name><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* Configure the PLLSAI division factors */</comment>
      <comment type="block">/* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */</comment>
      <comment type="block">/* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIM</name></name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIN</name></name></expr></argument> , <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIP</name></name></expr></argument>, <argument><expr><name>pllsaiq</name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Enable PLLSAI Clock */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Wait till PLLSAI is ready */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RCC_PLLSAI_GET_FLAG</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLSAI_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* return in case of Timeout detected */</comment>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Get the RCC_PeriphCLKInitTypeDef according to the internal
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         will be configured.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RCCEx_GetPeriphCLKConfig</name><parameter_list>(<parameter><decl><type><name>RCC_PeriphCLKInitTypeDef</name>  <modifier>*</modifier></type><name>PeriphClkInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tempreg</name></decl>;</decl_stmt>

  <comment type="block">/* Set all possible values for the extended clock type parameter------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name> <operator>=</operator> <name>RCC_PERIPHCLK_I2S_APB1</name> <operator>|</operator> <name>RCC_PERIPHCLK_I2S_APB2</name> <operator>|</operator>\
                                        <name>RCC_PERIPHCLK_SAI1</name>     <operator>|</operator> <name>RCC_PERIPHCLK_SAI2</name>     <operator>|</operator>\
                                        <name>RCC_PERIPHCLK_TIM</name>      <operator>|</operator> <name>RCC_PERIPHCLK_RTC</name>      <operator>|</operator>\
                                        <name>RCC_PERIPHCLK_CEC</name>      <operator>|</operator> <name>RCC_PERIPHCLK_FMPI2C1</name>  <operator>|</operator>\
                                        <name>RCC_PERIPHCLK_CLK48</name>     <operator>|</operator> <name>RCC_PERIPHCLK_SDIO</name>     <operator>|</operator>\
                                        <name>RCC_PERIPHCLK_SPDIFRX</name></expr>;</expr_stmt>

  <comment type="block">/* Get the PLLI2S Clock configuration --------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SM</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SM</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SM_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SP</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SP</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SP_Pos</name><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SQ</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SQ_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <comment type="block">/* Get the PLLSAI Clock configuration --------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIM</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIM</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIM_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIN</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIN</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIN_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIP</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIP</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIP_Pos</name><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIQ</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIQ_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <comment type="block">/* Get the PLLSAI/PLLI2S division factors ----------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2SDivQ</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_PLLI2SDIVQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_DCKCFGR_PLLI2SDIVQ_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAIDivQ</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_PLLSAIDIVQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_DCKCFGR_PLLSAIDIVQ_Pos</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Get the SAI1 clock configuration ----------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Sai1ClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_SAI1_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the SAI2 clock configuration ----------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Sai2ClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_SAI2_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the I2S APB1 clock configuration ------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb1ClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_I2S_APB1_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the I2S APB2 clock configuration ------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb2ClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_I2S_APB2_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the RTC Clock configuration -----------------------------------------*/</comment>
  <expr_stmt><expr><name>tempreg</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_RTCPRE</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tempreg</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Get the CEC clock configuration -----------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>CecClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_CEC_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the FMPI2C1 clock configuration -------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Fmpi2c1ClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_FMPI2C1_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the CLK48 clock configuration ----------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Clk48ClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_CLK48_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the SDIO clock configuration ----------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SdioClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_SDIO_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the SPDIFRX clock configuration -------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SpdifClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_SPDIFRX_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the TIM Prescaler configuration -------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_TIMPRE</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>TIMPresSelection</name></name> <operator>=</operator> <name>RCC_TIMPRES_DESACTIVATED</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>TIMPresSelection</name></name> <operator>=</operator> <name>RCC_TIMPRES_ACTIVATED</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the peripheral clock frequency for a given peripheral(SAI..)
  * @note   Return 0 if peripheral clock identifier not managed by this API
  * @param  PeriphClk Peripheral clock identifier
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RCCEx_GetPeriphCLKFreq</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>PeriphClk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg1</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* This variable used to store the SAI clock frequency (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>frequency</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* This variable used to store the VCO Input (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>vcoinput</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* This variable used to store the SAI clock source */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>saiclocksource</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>srcclk</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* This variable used to store the VCO Output (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>vcooutput</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>PeriphClk</name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>RCC_PERIPHCLK_SAI1</name></expr>:</case>
  <case>case <expr><name>RCC_PERIPHCLK_SAI2</name></expr>:</case>
    <block>{<block_content>
      <expr_stmt><expr><name>saiclocksource</name> <operator>=</operator> <name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>saiclocksource</name> <operator>&amp;=</operator> <operator>(</operator><name>RCC_DCKCFGR_SAI1SRC</name> <operator>|</operator> <name>RCC_DCKCFGR_SAI2SRC</name><operator>)</operator></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>saiclocksource</name></expr>)</condition>
      <block>{<block_content>
      <case>case <expr><literal type="number">0U</literal></expr>:</case> <comment type="block">/* PLLSAI is the clock source for SAI*/</comment>
        <block>{<block_content>
          <comment type="block">/* Configure the PLLSAI division factor */</comment>
          <comment type="block">/* PLLSAI_VCO Input  = PLL_SOURCE/PLLSAIM */</comment>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSI</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* In Case the PLL Source is HSI (Internal Clock) */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>HSI_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* In Case the PLL Source is HSE (External Clock) */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIM</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <comment type="block">/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */</comment>
          <comment type="block">/* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */</comment>
          <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>vcoinput</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator><operator>)</operator><operator>/</operator><operator>(</operator><name>tmpreg1</name><operator>)</operator></expr>;</expr_stmt>

          <comment type="block">/* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */</comment>
          <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_PLLSAIDIVQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>frequency</name><operator>/</operator><operator>(</operator><name>tmpreg1</name><operator>)</operator></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      <case>case <expr><name>RCC_DCKCFGR_SAI1SRC_0</name></expr>:</case> <comment type="block">/* PLLI2S is the clock source for SAI*/</comment>
      <case>case <expr><name>RCC_DCKCFGR_SAI2SRC_0</name></expr>:</case> <comment type="block">/* PLLI2S is the clock source for SAI*/</comment>
        <block>{<block_content>
          <comment type="block">/* Configure the PLLI2S division factor */</comment>
          <comment type="block">/* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */</comment>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSI</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* In Case the PLL Source is HSI (Internal Clock) */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>HSI_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* In Case the PLL Source is HSE (External Clock) */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SM</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <comment type="block">/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */</comment>
          <comment type="block">/* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */</comment>
          <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>vcoinput</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator><operator>)</operator><operator>/</operator><operator>(</operator><name>tmpreg1</name><operator>)</operator></expr>;</expr_stmt>

          <comment type="block">/* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */</comment>
          <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_PLLI2SDIVQ</name><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>frequency</name><operator>/</operator><operator>(</operator><name>tmpreg1</name><operator>)</operator></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      <case>case <expr><name>RCC_DCKCFGR_SAI1SRC_1</name></expr>:</case> <comment type="block">/* PLLR is the clock source for SAI*/</comment>
      <case>case <expr><name>RCC_DCKCFGR_SAI2SRC_1</name></expr>:</case> <comment type="block">/* PLLR is the clock source for SAI*/</comment>
        <block>{<block_content>
          <comment type="block">/* Configure the PLLI2S division factor */</comment>
          <comment type="block">/* PLL_VCO Input  = PLL_SOURCE/PLLM */</comment>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSI</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* In Case the PLL Source is HSI (Internal Clock) */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>HSI_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* In Case the PLL Source is HSE (External Clock) */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <comment type="block">/* PLL_VCO Output = PLL_VCO Input * PLLN */</comment>
          <comment type="block">/* SAI_CLK_x = PLL_VCO Output/PLLR */</comment>
          <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLR</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28U</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>vcoinput</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator><operator>)</operator><operator>/</operator><operator>(</operator><name>tmpreg1</name><operator>)</operator></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      <case>case <expr><name>RCC_DCKCFGR_SAI1SRC</name></expr>:</case> <comment type="block">/* External clock is the clock source for SAI*/</comment>
        <block>{<block_content>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>EXTERNAL_CLOCK_VALUE</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      <case>case <expr><name>RCC_DCKCFGR_SAI2SRC</name></expr>:</case> <comment type="block">/* PLLSRC(HSE or HSI) is the clock source for SAI*/</comment>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSI</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* In Case the PLL Source is HSI (Internal Clock) */</comment>
            <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSI_VALUE</name><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* In Case the PLL Source is HSE (External Clock) */</comment>
            <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSE_VALUE</name><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <break>break;</break>
        </block_content>}</block>
      <default>default :</default>
        <block>{<block_content>
          <break>break;</break>
        </block_content>}</block>
      </block_content>}</block></switch>
      <break>break;</break>
    </block_content>}</block>
  <case>case <expr><name>RCC_PERIPHCLK_I2S_APB1</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Get the current I2S source */</comment>
      <expr_stmt><expr><name>srcclk</name> <operator>=</operator> <call><name>__HAL_RCC_GET_I2S_APB1_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>srcclk</name></expr>)</condition>
      <block>{<block_content>
      <comment type="block">/* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SAPB1CLKSOURCE_EXT</name></expr>:</case>
        <block>{<block_content>
          <comment type="block">/* Set the I2S clock to the external clock  value */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>EXTERNAL_CLOCK_VALUE</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      <comment type="block">/* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SAPB1CLKSOURCE_PLLI2S</name></expr>:</case>
        <block>{<block_content>
          <comment type="block">/* Configure the PLLI2S division factor */</comment>
          <comment type="block">/* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */</comment>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSI_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <comment type="block">/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */</comment>
          <expr_stmt><expr><name>vcooutput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcoinput</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLI2SCFGR_PLLI2SN</name> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <comment type="block">/* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcooutput</name> <operator>/</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLI2SCFGR_PLLI2SR</name> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      <comment type="block">/* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SAPB1CLKSOURCE_PLLR</name></expr>:</case>
        <block>{<block_content>
          <comment type="block">/* Configure the PLL division factor R */</comment>
          <comment type="block">/* PLL_VCO Input  = PLL_SOURCE/PLLM */</comment>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSI_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <comment type="block">/* PLL_VCO Output = PLL_VCO Input * PLLN */</comment>
          <expr_stmt><expr><name>vcooutput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcoinput</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLCFGR_PLLN</name> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <comment type="block">/* I2S_CLK = PLL_VCO Output/PLLR */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcooutput</name> <operator>/</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLR</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLCFGR_PLLR</name> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      <comment type="block">/* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */</comment>
      <case>case <expr><name>RCC_I2SAPB1CLKSOURCE_PLLSRC</name></expr>:</case>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>HSE_VALUE</name></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>HSI_VALUE</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <break>break;</break>
        </block_content>}</block>
        <comment type="block">/* Clock not enabled for I2S*/</comment>
      <default>default:</default>
        <block>{<block_content>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      </block_content>}</block></switch>
      <break>break;</break>
    </block_content>}</block>
  <case>case <expr><name>RCC_PERIPHCLK_I2S_APB2</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Get the current I2S source */</comment>
      <expr_stmt><expr><name>srcclk</name> <operator>=</operator> <call><name>__HAL_RCC_GET_I2S_APB2_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>srcclk</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SAPB2CLKSOURCE_EXT</name></expr>:</case>
        <block>{<block_content>
          <comment type="block">/* Set the I2S clock to the external clock  value */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>EXTERNAL_CLOCK_VALUE</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <comment type="block">/* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SAPB2CLKSOURCE_PLLI2S</name></expr>:</case>
        <block>{<block_content>
          <comment type="block">/* Configure the PLLI2S division factor */</comment>
          <comment type="block">/* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */</comment>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSI_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <comment type="block">/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */</comment>
          <expr_stmt><expr><name>vcooutput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcoinput</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLI2SCFGR_PLLI2SN</name> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <comment type="block">/* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcooutput</name> <operator>/</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLI2SCFGR_PLLI2SR</name> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <comment type="block">/* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SAPB2CLKSOURCE_PLLR</name></expr>:</case>
        <block>{<block_content>
          <comment type="block">/* Configure the PLL division factor R */</comment>
          <comment type="block">/* PLL_VCO Input  = PLL_SOURCE/PLLM */</comment>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSI_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <comment type="block">/* PLL_VCO Output = PLL_VCO Input * PLLN */</comment>
          <expr_stmt><expr><name>vcooutput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcoinput</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLCFGR_PLLN</name> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <comment type="block">/* I2S_CLK = PLL_VCO Output/PLLR */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcooutput</name> <operator>/</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLR</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLCFGR_PLLR</name> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <comment type="block">/* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */</comment>
      <case>case <expr><name>RCC_I2SAPB2CLKSOURCE_PLLSRC</name></expr>:</case>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>HSE_VALUE</name></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>HSI_VALUE</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <break>break;</break>
        </block_content>}</block>
        <comment type="block">/* Clock not enabled for I2S*/</comment>
      <default>default:</default>
        <block>{<block_content>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      </block_content>}</block></switch>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><name>frequency</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F446xx */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Initializes the RCC extended peripherals clocks according to the specified
  *         parameters in the RCC_PeriphCLKInitTypeDef.
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         contains the configuration information for the Extended Peripherals
  *         clocks(I2S, SAI, LTDC, RTC and TIM).
  *
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source; in this case the Backup domain will be reset in
  *         order to modify the RTC Clock source, as consequence RTC registers (including
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCCEx_PeriphCLKConfig</name><parameter_list>(<parameter><decl><type><name>RCC_PeriphCLKInitTypeDef</name>  <modifier>*</modifier></type><name>PeriphClkInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg1</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pllsaip</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pllsaiq</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pllsair</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PERIPHCLOCK</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*--------------------------- CLK48 Configuration --------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_CLK48</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_CLK48</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_CLK48CLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Clk48ClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the CLK48 clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_CLK48_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Clk48ClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*------------------------------ SDIO Configuration ------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SDIO</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_SDIO</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_SDIOCLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SdioClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the SDIO clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_SDIO_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SdioClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/</comment>
  <comment type="block">/*------------------- Common configuration SAI/I2S -------------------------*/</comment>
  <comment type="block">/* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_I2S</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_I2S</name><operator>)</operator> <operator>||</operator>
     <operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SAI_PLLI2S</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_SAI_PLLI2S</name><operator>)</operator> <operator>||</operator>
     <operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_PLLI2S</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_PLLI2S</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* check for Parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SN_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Disable the PLLI2S */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Wait till PLLI2S is disabled */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLI2SRDY</name></expr></argument>)</argument_list></call>  <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLI2S_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* return in case of Timeout detected */</comment>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/*---------------------- I2S configuration -------------------------------*/</comment>
    <comment type="block">/* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_I2S</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_I2S</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* check for Parameters */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SR_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Configure the PLLI2S division factors */</comment>
      <comment type="block">/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */</comment>
      <comment type="block">/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name></expr></argument> , <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*---------------------------- SAI configuration -------------------------*/</comment>
    <comment type="block">/* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SAI_PLLI2S</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_SAI_PLLI2S</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check the PLLI2S division factors */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SQ_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SQ</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2S_DIVQ_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2SDivQ</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */</comment>
      <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR_Pos</name><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* Configure the PLLI2S division factors */</comment>
      <comment type="block">/* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */</comment>
      <comment type="block">/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */</comment>
      <comment type="block">/* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_SAICLK_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name></expr></argument> , <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SQ</name></name></expr></argument> , <argument><expr><name>tmpreg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2SDivQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*----------------- In Case of PLLI2S is just selected  -----------------*/</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name> <operator>&amp;</operator> <name>RCC_PERIPHCLK_PLLI2S</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_PLLI2S</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check for Parameters */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SQ_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SQ</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SR_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Configure the PLLI2S multiplication and division factors */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_SAICLK_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SQ</name></name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Enable the PLLI2S */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Wait till PLLI2S is ready */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLI2SRDY</name></expr></argument>)</argument_list></call>  <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLI2S_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* return in case of Timeout detected */</comment>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/</comment>
  <comment type="block">/*----------------------- Common configuration SAI/LTDC --------------------*/</comment>
  <comment type="block">/* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SAI_PLLSAI</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_SAI_PLLSAI</name><operator>)</operator> <operator>||</operator>
     <operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_LTDC</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_LTDC</name><operator>)</operator>             <operator>||</operator>
     <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_CLK48</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_CLK48</name><operator>)</operator>          <operator>&amp;&amp;</operator>
      <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Clk48ClockSelection</name></name> <operator>==</operator> <name>RCC_CLK48CLKSOURCE_PLLSAIP</name><operator>)</operator><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the PLLSAI division factors */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAIN_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Disable PLLSAI Clock */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Wait till PLLSAI is disabled */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RCC_PLLSAI_GET_FLAG</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLSAI_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* return in case of Timeout detected */</comment>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/*---------------------------- SAI configuration -------------------------*/</comment>
    <comment type="block">/* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SAI_PLLSAI</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_SAI_PLLSAI</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAIQ_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIQ</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAI_DIVQ_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAIDivQ</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */</comment>
      <expr_stmt><expr><name>pllsaip</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIP</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIP_Pos</name><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */</comment>
      <expr_stmt><expr><name>pllsair</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIR</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIR_Pos</name><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */</comment>
      <comment type="block">/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */</comment>
      <comment type="block">/* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIN</name></name></expr></argument>, <argument><expr><name>pllsaip</name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIQ</name></name></expr></argument>, <argument><expr><name>pllsair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAIDivQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*---------------------------- LTDC configuration ------------------------*/</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_LTDC</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_LTDC</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAIR_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAI_DIVR_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAIDivR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */</comment>
      <expr_stmt><expr><name>pllsaip</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIP</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIP_Pos</name><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */</comment>
      <expr_stmt><expr><name>pllsaiq</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIQ_Pos</name><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */</comment>
      <comment type="block">/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */</comment>
      <comment type="block">/* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIN</name></name></expr></argument>, <argument><expr><name>pllsaip</name></expr></argument>, <argument><expr><name>pllsaiq</name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAIDivR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*---------------------------- CLK48 configuration ------------------------*/</comment>
    <comment type="block">/* Configure the PLLSAI when it is used as clock source for CLK48 */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_CLK48</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_CLK48</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
       <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Clk48ClockSelection</name></name> <operator>==</operator> <name>RCC_CLK48CLKSOURCE_PLLSAIP</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAIP_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */</comment>
      <expr_stmt><expr><name>pllsaiq</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIQ_Pos</name><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */</comment>
      <expr_stmt><expr><name>pllsair</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIR</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIR_Pos</name><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */</comment>
      <comment type="block">/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */</comment>
      <comment type="block">/* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIN</name></name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIP</name></name></expr></argument>, <argument><expr><name>pllsaiq</name></expr></argument>, <argument><expr><name>pllsair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Enable PLLSAI Clock */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Wait till PLLSAI is ready */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RCC_PLLSAI_GET_FLAG</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLSAI_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* return in case of Timeout detected */</comment>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*---------------------------- RTC configuration ---------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_RTC</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_RTC</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for RTC Parameters used to output RTCCLK */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_RTCCLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable Power Clock*/</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PWR_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable write access to Backup domain */</comment>
    <expr_stmt><expr><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <name>PWR_CR_DBP</name></expr>;</expr_stmt>

    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>(<expr><operator>(</operator><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>PWR_CR_DBP</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RCC_DBP_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <comment type="block">/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */</comment>
    <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>tmpreg1</name> <operator>!=</operator> <literal type="number">0x00000000U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>tmpreg1</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Store the content of BDCR register before the reset of Backup Domain */</comment>
      <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* RTC Clock selection can be changed only if the Backup Domain is reset */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_BACKUPRESET_FORCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>__HAL_RCC_BACKUPRESET_RELEASE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Restore the Content of BDCR register */</comment>
      <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>=</operator> <name>tmpreg1</name></expr>;</expr_stmt>

      <comment type="block">/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */</comment>
      <if_stmt><if>if<condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name></expr></argument>, <argument><expr><name>RCC_BDCR_LSEON</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Get tick */</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till LSE is ready */</comment>
        <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_LSERDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RCC_LSE_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>__HAL_RCC_RTC_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*---------------------------- TIM configuration ---------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_TIM</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_TIM</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_RCC_TIMCLKPRESCALER</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>TIMPresSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configures the RCC_PeriphCLKInitTypeDef according to the internal
  * RCC configuration registers.
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         will be configured.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RCCEx_GetPeriphCLKConfig</name><parameter_list>(<parameter><decl><type><name>RCC_PeriphCLKInitTypeDef</name>  <modifier>*</modifier></type><name>PeriphClkInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tempreg</name></decl>;</decl_stmt>

  <comment type="block">/* Set all possible values for the extended clock type parameter------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name> <operator>=</operator> <name>RCC_PERIPHCLK_I2S</name>        <operator>|</operator> <name>RCC_PERIPHCLK_SAI_PLLSAI</name> <operator>|</operator>\
                                        <name>RCC_PERIPHCLK_SAI_PLLI2S</name> <operator>|</operator> <name>RCC_PERIPHCLK_LTDC</name>       <operator>|</operator>\
                                        <name>RCC_PERIPHCLK_TIM</name>        <operator>|</operator> <name>RCC_PERIPHCLK_RTC</name>        <operator>|</operator>\
                                        <name>RCC_PERIPHCLK_CLK48</name>       <operator>|</operator> <name>RCC_PERIPHCLK_SDIO</name></expr>;</expr_stmt>

  <comment type="block">/* Get the PLLI2S Clock configuration --------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SQ</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SQ_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <comment type="block">/* Get the PLLSAI Clock configuration --------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIN</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIN</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIN_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIR</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIR_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIQ</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIQ_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <comment type="block">/* Get the PLLSAI/PLLI2S division factors ----------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2SDivQ</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_PLLI2SDIVQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_DCKCFGR_PLLI2SDIVQ_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAIDivQ</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_PLLSAIDIVQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_DCKCFGR_PLLSAIDIVQ_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAIDivR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_PLLSAIDIVR</name><operator>)</operator></expr>;</expr_stmt>
  <comment type="block">/* Get the RTC Clock configuration -----------------------------------------*/</comment>
  <expr_stmt><expr><name>tempreg</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_RTCPRE</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tempreg</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Get the CLK48 clock configuration -------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Clk48ClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_CLK48_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the SDIO clock configuration ----------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SdioClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_SDIO_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_TIMPRE</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>TIMPresSelection</name></name> <operator>=</operator> <name>RCC_TIMPRES_DESACTIVATED</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>TIMPresSelection</name></name> <operator>=</operator> <name>RCC_TIMPRES_ACTIVATED</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the peripheral clock frequency for a given peripheral(SAI..)
  * @note   Return 0 if peripheral clock identifier not managed by this API
  * @param  PeriphClk Peripheral clock identifier
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RCCEx_GetPeriphCLKFreq</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>PeriphClk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* This variable used to store the I2S clock frequency (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>frequency</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* This variable used to store the VCO Input (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>vcoinput</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>srcclk</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* This variable used to store the VCO Output (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>vcooutput</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>PeriphClk</name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>RCC_PERIPHCLK_I2S</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Get the current I2S source */</comment>
      <expr_stmt><expr><name>srcclk</name> <operator>=</operator> <call><name>__HAL_RCC_GET_I2S_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>srcclk</name></expr>)</condition>
      <block>{<block_content>
      <comment type="block">/* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SCLKSOURCE_EXT</name></expr>:</case>
        <block>{<block_content>
          <comment type="block">/* Set the I2S clock to the external clock  value */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>EXTERNAL_CLOCK_VALUE</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      <comment type="block">/* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SCLKSOURCE_PLLI2S</name></expr>:</case>
        <block>{<block_content>
          <comment type="block">/* Configure the PLLI2S division factor */</comment>
          <comment type="block">/* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */</comment>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSI_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <comment type="block">/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */</comment>
          <expr_stmt><expr><name>vcooutput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcoinput</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLI2SCFGR_PLLI2SN</name> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <comment type="block">/* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcooutput</name> <operator>/</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLI2SCFGR_PLLI2SR</name> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <comment type="block">/* Clock not enabled for I2S*/</comment>
      <default>default:</default>
        <block>{<block_content>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      </block_content>}</block></switch>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><name>frequency</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F469xx || STM32F479xx */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Cx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Initializes the RCC extended peripherals clocks according to the specified
  *         parameters in the RCC_PeriphCLKInitTypeDef.
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         contains the configuration information for the Extended Peripherals
  *         clocks(I2S, LTDC RTC and TIM).
  *
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source; in this case the Backup domain will be reset in
  *         order to modify the RTC Clock source, as consequence RTC registers (including
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCCEx_PeriphCLKConfig</name><parameter_list>(<parameter><decl><type><name>RCC_PeriphCLKInitTypeDef</name>  <modifier>*</modifier></type><name>PeriphClkInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg1</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>plli2sq</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F413xx || STM32F423xx */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>plli2sused</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the peripheral clock selection parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PERIPHCLOCK</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*----------------------------------- I2S APB1 configuration ---------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_I2S_APB1</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_I2S_APB1</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_I2SAPB1CLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb1ClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure I2S Clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_I2S_APB1_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb1ClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Enable the PLLI2S when it's used as clock source for I2S */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb1ClockSelection</name></name> <operator>==</operator> <name>RCC_I2SAPB1CLKSOURCE_PLLI2S</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>plli2sused</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*----------------------------------- I2S APB2 configuration ---------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_I2S_APB2</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_I2S_APB2</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_I2SAPB2CLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb2ClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure I2S Clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_I2S_APB2_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb2ClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Enable the PLLI2S when it's used as clock source for I2S */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb2ClockSelection</name></name> <operator>==</operator> <name>RCC_I2SAPB2CLKSOURCE_PLLI2S</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>plli2sused</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/*----------------------- SAI1 Block A configuration -----------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SAIA</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_SAIA</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_SAIACLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SaiAClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure SAI1 Clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SaiAClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Enable the PLLI2S when it's used as clock source for SAI */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SaiAClockSelection</name></name> <operator>==</operator> <name>RCC_SAIACLKSOURCE_PLLI2SR</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>plli2sused</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Enable the PLLSAI when it's used as clock source for SAI */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SaiAClockSelection</name></name> <operator>==</operator> <name>RCC_SAIACLKSOURCE_PLLR</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check for PLL/DIVR parameters */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLL_DIVR_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLDivR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLDivR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*---------------------- SAI1 Block B configuration ------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SAIB</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_SAIB</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_SAIBCLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SaiBClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure SAI1 Clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SaiBClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Enable the PLLI2S when it's used as clock source for SAI */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SaiBClockSelection</name></name> <operator>==</operator> <name>RCC_SAIBCLKSOURCE_PLLI2SR</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>plli2sused</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Enable the PLLSAI when it's used as clock source for SAI */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SaiBClockSelection</name></name> <operator>==</operator> <name>RCC_SAIBCLKSOURCE_PLLR</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check for PLL/DIVR parameters */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLL_DIVR_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLDivR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLDivR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F413xx || STM32F423xx */</comment>

  <comment type="block">/*------------------------------------ RTC configuration -------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_RTC</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_RTC</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for RTC Parameters used to output RTCCLK */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_RTCCLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable Power Clock*/</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PWR_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable write access to Backup domain */</comment>
    <expr_stmt><expr><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <name>PWR_CR_DBP</name></expr>;</expr_stmt>

    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>(<expr><operator>(</operator><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>PWR_CR_DBP</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RCC_DBP_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <comment type="block">/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */</comment>
    <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>tmpreg1</name> <operator>!=</operator> <literal type="number">0x00000000U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>tmpreg1</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Store the content of BDCR register before the reset of Backup Domain */</comment>
      <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* RTC Clock selection can be changed only if the Backup Domain is reset */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_BACKUPRESET_FORCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>__HAL_RCC_BACKUPRESET_RELEASE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Restore the Content of BDCR register */</comment>
      <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>=</operator> <name>tmpreg1</name></expr>;</expr_stmt>

      <comment type="block">/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */</comment>
      <if_stmt><if>if<condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name></expr></argument>, <argument><expr><name>RCC_BDCR_LSEON</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Get tick */</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till LSE is ready */</comment>
        <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_LSERDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RCC_LSE_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>__HAL_RCC_RTC_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*------------------------------------ TIM configuration -------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_TIM</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_TIM</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Configure Timer Prescaler */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_TIMCLKPRESCALER</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>TIMPresSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*------------------------------------- FMPI2C1 Configuration --------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_FMPI2C1</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_FMPI2C1</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_FMPI2C1CLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Fmpi2c1ClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the FMPI2C1 clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_FMPI2C1_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Fmpi2c1ClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*------------------------------------- CLK48 Configuration ----------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_CLK48</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_CLK48</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_CLK48CLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Clk48ClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the SDIO clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_CLK48_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Clk48ClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the PLLI2S when it's used as clock source for CLK48 */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Clk48ClockSelection</name></name> <operator>==</operator> <name>RCC_CLK48CLKSOURCE_PLLI2SQ</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>plli2sused</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*------------------------------------- SDIO Configuration -----------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SDIO</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_SDIO</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_SDIOCLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SdioClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the SDIO clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_SDIO_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SdioClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*-------------------------------------- PLLI2S Configuration --------------*/</comment>
  <comment type="block">/* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>plli2sused</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name> <operator>==</operator> <name>RCC_PERIPHCLK_PLLI2S</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the PLLI2S */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Wait till PLLI2S is disabled */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLI2SRDY</name></expr></argument>)</argument_list></call>  <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLI2S_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* return in case of Timeout detected */</comment>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* check for common PLLI2S Parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SCLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2SSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SM_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SM</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SN_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*-------------------- Set the PLL I2S clock -----------------------------*/</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLL_I2S_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2SSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*------- In Case of PLLI2S is selected as source clock for I2S ----------*/</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_I2S_APB1</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_I2S_APB1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb1ClockSelection</name></name> <operator>==</operator> <name>RCC_I2SAPB1CLKSOURCE_PLLI2S</name><operator>)</operator><operator>)</operator> <operator>||</operator>
       <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_I2S_APB2</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_I2S_APB2</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb2ClockSelection</name></name> <operator>==</operator> <name>RCC_I2SAPB2CLKSOURCE_PLLI2S</name><operator>)</operator><operator>)</operator> <operator>||</operator>
       <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_CLK48</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_CLK48</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Clk48ClockSelection</name></name> <operator>==</operator> <name>RCC_CLK48CLKSOURCE_PLLI2SQ</name><operator>)</operator><operator>)</operator> <operator>||</operator>
       <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SDIO</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_SDIO</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SdioClockSelection</name></name> <operator>==</operator> <name>RCC_SDIOCLKSOURCE_CLK48</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Clk48ClockSelection</name></name> <operator>==</operator> <name>RCC_CLK48CLKSOURCE_PLLI2SQ</name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* check for Parameters */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SR_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SQ_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SQ</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Configure the PLLI2S division factors */</comment>
      <comment type="block">/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/</comment>
      <comment type="block">/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SM</name></name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name></expr></argument> , <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SQ</name></name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/*------- In Case of PLLI2S is selected as source clock for SAI ----------*/</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SAIA</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_SAIA</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SaiAClockSelection</name></name> <operator>==</operator> <name>RCC_SAIACLKSOURCE_PLLI2SR</name><operator>)</operator><operator>)</operator> <operator>||</operator>
       <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SAIB</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_SAIB</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SaiBClockSelection</name></name> <operator>==</operator> <name>RCC_SAIBCLKSOURCE_PLLI2SR</name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check for PLLI2S Parameters */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SR_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Check for PLLI2S/DIVR parameters */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2S_DIVR_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2SDivR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */</comment>
      <expr_stmt><expr><name>plli2sq</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SQ_Pos</name><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* Configure the PLLI2S division factors */</comment>
      <comment type="block">/* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */</comment>
      <comment type="block">/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */</comment>
      <comment type="block">/* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SM</name></name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name></expr></argument>, <argument><expr><name>plli2sq</name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2SDivR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F413xx || STM32F423xx */</comment>

    <comment type="block">/*----------------- In Case of PLLI2S is just selected  ------------------*/</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name> <operator>&amp;</operator> <name>RCC_PERIPHCLK_PLLI2S</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_PLLI2S</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check for Parameters */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SR_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SQ_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SQ</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Configure the PLLI2S division factors */</comment>
      <comment type="block">/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/</comment>
      <comment type="block">/* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SM</name></name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name></expr></argument> , <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SQ</name></name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Enable the PLLI2S */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Wait till PLLI2S is ready */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLI2SRDY</name></expr></argument>)</argument_list></call>  <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLI2S_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* return in case of Timeout detected */</comment>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*-------------------- DFSDM1 clock source configuration -------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_DFSDM1</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_DFSDM1</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_DFSDM1CLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Dfsdm1ClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the DFSDM1 interface clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_DFSDM1_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Dfsdm1ClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*-------------------- DFSDM1 Audio clock source configuration -------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_DFSDM1_AUDIO</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_DFSDM1_AUDIO</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_DFSDM1AUDIOCLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Dfsdm1AudioClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the DFSDM1 Audio interface clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_DFSDM1AUDIO_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Dfsdm1AudioClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/*-------------------- DFSDM2 clock source configuration -------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_DFSDM2</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_DFSDM2</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_DFSDM2CLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Dfsdm2ClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the DFSDM1 interface clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_DFSDM2_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Dfsdm2ClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*-------------------- DFSDM2 Audio clock source configuration -------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_DFSDM2_AUDIO</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_DFSDM2_AUDIO</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_DFSDM2AUDIOCLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Dfsdm2AudioClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the DFSDM1 Audio interface clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_DFSDM2AUDIO_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Dfsdm2AudioClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*---------------------------- LPTIM1 Configuration ------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_LPTIM1</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_LPTIM1</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_LPTIM1CLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Lptim1ClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the LPTIM1 clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_LPTIM1_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Lptim1ClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F413xx || STM32F423xx */</comment>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Get the RCC_PeriphCLKInitTypeDef according to the internal
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         will be configured.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RCCEx_GetPeriphCLKConfig</name><parameter_list>(<parameter><decl><type><name>RCC_PeriphCLKInitTypeDef</name>  <modifier>*</modifier></type><name>PeriphClkInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tempreg</name></decl>;</decl_stmt>

  <comment type="block">/* Set all possible values for the extended clock type parameter------------*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name> <operator>=</operator> <name>RCC_PERIPHCLK_I2S_APB1</name>     <operator>|</operator> <name>RCC_PERIPHCLK_I2S_APB2</name> <operator>|</operator>\
                                        <name>RCC_PERIPHCLK_TIM</name>          <operator>|</operator> <name>RCC_PERIPHCLK_RTC</name>      <operator>|</operator>\
                                        <name>RCC_PERIPHCLK_FMPI2C1</name>      <operator>|</operator> <name>RCC_PERIPHCLK_CLK48</name>    <operator>|</operator>\
                                        <name>RCC_PERIPHCLK_SDIO</name>         <operator>|</operator> <name>RCC_PERIPHCLK_DFSDM1</name>   <operator>|</operator>\
                                        <name>RCC_PERIPHCLK_DFSDM1_AUDIO</name> <operator>|</operator> <name>RCC_PERIPHCLK_DFSDM2</name>   <operator>|</operator>\
                                        <name>RCC_PERIPHCLK_DFSDM2_AUDIO</name> <operator>|</operator> <name>RCC_PERIPHCLK_LPTIM1</name>   <operator>|</operator>\
                                        <name>RCC_PERIPHCLK_SAIA</name>         <operator>|</operator> <name>RCC_PERIPHCLK_SAIB</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx */</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name> <operator>=</operator> <name>RCC_PERIPHCLK_I2S_APB1</name> <operator>|</operator> <name>RCC_PERIPHCLK_I2S_APB2</name> <operator>|</operator>\
                                        <name>RCC_PERIPHCLK_TIM</name>      <operator>|</operator> <name>RCC_PERIPHCLK_RTC</name>      <operator>|</operator>\
                                        <name>RCC_PERIPHCLK_FMPI2C1</name>  <operator>|</operator> <name>RCC_PERIPHCLK_CLK48</name>    <operator>|</operator>\
                                        <name>RCC_PERIPHCLK_SDIO</name>     <operator>|</operator> <name>RCC_PERIPHCLK_DFSDM1</name>   <operator>|</operator>\
                                        <name>RCC_PERIPHCLK_DFSDM1_AUDIO</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F413xx || STM32F423xx */</comment>



  <comment type="block">/* Get the PLLI2S Clock configuration --------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SM</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SM</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SM_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SQ</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SQ_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR_Pos</name><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Get the PLL/PLLI2S division factors -------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2SDivR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_PLLI2SDIVR</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_DCKCFGR_PLLI2SDIVR_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLDivR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_PLLDIVR</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_DCKCFGR_PLLDIVR_Pos</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F413xx || STM32F423xx */</comment>

  <comment type="block">/* Get the I2S APB1 clock configuration ------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb1ClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_I2S_APB1_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the I2S APB2 clock configuration ------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2sApb2ClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_I2S_APB2_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the RTC Clock configuration -----------------------------------------*/</comment>
  <expr_stmt><expr><name>tempreg</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_RTCPRE</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tempreg</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Get the FMPI2C1 clock configuration -------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Fmpi2c1ClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_FMPI2C1_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the CLK48 clock configuration ---------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Clk48ClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_CLK48_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the SDIO clock configuration ----------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SdioClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_SDIO_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the DFSDM1 clock configuration --------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Dfsdm1ClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_DFSDM1_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the DFSDM1 Audio clock configuration --------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Dfsdm1AudioClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_DFSDM1AUDIO_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Get the DFSDM2 clock configuration --------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Dfsdm2ClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_DFSDM2_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the DFSDM2 Audio clock configuration --------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Dfsdm2AudioClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_DFSDM2AUDIO_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the LPTIM1 clock configuration --------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Lptim1ClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_LPTIM1_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the SAI1 Block Aclock configuration ---------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SaiAClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_SAI_BLOCKA_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the SAI1 Block B clock configuration --------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>SaiBClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_SAI_BLOCKB_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F413xx || STM32F423xx */</comment>

  <comment type="block">/* Get the TIM Prescaler configuration -------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_TIMPRE</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>TIMPresSelection</name></name> <operator>=</operator> <name>RCC_TIMPRES_DESACTIVATED</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>TIMPresSelection</name></name> <operator>=</operator> <name>RCC_TIMPRES_ACTIVATED</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the peripheral clock frequency for a given peripheral(I2S..)
  * @note   Return 0 if peripheral clock identifier not managed by this API
  * @param  PeriphClk Peripheral clock identifier
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RCCEx_GetPeriphCLKFreq</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>PeriphClk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* This variable used to store the I2S clock frequency (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>frequency</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* This variable used to store the VCO Input (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>vcoinput</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>srcclk</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* This variable used to store the VCO Output (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>vcooutput</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>PeriphClk</name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>RCC_PERIPHCLK_I2S_APB1</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Get the current I2S source */</comment>
      <expr_stmt><expr><name>srcclk</name> <operator>=</operator> <call><name>__HAL_RCC_GET_I2S_APB1_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>srcclk</name></expr>)</condition>
      <block>{<block_content>
      <comment type="block">/* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SAPB1CLKSOURCE_EXT</name></expr>:</case>
        <block>{<block_content>
          <comment type="block">/* Set the I2S clock to the external clock  value */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>EXTERNAL_CLOCK_VALUE</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      <comment type="block">/* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SAPB1CLKSOURCE_PLLI2S</name></expr>:</case>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLI2SCFGR_PLLI2SSRC</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>EXTERNAL_CLOCK_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* Configure the PLLI2S division factor */</comment>
            <comment type="block">/* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */</comment>
            <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
            <block>{<block_content>
              <comment type="block">/* Get the I2S source clock value */</comment>
              <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
              <comment type="block">/* Get the I2S source clock value */</comment>
              <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSI_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></else></if_stmt>
          <comment type="block">/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */</comment>
          <expr_stmt><expr><name>vcooutput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcoinput</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLI2SCFGR_PLLI2SN</name> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <comment type="block">/* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcooutput</name> <operator>/</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLI2SCFGR_PLLI2SR</name> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      <comment type="block">/* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SAPB1CLKSOURCE_PLLR</name></expr>:</case>
        <block>{<block_content>
          <comment type="block">/* Configure the PLL division factor R */</comment>
          <comment type="block">/* PLL_VCO Input  = PLL_SOURCE/PLLM */</comment>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSI_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <comment type="block">/* PLL_VCO Output = PLL_VCO Input * PLLN */</comment>
          <expr_stmt><expr><name>vcooutput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcoinput</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLCFGR_PLLN</name> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <comment type="block">/* I2S_CLK = PLL_VCO Output/PLLR */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcooutput</name> <operator>/</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLR</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLCFGR_PLLR</name> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      <comment type="block">/* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */</comment>
      <case>case <expr><name>RCC_I2SAPB1CLKSOURCE_PLLSRC</name></expr>:</case>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>HSE_VALUE</name></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>HSI_VALUE</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <break>break;</break>
        </block_content>}</block>
        <comment type="block">/* Clock not enabled for I2S*/</comment>
      <default>default:</default>
        <block>{<block_content>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      </block_content>}</block></switch>
      <break>break;</break>
    </block_content>}</block>
  <case>case <expr><name>RCC_PERIPHCLK_I2S_APB2</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Get the current I2S source */</comment>
      <expr_stmt><expr><name>srcclk</name> <operator>=</operator> <call><name>__HAL_RCC_GET_I2S_APB2_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>srcclk</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SAPB2CLKSOURCE_EXT</name></expr>:</case>
        <block>{<block_content>
          <comment type="block">/* Set the I2S clock to the external clock  value */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>EXTERNAL_CLOCK_VALUE</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <comment type="block">/* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SAPB2CLKSOURCE_PLLI2S</name></expr>:</case>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLI2SCFGR_PLLI2SSRC</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>EXTERNAL_CLOCK_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* Configure the PLLI2S division factor */</comment>
            <comment type="block">/* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */</comment>
            <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
            <block>{<block_content>
              <comment type="block">/* Get the I2S source clock value */</comment>
              <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
              <comment type="block">/* Get the I2S source clock value */</comment>
              <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSI_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></else></if_stmt>
          <comment type="block">/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */</comment>
          <expr_stmt><expr><name>vcooutput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcoinput</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLI2SCFGR_PLLI2SN</name> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <comment type="block">/* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcooutput</name> <operator>/</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLI2SCFGR_PLLI2SR</name> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <comment type="block">/* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SAPB2CLKSOURCE_PLLR</name></expr>:</case>
        <block>{<block_content>
          <comment type="block">/* Configure the PLL division factor R */</comment>
          <comment type="block">/* PLL_VCO Input  = PLL_SOURCE/PLLM */</comment>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSI_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <comment type="block">/* PLL_VCO Output = PLL_VCO Input * PLLN */</comment>
          <expr_stmt><expr><name>vcooutput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcoinput</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLCFGR_PLLN</name> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <comment type="block">/* I2S_CLK = PLL_VCO Output/PLLR */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcooutput</name> <operator>/</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLR</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLCFGR_PLLR</name> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <comment type="block">/* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */</comment>
      <case>case <expr><name>RCC_I2SAPB2CLKSOURCE_PLLSRC</name></expr>:</case>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>HSE_VALUE</name></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>HSI_VALUE</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <break>break;</break>
        </block_content>}</block>
      <comment type="block">/* Clock not enabled for I2S*/</comment>
      <default>default:</default>
        <block>{<block_content>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      </block_content>}</block></switch>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><name>frequency</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx || STM32F413xx || STM32F423xx */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F410Tx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F410Cx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F410Rx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Initializes the RCC extended peripherals clocks according to the specified parameters in the
  *         RCC_PeriphCLKInitTypeDef.
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         contains the configuration information for the Extended Peripherals clocks(I2S and RTC clocks).
  *
  * @note   A caution to be taken when HAL_RCCEx_PeriphCLKConfig() is used to select RTC clock selection, in this case
  *         the Reset of Backup domain will be applied in order to modify the RTC Clock source as consequence all backup
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCCEx_PeriphCLKConfig</name><parameter_list>(<parameter><decl><type><name>RCC_PeriphCLKInitTypeDef</name>  <modifier>*</modifier></type><name>PeriphClkInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg1</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PERIPHCLOCK</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*---------------------------- RTC configuration ---------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_RTC</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_RTC</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for RTC Parameters used to output RTCCLK */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_RTCCLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable Power Clock*/</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PWR_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable write access to Backup domain */</comment>
    <expr_stmt><expr><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <name>PWR_CR_DBP</name></expr>;</expr_stmt>

    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>(<expr><operator>(</operator><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>PWR_CR_DBP</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RCC_DBP_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <comment type="block">/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */</comment>
    <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>tmpreg1</name> <operator>!=</operator> <literal type="number">0x00000000U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>tmpreg1</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Store the content of BDCR register before the reset of Backup Domain */</comment>
      <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* RTC Clock selection can be changed only if the Backup Domain is reset */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_BACKUPRESET_FORCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>__HAL_RCC_BACKUPRESET_RELEASE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Restore the Content of BDCR register */</comment>
      <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>=</operator> <name>tmpreg1</name></expr>;</expr_stmt>

      <comment type="block">/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */</comment>
      <if_stmt><if>if<condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name></expr></argument>, <argument><expr><name>RCC_BDCR_LSEON</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Get tick */</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till LSE is ready */</comment>
        <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_LSERDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RCC_LSE_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>__HAL_RCC_RTC_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*---------------------------- TIM configuration ---------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_TIM</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_TIM</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_RCC_TIMCLKPRESCALER</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>TIMPresSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*---------------------------- FMPI2C1 Configuration -----------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_FMPI2C1</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_FMPI2C1</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_FMPI2C1CLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Fmpi2c1ClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the FMPI2C1 clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_FMPI2C1_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Fmpi2c1ClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*---------------------------- LPTIM1 Configuration ------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_LPTIM1</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_LPTIM1</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_LPTIM1CLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Lptim1ClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the LPTIM1 clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_LPTIM1_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Lptim1ClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*---------------------------- I2S Configuration ---------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_I2S</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_I2S</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_I2SAPBCLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2SClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the I2S clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_I2S_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2SClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configures the RCC_OscInitStruct according to the internal
  * RCC configuration registers.
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RCCEx_GetPeriphCLKConfig</name><parameter_list>(<parameter><decl><type><name>RCC_PeriphCLKInitTypeDef</name>  <modifier>*</modifier></type><name>PeriphClkInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tempreg</name></decl>;</decl_stmt>

  <comment type="block">/* Set all possible values for the extended clock type parameter------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name> <operator>=</operator> <name>RCC_PERIPHCLK_FMPI2C1</name> <operator>|</operator> <name>RCC_PERIPHCLK_LPTIM1</name> <operator>|</operator> <name>RCC_PERIPHCLK_TIM</name> <operator>|</operator> <name>RCC_PERIPHCLK_RTC</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tempreg</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_RTCPRE</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tempreg</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_TIMPRE</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>TIMPresSelection</name></name> <operator>=</operator> <name>RCC_TIMPRES_DESACTIVATED</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>TIMPresSelection</name></name> <operator>=</operator> <name>RCC_TIMPRES_ACTIVATED</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Get the FMPI2C1 clock configuration -------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>Fmpi2c1ClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_FMPI2C1_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the I2S clock configuration -----------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2SClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_I2S_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @brief  Return the peripheral clock frequency for a given peripheral(SAI..)
  * @note   Return 0 if peripheral clock identifier not managed by this API
  * @param  PeriphClk Peripheral clock identifier
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RCCEx_GetPeriphCLKFreq</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>PeriphClk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* This variable used to store the I2S clock frequency (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>frequency</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* This variable used to store the VCO Input (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>vcoinput</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>srcclk</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* This variable used to store the VCO Output (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>vcooutput</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>PeriphClk</name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>RCC_PERIPHCLK_I2S</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Get the current I2S source */</comment>
      <expr_stmt><expr><name>srcclk</name> <operator>=</operator> <call><name>__HAL_RCC_GET_I2S_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>srcclk</name></expr>)</condition>
      <block>{<block_content>
      <comment type="block">/* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SAPBCLKSOURCE_EXT</name></expr>:</case>
        <block>{<block_content>
          <comment type="block">/* Set the I2S clock to the external clock  value */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>EXTERNAL_CLOCK_VALUE</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      <comment type="block">/* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SAPBCLKSOURCE_PLLR</name></expr>:</case>
        <block>{<block_content>
          <comment type="block">/* Configure the PLL division factor R */</comment>
          <comment type="block">/* PLL_VCO Input  = PLL_SOURCE/PLLM */</comment>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSI_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <comment type="block">/* PLL_VCO Output = PLL_VCO Input * PLLN */</comment>
          <expr_stmt><expr><name>vcooutput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcoinput</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLCFGR_PLLN</name> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <comment type="block">/* I2S_CLK = PLL_VCO Output/PLLR */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcooutput</name> <operator>/</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLR</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLCFGR_PLLR</name> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      <comment type="block">/* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */</comment>
      <case>case <expr><name>RCC_I2SAPBCLKSOURCE_PLLSRC</name></expr>:</case>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>HSE_VALUE</name></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>HSI_VALUE</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <break>break;</break>
        </block_content>}</block>
        <comment type="block">/* Clock not enabled for I2S*/</comment>
      <default>default:</default>
        <block>{<block_content>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      </block_content>}</block></switch>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><name>frequency</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F410Tx || STM32F410Cx || STM32F410Rx */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Initializes the RCC extended peripherals clocks according to the specified
  *         parameters in the RCC_PeriphCLKInitTypeDef.
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         contains the configuration information for the Extended Peripherals
  *         clocks(I2S, SAI, LTDC RTC and TIM).
  *
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source; in this case the Backup domain will be reset in
  *         order to modify the RTC Clock source, as consequence RTC registers (including
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCCEx_PeriphCLKConfig</name><parameter_list>(<parameter><decl><type><name>RCC_PeriphCLKInitTypeDef</name>  <modifier>*</modifier></type><name>PeriphClkInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg1</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PERIPHCLOCK</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/</comment>
  <comment type="block">/*----------------------- Common configuration SAI/I2S ---------------------*/</comment>
  <comment type="block">/* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_I2S</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_I2S</name><operator>)</operator> <operator>||</operator>
     <operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SAI_PLLI2S</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_SAI_PLLI2S</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* check for Parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SN_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Disable the PLLI2S */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Wait till PLLI2S is disabled */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLI2SRDY</name></expr></argument>)</argument_list></call>  <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLI2S_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* return in case of Timeout detected */</comment>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/*---------------------------- I2S configuration -------------------------*/</comment>
    <comment type="block">/* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_I2S</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_I2S</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* check for Parameters */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SR_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Configure the PLLI2S division factors */</comment>
      <comment type="block">/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */</comment>
      <comment type="block">/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name></expr></argument> , <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*---------------------------- SAI configuration -------------------------*/</comment>
    <comment type="block">/* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SAI_PLLI2S</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_SAI_PLLI2S</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check the PLLI2S division factors */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SQ_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SQ</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2S_DIVQ_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2SDivQ</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */</comment>
      <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR_Pos</name><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* Configure the PLLI2S division factors */</comment>
      <comment type="block">/* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */</comment>
      <comment type="block">/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */</comment>
      <comment type="block">/* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_SAICLK_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name></expr></argument> , <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SQ</name></name></expr></argument> , <argument><expr><name>tmpreg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2SDivQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Enable the PLLI2S */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Wait till PLLI2S is ready */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLI2SRDY</name></expr></argument>)</argument_list></call>  <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLI2S_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* return in case of Timeout detected */</comment>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/</comment>
  <comment type="block">/*----------------------- Common configuration SAI/LTDC --------------------*/</comment>
  <comment type="block">/* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SAI_PLLSAI</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_SAI_PLLSAI</name><operator>)</operator> <operator>||</operator>
     <operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_LTDC</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_LTDC</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the PLLSAI division factors */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAIN_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Disable PLLSAI Clock */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Wait till PLLSAI is disabled */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RCC_PLLSAI_GET_FLAG</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLSAI_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* return in case of Timeout detected */</comment>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/*---------------------------- SAI configuration -------------------------*/</comment>
    <comment type="block">/* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_SAI_PLLSAI</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_SAI_PLLSAI</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAIQ_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIQ</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAI_DIVQ_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAIDivQ</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */</comment>
      <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIR</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIR_Pos</name><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */</comment>
      <comment type="block">/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */</comment>
      <comment type="block">/* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIN</name></name></expr></argument> , <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIQ</name></name></expr></argument>, <argument><expr><name>tmpreg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAIDivQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*---------------------------- LTDC configuration ------------------------*/</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_LTDC</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_LTDC</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAIR_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAI_DIVR_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAIDivR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */</comment>
      <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIQ_Pos</name><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */</comment>
      <comment type="block">/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */</comment>
      <comment type="block">/* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIN</name></name></expr></argument> , <argument><expr><name>tmpreg1</name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAIDivR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Enable PLLSAI Clock */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Wait till PLLSAI is ready */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RCC_PLLSAI_GET_FLAG</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLSAI_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* return in case of Timeout detected */</comment>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*---------------------------- RTC configuration ---------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_RTC</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_RTC</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for RTC Parameters used to output RTCCLK */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_RTCCLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable Power Clock*/</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PWR_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable write access to Backup domain */</comment>
    <expr_stmt><expr><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <name>PWR_CR_DBP</name></expr>;</expr_stmt>

    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>(<expr><operator>(</operator><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>PWR_CR_DBP</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RCC_DBP_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <comment type="block">/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */</comment>
    <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>tmpreg1</name> <operator>!=</operator> <literal type="number">0x00000000U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>tmpreg1</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Store the content of BDCR register before the reset of Backup Domain */</comment>
      <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* RTC Clock selection can be changed only if the Backup Domain is reset */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_BACKUPRESET_FORCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>__HAL_RCC_BACKUPRESET_RELEASE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Restore the Content of BDCR register */</comment>
      <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>=</operator> <name>tmpreg1</name></expr>;</expr_stmt>

      <comment type="block">/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */</comment>
      <if_stmt><if>if<condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name></expr></argument>, <argument><expr><name>RCC_BDCR_LSEON</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Get tick */</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till LSE is ready */</comment>
        <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_LSERDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RCC_LSE_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>__HAL_RCC_RTC_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

  <comment type="block">/*---------------------------- TIM configuration ---------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_TIM</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_TIM</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_RCC_TIMCLKPRESCALER</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>TIMPresSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configures the PeriphClkInit according to the internal
  * RCC configuration registers.
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         will be configured.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RCCEx_GetPeriphCLKConfig</name><parameter_list>(<parameter><decl><type><name>RCC_PeriphCLKInitTypeDef</name>  <modifier>*</modifier></type><name>PeriphClkInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tempreg</name></decl>;</decl_stmt>

  <comment type="block">/* Set all possible values for the extended clock type parameter------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name> <operator>=</operator> <name>RCC_PERIPHCLK_I2S</name> <operator>|</operator> <name>RCC_PERIPHCLK_SAI_PLLSAI</name> <operator>|</operator> <name>RCC_PERIPHCLK_SAI_PLLI2S</name> <operator>|</operator> <name>RCC_PERIPHCLK_LTDC</name> <operator>|</operator> <name>RCC_PERIPHCLK_TIM</name> <operator>|</operator> <name>RCC_PERIPHCLK_RTC</name></expr>;</expr_stmt>

  <comment type="block">/* Get the PLLI2S Clock configuration -----------------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SQ</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SQ_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <comment type="block">/* Get the PLLSAI Clock configuration -----------------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIN</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIN</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIN_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIR</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIR_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAI</name><operator>.</operator><name>PLLSAIQ</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLSAICFGR_PLLSAIQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLSAICFGR_PLLSAIQ_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <comment type="block">/* Get the PLLSAI/PLLI2S division factors -----------------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2SDivQ</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_PLLI2SDIVQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_DCKCFGR_PLLI2SDIVQ_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAIDivQ</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_PLLSAIDIVQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_DCKCFGR_PLLSAIDIVQ_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLSAIDivR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_PLLSAIDIVR</name><operator>)</operator></expr>;</expr_stmt>
  <comment type="block">/* Get the RTC Clock configuration -----------------------------------------------*/</comment>
  <expr_stmt><expr><name>tempreg</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_RTCPRE</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tempreg</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_TIMPRE</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>TIMPresSelection</name></name> <operator>=</operator> <name>RCC_TIMPRES_DESACTIVATED</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>TIMPresSelection</name></name> <operator>=</operator> <name>RCC_TIMPRES_ACTIVATED</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the peripheral clock frequency for a given peripheral(SAI..)
  * @note   Return 0 if peripheral clock identifier not managed by this API
  * @param  PeriphClk Peripheral clock identifier
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RCCEx_GetPeriphCLKFreq</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>PeriphClk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* This variable used to store the I2S clock frequency (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>frequency</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* This variable used to store the VCO Input (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>vcoinput</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>srcclk</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* This variable used to store the VCO Output (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>vcooutput</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>PeriphClk</name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>RCC_PERIPHCLK_I2S</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Get the current I2S source */</comment>
      <expr_stmt><expr><name>srcclk</name> <operator>=</operator> <call><name>__HAL_RCC_GET_I2S_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>srcclk</name></expr>)</condition>
      <block>{<block_content>
      <comment type="block">/* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SCLKSOURCE_EXT</name></expr>:</case>
        <block>{<block_content>
          <comment type="block">/* Set the I2S clock to the external clock  value */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>EXTERNAL_CLOCK_VALUE</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      <comment type="block">/* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SCLKSOURCE_PLLI2S</name></expr>:</case>
        <block>{<block_content>
          <comment type="block">/* Configure the PLLI2S division factor */</comment>
          <comment type="block">/* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */</comment>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSI_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <comment type="block">/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */</comment>
          <expr_stmt><expr><name>vcooutput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcoinput</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLI2SCFGR_PLLI2SN</name> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <comment type="block">/* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcooutput</name> <operator>/</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLI2SCFGR_PLLI2SR</name> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <comment type="block">/* Clock not enabled for I2S */</comment>
      <default>default:</default>
        <block>{<block_content>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      </block_content>}</block></switch>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><name>frequency</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F405xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F415xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F407xx</name></expr></argument>)</argument_list></call><operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F417xx</name></expr></argument>)</argument_list></call> <operator>||</operator>\
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F401xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F401xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F411xE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Initializes the RCC extended peripherals clocks according to the specified parameters in the
  *         RCC_PeriphCLKInitTypeDef.
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         contains the configuration information for the Extended Peripherals clocks(I2S and RTC clocks).
  *
  * @note   A caution to be taken when HAL_RCCEx_PeriphCLKConfig() is used to select RTC clock selection, in this case
  *         the Reset of Backup domain will be applied in order to modify the RTC Clock source as consequence all backup
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCCEx_PeriphCLKConfig</name><parameter_list>(<parameter><decl><type><name>RCC_PeriphCLKInitTypeDef</name>  <modifier>*</modifier></type><name>PeriphClkInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg1</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PERIPHCLOCK</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*---------------------------- I2S configuration ---------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_I2S</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_I2S</name><operator>)</operator> <operator>||</operator>
     <operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_PLLI2S</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_PLLI2S</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* check for Parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SR_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SN_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F411xE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SM_VALUE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SM</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F411xE */</comment>
    <comment type="block">/* Disable the PLLI2S */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Wait till PLLI2S is disabled */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLI2SRDY</name></expr></argument>)</argument_list></call>  <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLI2S_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* return in case of Timeout detected */</comment>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F411xE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* Configure the PLLI2S division factors */</comment>
    <comment type="block">/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */</comment>
    <comment type="block">/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_I2SCLK_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SM</name></name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name></expr></argument>, <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Configure the PLLI2S division factors */</comment>
    <comment type="block">/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */</comment>
    <comment type="block">/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name></expr></argument> , <argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F411xE */</comment>

    <comment type="block">/* Enable the PLLI2S */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Wait till PLLI2S is ready */</comment>
    <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLI2SRDY</name></expr></argument>)</argument_list></call>  <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLI2S_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* return in case of Timeout detected */</comment>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*---------------------------- RTC configuration ---------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_RTC</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_RTC</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for RTC Parameters used to output RTCCLK */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_RTCCLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable Power Clock*/</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PWR_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable write access to Backup domain */</comment>
    <expr_stmt><expr><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <name>PWR_CR_DBP</name></expr>;</expr_stmt>

    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>(<expr><operator>(</operator><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>PWR_CR_DBP</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RCC_DBP_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <comment type="block">/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */</comment>
    <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>tmpreg1</name> <operator>!=</operator> <literal type="number">0x00000000U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>tmpreg1</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Store the content of BDCR register before the reset of Backup Domain */</comment>
      <expr_stmt><expr><name>tmpreg1</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* RTC Clock selection can be changed only if the Backup Domain is reset */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_BACKUPRESET_FORCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>__HAL_RCC_BACKUPRESET_RELEASE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Restore the Content of BDCR register */</comment>
      <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>=</operator> <name>tmpreg1</name></expr>;</expr_stmt>

      <comment type="block">/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */</comment>
      <if_stmt><if>if<condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name></expr></argument>, <argument><expr><name>RCC_BDCR_LSEON</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Get tick */</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till LSE is ready */</comment>
        <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_LSERDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RCC_LSE_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>__HAL_RCC_RTC_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F401xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F401xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F411xE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/*---------------------------- TIM configuration ---------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_TIM</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>RCC_PERIPHCLK_TIM</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_RCC_TIMCLKPRESCALER</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>TIMPresSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F401xC || STM32F401xE || STM32F411xE */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configures the RCC_OscInitStruct according to the internal
  * RCC configuration registers.
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RCCEx_GetPeriphCLKConfig</name><parameter_list>(<parameter><decl><type><name>RCC_PeriphCLKInitTypeDef</name>  <modifier>*</modifier></type><name>PeriphClkInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tempreg</name></decl>;</decl_stmt>

  <comment type="block">/* Set all possible values for the extended clock type parameter------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name> <operator>=</operator> <name>RCC_PERIPHCLK_I2S</name> <operator>|</operator> <name>RCC_PERIPHCLK_RTC</name></expr>;</expr_stmt>

  <comment type="block">/* Get the PLLI2S Clock configuration --------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SN</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR_Pos</name><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F411xE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SM</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SM</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F411xE */</comment>
  <comment type="block">/* Get the RTC Clock configuration -----------------------------------------*/</comment>
  <expr_stmt><expr><name>tempreg</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_RTCPRE</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tempreg</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F401xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F401xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F411xE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Get the TIM Prescaler configuration -------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>DCKCFGR</name></name> <operator>&amp;</operator> <name>RCC_DCKCFGR_TIMPRE</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>TIMPresSelection</name></name> <operator>=</operator> <name>RCC_TIMPRES_DESACTIVATED</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>TIMPresSelection</name></name> <operator>=</operator> <name>RCC_TIMPRES_ACTIVATED</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F401xC || STM32F401xE || STM32F411xE */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the peripheral clock frequency for a given peripheral(SAI..)
  * @note   Return 0 if peripheral clock identifier not managed by this API
  * @param  PeriphClk Peripheral clock identifier
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RCCEx_GetPeriphCLKFreq</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>PeriphClk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* This variable used to store the I2S clock frequency (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>frequency</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* This variable used to store the VCO Input (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>vcoinput</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>srcclk</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* This variable used to store the VCO Output (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>vcooutput</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>PeriphClk</name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>RCC_PERIPHCLK_I2S</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Get the current I2S source */</comment>
      <expr_stmt><expr><name>srcclk</name> <operator>=</operator> <call><name>__HAL_RCC_GET_I2S_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>srcclk</name></expr>)</condition>
      <block>{<block_content>
      <comment type="block">/* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SCLKSOURCE_EXT</name></expr>:</case>
        <block>{<block_content>
          <comment type="block">/* Set the I2S clock to the external clock  value */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>EXTERNAL_CLOCK_VALUE</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      <comment type="block">/* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */</comment>
      <case>case <expr><name>RCC_I2SCLKSOURCE_PLLI2S</name></expr>:</case>
        <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F411xE</name></expr></argument>)</argument_list></call></expr></cpp:if>
          <comment type="block">/* Configure the PLLI2S division factor */</comment>
          <comment type="block">/* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */</comment>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSI_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <comment type="block">/* Configure the PLLI2S division factor */</comment>
          <comment type="block">/* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */</comment>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* Get the I2S source clock value */</comment>
            <expr_stmt><expr><name>vcoinput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>HSI_VALUE</name> <operator>/</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F411xE */</comment>
          <comment type="block">/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */</comment>
          <expr_stmt><expr><name>vcooutput</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcoinput</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLI2SCFGR_PLLI2SN</name> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <comment type="block">/* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>vcooutput</name> <operator>/</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLI2SCFGR_PLLI2SR</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RCC_PLLI2SCFGR_PLLI2SR</name> <operator>&gt;&gt;</operator> <literal type="number">28U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <comment type="block">/* Clock not enabled for I2S*/</comment>
      <default>default:</default>
        <block>{<block_content>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      </block_content>}</block></switch>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><name>frequency</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx || STM32F401xC || STM32F401xE  || STM32F411xE */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F410Tx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F410Cx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F410Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F411xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator>\
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Cx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Select LSE mode
  *
  * @note   This mode is only available for STM32F410xx/STM32F411xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx  devices.
  *
  * @param  Mode specifies the LSE mode.
  *          This parameter can be one of the following values:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode selection
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode selection
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RCCEx_SelectLSEMode</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>Mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_LSE_MODE</name><argument_list>(<argument><expr><name>Mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>Mode</name> <operator>==</operator> <name>RCC_LSE_HIGHDRIVE_MODE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name></expr></argument>, <argument><expr><name>RCC_BDCR_LSEMOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name></expr></argument>, <argument><expr><name>RCC_BDCR_LSEMOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F410xx || STM32F411xE || STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx || STM32F413xx || STM32F423xx */</comment>

<comment type="block" format="doxygen">/** @defgroup RCCEx_Exported_Functions_Group2 Extended Clock management functions
 *  @brief  Extended Clock management functions
 *
@verbatim   
 ===============================================================================
                ##### Extended clock management functions  #####
 ===============================================================================
    [..]
    This subsection provides a set of functions allowing to control the 
    activation or deactivation of PLLI2S, PLLSAI.
@endverbatim
  * @{
  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_PLLI2S_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Enable PLLI2S.
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCCEx_EnablePLLI2S</name><parameter_list>(<parameter><decl><type><name>RCC_PLLI2SInitTypeDef</name>  <modifier>*</modifier></type><name>PLLI2SInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <comment type="block">/* Check for parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SN_VALUE</name><argument_list>(<argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SR_VALUE</name><argument_list>(<argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_PLLI2SCFGR_PLLI2SM</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SM_VALUE</name><argument_list>(<argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SM</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_PLLI2SCFGR_PLLI2SM */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_PLLI2SCFGR_PLLI2SP</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SP_VALUE</name><argument_list>(<argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_PLLI2SCFGR_PLLI2SP */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_PLLI2SCFGR_PLLI2SQ</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2SQ_VALUE</name><argument_list>(<argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SQ</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_PLLI2SCFGR_PLLI2SQ */</comment>

  <comment type="block">/* Disable the PLLI2S */</comment>
  <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till PLLI2S is disabled */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLI2SRDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLI2S_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* return in case of Timeout detected */</comment>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Configure the PLLI2S division factors */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */</comment>
  <comment type="block">/* I2SPCLK = PLLI2S_VCO / PLLI2SP */</comment>
  <comment type="block">/* I2SQCLK = PLLI2S_VCO / PLLI2SQ */</comment>
  <comment type="block">/* I2SRCLK = PLLI2S_VCO / PLLI2SR */</comment>
  <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_CONFIG</name><argument_list>(<argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SM</name></name></expr></argument>, <argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SN</name></name></expr></argument>, \
                          <argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SP</name></name></expr></argument>, <argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SQ</name></name></expr></argument>, <argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Cx</name></expr></argument>)</argument_list></call> <operator>||</operator>\
      <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <comment type="block">/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/</comment>
  <comment type="block">/* I2SQCLK = PLLI2S_VCO / PLLI2SQ */</comment>
  <comment type="block">/* I2SRCLK = PLLI2S_VCO / PLLI2SR */</comment>
  <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_CONFIG</name><argument_list>(<argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SM</name></name></expr></argument>, <argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SN</name></name></expr></argument>, \
                          <argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SQ</name></name></expr></argument>, <argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call> <operator>||</operator>\
      <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <comment type="block">/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * PLLI2SN */</comment>
  <comment type="block">/* I2SQCLK = PLLI2S_VCO / PLLI2SQ */</comment>
  <comment type="block">/* I2SRCLK = PLLI2S_VCO / PLLI2SR */</comment>
  <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_SAICLK_CONFIG</name><argument_list>(<argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SN</name></name></expr></argument>, <argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SQ</name></name></expr></argument>, <argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F411xE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <comment type="block">/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */</comment>
  <comment type="block">/* I2SRCLK = PLLI2S_VCO / PLLI2SR */</comment>
  <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_I2SCLK_CONFIG</name><argument_list>(<argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SM</name></name></expr></argument>, <argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SN</name></name></expr></argument>, <argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x PLLI2SN */</comment>
  <comment type="block">/* I2SRCLK = PLLI2S_VCO / PLLI2SR */</comment>
  <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_CONFIG</name><argument_list>(<argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SN</name></name></expr></argument>, <argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F446xx */</comment>

  <comment type="block">/* Enable the PLLI2S */</comment>
  <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till PLLI2S is ready */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLI2SRDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLI2S_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* return in case of Timeout detected */</comment>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

 <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCCEx_DisablePLLI2S</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <comment type="block">/* Disable the PLLI2S */</comment>
  <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till PLLI2S is disabled */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLLI2SRDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLLI2S_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* return in case of Timeout detected */</comment>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_PLLI2S_SUPPORT */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_PLLSAI_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Enable PLLSAI.
  * @param  PLLSAIInit  pointer to an RCC_PLLSAIInitTypeDef structure that
  *         contains the configuration information for the PLLSAI
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCCEx_EnablePLLSAI</name><parameter_list>(<parameter><decl><type><name>RCC_PLLSAIInitTypeDef</name>  <modifier>*</modifier></type><name>PLLSAIInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <comment type="block">/* Check for parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAIN_VALUE</name><argument_list>(<argument><expr><name><name>PLLSAIInit</name><operator>-&gt;</operator><name>PLLSAIN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAIQ_VALUE</name><argument_list>(<argument><expr><name><name>PLLSAIInit</name><operator>-&gt;</operator><name>PLLSAIQ</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_PLLSAICFGR_PLLSAIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAIM_VALUE</name><argument_list>(<argument><expr><name><name>PLLSAIInit</name><operator>-&gt;</operator><name>PLLSAIM</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_PLLSAICFGR_PLLSAIM */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_PLLSAICFGR_PLLSAIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAIP_VALUE</name><argument_list>(<argument><expr><name><name>PLLSAIInit</name><operator>-&gt;</operator><name>PLLSAIP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_PLLSAICFGR_PLLSAIP */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_PLLSAICFGR_PLLSAIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSAIR_VALUE</name><argument_list>(<argument><expr><name><name>PLLSAIInit</name><operator>-&gt;</operator><name>PLLSAIR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_PLLSAICFGR_PLLSAIR */</comment>

  <comment type="block">/* Disable the PLLSAI */</comment>
  <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till PLLSAI is disabled */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>(<expr><call><name>__HAL_RCC_PLLSAI_GET_FLAG</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLSAI_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* return in case of Timeout detected */</comment>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Configure the PLLSAI division factors */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLSAIN/PLLSAIM) */</comment>
  <comment type="block">/* SAIPCLK = PLLSAI_VCO / PLLSAIP */</comment>
  <comment type="block">/* SAIQCLK = PLLSAI_VCO / PLLSAIQ */</comment>
  <comment type="block">/* SAIRCLK = PLLSAI_VCO / PLLSAIR */</comment>
  <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_CONFIG</name><argument_list>(<argument><expr><name><name>PLLSAIInit</name><operator>-&gt;</operator><name>PLLSAIM</name></name></expr></argument>, <argument><expr><name><name>PLLSAIInit</name><operator>-&gt;</operator><name>PLLSAIN</name></name></expr></argument>, \
                          <argument><expr><name><name>PLLSAIInit</name><operator>-&gt;</operator><name>PLLSAIP</name></name></expr></argument>, <argument><expr><name><name>PLLSAIInit</name><operator>-&gt;</operator><name>PLLSAIQ</name></name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <comment type="block">/* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * PLLSAIN */</comment>
  <comment type="block">/* SAIPCLK = PLLSAI_VCO / PLLSAIP */</comment>
  <comment type="block">/* SAIQCLK = PLLSAI_VCO / PLLSAIQ */</comment>
  <comment type="block">/* SAIRCLK = PLLSAI_VCO / PLLSAIR */</comment>
  <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_CONFIG</name><argument_list>(<argument><expr><name><name>PLLSAIInit</name><operator>-&gt;</operator><name>PLLSAIN</name></name></expr></argument>, <argument><expr><name><name>PLLSAIInit</name><operator>-&gt;</operator><name>PLLSAIP</name></name></expr></argument>, \
                          <argument><expr><name><name>PLLSAIInit</name><operator>-&gt;</operator><name>PLLSAIQ</name></name></expr></argument>, <argument><expr><name><name>PLLSAIInit</name><operator>-&gt;</operator><name>PLLSAIR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x PLLSAIN */</comment>
  <comment type="block">/* SAIQCLK = PLLSAI_VCO / PLLSAIQ */</comment>
  <comment type="block">/* SAIRCLK = PLLSAI_VCO / PLLSAIR */</comment>
  <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_CONFIG</name><argument_list>(<argument><expr><name><name>PLLSAIInit</name><operator>-&gt;</operator><name>PLLSAIN</name></name></expr></argument>, <argument><expr><name><name>PLLSAIInit</name><operator>-&gt;</operator><name>PLLSAIQ</name></name></expr></argument>, <argument><expr><name><name>PLLSAIInit</name><operator>-&gt;</operator><name>PLLSAIR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F446xx */</comment>

  <comment type="block">/* Enable the PLLSAI */</comment>
  <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till PLLSAI is ready */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>(<expr><call><name>__HAL_RCC_PLLSAI_GET_FLAG</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLLSAI_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* return in case of Timeout detected */</comment>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

 <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable PLLSAI.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCCEx_DisablePLLSAI</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <comment type="block">/* Disable the PLLSAI */</comment>
  <expr_stmt><expr><call><name>__HAL_RCC_PLLSAI_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till PLLSAI is disabled */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>(<expr><call><name>__HAL_RCC_PLLSAI_GET_FLAG</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLLSAI_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* return in case of Timeout detected */</comment>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_PLLSAI_SUPPORT */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Returns the SYSCLK frequency
  *
  * @note   This function implementation is valid only for STM32F446xx devices.
  * @note   This function add the PLL/PLLR System clock source
  *
  * @note   The system frequency computed by this function is not the real
  *         frequency in the chip. It is calculated based on the predefined
  *         constant and the selected clock source:
  * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
  * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
  * @note     If SYSCLK source is PLL or PLLR, function returns values based on HSE_VALUE(**)
  *           or HSI_VALUE(*) multiplied/divided by the PLL factors.
  * @note     (*) HSI_VALUE is a constant defined in stm32f4xx_hal_conf.h file (default value
  *               16 MHz) but the real value may vary depending on the variations
  *               in voltage and temperature.
  * @note     (**) HSE_VALUE is a constant defined in stm32f4xx_hal_conf.h file (default value
  *                25 MHz), user has to ensure that HSE_VALUE is same as the real
  *                frequency of the crystal used. Otherwise, this function may
  *                have wrong result.
  *
  * @note   The result of this function could be not correct when using fractional
  *         value for HSE crystal.
  *
  * @note   This function can be used by the user application to compute the
  *         baudrate for the communication peripherals or configure other parameters.
  *
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  *
  * @retval SYSCLK frequency
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RCC_GetSysClockFreq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pllm</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pllvco</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pllp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pllr</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>sysclockfreq</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Get SYSCLK source -------------------------------------------------------*/</comment>
  <switch>switch <condition>(<expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_SWS</name></expr>)</condition>
  <block>{<block_content>
    <case>case <expr><name>RCC_CFGR_SWS_HSI</name></expr>:</case>  <comment type="block">/* HSI used as system clock source */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name>sysclockfreq</name> <operator>=</operator> <name>HSI_VALUE</name></expr>;</expr_stmt>
       <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>RCC_CFGR_SWS_HSE</name></expr>:</case>  <comment type="block">/* HSE used as system clock  source */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name>sysclockfreq</name> <operator>=</operator> <name>HSE_VALUE</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>RCC_CFGR_SWS_PLL</name></expr>:</case>  <comment type="block">/* PLL/PLLP used as system clock  source */</comment>
    <block>{<block_content>
      <comment type="block">/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */</comment>
      <expr_stmt><expr><name>pllm</name> <operator>=</operator> <name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><call><name>__HAL_RCC_GET_PLL_OSCSOURCE</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>RCC_PLLSOURCE_HSI</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* HSE used as PLL clock source */</comment>
        <expr_stmt><expr><name>pllvco</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>HSE_VALUE</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLN</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLCFGR_PLLN_Pos</name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>pllm</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* HSI used as PLL clock source */</comment>
        <expr_stmt><expr><name>pllvco</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>HSI_VALUE</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLN</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLCFGR_PLLN_Pos</name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>pllm</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>pllp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLP</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLCFGR_PLLP_Pos</name><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator> <operator>*</operator><literal type="number">2U</literal><operator>)</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name>sysclockfreq</name> <operator>=</operator> <name>pllvco</name><operator>/</operator><name>pllp</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>RCC_CFGR_SWS_PLLR</name></expr>:</case>  <comment type="block">/* PLL/PLLR used as system clock  source */</comment>
    <block>{<block_content>
      <comment type="block">/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */</comment>
      <expr_stmt><expr><name>pllm</name> <operator>=</operator> <name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><call><name>__HAL_RCC_GET_PLL_OSCSOURCE</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>RCC_PLLSOURCE_HSI</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* HSE used as PLL clock source */</comment>
        <expr_stmt><expr><name>pllvco</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>HSE_VALUE</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLN</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLCFGR_PLLN_Pos</name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>pllm</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* HSI used as PLL clock source */</comment>
        <expr_stmt><expr><name>pllvco</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>HSI_VALUE</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLN</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLCFGR_PLLN_Pos</name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>pllm</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>pllr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLR</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLCFGR_PLLR_Pos</name><operator>)</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name>sysclockfreq</name> <operator>=</operator> <name>pllvco</name><operator>/</operator><name>pllr</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
    <block>{<block_content>
      <expr_stmt><expr><name>sysclockfreq</name> <operator>=</operator> <name>HSI_VALUE</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><name>sysclockfreq</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F446xx */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @note   The default reset state of the clock configuration is given below:
  *            - HSI ON and used as system clock source
  *            - HSE, PLL, PLLI2S and PLLSAI OFF
  *            - AHB, APB1 and APB2 prescaler set to 1.
  *            - CSS, MCO1 and MCO2 OFF
  *            - All interrupts disabled
  * @note   This function doesn't modify the configuration of the
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCC_DeInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <comment type="block">/* Get Start Tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set HSION bit to the reset value */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_HSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till HSI is ready */</comment>
  <while>while <condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_HSIRDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>HSI_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Set HSITRIM[4:0] bits to the reset value */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_HSITRIM_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get Start Tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Reset CFGR register */</comment>
  <expr_stmt><expr><call><name>CLEAR_REG</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till clock switch is ready */</comment>
  <while>while <condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name></expr></argument>, <argument><expr><name>RCC_CFGR_SWS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>CLOCKSWITCH_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Get Start Tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Clear HSEON, HSEBYP and CSSON bits */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_HSEON</name> <operator>|</operator> <name>RCC_CR_HSEBYP</name> <operator>|</operator> <name>RCC_CR_CSSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till HSE is disabled */</comment>
  <while>while <condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_HSERDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>HSE_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Get Start Tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Clear PLLON bit */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLLON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till PLL is disabled */</comment>
  <while>while <condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLLRDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLL_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_PLLI2S_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Get Start Tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Reset PLLI2SON bit */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLLI2SON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till PLLI2S is disabled */</comment>
  <while>while <condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLLI2SRDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLLI2S_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_PLLI2S_SUPPORT */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_PLLSAI_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Get Start Tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Reset PLLSAI bit */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLLSAION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till PLLSAI is disabled */</comment>
  <while>while <condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLLSAIRDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLLSAI_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_PLLSAI_SUPPORT */</comment>

  <comment type="block">/* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Cx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>=</operator> <name>RCC_PLLCFGR_PLLM_4</name> <operator>|</operator> <name>RCC_PLLCFGR_PLLN_6</name> <operator>|</operator> <name>RCC_PLLCFGR_PLLN_7</name> <operator>|</operator> <name>RCC_PLLCFGR_PLLQ_2</name> <operator>|</operator> <name>RCC_PLLCFGR_PLLR_1</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F410Tx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F410Cx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F410Rx</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>=</operator> <name>RCC_PLLCFGR_PLLR_0</name> <operator>|</operator> <name>RCC_PLLCFGR_PLLR_1</name> <operator>|</operator> <name>RCC_PLLCFGR_PLLR_2</name> <operator>|</operator> <name>RCC_PLLCFGR_PLLM_4</name> <operator>|</operator> <name>RCC_PLLCFGR_PLLN_6</name> <operator>|</operator> <name>RCC_PLLCFGR_PLLN_7</name> <operator>|</operator> <name>RCC_PLLCFGR_PLLQ_0</name> <operator>|</operator> <name>RCC_PLLCFGR_PLLQ_1</name> <operator>|</operator> <name>RCC_PLLCFGR_PLLQ_2</name> <operator>|</operator> <name>RCC_PLLCFGR_PLLQ_3</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>=</operator> <name>RCC_PLLCFGR_PLLM_4</name> <operator>|</operator> <name>RCC_PLLCFGR_PLLN_6</name> <operator>|</operator> <name>RCC_PLLCFGR_PLLN_7</name> <operator>|</operator> <name>RCC_PLLCFGR_PLLQ_2</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */</comment>

  <comment type="block">/* Reset PLLI2SCFGR register to default value */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Cx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>=</operator> <name>RCC_PLLI2SCFGR_PLLI2SM_4</name> <operator>|</operator> <name>RCC_PLLI2SCFGR_PLLI2SN_6</name> <operator>|</operator> <name>RCC_PLLI2SCFGR_PLLI2SN_7</name> <operator>|</operator> <name>RCC_PLLI2SCFGR_PLLI2SQ_2</name> <operator>|</operator> <name>RCC_PLLI2SCFGR_PLLI2SR_1</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F401xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F401xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F405xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F415xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F407xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F417xx</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>=</operator> <name>RCC_PLLI2SCFGR_PLLI2SN_6</name> <operator>|</operator> <name>RCC_PLLI2SCFGR_PLLI2SN_7</name> <operator>|</operator> <name>RCC_PLLI2SCFGR_PLLI2SR_1</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>=</operator> <name>RCC_PLLI2SCFGR_PLLI2SN_6</name> <operator>|</operator> <name>RCC_PLLI2SCFGR_PLLI2SN_7</name> <operator>|</operator> <name>RCC_PLLI2SCFGR_PLLI2SQ_2</name> <operator>|</operator> <name>RCC_PLLI2SCFGR_PLLI2SR_1</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F411xE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>PLLI2SCFGR</name></name> <operator>=</operator> <name>RCC_PLLI2SCFGR_PLLI2SM_4</name> <operator>|</operator> <name>RCC_PLLI2SCFGR_PLLI2SN_6</name> <operator>|</operator> <name>RCC_PLLI2SCFGR_PLLI2SN_7</name> <operator>|</operator> <name>RCC_PLLI2SCFGR_PLLI2SR_1</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */</comment>

  <comment type="block">/* Reset PLLSAICFGR register */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>=</operator> <name>RCC_PLLSAICFGR_PLLSAIN_6</name> <operator>|</operator> <name>RCC_PLLSAICFGR_PLLSAIN_7</name> <operator>|</operator> <name>RCC_PLLSAICFGR_PLLSAIQ_2</name> <operator>|</operator> <name>RCC_PLLSAICFGR_PLLSAIR_1</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>PLLSAICFGR</name></name> <operator>=</operator> <name>RCC_PLLSAICFGR_PLLSAIM_4</name> <operator>|</operator> <name>RCC_PLLSAICFGR_PLLSAIN_6</name> <operator>|</operator> <name>RCC_PLLSAICFGR_PLLSAIN_7</name> <operator>|</operator> <name>RCC_PLLSAICFGR_PLLSAIQ_2</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */</comment>

  <comment type="block">/* Disable all interrupts */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CIR</name></name></expr></argument>, <argument><expr><name>RCC_CIR_LSIRDYIE</name> <operator>|</operator> <name>RCC_CIR_LSERDYIE</name> <operator>|</operator> <name>RCC_CIR_HSIRDYIE</name> <operator>|</operator> <name>RCC_CIR_HSERDYIE</name> <operator>|</operator> <name>RCC_CIR_PLLRDYIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_CIR_PLLI2SRDYIE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CIR</name></name></expr></argument>, <argument><expr><name>RCC_CIR_PLLI2SRDYIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_CIR_PLLI2SRDYIE */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_CIR_PLLSAIRDYIE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CIR</name></name></expr></argument>, <argument><expr><name>RCC_CIR_PLLSAIRDYIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_CIR_PLLSAIRDYIE */</comment>

  <comment type="block">/* Clear all interrupt flags */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CIR</name></name></expr></argument>, <argument><expr><name>RCC_CIR_LSIRDYC</name> <operator>|</operator> <name>RCC_CIR_LSERDYC</name> <operator>|</operator> <name>RCC_CIR_HSIRDYC</name> <operator>|</operator> <name>RCC_CIR_HSERDYC</name> <operator>|</operator> <name>RCC_CIR_PLLRDYC</name> <operator>|</operator> <name>RCC_CIR_CSSC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_CIR_PLLI2SRDYC</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CIR</name></name></expr></argument>, <argument><expr><name>RCC_CIR_PLLI2SRDYC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_CIR_PLLI2SRDYC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_CIR_PLLSAIRDYC</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CIR</name></name></expr></argument>, <argument><expr><name>RCC_CIR_PLLSAIRDYC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_CIR_PLLSAIRDYC */</comment>

  <comment type="block">/* Clear LSION bit */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CSR</name></name></expr></argument>, <argument><expr><name>RCC_CSR_LSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Reset all CSR flags */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CSR</name></name></expr></argument>, <argument><expr><name>RCC_CSR_RMVF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Update the SystemCoreClock global variable */</comment>
  <expr_stmt><expr><name>SystemCoreClock</name> <operator>=</operator> <name>HSI_VALUE</name></expr>;</expr_stmt>

  <comment type="block">/* Adapt Systick interrupt period */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>HAL_InitTick</name><argument_list>(<argument><expr><name>TICK_INT_PRIORITY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F410Tx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F410Cx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F410Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator>\
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Cx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Initializes the RCC Oscillators according to the specified parameters in the
  *         RCC_OscInitTypeDef.
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
  *         supported by this API. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCC_OscConfig</name><parameter_list>(<parameter><decl><type><name>RCC_OscInitTypeDef</name>  <modifier>*</modifier></type><name>RCC_OscInitStruct</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_OSCILLATORTYPE</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>OscillatorType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/*------------------------------- HSE Configuration ------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>OscillatorType</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_OSCILLATORTYPE_HSE</name><operator>)</operator> <operator>==</operator> <name>RCC_OSCILLATORTYPE_HSE</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_HSE</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSEState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_CFGR_SWS_HSE</name><operator>)</operator>                                                                     <operator>||</operator>\
      <operator>(</operator><operator>(</operator><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_CFGR_SWS_PLL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLCFGR_PLLSRC_HSE</name><operator>)</operator><operator>)</operator> <operator>||</operator>\
      <operator>(</operator><operator>(</operator><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_CFGR_SWS_PLLR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLCFGR_PLLSRC_HSE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_CFGR_SWS_HSE</name><operator>)</operator>                                                                     <operator>||</operator>\
      <operator>(</operator><operator>(</operator><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_CFGR_SWS_PLL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLCFGR_PLLSRC_HSE</name><operator>)</operator><operator>)</operator></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F446xx */</comment>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_HSERDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSEState</name></name> <operator>==</operator> <name>RCC_HSE_OFF</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Set the new HSE configuration ---------------------------------------*/</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_HSE_CONFIG</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSEState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Check the HSE State */</comment>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSEState</name></name><operator>)</operator> <operator>!=</operator> <name>RCC_HSE_OFF</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Get Start Tick*/</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till HSE is ready */</comment>
        <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_HSERDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>HSE_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Get Start Tick*/</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till HSE is bypassed or disabled */</comment>
        <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_HSERDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>HSE_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*----------------------------- HSI Configuration --------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>OscillatorType</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_OSCILLATORTYPE_HSI</name><operator>)</operator> <operator>==</operator> <name>RCC_OSCILLATORTYPE_HSI</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_HSI</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSIState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_CALIBRATION_VALUE</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSICalibrationValue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_CFGR_SWS_HSI</name><operator>)</operator>                                                                     <operator>||</operator>\
      <operator>(</operator><operator>(</operator><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_CFGR_SWS_PLL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLCFGR_PLLSRC_HSI</name><operator>)</operator><operator>)</operator> <operator>||</operator>\
      <operator>(</operator><operator>(</operator><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_CFGR_SWS_PLLR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLCFGR_PLLSRC_HSI</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_CFGR_SWS_HSI</name><operator>)</operator>                                                                     <operator>||</operator>\
      <operator>(</operator><operator>(</operator><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_CFGR_SWS_PLL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>==</operator> <name>RCC_PLLCFGR_PLLSRC_HSI</name><operator>)</operator><operator>)</operator></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F446xx */</comment>
    <block>{<block_content>
      <comment type="block">/* When HSI is used as system clock it will not disabled */</comment>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_HSIRDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSIState</name></name> <operator>!=</operator> <name>RCC_HSI_ON</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if>
      <comment type="block">/* Otherwise, just the calibration is allowed */</comment>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSICalibrationValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Check the HSI State */</comment>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSIState</name></name><operator>)</operator><operator>!=</operator> <name>RCC_HSI_OFF</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the Internal High Speed oscillator (HSI). */</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_HSI_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get Start Tick*/</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till HSI is ready */</comment>
        <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_HSIRDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>HSI_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>

        <comment type="block">/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSICalibrationValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Disable the Internal High Speed oscillator (HSI). */</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_HSI_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get Start Tick*/</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till HSI is ready */</comment>
        <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_HSIRDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>HSI_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*------------------------------ LSI Configuration -------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>OscillatorType</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_OSCILLATORTYPE_LSI</name><operator>)</operator> <operator>==</operator> <name>RCC_OSCILLATORTYPE_LSI</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_LSI</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSIState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check the LSI State */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSIState</name></name><operator>)</operator><operator>!=</operator> <name>RCC_LSI_OFF</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable the Internal Low Speed oscillator (LSI). */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_LSI_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Get Start Tick*/</comment>
      <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Wait till LSI is ready */</comment>
      <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_LSIRDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>LSI_TIMEOUT_VALUE</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Disable the Internal Low Speed oscillator (LSI). */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_LSI_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Get Start Tick*/</comment>
      <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Wait till LSI is ready */</comment>
      <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_LSIRDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>LSI_TIMEOUT_VALUE</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*------------------------------ LSE Configuration -------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>OscillatorType</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_OSCILLATORTYPE_LSE</name><operator>)</operator> <operator>==</operator> <name>RCC_OSCILLATORTYPE_LSE</name></expr>)</condition>
  <block>{<block_content>
    <decl_stmt><decl><type><name>FlagStatus</name></type>       <name>pwrclkchanged</name> <init>= <expr><name>RESET</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_LSE</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSEState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update LSE configuration in Backup Domain control register    */</comment>
    <comment type="block">/* Requires to enable write access to Backup Domain of necessary */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>__HAL_RCC_PWR_IS_CLK_DISABLED</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>__HAL_RCC_PWR_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pwrclkchanged</name> <operator>=</operator> <name>SET</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>PWR_CR_DBP</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable write access to Backup domain */</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>PWR_CR_DBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Wait for Backup domain Write protection disable */</comment>
      <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <while>while<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>PWR_CR_DBP</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>RCC_DBP_TIMEOUT_VALUE</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Set the new LSE configuration -----------------------------------------*/</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_LSE_CONFIG</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSEState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Check the LSE State */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSEState</name></name><operator>)</operator> <operator>!=</operator> <name>RCC_LSE_OFF</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Get Start Tick*/</comment>
      <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Wait till LSE is ready */</comment>
      <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_LSERDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RCC_LSE_TIMEOUT_VALUE</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Get Start Tick*/</comment>
      <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Wait till LSE is ready */</comment>
      <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_LSERDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>RCC_LSE_TIMEOUT_VALUE</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Restore clock configuration if changed */</comment>
    <if_stmt><if>if<condition>(<expr><name>pwrclkchanged</name> <operator>==</operator> <name>SET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>__HAL_RCC_PWR_CLK_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*-------------------------------- PLL Configuration -----------------------*/</comment>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLL</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLState</name></name><operator>)</operator> <operator>!=</operator> <name>RCC_PLL_NONE</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check if the PLL is used as system clock or not */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>RCC_CFGR_SWS_PLL</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLState</name></name><operator>)</operator> <operator>==</operator> <name>RCC_PLL_ON</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Check the parameters */</comment>
        <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSOURCE</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLSource</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLM_VALUE</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLM</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLN_VALUE</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLP_VALUE</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLQ_VALUE</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLQ</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLR_VALUE</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Disable the main PLL. */</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_PLL_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get Start Tick*/</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till PLL is ready */</comment>
        <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLRDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLL_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>

        <comment type="block">/* Configure the main PLL clock source, multiplication and division factors. */</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_PLL_CONFIG</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLSource</name></name></expr></argument>,
                             <argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLM</name></name></expr></argument>,
                             <argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLN</name></name></expr></argument>,
                             <argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLP</name></name></expr></argument>,
                             <argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLQ</name></name></expr></argument>,
                             <argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Enable the main PLL. */</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_PLL_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get Start Tick*/</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till PLL is ready */</comment>
        <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLRDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLL_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Disable the main PLL. */</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_PLL_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get Start Tick*/</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till PLL is ready */</comment>
        <while>while<condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLRDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>PLL_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configures the RCC_OscInitStruct according to the internal
  * RCC configuration registers.
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that will be configured.
  *
  * @note   This function is only available in case of STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices.
  * @note   This function add the PLL/PLLR factor management
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RCC_GetOscConfig</name><parameter_list>(<parameter><decl><type><name>RCC_OscInitTypeDef</name>  <modifier>*</modifier></type><name>RCC_OscInitStruct</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Set all possible values for the Oscillator type parameter ---------------*/</comment>
  <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>OscillatorType</name></name> <operator>=</operator> <name>RCC_OSCILLATORTYPE_HSE</name> <operator>|</operator> <name>RCC_OSCILLATORTYPE_HSI</name> <operator>|</operator> <name>RCC_OSCILLATORTYPE_LSE</name> <operator>|</operator> <name>RCC_OSCILLATORTYPE_LSI</name></expr>;</expr_stmt>

  <comment type="block">/* Get the HSE configuration -----------------------------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator><name>RCC_CR_HSEBYP</name><operator>)</operator> <operator>==</operator> <name>RCC_CR_HSEBYP</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSEState</name></name> <operator>=</operator> <name>RCC_HSE_BYPASS</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator><name>RCC_CR_HSEON</name><operator>)</operator> <operator>==</operator> <name>RCC_CR_HSEON</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSEState</name></name> <operator>=</operator> <name>RCC_HSE_ON</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSEState</name></name> <operator>=</operator> <name>RCC_HSE_OFF</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Get the HSI configuration -----------------------------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator><name>RCC_CR_HSION</name><operator>)</operator> <operator>==</operator> <name>RCC_CR_HSION</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSIState</name></name> <operator>=</operator> <name>RCC_HSI_ON</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSIState</name></name> <operator>=</operator> <name>RCC_HSI_OFF</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSICalibrationValue</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator><name>RCC_CR_HSITRIM</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CR_HSITRIM_Pos</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Get the LSE configuration -----------------------------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator><name>RCC_BDCR_LSEBYP</name><operator>)</operator> <operator>==</operator> <name>RCC_BDCR_LSEBYP</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSEState</name></name> <operator>=</operator> <name>RCC_LSE_BYPASS</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator><name>RCC_BDCR_LSEON</name><operator>)</operator> <operator>==</operator> <name>RCC_BDCR_LSEON</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSEState</name></name> <operator>=</operator> <name>RCC_LSE_ON</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSEState</name></name> <operator>=</operator> <name>RCC_LSE_OFF</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Get the LSI configuration -----------------------------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CSR</name></name> <operator>&amp;</operator><name>RCC_CSR_LSION</name><operator>)</operator> <operator>==</operator> <name>RCC_CSR_LSION</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSIState</name></name> <operator>=</operator> <name>RCC_LSI_ON</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSIState</name></name> <operator>=</operator> <name>RCC_LSI_OFF</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Get the PLL configuration -----------------------------------------------*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator><name>RCC_CR_PLLON</name><operator>)</operator> <operator>==</operator> <name>RCC_CR_PLLON</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLState</name></name> <operator>=</operator> <name>RCC_PLL_ON</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLState</name></name> <operator>=</operator> <name>RCC_PLL_OFF</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLSource</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLM</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLN</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLN</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLCFGR_PLLN_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLP</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLP</name><operator>)</operator> <operator>+</operator> <name>RCC_PLLCFGR_PLLP_0</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLCFGR_PLLP_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLQ</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLQ</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLCFGR_PLLQ_Pos</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLR</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_PLLCFGR_PLLR_Pos</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F410xx || STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx || STM32F413xx || STM32F423xx */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_RCC_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
