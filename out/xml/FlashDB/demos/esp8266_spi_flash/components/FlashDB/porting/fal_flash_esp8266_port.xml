<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/esp8266_spi_flash/components/FlashDB/porting/fal_flash_esp8266_port.c"><comment type="block">/*
 * Copyright (c) 2020, Armink, &lt;armink.ztl@gmail.com&gt;
 *
 * SPDX-License-Identifier: Apache-2.0
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"esp_spi_flash.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fal.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLASH_ERASE_MIN_SIZE</name></cpp:macro>    <cpp:value>(4 * 1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCKER_ENABLE</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCKER_ENABLE</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FreeRTOS.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"semphr.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>SemaphoreHandle_t</name></type> <name>s_lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK</name><parameter_list>()</parameter_list></cpp:macro>                                  \
    <cpp:value>do {                                        \
        xSemaphoreTake(s_lock, portMAX_DELAY);  \
    } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNLOCK</name><parameter_list>()</parameter_list></cpp:macro>                                \
    <cpp:value>do {                                        \
        xSemaphoreGive(s_lock);                 \
    } while(0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNLOCK</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCKER_ENABLE</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>s_lock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>s_lock</name> <operator>=</operator> <call><name>xSemaphoreCreateCounting</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s_lock</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">//Xassert(size % 4 == 0);</comment>

    <comment type="block">/* You can add your code under here. */</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><name><name>nor_flash0</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

    
    <expr_stmt><expr><call><name>LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>spi_flash_read</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><name><name>nor_flash0</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>spi_flash_write</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><name><name>nor_flash0</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>erase_size</name> <init>= <expr><operator>(</operator><operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>FLASH_ERASE_MIN_SIZE</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>spi_flash_erase_range</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>erase_size</name> <operator>*</operator> <name>FLASH_ERASE_MIN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
  "esp8266_onchip" : Flash è®¾å¤çåå­ã
  0x08000000: å¯¹ Flash æä½çèµ·å§å°åã
  1024*1024ï¼Flash çæ»å¤§å°ï¼1MBï¼ã
  128*1024ï¼Flash å/æåºå¤§å°ï¼å ä¸º STM32F2 ååå¤§å°ä¸ååï¼æä»¥æ¦é¤ç²åº¦ä¸ºæå¤§åçå¤§å°ï¼128Kï¼ã
  {init, read, write, erase} ï¼Flash çæä½å½æ°ã å¦ææ²¡æ init åå§åè¿ç¨ï¼ç¬¬ä¸ä¸ªæä½å½æ°ä½ç½®å¯ä»¥ç½®ç©ºã
  8 : è®¾ç½®åç²åº¦ï¼åä½ bitï¼ 0 è¡¨ç¤ºæªçæï¼é»è®¤å¼ä¸º 0 ï¼ï¼è¯¥æåæ¯ fal çæ¬å¤§äº 0.4.0 çæ°å¢æåãåä¸ª flash åå¥ç²åº¦ä¸å°½ç¸åï¼å¯éè¿è¯¥æåè¿è¡è®¾ç½®ï¼ä»¥ä¸åä¸¾å ç§å¸¸è§ Flash åç²åº¦ï¼
  nor flash:  1 bit
  stm32f2/f4: 8 bit
  stm32f1:    32 bit
  stm32l4:    64 bit
 */</comment>

<comment type="line">//1.å®ä¹ flash è®¾å¤</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_flash_dev</name></name></type> <name>nor_flash0</name> <init>=
<expr><block>{
    <expr><operator>.</operator><name>name</name>       <operator>=</operator> <literal type="string">"norflash0"</literal></expr>,
    <expr><operator>.</operator><name>addr</name>       <operator>=</operator> <literal type="number">0x100000</literal></expr>,
    <expr><operator>.</operator><name>len</name>        <operator>=</operator> <literal type="number">50</literal><operator>*</operator><literal type="number">1024</literal></expr>,
    <expr><operator>.</operator><name>blk_size</name>   <operator>=</operator> <name>FLASH_ERASE_MIN_SIZE</name></expr>,
    <expr><operator>.</operator><name>ops</name>        <operator>=</operator> <block>{<expr><name>init</name></expr>, <expr><name>read</name></expr>, <expr><name>write</name></expr>, <expr><name>erase</name></expr>}</block></expr>,
    <expr><operator>.</operator><name>write_gran</name> <operator>=</operator> <literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

</unit>
