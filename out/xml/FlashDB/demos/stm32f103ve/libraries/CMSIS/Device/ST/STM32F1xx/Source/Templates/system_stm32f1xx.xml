<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f103ve/libraries/CMSIS/Device/ST/STM32F1xx/Source/Templates/system_stm32f1xx.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    system_stm32f1xx.c
  * @author  MCD Application Team
  * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
  * 
  * 1.  This file provides two functions and one global variable to be called from 
  *     user application:
  *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  *                      factors, AHB/APBx prescalers and Flash settings). 
  *                      This function is called at startup just after reset and 
  *                      before branch to main program. This call is made inside
  *                      the "startup_stm32f1xx_xx.s" file.
  *
  *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  *                                  by the user application to setup the SysTick 
  *                                  timer or configure other parameters.
  *                                     
  *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  *                                 be called whenever the core clock is changed
  *                                 during program execution.
  *
  * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  *    Then SystemInit() function is called, in "startup_stm32f1xx_xx.s" file, to
  *    configure the system clock before to branch to main program.
  *
  * 4. The default value of HSE crystal is set to 8 MHz (or 25 MHz, depending on
  *    the product used), refer to "HSE_VALUE". 
  *    When HSE is used as system clock source, directly or through PLL, and you
  *    are using different crystal you have to adapt the HSE value to your own
  *    configuration.
  *        
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup CMSIS
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup stm32f1xx_system
  * @{
  */</comment>  
  
<comment type="block" format="doxygen">/** @addtogroup STM32F1xx_System_Private_Includes
  * @{
  */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f1xx.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup STM32F1xx_System_Private_TypesDefinitions
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup STM32F1xx_System_Private_Defines
  * @{
  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name>  <argument_list>(<argument><expr><name>HSE_VALUE</name></expr></argument>)</argument_list></call></expr></cpp:if> 
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_VALUE</name></cpp:macro>               <cpp:value>8000000U</cpp:value></cpp:define> <comment type="block" format="doxygen">/*!&lt; Default value of the External oscillator in Hz.
                                                This value can be provided and adapted by the user application. */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HSE_VALUE */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name>  <argument_list>(<argument><expr><name>HSI_VALUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSI_VALUE</name></cpp:macro>               <cpp:value>8000000U</cpp:value></cpp:define> <comment type="block" format="doxygen">/*!&lt; Default value of the Internal oscillator in Hz.
                                                This value can be provided and adapted by the user application. */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HSI_VALUE */</comment>

<comment type="block" format="doxygen">/*!&lt; Uncomment the following line if you need to use external SRAM  */</comment> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F100xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F101xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F101xG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* #define DATA_IN_ExtSRAM */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F100xE || STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG */</comment>

<comment type="block" format="doxygen">/*!&lt; Uncomment the following line if you need to relocate your vector Table in
     Internal SRAM. */</comment> 
<comment type="block">/* #define VECT_TAB_SRAM */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VECT_TAB_OFFSET</name></cpp:macro>  <cpp:value>0x00000000U</cpp:value></cpp:define> <comment type="block" format="doxygen">/*!&lt; Vector Table base offset field. 
                                  This value must be a multiple of 0x200. */</comment>


<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup STM32F1xx_System_Private_Macros
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup STM32F1xx_System_Private_Variables
  * @{
  */</comment>

  <comment type="block">/* This variable is updated in three ways:
      1) by calling CMSIS function SystemCoreClockUpdate()
      2) by calling HAL API function HAL_RCC_GetHCLKFreq()
      3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency 
         Note: If you use this function to configure the system clock; then there
               is no need to call the 2 first functions listed above, since SystemCoreClock
               variable is updated automatically.
  */</comment>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>SystemCoreClock</name> <init>= <expr><literal type="number">16000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>AHBPrescTable</name><index>[<expr><literal type="number">16U</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>APBPrescTable</name><index>[<expr><literal type="number">8U</literal></expr>]</index></name> <init>=  <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup STM32F1xx_System_Private_FunctionPrototypes
  * @{
  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F100xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F101xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F101xG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DATA_IN_ExtSRAM</name></cpp:ifdef>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SystemInit_ExtMemCtl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DATA_IN_ExtSRAM */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F100xE || STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup STM32F1xx_System_Private_Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Setup the microcontroller system
  *         Initialize the Embedded Flash Interface, the PLL and update the 
  *         SystemCoreClock variable.
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>SystemInit</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Reset the RCC clock configuration to the default reset state(for debug purpose) */</comment>
  <comment type="block">/* Set HSION bit */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <literal type="number">0x00000001U</literal></expr>;</expr_stmt>

  <comment type="block">/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STM32F105xC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STM32F107xC</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;=</operator> <literal type="number">0xF8FF0000U</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;=</operator> <literal type="number">0xF0FF0000U</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F105xC */</comment>   
  
  <comment type="block">/* Reset HSEON, CSSON and PLLON bits */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <literal type="number">0xFEF6FFFFU</literal></expr>;</expr_stmt>

  <comment type="block">/* Reset HSEBYP bit */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <literal type="number">0xFFFBFFFFU</literal></expr>;</expr_stmt>

  <comment type="block">/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;=</operator> <literal type="number">0xFF80FFFFU</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F105xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F107xC</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Reset PLL2ON and PLL3ON bits */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <literal type="number">0xEBFFFFFFU</literal></expr>;</expr_stmt>

  <comment type="block">/* Disable all interrupts and clear pending bits  */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>CIR</name></name> <operator>=</operator> <literal type="number">0x00FF0000U</literal></expr>;</expr_stmt>

  <comment type="block">/* Reset CFGR2 register */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name> <operator>=</operator> <literal type="number">0x00000000U</literal></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F100xB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F100xE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <comment type="block">/* Disable all interrupts and clear pending bits  */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>CIR</name></name> <operator>=</operator> <literal type="number">0x009F0000U</literal></expr>;</expr_stmt>

  <comment type="block">/* Reset CFGR2 register */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name> <operator>=</operator> <literal type="number">0x00000000U</literal></expr>;</expr_stmt>      
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Disable all interrupts and clear pending bits  */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>CIR</name></name> <operator>=</operator> <literal type="number">0x009F0000U</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F105xC */</comment>
    
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F100xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F101xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F101xG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xG</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DATA_IN_ExtSRAM</name></cpp:ifdef>
    <expr_stmt><expr><call><name>SystemInit_ExtMemCtl</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DATA_IN_ExtSRAM */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VECT_TAB_SRAM</name></cpp:ifdef>
  <expr_stmt><expr><name><name>SCB</name><operator>-&gt;</operator><name>VTOR</name></name> <operator>=</operator> <name>SRAM_BASE</name> <operator>|</operator> <name>VECT_TAB_OFFSET</name></expr>;</expr_stmt> <comment type="block">/* Vector Table Relocation in Internal SRAM. */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name><name>SCB</name><operator>-&gt;</operator><name>VTOR</name></name> <operator>=</operator> <name>FLASH_BASE</name> <operator>|</operator> <name>VECT_TAB_OFFSET</name></expr>;</expr_stmt> <comment type="block">/* Vector Table Relocation in Internal FLASH. */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Update SystemCoreClock variable according to Clock Register Values.
  *         The SystemCoreClock variable contains the core clock (HCLK), it can
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  *           
  * @note   Each time the core clock (HCLK) changes, this function must be called
  *         to update SystemCoreClock variable value. Otherwise, any configuration
  *         based on this variable will be incorrect.         
  *     
  * @note   - The system frequency computed by this function is not the real 
  *           frequency in the chip. It is calculated based on the predefined 
  *           constant and the selected clock source:
  *             
  *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
  *                                              
  *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
  *                          
  *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
  *             or HSI_VALUE(*) multiplied by the PLL factors.
  *         
  *         (*) HSI_VALUE is a constant defined in stm32f1xx.h file (default value
  *             8 MHz) but the real value may vary depending on the variations
  *             in voltage and temperature.   
  *    
  *         (**) HSE_VALUE is a constant defined in stm32f1xx.h file (default value
  *              8 MHz or 25 MHz, depending on the product used), user has to ensure
  *              that HSE_VALUE is same as the real frequency of the crystal used.
  *              Otherwise, this function may have wrong result.
  *                
  *         - The result of this function could be not correct when using fractional
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>SystemCoreClockUpdate</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>pllmull</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>pllsource</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F105xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F107xC</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>prediv1source</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>prediv1factor</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>prediv2factor</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>pll2mull</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F105xC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F100xB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F100xE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>prediv1factor</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F100xB or STM32F100xE */</comment>
    
  <comment type="block">/* Get SYSCLK source -------------------------------------------------------*/</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_SWS</name></expr>;</expr_stmt>
  
  <switch>switch <condition>(<expr><name>tmp</name></expr>)</condition>
  <block>{<block_content>
    <case>case <expr><literal type="number">0x00U</literal></expr>:</case>  <comment type="block">/* HSI used as system clock */</comment>
      <expr_stmt><expr><name>SystemCoreClock</name> <operator>=</operator> <name>HSI_VALUE</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">0x04U</literal></expr>:</case>  <comment type="block">/* HSE used as system clock */</comment>
      <expr_stmt><expr><name>SystemCoreClock</name> <operator>=</operator> <name>HSE_VALUE</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">0x08U</literal></expr>:</case>  <comment type="block">/* PLL used as system clock */</comment>

      <comment type="block">/* Get PLL clock source and multiplication factor ----------------------*/</comment>
      <expr_stmt><expr><name>pllmull</name> <operator>=</operator> <name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_PLLMULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pllsource</name> <operator>=</operator> <name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_PLLSRC</name></expr>;</expr_stmt>
      
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STM32F105xC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STM32F107xC</name></expr></argument>)</argument_list></call></expr></cpp:if>      
      <expr_stmt><expr><name>pllmull</name> <operator>=</operator> <operator>(</operator> <name>pllmull</name> <operator>&gt;&gt;</operator> <literal type="number">18U</literal><operator>)</operator> <operator>+</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>pllsource</name> <operator>==</operator> <literal type="number">0x00U</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* HSI oscillator clock divided by 2 selected as PLL clock entry */</comment>
        <expr_stmt><expr><name>SystemCoreClock</name> <operator>=</operator> <operator>(</operator><name>HSI_VALUE</name> <operator>&gt;&gt;</operator> <literal type="number">1U</literal><operator>)</operator> <operator>*</operator> <name>pllmull</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
 <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F100xB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F100xE</name></expr></argument>)</argument_list></call></expr></cpp:if>
       <expr_stmt><expr><name>prediv1factor</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name> <operator>&amp;</operator> <name>RCC_CFGR2_PREDIV1</name><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
       <comment type="block">/* HSE oscillator clock selected as PREDIV1 clock entry */</comment>
       <expr_stmt><expr><name>SystemCoreClock</name> <operator>=</operator> <operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <name>prediv1factor</name><operator>)</operator> <operator>*</operator> <name>pllmull</name></expr>;</expr_stmt> 
 <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <comment type="block">/* HSE selected as PLL clock entry */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_PLLXTPRE</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
        <block>{<block_content><comment type="block">/* HSE oscillator clock divided by 2 */</comment>
          <expr_stmt><expr><name>SystemCoreClock</name> <operator>=</operator> <operator>(</operator><name>HSE_VALUE</name> <operator>&gt;&gt;</operator> <literal type="number">1U</literal><operator>)</operator> <operator>*</operator> <name>pllmull</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><name>SystemCoreClock</name> <operator>=</operator> <name>HSE_VALUE</name> <operator>*</operator> <name>pllmull</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
 <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><name>pllmull</name> <operator>=</operator> <name>pllmull</name> <operator>&gt;&gt;</operator> <literal type="number">18U</literal></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>pllmull</name> <operator>!=</operator> <literal type="number">0x0DU</literal></expr>)</condition>
      <block>{<block_content>
         <expr_stmt><expr><name>pllmull</name> <operator>+=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content> <comment type="block">/* PLL multiplication factor = PLL input clock * 6.5 */</comment>
        <expr_stmt><expr><name>pllmull</name> <operator>=</operator> <literal type="number">13U</literal> <operator>/</operator> <literal type="number">2U</literal></expr>;</expr_stmt> 
      </block_content>}</block></else></if_stmt>
            
      <if_stmt><if>if <condition>(<expr><name>pllsource</name> <operator>==</operator> <literal type="number">0x00U</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* HSI oscillator clock divided by 2 selected as PLL clock entry */</comment>
        <expr_stmt><expr><name>SystemCoreClock</name> <operator>=</operator> <operator>(</operator><name>HSI_VALUE</name> <operator>&gt;&gt;</operator> <literal type="number">1U</literal><operator>)</operator> <operator>*</operator> <name>pllmull</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content><comment type="block">/* PREDIV1 selected as PLL clock entry */</comment>
        
        <comment type="block">/* Get PREDIV1 clock source and division factor */</comment>
        <expr_stmt><expr><name>prediv1source</name> <operator>=</operator> <name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name> <operator>&amp;</operator> <name>RCC_CFGR2_PREDIV1SRC</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>prediv1factor</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name> <operator>&amp;</operator> <name>RCC_CFGR2_PREDIV1</name><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>prediv1source</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content> 
          <comment type="block">/* HSE oscillator clock selected as PREDIV1 clock entry */</comment>
          <expr_stmt><expr><name>SystemCoreClock</name> <operator>=</operator> <operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <name>prediv1factor</name><operator>)</operator> <operator>*</operator> <name>pllmull</name></expr>;</expr_stmt>          
        </block_content>}</block></if>
        <else>else
        <block>{<block_content><comment type="block">/* PLL2 clock selected as PREDIV1 clock entry */</comment>
          
          <comment type="block">/* Get PREDIV2 division factor and PLL2 multiplication factor */</comment>
          <expr_stmt><expr><name>prediv2factor</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name> <operator>&amp;</operator> <name>RCC_CFGR2_PREDIV2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4U</literal><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>pll2mull</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name> <operator>&amp;</operator> <name>RCC_CFGR2_PLL2MUL</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>+</operator> <literal type="number">2U</literal></expr>;</expr_stmt> 
          <expr_stmt><expr><name>SystemCoreClock</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <name>prediv2factor</name><operator>)</operator> <operator>*</operator> <name>pll2mull</name><operator>)</operator> <operator>/</operator> <name>prediv1factor</name><operator>)</operator> <operator>*</operator> <name>pllmull</name></expr>;</expr_stmt>                         
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F105xC */</comment> 
      <break>break;</break>

    <default>default:</default>
      <expr_stmt><expr><name>SystemCoreClock</name> <operator>=</operator> <name>HSI_VALUE</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  
  <comment type="block">/* Compute HCLK clock frequency ----------------*/</comment>
  <comment type="block">/* Get HCLK prescaler */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>AHBPrescTable</name><index>[<expr><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_HPRE</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4U</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
  <comment type="block">/* HCLK clock frequency */</comment>
  <expr_stmt><expr><name>SystemCoreClock</name> <operator>&gt;&gt;=</operator> <name>tmp</name></expr>;</expr_stmt>  
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F100xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F101xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F101xG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Setup the external memory controller. Called in startup_stm32f1xx.s 
  *          before jump to __main
  * @param  None
  * @retval None
  */</comment> 
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DATA_IN_ExtSRAM</name></cpp:ifdef>
<comment type="block" format="doxygen">/**
  * @brief  Setup the external memory controller. 
  *         Called in startup_stm32f1xx_xx.s/.c before jump to main.
  *         This function configures the external SRAM mounted on STM3210E-EVAL
  *         board (STM32 High density devices). This SRAM will be used as program
  *         data memory (including heap and stack).
  * @param  None
  * @retval None
  */</comment> 
<function><type><name>void</name></type> <name>SystemInit_ExtMemCtl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> 
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>tmpreg</name></decl>;</decl_stmt>
  <comment type="block" format="doxygen">/*!&lt; FSMC Bank1 NOR/SRAM3 is used for the STM3210E-EVAL, if another Bank is 
    required, then adjust the Register Addresses */</comment>

  <comment type="block">/* Enable FSMC clock */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>AHBENR</name></name> <operator>=</operator> <literal type="number">0x00000114U</literal></expr>;</expr_stmt>

  <comment type="block">/* Delay after an RCC peripheral clock enabling */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>AHBENR</name></name></expr></argument>, <argument><expr><name>RCC_AHBENR_FSMCEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Enable GPIOD, GPIOE, GPIOF and GPIOG clocks */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>APB2ENR</name></name> <operator>=</operator> <literal type="number">0x000001E0U</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Delay after an RCC peripheral clock enabling */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>APB2ENR</name></name></expr></argument>, <argument><expr><name>RCC_APB2ENR_IOPDEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>(</operator><name>tmpreg</name><operator>)</operator></expr>;</expr_stmt>
  
<comment type="block">/* ---------------  SRAM Data lines, NOE and NWE configuration ---------------*/</comment>
<comment type="block">/*----------------  SRAM Address lines configuration -------------------------*/</comment>
<comment type="block">/*----------------  NOE and NWE configuration --------------------------------*/</comment>  
<comment type="block">/*----------------  NE3 configuration ----------------------------------------*/</comment>
<comment type="block">/*----------------  NBL0, NBL1 configuration ---------------------------------*/</comment>
  
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>CRL</name></name> <operator>=</operator> <literal type="number">0x44BB44BBU</literal></expr>;</expr_stmt>  
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>CRH</name></name> <operator>=</operator> <literal type="number">0xBBBBBBBBU</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>CRL</name></name> <operator>=</operator> <literal type="number">0xB44444BBU</literal></expr>;</expr_stmt>  
  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>CRH</name></name> <operator>=</operator> <literal type="number">0xBBBBBBBBU</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>CRL</name></name> <operator>=</operator> <literal type="number">0x44BBBBBBU</literal></expr>;</expr_stmt>  
  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>CRH</name></name> <operator>=</operator> <literal type="number">0xBBBB4444U</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>CRL</name></name> <operator>=</operator> <literal type="number">0x44BBBBBBU</literal></expr>;</expr_stmt>  
  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>CRH</name></name> <operator>=</operator> <literal type="number">0x444B4B44U</literal></expr>;</expr_stmt>
   
<comment type="block">/*----------------  FSMC Configuration ---------------------------------------*/</comment>  
<comment type="block">/*----------------  Enable FSMC Bank1_SRAM Bank ------------------------------*/</comment>
  
  <expr_stmt><expr><name><name>FSMC_Bank1</name><operator>-&gt;</operator><name>BTCR</name><index>[<expr><literal type="number">4U</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00001091U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>FSMC_Bank1</name><operator>-&gt;</operator><name>BTCR</name><index>[<expr><literal type="number">5U</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00110212U</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DATA_IN_ExtSRAM */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F100xE || STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
  
<comment type="block" format="doxygen">/**
  * @}
  */</comment>    
<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
