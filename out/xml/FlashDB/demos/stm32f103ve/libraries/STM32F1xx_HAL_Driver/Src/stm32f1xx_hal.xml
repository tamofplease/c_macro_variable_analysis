<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f103ve/libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f1xx_hal.c
  * @author  MCD Application Team
  * @brief   HAL module driver.
  *          This is the common part of the HAL initialization
  *
  @verbatim
  ==============================================================================
                     ##### How to use this driver #####
  ==============================================================================
    [..]
    The common HAL driver contains a set of generic and common APIs that can be
    used by the PPP peripheral drivers and the user to start using the HAL.
    [..]
    The HAL contains two APIs' categories:
         (+) Common HAL APIs
         (+) Services HAL APIs

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f1xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F1xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup HAL HAL
  * @brief HAL module driver.
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup HAL_Private_Constants HAL Private Constants
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
 * @brief STM32F1xx HAL Driver version number V1.1.4
   */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__STM32F1xx_HAL_VERSION_MAIN</name></cpp:macro>   <cpp:value>(0x01U)</cpp:value></cpp:define> <comment type="block" format="doxygen">/*!&lt; [31:24] main version */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__STM32F1xx_HAL_VERSION_SUB1</name></cpp:macro>   <cpp:value>(0x01U)</cpp:value></cpp:define> <comment type="block" format="doxygen">/*!&lt; [23:16] sub1 version */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__STM32F1xx_HAL_VERSION_SUB2</name></cpp:macro>   <cpp:value>(0x04U)</cpp:value></cpp:define> <comment type="block" format="doxygen">/*!&lt; [15:8]  sub2 version */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__STM32F1xx_HAL_VERSION_RC</name></cpp:macro>     <cpp:value>(0x00U)</cpp:value></cpp:define> <comment type="block" format="doxygen">/*!&lt; [7:0]  release candidate */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__STM32F1xx_HAL_VERSION</name></cpp:macro>         <cpp:value>((__STM32F1xx_HAL_VERSION_MAIN &lt;&lt; 24)\
                                        |(__STM32F1xx_HAL_VERSION_SUB1 &lt;&lt; 16)\
                                        |(__STM32F1xx_HAL_VERSION_SUB2 &lt;&lt; 8 )\
                                        |(__STM32F1xx_HAL_VERSION_RC))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCODE_DEVID_MASK</name></cpp:macro>    <cpp:value>0x00000FFFU</cpp:value></cpp:define>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup HAL_Private_Variables HAL Private Variables
  * @{
  */</comment>
<decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>uwTick</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uwTickPrio</name>   <init>= <expr><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>__NVIC_PRIO_BITS</name><operator>)</operator></expr></init></decl>;</decl_stmt> <comment type="block">/* Invalid PRIO */</comment>
<decl_stmt><decl><type><name>HAL_TickFreqTypeDef</name></type> <name>uwTickFreq</name> <init>= <expr><name>HAL_TICK_FREQ_DEFAULT</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* 1KHz */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block">/* Exported functions ---------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup HAL_Exported_Functions HAL Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup HAL_Exported_Functions_Group1 Initialization and de-initialization Functions
 *  @brief    Initialization and de-initialization functions
 *
@verbatim
 ===============================================================================
              ##### Initialization and de-initialization functions #####
 ===============================================================================
   [..]  This section provides functions allowing to:
      (+) Initializes the Flash interface, the NVIC allocation and initial clock
          configuration. It initializes the systick also when timeout is needed
          and the backup domain when enabled.
      (+) de-Initializes common part of the HAL.
      (+) Configure The time base source to have 1ms time base with a dedicated
          Tick interrupt priority.
        (++) SysTick timer is used by default as source of time base, but user
             can eventually implement his proper time base source (a general purpose
             timer for example or other time source), keeping in mind that Time base
             duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
             handled in milliseconds basis.
        (++) Time base configuration function (HAL_InitTick ()) is called automatically
             at the beginning of the program after reset by HAL_Init() or at any time
             when clock is configured, by HAL_RCC_ClockConfig().
        (++) Source of time base is configured  to generate interrupts at regular
             time intervals. Care must be taken if HAL_Delay() is called from a
             peripheral ISR process, the Tick interrupt line must have higher priority
            (numerically lower) than the peripheral interrupt. Otherwise the caller
            ISR process will be blocked.
       (++) functions affecting time base configurations are declared as __weak
             to make  override possible  in case of other  implementations in user file.
@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  This function is used to initialize the HAL Library; it must be the first
  *         instruction to be executed in the main program (before to call any other
  *         HAL function), it performs the following:
  *           Configure the Flash prefetch.
  *           Configures the SysTick to generate an interrupt each 1 millisecond,
  *           which is clocked by the HSI (at this stage, the clock is not yet
  *           configured and thus the system is running from the internal HSI at 16 MHz).
  *           Set NVIC Group Priority to 4.
  *           Calls the HAL_MspInit() callback function defined in user file
  *           "stm32f1xx_hal_msp.c" to do the global low level hardware initialization
  *
  * @note   SysTick is used as time base for the HAL_Delay() function, the application
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Configure Flash prefetch */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>PREFETCH_ENABLE</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F101x6</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F101xB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F101xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F101xG</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F102x6</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F102xB</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103x6</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xG</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F105xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F107xC</name></expr></argument>)</argument_list></call></expr></cpp:if>

  <comment type="block">/* Prefetch buffer is not available on value line devices */</comment>
  <expr_stmt><expr><call><name>__HAL_FLASH_PREFETCH_BUFFER_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* PREFETCH_ENABLE */</comment>

  <comment type="block">/* Set Interrupt Group Priority */</comment>
  <expr_stmt><expr><call><name>HAL_NVIC_SetPriorityGrouping</name><argument_list>(<argument><expr><name>NVIC_PRIORITYGROUP_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */</comment>
  <expr_stmt><expr><call><name>HAL_InitTick</name><argument_list>(<argument><expr><name>TICK_INT_PRIORITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Init the low level hardware */</comment>
  <expr_stmt><expr><call><name>HAL_MspInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief This function de-Initializes common part of the HAL and stops the systick.
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DeInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Reset of all peripherals */</comment>
  <expr_stmt><expr><call><name>__HAL_RCC_APB1_FORCE_RESET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_RCC_APB1_RELEASE_RESET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>__HAL_RCC_APB2_FORCE_RESET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_RCC_APB2_RELEASE_RESET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F105xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F107xC</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>__HAL_RCC_AHB_FORCE_RESET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_RCC_AHB_RELEASE_RESET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* De-Init the low level hardware */</comment>
  <expr_stmt><expr><call><name>HAL_MspDeInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initialize the MSP.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_MspInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_MspDeInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief This function configures the source of the time base.
  *        The time source is configured  to have 1ms time base with a dedicated
  *        Tick interrupt priority.
  * @note This function is called  automatically at the beginning of program after
  *       reset by HAL_Init() or at any time when clock is reconfigured  by HAL_RCC_ClockConfig().
  * @note In the default implementation, SysTick timer is the source of time base.
  *       It is used to generate interrupts at regular time intervals.
  *       Care must be taken if HAL_Delay() is called from a peripheral ISR process,
  *       The SysTick interrupt must have higher priority (numerically lower)
  *       than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  *       The function is declared as __weak  to be overwritten  in case of other
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */</comment>
<function><type><specifier>__weak</specifier> <name>HAL_StatusTypeDef</name></type> <name>HAL_InitTick</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>TickPriority</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Configure the SysTick to have interrupt in 1ms time basis*/</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_SYSTICK_Config</name><argument_list>(<argument><expr><name>SystemCoreClock</name> <operator>/</operator> <operator>(</operator><literal type="number">1000U</literal> <operator>/</operator> <name>uwTickFreq</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Configure the SysTick IRQ priority */</comment>
  <if_stmt><if>if <condition>(<expr><name>TickPriority</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>__NVIC_PRIO_BITS</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>HAL_NVIC_SetPriority</name><argument_list>(<argument><expr><name>SysTick_IRQn</name></expr></argument>, <argument><expr><name>TickPriority</name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>uwTickPrio</name> <operator>=</operator> <name>TickPriority</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup HAL_Exported_Functions_Group2 HAL Control functions
  *  @brief    HAL Control functions
  *
@verbatim
 ===============================================================================
                      ##### HAL Control functions #####
 ===============================================================================
    [..]  This section provides functions allowing to:
      (+) Provide a tick value in millisecond
      (+) Provide a blocking delay in millisecond
      (+) Suspend the time base source interrupt
      (+) Resume the time base source interrupt
      (+) Get the HAL API driver version
      (+) Get the device identifier
      (+) Get the device revision identifier
      (+) Enable/Disable Debug module during SLEEP mode
      (+) Enable/Disable Debug module during STOP mode
      (+) Enable/Disable Debug module during STANDBY mode

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief This function is called to increment  a global variable "uwTick"
  *        used as application time base.
  * @note In the default implementation, this variable is incremented each 1ms
  *       in SysTick ISR.
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_IncTick</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>uwTick</name> <operator>+=</operator> <name>uwTickFreq</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Provides a tick value in millisecond.
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */</comment>
<function><type><specifier>__weak</specifier> <name>uint32_t</name></type> <name>HAL_GetTick</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name>uwTick</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_GetTickPrio</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name>uwTickPrio</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Set new tick Freq.
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SetTickFreq</name><parameter_list>(<parameter><decl><type><name>HAL_TickFreqTypeDef</name></type> <name>Freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name>  <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TICKFREQ</name><argument_list>(<argument><expr><name>Freq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>uwTickFreq</name> <operator>!=</operator> <name>Freq</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Apply the new tick Freq  */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>HAL_InitTick</name><argument_list>(<argument><expr><name>uwTickPrio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>uwTickFreq</name> <operator>=</operator> <name>Freq</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */</comment>
<function><type><name>HAL_TickFreqTypeDef</name></type> <name>HAL_GetTickFreq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name>uwTickFreq</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief This function provides minimum delay (in milliseconds) based
  *        on variable incremented.
  * @note In the default implementation , SysTick timer is the source of time base.
  *       It is used to generate interrupts at regular time intervals where uwTick
  *       is incremented.
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_Delay</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>Delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>wait</name> <init>= <expr><name>Delay</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Add a freq to guarantee minimum wait */</comment>
  <if_stmt><if>if <condition>(<expr><name>wait</name> <operator>&lt;</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>wait</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>uwTickFreq</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&lt;</operator> <name>wait</name></expr>)</condition>
  <block>{<block_content>
  </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Suspend Tick increment.
  * @note In the default implementation , SysTick timer is the source of time base. It is
  *       used to generate interrupts at regular time intervals. Once HAL_SuspendTick()
  *       is called, the SysTick interrupt will be disabled and so Tick increment
  *       is suspended.
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SuspendTick</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable SysTick Interrupt */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>SysTick</name><operator>-&gt;</operator><name>CTRL</name></name></expr></argument>, <argument><expr><name>SysTick_CTRL_TICKINT_Msk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Resume Tick increment.
  * @note In the default implementation , SysTick timer is the source of time base. It is
  *       used to generate interrupts at regular time intervals. Once HAL_ResumeTick()
  *       is called, the SysTick interrupt will be enabled and so Tick increment
  *       is resumed.
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_ResumeTick</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Enable SysTick Interrupt */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>SysTick</name><operator>-&gt;</operator><name>CTRL</name></name></expr></argument>, <argument><expr><name>SysTick_CTRL_TICKINT_Msk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns the HAL revision
  * @retval version 0xXYZR (8bits for each decimal, R for RC)
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_GetHalVersion</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name>__STM32F1xx_HAL_VERSION</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Returns the device revision identifier.
  * Note: On devices STM32F10xx8 and STM32F10xxB,
  *                  STM32F101xC/D/E and STM32F103xC/D/E,
  *                  STM32F101xF/G and STM32F103xF/G
  *                  STM32F10xx4 and STM32F10xx6
  *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device revision identifier
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_GetREVID</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>(</operator><operator>(</operator><name><name>DBGMCU</name><operator>-&gt;</operator><name>IDCODE</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>DBGMCU_IDCODE_REV_ID_Pos</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns the device identifier.
  * Note: On devices STM32F10xx8 and STM32F10xxB,
  *                  STM32F101xC/D/E and STM32F103xC/D/E,
  *                  STM32F101xF/G and STM32F103xF/G
  *                  STM32F10xx4 and STM32F10xx6
  *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_GetDEVID</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>(</operator><operator>(</operator><name><name>DBGMCU</name><operator>-&gt;</operator><name>IDCODE</name></name><operator>)</operator> <operator>&amp;</operator> <name>IDCODE_DEVID_MASK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_GetUIDw0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
   <return>return<expr><operator>(</operator><call><name>READ_REG</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>UID_BASE</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_GetUIDw1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
   <return>return<expr><operator>(</operator><call><name>READ_REG</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>UID_BASE</name> <operator>+</operator> <literal type="number">4U</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_GetUIDw2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
   <return>return<expr><operator>(</operator><call><name>READ_REG</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>UID_BASE</name> <operator>+</operator> <literal type="number">8U</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_DBGMCU_EnableDBGSleepMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>DBGMCU</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>DBGMCU_CR_DBG_SLEEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable the Debug Module during SLEEP mode
  * Note: On devices STM32F10xx8 and STM32F10xxB,
  *                  STM32F101xC/D/E and STM32F103xC/D/E,
  *                  STM32F101xF/G and STM32F103xF/G
  *                  STM32F10xx4 and STM32F10xx6
  *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_DBGMCU_DisableDBGSleepMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>DBGMCU</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>DBGMCU_CR_DBG_SLEEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enable the Debug Module during STOP mode
  * Note: On devices STM32F10xx8 and STM32F10xxB,
  *                  STM32F101xC/D/E and STM32F103xC/D/E,
  *                  STM32F101xF/G and STM32F103xF/G
  *                  STM32F10xx4 and STM32F10xx6
  *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * Note: On all STM32F1 devices:
  *       If the system tick timer interrupt is enabled during the Stop mode
  *       debug (DBG_STOP bit set in the DBGMCU_CR register ), it will wakeup
  *       the system from Stop mode.
  *       Workaround: To debug the Stop mode, disable the system tick timer
  *       interrupt.
  *       Refer to errata sheet of these devices for more details.
  * Note: On all STM32F1 devices:
  *       If the system tick timer interrupt is enabled during the Stop mode
  *       debug (DBG_STOP bit set in the DBGMCU_CR register ), it will wakeup
  *       the system from Stop mode.
  *       Workaround: To debug the Stop mode, disable the system tick timer
  *       interrupt.
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_DBGMCU_EnableDBGStopMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>DBGMCU</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>DBGMCU_CR_DBG_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable the Debug Module during STOP mode
  * Note: On devices STM32F10xx8 and STM32F10xxB,
  *                  STM32F101xC/D/E and STM32F103xC/D/E,
  *                  STM32F101xF/G and STM32F103xF/G
  *                  STM32F10xx4 and STM32F10xx6
  *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_DBGMCU_DisableDBGStopMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>DBGMCU</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>DBGMCU_CR_DBG_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enable the Debug Module during STANDBY mode
  * Note: On devices STM32F10xx8 and STM32F10xxB,
  *                  STM32F101xC/D/E and STM32F103xC/D/E,
  *                  STM32F101xF/G and STM32F103xF/G
  *                  STM32F10xx4 and STM32F10xx6
  *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_DBGMCU_EnableDBGStandbyMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>DBGMCU</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>DBGMCU_CR_DBG_STANDBY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable the Debug Module during STANDBY mode
  * Note: On devices STM32F10xx8 and STM32F10xxB,
  *                  STM32F101xC/D/E and STM32F103xC/D/E,
  *                  STM32F101xF/G and STM32F103xF/G
  *                  STM32F10xx4 and STM32F10xx6
  *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_DBGMCU_DisableDBGStandbyMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>DBGMCU</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>DBGMCU_CR_DBG_STANDBY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
