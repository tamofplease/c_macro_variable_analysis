<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f103ve/libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f1xx_hal_flash_ex.c
  * @author  MCD Application Team
  * @brief   Extended FLASH HAL module driver.
  *    
  *          This file provides firmware functions to manage the following 
  *          functionalities of the FLASH peripheral:
  *           + Extended Initialization/de-initialization functions
  *           + Extended I/O operation functions
  *           + Extended Peripheral Control functions 
  *         
  @verbatim
  ==============================================================================
               ##### Flash peripheral extended features  #####
  ==============================================================================
           
                      ##### How to use this driver #####
  ==============================================================================
  [..] This driver provides functions to configure and program the FLASH memory 
       of all STM32F1xxx devices. It includes
       
        (++) Set/Reset the write protection
        (++) Program the user Option Bytes
        (++) Get the Read protection Level
  
  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f1xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F1xx_HAL_Driver
  * @{
  */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_FLASH_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block" format="doxygen">/** @addtogroup FLASH
  * @{
  */</comment>
<comment type="block" format="doxygen">/** @addtogroup FLASH_Private_Variables
 * @{
 */</comment>
<comment type="block">/* Variables used for Erase pages under interruption*/</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>FLASH_ProcessTypeDef</name></type> <name>pFlash</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
  
<comment type="block" format="doxygen">/** @defgroup FLASHEx FLASHEx
  * @brief FLASH HAL Extension module driver
  * @{
  */</comment>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup FLASHEx_Private_Constants FLASHEx Private Constants
 * @{
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLASH_POSITION_IWDGSW_BIT</name></cpp:macro>        <cpp:value>FLASH_OBR_IWDG_SW_Pos</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLASH_POSITION_OB_USERDATA0_BIT</name></cpp:macro>  <cpp:value>FLASH_OBR_DATA0_Pos</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLASH_POSITION_OB_USERDATA1_BIT</name></cpp:macro>  <cpp:value>FLASH_OBR_DATA1_Pos</cpp:value></cpp:define>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup FLASHEx_Private_Macros FLASHEx Private Macros
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment> 

<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup FLASHEx_Private_Functions FLASHEx Private Functions
 * @{
 */</comment>
<comment type="block">/* Erase operations */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type>              <name>FLASH_MassErase</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>Banks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>    <name>FLASH_PageErase</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>PageAddress</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Option bytes control */</comment>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FLASH_OB_EnableWRP</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>WriteProtectPage</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FLASH_OB_DisableWRP</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>WriteProtectPage</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FLASH_OB_RDP_LevelConfig</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>ReadProtectLevel</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FLASH_OB_UserConfig</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>UserConfig</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FLASH_OB_ProgramData</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>Address</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>Data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type>          <name>FLASH_OB_GetWRP</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type>          <name>FLASH_OB_GetRDP</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint8_t</name></type>           <name>FLASH_OB_GetUser</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Exported functions ---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup FLASHEx_Exported_Functions FLASHEx Exported Functions
  * @{
  */</comment>
  
<comment type="block" format="doxygen">/** @defgroup FLASHEx_Exported_Functions_Group1 FLASHEx Memory Erasing functions
 *  @brief   FLASH Memory Erasing functions
  *
@verbatim   
  ==============================================================================
                ##### FLASH Erasing Programming functions ##### 
  ==============================================================================

    [..] The FLASH Memory Erasing functions, includes the following functions:
    (+) @ref HAL_FLASHEx_Erase: return only when erase has been done
    (+) @ref HAL_FLASHEx_Erase_IT: end of erase is done when @ref HAL_FLASH_EndOfOperationCallback 
        is called with parameter 0xFFFFFFFF

    [..] Any operation of erase should follow these steps:
    (#) Call the @ref HAL_FLASH_Unlock() function to enable the flash control register and 
        program memory access.
    (#) Call the desired function to erase page.
    (#) Call the @ref HAL_FLASH_Lock() to disable the flash program memory access 
       (recommended to protect the FLASH memory against possible unwanted operation).

@endverbatim
  * @{
  */</comment>
  

<comment type="block" format="doxygen">/**
  * @brief  Perform a mass erase or erase the specified FLASH memory pages
  * @note   To correctly run this function, the @ref HAL_FLASH_Unlock() function
  *         must be called before.
  *         Call the @ref HAL_FLASH_Lock() to disable the flash memory access 
  *         (recommended to protect the FLASH memory against possible unwanted operation)
  * @param[in]  pEraseInit pointer to an FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  *
  * @param[out]  PageError pointer to variable  that
  *         contains the configuration information on faulty page in case of error
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FLASHEx_Erase</name><parameter_list>(<parameter><decl><type><name>FLASH_EraseInitTypeDef</name> <modifier>*</modifier></type><name>pEraseInit</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>PageError</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>address</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFlash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FLASH_TYPEERASE</name><argument_list>(<argument><expr><name><name>pEraseInit</name><operator>-&gt;</operator><name>TypeErase</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pEraseInit</name><operator>-&gt;</operator><name>TypeErase</name></name> <operator>==</operator> <name>FLASH_TYPEERASE_MASSERASE</name></expr>)</condition>
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name><name>pEraseInit</name><operator>-&gt;</operator><name>Banks</name></name> <operator>==</operator> <name>FLASH_BANK_BOTH</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Mass Erase requested for Bank1 and Bank2 */</comment>
      <comment type="block">/* Wait for last operation to be completed */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAL_OK</name><operator>)</operator> <operator>&amp;&amp;</operator> \
          <operator>(</operator><call><name>FLASH_WaitForLastOperationBank2</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAL_OK</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/*Mass erase to be done*/</comment>
        <expr_stmt><expr><call><name>FLASH_MassErase</name><argument_list>(<argument><expr><name>FLASH_BANK_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Wait for last operation to be completed */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAL_OK</name><operator>)</operator> <operator>&amp;&amp;</operator> \
            <operator>(</operator><call><name>FLASH_WaitForLastOperationBank2</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAL_OK</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_OK</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <comment type="block">/* If the erase operation is completed, disable the MER Bit */</comment>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_MER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>FLASH_CR2_MER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>pEraseInit</name><operator>-&gt;</operator><name>Banks</name></name> <operator>==</operator> <name>FLASH_BANK_2</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Mass Erase requested for Bank2 */</comment>
      <comment type="block">/* Wait for last operation to be completed */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>FLASH_WaitForLastOperationBank2</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/*Mass erase to be done*/</comment>
        <expr_stmt><expr><call><name>FLASH_MassErase</name><argument_list>(<argument><expr><name>FLASH_BANK_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Wait for last operation to be completed */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperationBank2</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* If the erase operation is completed, disable the MER Bit */</comment>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>FLASH_CR2_MER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
    <block>{<block_content>
      <comment type="block">/* Mass Erase requested for Bank1 */</comment>
      <comment type="block">/* Wait for last operation to be completed */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/*Mass erase to be done*/</comment>
        <expr_stmt><expr><call><name>FLASH_MassErase</name><argument_list>(<argument><expr><name>FLASH_BANK_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Wait for last operation to be completed */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* If the erase operation is completed, disable the MER Bit */</comment>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_MER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Page Erase is requested */</comment>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FLASH_PROGRAM_ADDRESS</name><argument_list>(<argument><expr><name><name>pEraseInit</name><operator>-&gt;</operator><name>PageAddress</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FLASH_NB_PAGES</name><argument_list>(<argument><expr><name><name>pEraseInit</name><operator>-&gt;</operator><name>PageAddress</name></name></expr></argument>, <argument><expr><name><name>pEraseInit</name><operator>-&gt;</operator><name>NbPages</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* Page Erase requested on address located on bank2 */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>pEraseInit</name><operator>-&gt;</operator><name>PageAddress</name></name> <operator>&gt;</operator> <name>FLASH_BANK1_END</name></expr>)</condition>
    <block>{<block_content>   
      <comment type="block">/* Wait for last operation to be completed */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>FLASH_WaitForLastOperationBank2</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/*Initialization of PageError variable*/</comment>
        <expr_stmt><expr><operator>*</operator><name>PageError</name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt>
        
        <comment type="block">/* Erase by page by page to be done*/</comment>
        <for>for<control>(<init><expr><name>address</name> <operator>=</operator> <name><name>pEraseInit</name><operator>-&gt;</operator><name>PageAddress</name></name></expr>;</init>
            <condition><expr><name>address</name> <operator>&lt;</operator> <operator>(</operator><name><name>pEraseInit</name><operator>-&gt;</operator><name>PageAddress</name></name> <operator>+</operator> <operator>(</operator><name><name>pEraseInit</name><operator>-&gt;</operator><name>NbPages</name></name><operator>)</operator><operator>*</operator><name>FLASH_PAGE_SIZE</name><operator>)</operator></expr>;</condition>
            <incr><expr><name>address</name> <operator>+=</operator> <name>FLASH_PAGE_SIZE</name></expr></incr>)</control>
        <block>{<block_content>
          <expr_stmt><expr><call><name>FLASH_PageErase</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="block">/* Wait for last operation to be completed */</comment>
          <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperationBank2</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="block">/* If the erase operation is completed, disable the PER Bit */</comment>
          <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>FLASH_CR2_PER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* In case of error, stop erase procedure and return the faulty address */</comment>
            <expr_stmt><expr><operator>*</operator><name>PageError</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
   <block>{<block_content>
      <comment type="block">/* Page Erase requested on address located on bank1 */</comment>
      <comment type="block">/* Wait for last operation to be completed */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/*Initialization of PageError variable*/</comment>
        <expr_stmt><expr><operator>*</operator><name>PageError</name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt>
        
        <comment type="block">/* Erase page by page to be done*/</comment>
        <for>for<control>(<init><expr><name>address</name> <operator>=</operator> <name><name>pEraseInit</name><operator>-&gt;</operator><name>PageAddress</name></name></expr>;</init>
            <condition><expr><name>address</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name><name>pEraseInit</name><operator>-&gt;</operator><name>NbPages</name></name> <operator>*</operator> <name>FLASH_PAGE_SIZE</name><operator>)</operator> <operator>+</operator> <name><name>pEraseInit</name><operator>-&gt;</operator><name>PageAddress</name></name><operator>)</operator></expr>;</condition>
            <incr><expr><name>address</name> <operator>+=</operator> <name>FLASH_PAGE_SIZE</name></expr></incr>)</control>
        <block>{<block_content>
          <expr_stmt><expr><call><name>FLASH_PageErase</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="block">/* Wait for last operation to be completed */</comment>
          <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="block">/* If the erase operation is completed, disable the PER Bit */</comment>
          <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_PER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* In case of error, stop erase procedure and return the faulty address */</comment>
            <expr_stmt><expr><operator>*</operator><name>PageError</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFlash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Perform a mass erase or erase the specified FLASH memory pages with interrupt enabled
  * @note   To correctly run this function, the @ref HAL_FLASH_Unlock() function
  *         must be called before.
  *         Call the @ref HAL_FLASH_Lock() to disable the flash memory access 
  *         (recommended to protect the FLASH memory against possible unwanted operation)
  * @param  pEraseInit pointer to an FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FLASHEx_Erase_IT</name><parameter_list>(<parameter><decl><type><name>FLASH_EraseInitTypeDef</name> <modifier>*</modifier></type><name>pEraseInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFlash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If procedure already ongoing, reject the next one */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>!=</operator> <name>FLASH_PROC_NONE</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FLASH_TYPEERASE</name><argument_list>(<argument><expr><name><name>pEraseInit</name><operator>-&gt;</operator><name>TypeErase</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable End of FLASH Operation and Error source interrupts */</comment>
  <expr_stmt><expr><call><name>__HAL_FLASH_ENABLE_IT</name><argument_list>(<argument><expr><name>FLASH_IT_EOP</name> <operator>|</operator> <name>FLASH_IT_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Enable End of FLASH Operation and Error source interrupts */</comment>
  <expr_stmt><expr><call><name>__HAL_FLASH_ENABLE_IT</name><argument_list>(<argument><expr><name>FLASH_IT_EOP_BANK2</name> <operator>|</operator> <name>FLASH_IT_ERR_BANK2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name><name>pEraseInit</name><operator>-&gt;</operator><name>TypeErase</name></name> <operator>==</operator> <name>FLASH_TYPEERASE_MASSERASE</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/*Mass erase to be done*/</comment>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>=</operator> <name>FLASH_PROC_MASSERASE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FLASH_MassErase</name><argument_list>(<argument><expr><name><name>pEraseInit</name><operator>-&gt;</operator><name>Banks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Erase by page to be done*/</comment>

    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FLASH_PROGRAM_ADDRESS</name><argument_list>(<argument><expr><name><name>pEraseInit</name><operator>-&gt;</operator><name>PageAddress</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FLASH_NB_PAGES</name><argument_list>(<argument><expr><name><name>pEraseInit</name><operator>-&gt;</operator><name>PageAddress</name></name></expr></argument>, <argument><expr><name><name>pEraseInit</name><operator>-&gt;</operator><name>NbPages</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>=</operator> <name>FLASH_PROC_PAGEERASE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>DataRemaining</name></name> <operator>=</operator> <name><name>pEraseInit</name><operator>-&gt;</operator><name>NbPages</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>Address</name></name> <operator>=</operator> <name><name>pEraseInit</name><operator>-&gt;</operator><name>PageAddress</name></name></expr>;</expr_stmt>

    <comment type="block">/*Erase 1st page and wait for IT*/</comment>
    <expr_stmt><expr><call><name>FLASH_PageErase</name><argument_list>(<argument><expr><name><name>pEraseInit</name><operator>-&gt;</operator><name>PageAddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup FLASHEx_Exported_Functions_Group2 Option Bytes Programming functions
 *  @brief   Option Bytes Programming functions
  *
@verbatim   
  ==============================================================================
                ##### Option Bytes Programming functions ##### 
  ==============================================================================  
    [..]
    This subsection provides a set of functions allowing to control the FLASH 
    option bytes operations.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Erases the FLASH option bytes.
  * @note   This functions erases all option bytes except the Read protection (RDP).
  *         The function @ref HAL_FLASH_Unlock() should be called before to unlock the FLASH interface
  *         The function @ref HAL_FLASH_OB_Unlock() should be called before to unlock the options bytes
  *         The function @ref HAL_FLASH_OB_Launch() should be called after to force the reload of the options bytes
  *         (system reset will occur)
  * @retval HAL status
  */</comment>

<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FLASHEx_OBErase</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>rdptmp</name> <init>= <expr><name>OB_RDP_LEVEL_0</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_ERROR</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Get the actual read protection Option Byte value */</comment>
  <expr_stmt><expr><name>rdptmp</name> <operator>=</operator> <call><name>FLASH_OB_GetRDP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait for last operation to be completed */</comment>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clean the error context */</comment>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FLASH_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* If the previous operation is completed, proceed to erase the option bytes */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_OPTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_STRT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait for last operation to be completed */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If the erase operation is completed, disable the OPTER Bit */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_OPTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Restore the last read protection Option Byte value */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_OB_RDP_LevelConfig</name><argument_list>(<argument><expr><name>rdptmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Return the erase status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Program option bytes
  * @note   The function @ref HAL_FLASH_Unlock() should be called before to unlock the FLASH interface
  *         The function @ref HAL_FLASH_OB_Unlock() should be called before to unlock the options bytes
  *         The function @ref HAL_FLASH_OB_Launch() should be called after to force the reload of the options bytes
  *         (system reset will occur)
  *
  * @param  pOBInit pointer to an FLASH_OBInitStruct structure that
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FLASHEx_OBProgram</name><parameter_list>(<parameter><decl><type><name>FLASH_OBProgramInitTypeDef</name> <modifier>*</modifier></type><name>pOBInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_ERROR</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFlash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_OPTIONBYTE</name><argument_list>(<argument><expr><name><name>pOBInit</name><operator>-&gt;</operator><name>OptionType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Write protection configuration */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pOBInit</name><operator>-&gt;</operator><name>OptionType</name></name> <operator>&amp;</operator> <name>OPTIONBYTE_WRP</name><operator>)</operator> <operator>==</operator> <name>OPTIONBYTE_WRP</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_WRPSTATE</name><argument_list>(<argument><expr><name><name>pOBInit</name><operator>-&gt;</operator><name>WRPState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pOBInit</name><operator>-&gt;</operator><name>WRPState</name></name> <operator>==</operator> <name>OB_WRPSTATE_ENABLE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable of Write protection on the selected page */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_OB_EnableWRP</name><argument_list>(<argument><expr><name><name>pOBInit</name><operator>-&gt;</operator><name>WRPPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Disable of Write protection on the selected page */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_OB_DisableWRP</name><argument_list>(<argument><expr><name><name>pOBInit</name><operator>-&gt;</operator><name>WRPPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFlash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>status</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Read protection configuration */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pOBInit</name><operator>-&gt;</operator><name>OptionType</name></name> <operator>&amp;</operator> <name>OPTIONBYTE_RDP</name><operator>)</operator> <operator>==</operator> <name>OPTIONBYTE_RDP</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_OB_RDP_LevelConfig</name><argument_list>(<argument><expr><name><name>pOBInit</name><operator>-&gt;</operator><name>RDPLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFlash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>status</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* USER configuration */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pOBInit</name><operator>-&gt;</operator><name>OptionType</name></name> <operator>&amp;</operator> <name>OPTIONBYTE_USER</name><operator>)</operator> <operator>==</operator> <name>OPTIONBYTE_USER</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_OB_UserConfig</name><argument_list>(<argument><expr><name><name>pOBInit</name><operator>-&gt;</operator><name>USERConfig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFlash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>status</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* DATA configuration*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pOBInit</name><operator>-&gt;</operator><name>OptionType</name></name> <operator>&amp;</operator> <name>OPTIONBYTE_DATA</name><operator>)</operator> <operator>==</operator> <name>OPTIONBYTE_DATA</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_OB_ProgramData</name><argument_list>(<argument><expr><name><name>pOBInit</name><operator>-&gt;</operator><name>DATAAddress</name></name></expr></argument>, <argument><expr><name><name>pOBInit</name><operator>-&gt;</operator><name>DATAData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFlash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>status</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFlash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Get the Option byte configuration
  * @param  pOBInit pointer to an FLASH_OBInitStruct structure that
  *         contains the configuration information for the programming.
  *
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_FLASHEx_OBGetConfig</name><parameter_list>(<parameter><decl><type><name>FLASH_OBProgramInitTypeDef</name> <modifier>*</modifier></type><name>pOBInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>pOBInit</name><operator>-&gt;</operator><name>OptionType</name></name> <operator>=</operator> <name>OPTIONBYTE_WRP</name> <operator>|</operator> <name>OPTIONBYTE_RDP</name> <operator>|</operator> <name>OPTIONBYTE_USER</name></expr>;</expr_stmt>

  <comment type="block">/*Get WRP*/</comment>
  <expr_stmt><expr><name><name>pOBInit</name><operator>-&gt;</operator><name>WRPPage</name></name> <operator>=</operator> <call><name>FLASH_OB_GetWRP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*Get RDP Level*/</comment>
  <expr_stmt><expr><name><name>pOBInit</name><operator>-&gt;</operator><name>RDPLevel</name></name> <operator>=</operator> <call><name>FLASH_OB_GetRDP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*Get USER*/</comment>
  <expr_stmt><expr><name><name>pOBInit</name><operator>-&gt;</operator><name>USERConfig</name></name> <operator>=</operator> <call><name>FLASH_OB_GetUser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Get the Option byte user data
  * @param  DATAAdress Address of the option byte DATA
  *          This parameter can be one of the following values:
  *            @arg @ref OB_DATA_ADDRESS_DATA0
  *            @arg @ref OB_DATA_ADDRESS_DATA1
  * @retval Value programmed in USER data
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_FLASHEx_OBGetUserData</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>DATAAdress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>DATAAdress</name> <operator>==</operator> <name>OB_DATA_ADDRESS_DATA0</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Get value programmed in OB USER Data0 */</comment>
    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>OBR</name></name></expr></argument>, <argument><expr><name>FLASH_OBR_DATA0</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>FLASH_POSITION_OB_USERDATA0_BIT</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Get value programmed in OB USER Data1 */</comment>
    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>OBR</name></name></expr></argument>, <argument><expr><name>FLASH_OBR_DATA1</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>FLASH_POSITION_OB_USERDATA1_BIT</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup FLASHEx_Private_Functions
 * @{
 */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Full erase of FLASH memory Bank 
  * @param  Banks Banks to be erased
  *          This parameter can be one of the following values:
  *            @arg @ref FLASH_BANK_1 Bank1 to be erased
  @if STM32F101xG
  *            @arg @ref FLASH_BANK_2 Bank2 to be erased
  *            @arg @ref FLASH_BANK_BOTH Bank1 and Bank2 to be erased
  @endif
  @if STM32F103xG
  *            @arg @ref FLASH_BANK_2 Bank2 to be erased
  *            @arg @ref FLASH_BANK_BOTH Bank1 and Bank2 to be erased
  @endif
  *
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FLASH_MassErase</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>Banks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FLASH_BANK</name><argument_list>(<argument><expr><name>Banks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Clean the error context */</comment>
  <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FLASH_ERROR_NONE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><name>Banks</name> <operator>==</operator> <name>FLASH_BANK_BOTH</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* bank1 &amp; bank2 will be erased*/</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_MER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>FLASH_CR2_MER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_STRT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>FLASH_CR2_STRT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name>Banks</name> <operator>==</operator> <name>FLASH_BANK_2</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/*Only bank2 will be erased*/</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>FLASH_CR2_MER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>FLASH_CR2_STRT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>Banks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>  
    <comment type="block">/* Only bank1 will be erased*/</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_MER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_STRT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enable the write protection of the desired pages
  * @note   An option byte erase is done automatically in this function. 
  * @note   When the memory read protection level is selected (RDP level = 1), 
  *         it is not possible to program or erase the flash page i if
  *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
  * 
  * @param  WriteProtectPage specifies the page(s) to be write protected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FLASH_OB_EnableWRP</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>WriteProtectPage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>WRP0_Data</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_WRP1_WRP1</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>WRP1_Data</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_WRP1_WRP1 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_WRP2_WRP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>WRP2_Data</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_WRP2_WRP2 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_WRP3_WRP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>WRP3_Data</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_WRP3_WRP3 */</comment>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_OB_WRP</name><argument_list>(<argument><expr><name>WriteProtectPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
  <comment type="block">/* Get current write protected pages and the new pages to be protected ******/</comment>
  <expr_stmt><expr><name>WriteProtectPage</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>~</operator><operator>(</operator><operator>(</operator><operator>~</operator><call><name>FLASH_OB_GetWRP</name><argument_list>()</argument_list></call><operator>)</operator> <operator>|</operator> <name>WriteProtectPage</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES0TO15MASK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>WRP0_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES0TO15MASK</name><operator>)</operator></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES0TO31MASK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name>WRP0_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES0TO31MASK</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OB_WRP_PAGES0TO31MASK */</comment>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES16TO31MASK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>WRP1_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES16TO31MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES32TO63MASK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name>WRP1_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES32TO63MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OB_WRP_PAGES32TO63MASK */</comment>
 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES64TO95MASK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>WRP2_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES64TO95MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OB_WRP_PAGES64TO95MASK */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES32TO47MASK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>WRP2_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES32TO47MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OB_WRP_PAGES32TO47MASK */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES96TO127MASK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>WRP3_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES96TO127MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES48TO255MASK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name>WRP3_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES48TO255MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES48TO511MASK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name>WRP3_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES48TO511MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES48TO127MASK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name>WRP3_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES48TO127MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OB_WRP_PAGES96TO127MASK */</comment>
  
  <comment type="block">/* Wait for last operation to be completed */</comment>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content> 
    <comment type="block">/* Clean the error context */</comment>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FLASH_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* To be able to write again option byte, need to perform a option byte erase */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>HAL_FLASHEx_OBErase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>  
    <block>{<block_content>
      <comment type="block">/* Enable write protection */</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_OPTPG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_WRP0_WRP0</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if<condition>(<expr><name>WRP0_Data</name> <operator>!=</operator> <literal type="number">0xFFU</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>OB</name><operator>-&gt;</operator><name>WRP0</name></name> <operator>&amp;=</operator> <name>WRP0_Data</name></expr>;</expr_stmt>
        
        <comment type="block">/* Wait for last operation to be completed */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_WRP0_WRP0 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_WRP1_WRP1</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>status</name> <operator>==</operator> <name>HAL_OK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>WRP1_Data</name> <operator>!=</operator> <literal type="number">0xFFU</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>OB</name><operator>-&gt;</operator><name>WRP1</name></name> <operator>&amp;=</operator> <name>WRP1_Data</name></expr>;</expr_stmt>
        
        <comment type="block">/* Wait for last operation to be completed */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_WRP1_WRP1 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_WRP2_WRP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>status</name> <operator>==</operator> <name>HAL_OK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>WRP2_Data</name> <operator>!=</operator> <literal type="number">0xFFU</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>OB</name><operator>-&gt;</operator><name>WRP2</name></name> <operator>&amp;=</operator> <name>WRP2_Data</name></expr>;</expr_stmt>
        
        <comment type="block">/* Wait for last operation to be completed */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_WRP2_WRP2 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_WRP3_WRP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>status</name> <operator>==</operator> <name>HAL_OK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>WRP3_Data</name> <operator>!=</operator> <literal type="number">0xFFU</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>OB</name><operator>-&gt;</operator><name>WRP3</name></name> <operator>&amp;=</operator> <name>WRP3_Data</name></expr>;</expr_stmt>
        
        <comment type="block">/* Wait for last operation to be completed */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_WRP3_WRP3 */</comment>

      <comment type="block">/* if the program operation is completed, disable the OPTPG Bit */</comment>
      <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_OPTPG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable the write protection of the desired pages
  * @note   An option byte erase is done automatically in this function. 
  * @note   When the memory read protection level is selected (RDP level = 1), 
  *         it is not possible to program or erase the flash page i if   
  *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
  * 
  * @param  WriteProtectPage specifies the page(s) to be write unprotected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FLASH_OB_DisableWRP</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>WriteProtectPage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>WRP0_Data</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_WRP1_WRP1</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>WRP1_Data</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_WRP1_WRP1 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_WRP2_WRP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>WRP2_Data</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_WRP2_WRP2 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_WRP3_WRP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>WRP3_Data</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_WRP3_WRP3 */</comment>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_OB_WRP</name><argument_list>(<argument><expr><name>WriteProtectPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get current write protected pages and the new pages to be unprotected ******/</comment>
  <expr_stmt><expr><name>WriteProtectPage</name> <operator>=</operator> <operator>(</operator><call><name>FLASH_OB_GetWRP</name><argument_list>()</argument_list></call> <operator>|</operator> <name>WriteProtectPage</name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES0TO15MASK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>WRP0_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES0TO15MASK</name><operator>)</operator></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES0TO31MASK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name>WRP0_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES0TO31MASK</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OB_WRP_PAGES0TO31MASK */</comment>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES16TO31MASK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>WRP1_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES16TO31MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES32TO63MASK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name>WRP1_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES32TO63MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OB_WRP_PAGES32TO63MASK */</comment>
 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES64TO95MASK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>WRP2_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES64TO95MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OB_WRP_PAGES64TO95MASK */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES32TO47MASK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>WRP2_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES32TO47MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OB_WRP_PAGES32TO47MASK */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES96TO127MASK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>WRP3_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES96TO127MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES48TO255MASK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name>WRP3_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES48TO255MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES48TO511MASK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name>WRP3_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES48TO511MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OB_WRP_PAGES48TO127MASK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name>WRP3_Data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>WriteProtectPage</name> <operator>&amp;</operator> <name>OB_WRP_PAGES48TO127MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OB_WRP_PAGES96TO127MASK */</comment>

    
  <comment type="block">/* Wait for last operation to be completed */</comment>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content> 
    <comment type="block">/* Clean the error context */</comment>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FLASH_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* To be able to write again option byte, need to perform a option byte erase */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>HAL_FLASHEx_OBErase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>  
    <block>{<block_content>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_OPTPG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_WRP0_WRP0</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if<condition>(<expr><name>WRP0_Data</name> <operator>!=</operator> <literal type="number">0xFFU</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>OB</name><operator>-&gt;</operator><name>WRP0</name></name> <operator>|=</operator> <name>WRP0_Data</name></expr>;</expr_stmt>
        
        <comment type="block">/* Wait for last operation to be completed */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_WRP0_WRP0 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_WRP1_WRP1</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>status</name> <operator>==</operator> <name>HAL_OK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>WRP1_Data</name> <operator>!=</operator> <literal type="number">0xFFU</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>OB</name><operator>-&gt;</operator><name>WRP1</name></name> <operator>|=</operator> <name>WRP1_Data</name></expr>;</expr_stmt>
        
        <comment type="block">/* Wait for last operation to be completed */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_WRP1_WRP1 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_WRP2_WRP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>status</name> <operator>==</operator> <name>HAL_OK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>WRP2_Data</name> <operator>!=</operator> <literal type="number">0xFFU</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>OB</name><operator>-&gt;</operator><name>WRP2</name></name> <operator>|=</operator> <name>WRP2_Data</name></expr>;</expr_stmt>
        
        <comment type="block">/* Wait for last operation to be completed */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_WRP2_WRP2 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_WRP3_WRP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>status</name> <operator>==</operator> <name>HAL_OK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>WRP3_Data</name> <operator>!=</operator> <literal type="number">0xFFU</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>OB</name><operator>-&gt;</operator><name>WRP3</name></name> <operator>|=</operator> <name>WRP3_Data</name></expr>;</expr_stmt>
        
        <comment type="block">/* Wait for last operation to be completed */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_WRP3_WRP3 */</comment>

      <comment type="block">/* if the program operation is completed, disable the OPTPG Bit */</comment>
      <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_OPTPG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Set the read protection level.
  * @param  ReadProtectLevel specifies the read protection level.
  *         This parameter can be one of the following values:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FLASH_OB_RDP_LevelConfig</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>ReadProtectLevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_OB_RDP_LEVEL</name><argument_list>(<argument><expr><name>ReadProtectLevel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Wait for last operation to be completed */</comment>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content> 
    <comment type="block">/* Clean the error context */</comment>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FLASH_ERROR_NONE</name></expr>;</expr_stmt>
    
    <comment type="block">/* If the previous operation is completed, proceed to erase the option bytes */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_OPTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_STRT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait for last operation to be completed */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If the erase operation is completed, disable the OPTER Bit */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_OPTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable the Option Bytes Programming operation */</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_OPTPG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>OB</name><operator>-&gt;</operator><name>RDP</name></name></expr></argument>, <argument><expr><name>ReadProtectLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Wait for last operation to be completed */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      
      <comment type="block">/* if the program operation is completed, disable the OPTPG Bit */</comment>
      <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_OPTPG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Program the FLASH User Option Byte.    
  * @note   Programming of the OB should be performed only after an erase (otherwise PGERR occurs)
  * @param  UserConfig The FLASH User Option Bytes values FLASH_OBR_IWDG_SW(Bit2), 
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And BFBF2(Bit5) for STM32F101xG and STM32F103xG . 
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FLASH_OB_UserConfig</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>UserConfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_OB_IWDG_SOURCE</name><argument_list>(<argument><expr><operator>(</operator><name>UserConfig</name><operator>&amp;</operator><name>OB_IWDG_SW</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_OB_STOP_SOURCE</name><argument_list>(<argument><expr><operator>(</operator><name>UserConfig</name><operator>&amp;</operator><name>OB_STOP_NO_RST</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_OB_STDBY_SOURCE</name><argument_list>(<argument><expr><operator>(</operator><name>UserConfig</name><operator>&amp;</operator><name>OB_STDBY_NO_RST</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_OB_BOOT1</name><argument_list>(<argument><expr><operator>(</operator><name>UserConfig</name><operator>&amp;</operator><name>OB_BOOT1_SET</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>

  <comment type="block">/* Wait for last operation to be completed */</comment>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>     
    <comment type="block">/* Clean the error context */</comment>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FLASH_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Enable the Option Bytes Programming operation */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_OPTPG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>OB</name><operator>-&gt;</operator><name>USER</name></name> <operator>=</operator> <operator>(</operator><name>UserConfig</name> <operator>|</operator> <literal type="number">0xF0U</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name><name>OB</name><operator>-&gt;</operator><name>USER</name></name> <operator>=</operator> <operator>(</operator><name>UserConfig</name> <operator>|</operator> <literal type="number">0x88U</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>

    <comment type="block">/* Wait for last operation to be completed */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* if the program operation is completed, disable the OPTPG Bit */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_OPTPG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <return>return <expr><name>status</name></expr>;</return> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Programs a half word at a specified Option Byte Data address.
  * @note   The function @ref HAL_FLASH_Unlock() should be called before to unlock the FLASH interface
  *         The function @ref HAL_FLASH_OB_Unlock() should be called before to unlock the options bytes
  *         The function @ref HAL_FLASH_OB_Launch() should be called after to force the reload of the options bytes 
  *         (system reset will occur)
  *         Programming of the OB should be performed only after an erase (otherwise PGERR occurs)
  * @param  Address specifies the address to be programmed.
  *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
  * @param  Data specifies the data to be programmed.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FLASH_OB_ProgramData</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>Address</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>Data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_ERROR</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_OB_DATA_ADDRESS</name><argument_list>(<argument><expr><name>Address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Wait for last operation to be completed */</comment>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clean the error context */</comment>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FLASH_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Enables the Option Bytes Programming operation */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_OPTPG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name><operator>*</operator><operator>)</operator><name>Address</name> <operator>=</operator> <name>Data</name></expr>;</expr_stmt>
    
    <comment type="block">/* Wait for last operation to be completed */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* If the program operation is completed, disable the OPTPG Bit */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_OPTPG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Return the Option Byte Data Program Status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>FLASH_OB_GetWRP</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Return the FLASH write protection Register value */</comment>
  <return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>WRPR</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns the FLASH Read Protection level.
  * @retval FLASH RDP level
  *         This parameter can be one of the following values:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>FLASH_OB_GetRDP</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>readstatus</name> <init>= <expr><name>OB_RDP_LEVEL_0</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp_reg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Read RDP level bits */</comment>
  <expr_stmt><expr><name>tmp_reg</name> <operator>=</operator> <call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>OBR</name></name></expr></argument>, <argument><expr><name>FLASH_OBR_RDPRT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>tmp_reg</name> <operator>==</operator> <name>FLASH_OBR_RDPRT</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>readstatus</name> <operator>=</operator> <name>OB_RDP_LEVEL_1</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else 
  <block>{<block_content>
    <expr_stmt><expr><name>readstatus</name> <operator>=</operator> <name>OB_RDP_LEVEL_0</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>readstatus</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the FLASH User Option Byte value.
  * @retval The FLASH User Option Bytes values: FLASH_OBR_IWDG_SW(Bit2), 
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */</comment>
<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>FLASH_OB_GetUser</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Return the User Option Byte */</comment>
  <return>return <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>OBR</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FLASH_OBR_USER</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>FLASH_POSITION_IWDGSW_BIT</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup FLASH
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup FLASH_Private_Functions
 * @{
 */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Erase the specified FLASH memory page
  * @param  PageAddress FLASH page to erase
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>FLASH_PageErase</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>PageAddress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Clean the error context */</comment>
  <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FLASH_ERROR_NONE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><name>PageAddress</name> <operator>&gt;</operator> <name>FLASH_BANK1_END</name></expr>)</condition>
  <block>{<block_content> 
    <comment type="block">/* Proceed to erase the page */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>FLASH_CR2_PER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>AR2</name></name></expr></argument>, <argument><expr><name>PageAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>FLASH_CR2_STRT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
    <comment type="block">/* Proceed to erase the page */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_PER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>AR</name></name></expr></argument>, <argument><expr><name>PageAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_STRT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_FLASH_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
