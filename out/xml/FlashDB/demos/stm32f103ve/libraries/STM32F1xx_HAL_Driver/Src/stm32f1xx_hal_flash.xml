<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f103ve/libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f1xx_hal_flash.c
  * @author  MCD Application Team
  * @brief   FLASH HAL module driver.
  *          This file provides firmware functions to manage the following 
  *          functionalities of the internal FLASH memory:
  *           + Program operations functions
  *           + Memory Control functions 
  *           + Peripheral State functions
  *         
  @verbatim
  ==============================================================================
                        ##### FLASH peripheral features #####
  ==============================================================================
  [..] The Flash memory interface manages CPU AHB I-Code and D-Code accesses 
       to the Flash memory. It implements the erase and program Flash memory operations 
       and the read and write protection mechanisms.

  [..] The Flash memory interface accelerates code execution with a system of instruction
      prefetch. 

  [..] The FLASH main features are:
      (+) Flash memory read operations
      (+) Flash memory program/erase operations
      (+) Read / write protections
      (+) Prefetch on I-Code
      (+) Option Bytes programming


                     ##### How to use this driver #####
  ==============================================================================
  [..]                             
      This driver provides functions and macros to configure and program the FLASH 
      memory of all STM32F1xx devices.
    
      (#) FLASH Memory I/O Programming functions: this group includes all needed
          functions to erase and program the main memory:
        (++) Lock and Unlock the FLASH interface
        (++) Erase function: Erase page, erase all pages
        (++) Program functions: half word, word and doubleword
      (#) FLASH Option Bytes Programming functions: this group includes all needed
          functions to manage the Option Bytes:
        (++) Lock and Unlock the Option Bytes
        (++) Set/Reset the write protection
        (++) Set the Read protection Level
        (++) Program the user Option Bytes
        (++) Launch the Option Bytes loader
        (++) Erase Option Bytes
        (++) Program the data Option Bytes
        (++) Get the Write protection.
        (++) Get the user option bytes.
    
      (#) Interrupts and flags management functions : this group 
          includes all needed functions to:
        (++) Handle FLASH interrupts
        (++) Wait for last FLASH operation according to its status
        (++) Get error flag status

  [..] In addition to these function, this driver includes a set of macros allowing
       to handle the following operations:
      
      (+) Set/Get the latency
      (+) Enable/Disable the prefetch buffer
      (+) Enable/Disable the half cycle access
      (+) Enable/Disable the FLASH interrupts
      (+) Monitor the FLASH flags status
          
  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f1xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F1xx_HAL_Driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_FLASH_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block" format="doxygen">/** @defgroup FLASH FLASH
  * @brief FLASH HAL module driver
  * @{
  */</comment>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup FLASH_Private_Constants FLASH Private Constants
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private macro ---------------------------- ---------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup FLASH_Private_Macros FLASH Private Macros
  * @{
  */</comment>
 
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup FLASH_Private_Variables FLASH Private Variables
  * @{
  */</comment>
<comment type="block">/* Variables used for Erase pages under interruption*/</comment>
<decl_stmt><decl><type><name>FLASH_ProcessTypeDef</name></type> <name>pFlash</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup FLASH_Private_Functions FLASH Private Functions
  * @{
  */</comment>
<function_decl><type><specifier>static</specifier>  <name>void</name></type>   <name>FLASH_Program_HalfWord</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>Address</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier>  <name>void</name></type>   <name>FLASH_SetErrorCode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type>    <name>FLASH_PageErase</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>PageAddress</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Exported functions ---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup FLASH_Exported_Functions FLASH Exported Functions
  * @{
  */</comment>
  
<comment type="block" format="doxygen">/** @defgroup FLASH_Exported_Functions_Group1 Programming operation functions 
  *  @brief   Programming operation functions 
  *
@verbatim   
@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Program halfword, word or double word at a specified address
  * @note   The function HAL_FLASH_Unlock() should be called before to unlock the FLASH interface
  *         The function HAL_FLASH_Lock() should be called after to lock the FLASH interface
  *
  * @note   If an erase and a program operations are requested simultaneously,    
  *         the erase operation is performed before the program one.
  *  
  * @note   FLASH should be previously erased before new programmation (only exception to this 
  *         is when 0x0000 is programmed)
  *
  * @param  TypeProgram:  Indicate the way to program at a specified address.
  *                       This parameter can be a value of @ref FLASH_Type_Program
  * @param  Address:      Specifies the address to be programmed.
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FLASH_Program</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>TypeProgram</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Address</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>Data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>nbiterations</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFlash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FLASH_TYPEPROGRAM</name><argument_list>(<argument><expr><name>TypeProgram</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FLASH_PROGRAM_ADDRESS</name><argument_list>(<argument><expr><name>Address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><name>Address</name> <operator>&lt;=</operator> <name>FLASH_BANK1_END</name></expr>)</condition>
  <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
    <comment type="block">/* Wait for last operation to be completed */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Wait for last operation to be completed */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperationBank2</name><argument_list>(<argument><expr><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
  
  <if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>TypeProgram</name> <operator>==</operator> <name>FLASH_TYPEPROGRAM_HALFWORD</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Program halfword (16-bit) at a specified address. */</comment>
      <expr_stmt><expr><name>nbiterations</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>TypeProgram</name> <operator>==</operator> <name>FLASH_TYPEPROGRAM_WORD</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Program word (32-bit = 2*16-bit) at a specified address. */</comment>
      <expr_stmt><expr><name>nbiterations</name> <operator>=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Program double word (64-bit = 4*16-bit) at a specified address. */</comment>
      <expr_stmt><expr><name>nbiterations</name> <operator>=</operator> <literal type="number">4U</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>nbiterations</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><call><name>FLASH_Program_HalfWord</name><argument_list>(<argument><expr><operator>(</operator><name>Address</name> <operator>+</operator> <operator>(</operator><literal type="number">2U</literal><operator>*</operator><name>index</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>Data</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16U</literal><operator>*</operator><name>index</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if<condition>(<expr><name>Address</name> <operator>&lt;=</operator> <name>FLASH_BANK1_END</name></expr>)</condition>
      <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
        <comment type="block">/* Wait for last operation to be completed */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperation</name><argument_list>(<argument><expr><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        <comment type="block">/* If the program operation is completed, disable the PG Bit */</comment>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_PG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Wait for last operation to be completed */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FLASH_WaitForLastOperationBank2</name><argument_list>(<argument><expr><name>FLASH_TIMEOUT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* If the program operation is completed, disable the PG Bit */</comment>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>FLASH_CR2_PG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
      <comment type="block">/* In case of error, stop programation procedure */</comment>
      <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFlash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Program halfword, word or double word at a specified address  with interrupt enabled.
  * @note   The function HAL_FLASH_Unlock() should be called before to unlock the FLASH interface
  *         The function HAL_FLASH_Lock() should be called after to lock the FLASH interface
  *
  * @note   If an erase and a program operations are requested simultaneously,    
  *         the erase operation is performed before the program one.
  *
  * @param  TypeProgram: Indicate the way to program at a specified address.
  *                      This parameter can be a value of @ref FLASH_Type_Program
  * @param  Address:     Specifies the address to be programmed.
  * @param  Data:        Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FLASH_Program_IT</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>TypeProgram</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Address</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>Data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFlash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FLASH_TYPEPROGRAM</name><argument_list>(<argument><expr><name>TypeProgram</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FLASH_PROGRAM_ADDRESS</name><argument_list>(<argument><expr><name>Address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* If procedure already ongoing, reject the next one */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>!=</operator> <name>FLASH_PROC_NONE</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if<condition>(<expr><name>Address</name> <operator>&lt;=</operator> <name>FLASH_BANK1_END</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable End of FLASH Operation and Error source interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_FLASH_ENABLE_IT</name><argument_list>(<argument><expr><name>FLASH_IT_EOP_BANK1</name> <operator>|</operator> <name>FLASH_IT_ERR_BANK1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if><else>else
  <block>{<block_content>
    <comment type="block">/* Enable End of FLASH Operation and Error source interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_FLASH_ENABLE_IT</name><argument_list>(<argument><expr><name>FLASH_IT_EOP_BANK2</name> <operator>|</operator> <name>FLASH_IT_ERR_BANK2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Enable End of FLASH Operation and Error source interrupts */</comment>
  <expr_stmt><expr><call><name>__HAL_FLASH_ENABLE_IT</name><argument_list>(<argument><expr><name>FLASH_IT_EOP</name> <operator>|</operator> <name>FLASH_IT_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
  
  <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>Address</name></name> <operator>=</operator> <name>Address</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>Data</name></name> <operator>=</operator> <name>Data</name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>TypeProgram</name> <operator>==</operator> <name>FLASH_TYPEPROGRAM_HALFWORD</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>=</operator> <name>FLASH_PROC_PROGRAMHALFWORD</name></expr>;</expr_stmt>
    <comment type="block">/* Program halfword (16-bit) at a specified address. */</comment>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>DataRemaining</name></name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name>TypeProgram</name> <operator>==</operator> <name>FLASH_TYPEPROGRAM_WORD</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>=</operator> <name>FLASH_PROC_PROGRAMWORD</name></expr>;</expr_stmt>
    <comment type="block">/* Program word (32-bit : 2*16-bit) at a specified address. */</comment>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>DataRemaining</name></name> <operator>=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>=</operator> <name>FLASH_PROC_PROGRAMDOUBLEWORD</name></expr>;</expr_stmt>
    <comment type="block">/* Program double word (64-bit : 4*16-bit) at a specified address. */</comment>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>DataRemaining</name></name> <operator>=</operator> <literal type="number">4U</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Program halfword (16-bit) at a specified address. */</comment>
  <expr_stmt><expr><call><name>FLASH_Program_HalfWord</name><argument_list>(<argument><expr><name>Address</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_FLASH_IRQHandler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>addresstmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check FLASH operation error flags */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_WRPERR_BANK1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_PGERR_BANK1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <operator>(</operator><call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_WRPERR_BANK2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_PGERR_BANK2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_WRPERR</name></expr></argument>)</argument_list></call> <operator>||</operator><call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_PGERR</name></expr></argument>)</argument_list></call></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
  <block>{<block_content>
    <comment type="block">/* Return the faulty address */</comment>
    <expr_stmt><expr><name>addresstmp</name> <operator>=</operator> <name><name>pFlash</name><operator>.</operator><name>Address</name></name></expr>;</expr_stmt>
    <comment type="block">/* Reset address */</comment>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>Address</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt>
  
    <comment type="block">/* Save the Error code */</comment>
    <expr_stmt><expr><call><name>FLASH_SetErrorCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* FLASH error interrupt user callback */</comment>
    <expr_stmt><expr><call><name>HAL_FLASH_OperationErrorCallback</name><argument_list>(<argument><expr><name>addresstmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Stop the procedure ongoing */</comment>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>=</operator> <name>FLASH_PROC_NONE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Check FLASH End of Operation flag  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_EOP_BANK1</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear FLASH End of Operation pending bit */</comment>
    <expr_stmt><expr><call><name>__HAL_FLASH_CLEAR_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_EOP_BANK1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_EOP</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear FLASH End of Operation pending bit */</comment>
    <expr_stmt><expr><call><name>__HAL_FLASH_CLEAR_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_EOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
    
    <comment type="block">/* Process can continue only if no error detected */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>!=</operator> <name>FLASH_PROC_NONE</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>==</operator> <name>FLASH_PROC_PAGEERASE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Nb of pages to erased can be decreased */</comment>
        <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>DataRemaining</name></name><operator>--</operator></expr>;</expr_stmt>

        <comment type="block">/* Check if there are still pages to erase */</comment>
        <if_stmt><if>if<condition>(<expr><name><name>pFlash</name><operator>.</operator><name>DataRemaining</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name>addresstmp</name> <operator>=</operator> <name><name>pFlash</name><operator>.</operator><name>Address</name></name></expr>;</expr_stmt>
          <comment type="block">/*Indicate user which sector has been erased */</comment>
          <expr_stmt><expr><call><name>HAL_FLASH_EndOfOperationCallback</name><argument_list>(<argument><expr><name>addresstmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/*Increment sector number*/</comment>
          <expr_stmt><expr><name>addresstmp</name> <operator>=</operator> <name><name>pFlash</name><operator>.</operator><name>Address</name></name> <operator>+</operator> <name>FLASH_PAGE_SIZE</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>Address</name></name> <operator>=</operator> <name>addresstmp</name></expr>;</expr_stmt>

          <comment type="block">/* If the erase operation is completed, disable the PER Bit */</comment>
          <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_PER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>FLASH_PageErase</name><argument_list>(<argument><expr><name>addresstmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <comment type="block">/* No more pages to Erase, user callback can be called. */</comment>
          <comment type="block">/* Reset Sector and stop Erase pages procedure */</comment>
          <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>Address</name></name> <operator>=</operator> <name>addresstmp</name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>=</operator> <name>FLASH_PROC_NONE</name></expr>;</expr_stmt>
          <comment type="block">/* FLASH EOP interrupt user callback */</comment>
          <expr_stmt><expr><call><name>HAL_FLASH_EndOfOperationCallback</name><argument_list>(<argument><expr><name>addresstmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if>
      <if type="elseif">else if<condition>(<expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>==</operator> <name>FLASH_PROC_MASSERASE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Operation is completed, disable the MER Bit */</comment>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_MER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <comment type="block">/* Stop Mass Erase procedure if no pending mass erase on other bank */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>FLASH_CR2_MER</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
          <comment type="block">/* MassErase ended. Return the selected bank */</comment>
          <comment type="block">/* FLASH EOP interrupt user callback */</comment>
          <expr_stmt><expr><call><name>HAL_FLASH_EndOfOperationCallback</name><argument_list>(<argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Stop Mass Erase procedure*/</comment>
          <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>=</operator> <name>FLASH_PROC_NONE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
      </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Nb of 16-bit data to program can be decreased */</comment>
        <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>DataRemaining</name></name><operator>--</operator></expr>;</expr_stmt>
        
        <comment type="block">/* Check if there are still 16-bit data to program */</comment>
        <if_stmt><if>if<condition>(<expr><name><name>pFlash</name><operator>.</operator><name>DataRemaining</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Increment address to 16-bit */</comment>
          <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>Address</name></name> <operator>+=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>addresstmp</name> <operator>=</operator> <name><name>pFlash</name><operator>.</operator><name>Address</name></name></expr>;</expr_stmt>
          
          <comment type="block">/* Shift to have next 16-bit data */</comment>
          <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>Data</name></name> <operator>=</operator> <operator>(</operator><name><name>pFlash</name><operator>.</operator><name>Data</name></name> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
          
          <comment type="block">/* Operation is completed, disable the PG Bit */</comment>
          <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_PG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/*Program halfword (16-bit) at a specified address.*/</comment>
          <expr_stmt><expr><call><name>FLASH_Program_HalfWord</name><argument_list>(<argument><expr><name>addresstmp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>pFlash</name><operator>.</operator><name>Data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <comment type="block">/* Program ended. Return the selected address */</comment>
          <comment type="block">/* FLASH EOP interrupt user callback */</comment>
          <if_stmt><if>if <condition>(<expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>==</operator> <name>FLASH_PROC_PROGRAMHALFWORD</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><call><name>HAL_FLASH_EndOfOperationCallback</name><argument_list>(<argument><expr><name><name>pFlash</name><operator>.</operator><name>Address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if>
          <if type="elseif">else if <condition>(<expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>==</operator> <name>FLASH_PROC_PROGRAMWORD</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><call><name>HAL_FLASH_EndOfOperationCallback</name><argument_list>(<argument><expr><name><name>pFlash</name><operator>.</operator><name>Address</name></name> <operator>-</operator> <literal type="number">2U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else 
          <block>{<block_content>
            <expr_stmt><expr><call><name>HAL_FLASH_EndOfOperationCallback</name><argument_list>(<argument><expr><name><name>pFlash</name><operator>.</operator><name>Address</name></name> <operator>-</operator> <literal type="number">6U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        
          <comment type="block">/* Reset Address and stop Program procedure */</comment>
          <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>Address</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>=</operator> <name>FLASH_PROC_NONE</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Check FLASH End of Operation flag  */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_FLASH_GET_FLAG</name><argument_list>( <argument><expr><name>FLASH_FLAG_EOP_BANK2</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear FLASH End of Operation pending bit */</comment>
    <expr_stmt><expr><call><name>__HAL_FLASH_CLEAR_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_EOP_BANK2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Process can continue only if no error detected */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>!=</operator> <name>FLASH_PROC_NONE</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>==</operator> <name>FLASH_PROC_PAGEERASE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Nb of pages to erased can be decreased */</comment>
        <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>DataRemaining</name></name><operator>--</operator></expr>;</expr_stmt>
        
        <comment type="block">/* Check if there are still pages to erase*/</comment>
        <if_stmt><if>if<condition>(<expr><name><name>pFlash</name><operator>.</operator><name>DataRemaining</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Indicate user which page address has been erased*/</comment>
          <expr_stmt><expr><call><name>HAL_FLASH_EndOfOperationCallback</name><argument_list>(<argument><expr><name><name>pFlash</name><operator>.</operator><name>Address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
          <comment type="block">/* Increment page address to next page */</comment>
          <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>Address</name></name> <operator>+=</operator> <name>FLASH_PAGE_SIZE</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>addresstmp</name> <operator>=</operator> <name><name>pFlash</name><operator>.</operator><name>Address</name></name></expr>;</expr_stmt>

          <comment type="block">/* Operation is completed, disable the PER Bit */</comment>
          <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>FLASH_CR2_PER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>FLASH_PageErase</name><argument_list>(<argument><expr><name>addresstmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <comment type="block">/*No more pages to Erase*/</comment>
          
          <comment type="block">/*Reset Address and stop Erase pages procedure*/</comment>
          <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>Address</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>=</operator> <name>FLASH_PROC_NONE</name></expr>;</expr_stmt>

          <comment type="block">/* FLASH EOP interrupt user callback */</comment>
          <expr_stmt><expr><call><name>HAL_FLASH_EndOfOperationCallback</name><argument_list>(<argument><expr><name><name>pFlash</name><operator>.</operator><name>Address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if>
      <if type="elseif">else if<condition>(<expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>==</operator> <name>FLASH_PROC_MASSERASE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Operation is completed, disable the MER Bit */</comment>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>FLASH_CR2_MER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_MER</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* MassErase ended. Return the selected bank*/</comment>
          <comment type="block">/* FLASH EOP interrupt user callback */</comment>
          <expr_stmt><expr><call><name>HAL_FLASH_EndOfOperationCallback</name><argument_list>(<argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
          <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>=</operator> <name>FLASH_PROC_NONE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Nb of 16-bit data to program can be decreased */</comment>
        <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>DataRemaining</name></name><operator>--</operator></expr>;</expr_stmt>
        
        <comment type="block">/* Check if there are still 16-bit data to program */</comment>
        <if_stmt><if>if<condition>(<expr><name><name>pFlash</name><operator>.</operator><name>DataRemaining</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Increment address to 16-bit */</comment>
          <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>Address</name></name> <operator>+=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>addresstmp</name> <operator>=</operator> <name><name>pFlash</name><operator>.</operator><name>Address</name></name></expr>;</expr_stmt>
          
          <comment type="block">/* Shift to have next 16-bit data */</comment>
          <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>Data</name></name> <operator>=</operator> <operator>(</operator><name><name>pFlash</name><operator>.</operator><name>Data</name></name> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
          
          <comment type="block">/* Operation is completed, disable the PG Bit */</comment>
          <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>FLASH_CR2_PG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/*Program halfword (16-bit) at a specified address.*/</comment>
          <expr_stmt><expr><call><name>FLASH_Program_HalfWord</name><argument_list>(<argument><expr><name>addresstmp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>pFlash</name><operator>.</operator><name>Data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <comment type="block">/*Program ended. Return the selected address*/</comment>
          <comment type="block">/* FLASH EOP interrupt user callback */</comment>
          <if_stmt><if>if <condition>(<expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>==</operator> <name>FLASH_PROC_PROGRAMHALFWORD</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><call><name>HAL_FLASH_EndOfOperationCallback</name><argument_list>(<argument><expr><name><name>pFlash</name><operator>.</operator><name>Address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if>
          <if type="elseif">else if <condition>(<expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>==</operator> <name>FLASH_PROC_PROGRAMWORD</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><call><name>HAL_FLASH_EndOfOperationCallback</name><argument_list>(<argument><expr><name><name>pFlash</name><operator>.</operator><name>Address</name></name><operator>-</operator><literal type="number">2U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else 
          <block>{<block_content>
            <expr_stmt><expr><call><name>HAL_FLASH_EndOfOperationCallback</name><argument_list>(<argument><expr><name><name>pFlash</name><operator>.</operator><name>Address</name></name><operator>-</operator><literal type="number">6U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          
          <comment type="block">/* Reset Address and stop Program procedure*/</comment>
          <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>Address</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>=</operator> <name>FLASH_PROC_NONE</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

  <if_stmt><if>if<condition>(<expr><name><name>pFlash</name><operator>.</operator><name>ProcedureOnGoing</name></name> <operator>==</operator> <name>FLASH_PROC_NONE</name></expr>)</condition>
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* Operation is completed, disable the PG, PER and MER Bits for both bank */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FLASH_CR_PG</name> <operator>|</operator> <name>FLASH_CR_PER</name> <operator>|</operator> <name>FLASH_CR_MER</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FLASH_CR2_PG</name> <operator>|</operator> <name>FLASH_CR2_PER</name> <operator>|</operator> <name>FLASH_CR2_MER</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  
    <comment type="block">/* Disable End of FLASH Operation and Error source interrupts for both banks */</comment>
    <expr_stmt><expr><call><name>__HAL_FLASH_DISABLE_IT</name><argument_list>(<argument><expr><name>FLASH_IT_EOP_BANK1</name> <operator>|</operator> <name>FLASH_IT_ERR_BANK1</name> <operator>|</operator> <name>FLASH_IT_EOP_BANK2</name> <operator>|</operator> <name>FLASH_IT_ERR_BANK2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Operation is completed, disable the PG, PER and MER Bits */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FLASH_CR_PG</name> <operator>|</operator> <name>FLASH_CR_PER</name> <operator>|</operator> <name>FLASH_CR_MER</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Disable End of FLASH Operation and Error source interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_FLASH_DISABLE_IT</name><argument_list>(<argument><expr><name>FLASH_IT_EOP</name> <operator>|</operator> <name>FLASH_IT_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFlash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<comment type="block" format="doxygen">/**
  * @brief  FLASH end of operation interrupt callback
  * @param  ReturnValue: The value saved in this parameter depends on the ongoing procedure
  *                 - Mass Erase: No return value expected
  *                 - Pages Erase: Address of the page which has been erased 
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_FLASH_EndOfOperationCallback</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>ReturnValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ReturnValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  FLASH operation error interrupt callback
  * @param  ReturnValue: The value saved in this parameter depends on the ongoing procedure
  *                 - Mass Erase: No return value expected
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_FLASH_OperationErrorCallback</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>ReturnValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ReturnValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup FLASH_Exported_Functions_Group2 Peripheral Control functions 
 *  @brief   management functions 
 *
@verbatim   
 ===============================================================================
                      ##### Peripheral Control functions #####
 ===============================================================================  
    [..]
    This subsection provides a set of functions allowing to control the FLASH 
    memory operations.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FLASH_Unlock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_LOCK</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Authorize the FLASH Registers access */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>KEYR</name></name></expr></argument>, <argument><expr><name>FLASH_KEY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>KEYR</name></name></expr></argument>, <argument><expr><name>FLASH_KEY2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Verify Flash is unlocked */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_LOCK</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>FLASH_CR2_LOCK</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Authorize the FLASH BANK2 Registers access */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>KEYR2</name></name></expr></argument>, <argument><expr><name>FLASH_KEY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>KEYR2</name></name></expr></argument>, <argument><expr><name>FLASH_KEY2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Verify Flash BANK2 is unlocked */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>FLASH_CR2_LOCK</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FLASH_Lock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Set the LOCK Bit to lock the FLASH Registers access */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Set the LOCK Bit to lock the FLASH BANK2 Registers access */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>FLASH_CR2_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FLASH_OB_Unlock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_OPTWRE</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Authorizes the Option Byte register programming */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>OPTKEYR</name></name></expr></argument>, <argument><expr><name>FLASH_OPTKEY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>OPTKEYR</name></name></expr></argument>, <argument><expr><name>FLASH_OPTKEY2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>  
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FLASH_OB_Lock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_OPTWRE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>  
</block_content>}</block></function>
  
<comment type="block" format="doxygen">/**
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_FLASH_OB_Launch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Initiates a system reset request to launch the option byte loading */</comment>
  <expr_stmt><expr><call><name>HAL_NVIC_SystemReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>  

<comment type="block" format="doxygen">/** @defgroup FLASH_Exported_Functions_Group3 Peripheral errors functions 
 *  @brief    Peripheral errors functions 
 *
@verbatim   
 ===============================================================================
                      ##### Peripheral Errors functions #####
 ===============================================================================  
    [..]
    This subsection permit to get in run-time errors of  the FLASH peripheral.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_FLASH_GetError</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
   <return>return <expr><name><name>pFlash</name><operator>.</operator><name>ErrorCode</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup FLASH_Private_Functions
 * @{
 */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Program a half-word (16-bit) at a specified address.
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FLASH_Program_HalfWord</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>Address</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Clean the error context */</comment>
  <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FLASH_ERROR_NONE</name></expr>;</expr_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><name>Address</name> <operator>&lt;=</operator> <name>FLASH_BANK1_END</name></expr>)</condition>
  <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
    <comment type="block">/* Proceed to program the new data */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>FLASH_CR_PG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Proceed to program the new data */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>FLASH</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>FLASH_CR2_PG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>

  <comment type="block">/* Write data in the address */</comment>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name><operator>*</operator><operator>)</operator><name>Address</name> <operator>=</operator> <name>Data</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>FLASH_WaitForLastOperation</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */</comment>
     
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     
  <while>while<condition>(<expr><call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_BSY</name></expr></argument>)</argument_list></call></expr>)</condition> 
  <block>{<block_content> 
    <if_stmt><if>if <condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call><operator>-</operator><name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  
  <comment type="block">/* Check FLASH End of Operation flag  */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_EOP</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear FLASH End of Operation pending bit */</comment>
    <expr_stmt><expr><call><name>__HAL_FLASH_CLEAR_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_EOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_WRPERR</name></expr></argument>)</argument_list></call>  <operator>||</operator> 
     <call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_OPTVERR</name></expr></argument>)</argument_list></call> <operator>||</operator> 
     <call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_PGERR</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/*Save the error code*/</comment>
    <expr_stmt><expr><call><name>FLASH_SetErrorCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* There is no error flag set */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Wait for a FLASH BANK2 operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>FLASH_WaitForLastOperationBank2</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
  <comment type="block">/* Wait for the FLASH BANK2 operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH BANK2 operation fails, the BUSY flag will be reset and an error
     flag will be set */</comment>
     
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     
  <while>while<condition>(<expr><call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_BSY_BANK2</name></expr></argument>)</argument_list></call></expr>)</condition> 
  <block>{<block_content> 
    <if_stmt><if>if <condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call><operator>-</operator><name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  
  <comment type="block">/* Check FLASH End of Operation flag  */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_EOP_BANK2</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear FLASH End of Operation pending bit */</comment>
    <expr_stmt><expr><call><name>__HAL_FLASH_CLEAR_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_EOP_BANK2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_WRPERR_BANK2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_PGERR_BANK2</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/*Save the error code*/</comment>
    <expr_stmt><expr><call><name>FLASH_SetErrorCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* If there is an error flag set */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
  
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FLASH_SetErrorCode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_WRPERR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_WRPERR_BANK2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_WRPERR</name></expr></argument>)</argument_list></call></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
  <block>{<block_content>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FLASH_ERROR_WRP</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLASH_FLAG_WRPERR</name> <operator>|</operator> <name>FLASH_FLAG_WRPERR_BANK2</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLASH_FLAG_WRPERR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
  </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_PGERR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_PGERR_BANK2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_PGERR</name></expr></argument>)</argument_list></call></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
  <block>{<block_content>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FLASH_ERROR_PROG</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_BANK2_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLASH_FLAG_PGERR</name> <operator>|</operator> <name>FLASH_FLAG_PGERR_BANK2</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLASH_FLAG_PGERR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_BANK2_END */</comment>
  </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_FLASH_GET_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_OPTVERR</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>pFlash</name><operator>.</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FLASH_ERROR_OPTV</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_FLASH_CLEAR_FLAG</name><argument_list>(<argument><expr><name>FLASH_FLAG_OPTVERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Clear FLASH error pending bits */</comment>
  <expr_stmt><expr><call><name>__HAL_FLASH_CLEAR_FLAG</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></block_content></block></function>  
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_FLASH_MODULE_ENABLED */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
