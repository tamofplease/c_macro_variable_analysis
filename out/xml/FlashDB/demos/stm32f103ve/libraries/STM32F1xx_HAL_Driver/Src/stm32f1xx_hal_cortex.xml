<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f103ve/libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_cortex.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f1xx_hal_cortex.c
  * @author  MCD Application Team
  * @brief   CORTEX HAL module driver.
  *          This file provides firmware functions to manage the following 
  *          functionalities of the CORTEX:
  *           + Initialization and de-initialization functions
  *           + Peripheral Control functions 
  *
  @verbatim  
  ==============================================================================
                        ##### How to use this driver #####
  ==============================================================================

    [..]  
    *** How to configure Interrupts using CORTEX HAL driver ***
    ===========================================================
    [..]     
    This section provides functions allowing to configure the NVIC interrupts (IRQ).
    The Cortex-M3 exceptions are managed by CMSIS functions.
   
    (#) Configure the NVIC Priority Grouping using HAL_NVIC_SetPriorityGrouping()
        function according to the following table.
    (#) Configure the priority of the selected IRQ Channels using HAL_NVIC_SetPriority(). 
    (#) Enable the selected IRQ Channels using HAL_NVIC_EnableIRQ().
    (#) please refer to programming manual for details in how to configure priority. 
      
     -@- When the NVIC_PRIORITYGROUP_0 is selected, IRQ preemption is no more possible. 
         The pending IRQ priority will be managed only by the sub priority.
   
     -@- IRQ priority order (sorted by highest to lowest priority):
        (+@) Lowest preemption priority
        (+@) Lowest sub priority
        (+@) Lowest hardware priority (IRQ number)
 
    [..]  
    *** How to configure Systick using CORTEX HAL driver ***
    ========================================================
    [..]
    Setup SysTick Timer for time base.
           
   (+) The HAL_SYSTICK_Config()function calls the SysTick_Config() function which
       is a CMSIS function that:
        (++) Configures the SysTick Reload register with value passed as function parameter.
        (++) Configures the SysTick IRQ priority to the lowest value 0x0F.
        (++) Resets the SysTick Counter register.
        (++) Configures the SysTick Counter clock source to be Core Clock Source (HCLK).
        (++) Enables the SysTick Interrupt.
        (++) Starts the SysTick Counter.
    
   (+) You can change the SysTick Clock source to be HCLK_Div8 by calling the macro
       __HAL_CORTEX_SYSTICKCLK_CONFIG(SYSTICK_CLKSOURCE_HCLK_DIV8) just after the
       HAL_SYSTICK_Config() function call. The __HAL_CORTEX_SYSTICKCLK_CONFIG() macro is defined
       inside the stm32f1xx_hal_cortex.h file.

   (+) You can change the SysTick IRQ priority by calling the
       HAL_NVIC_SetPriority(SysTick_IRQn,...) function just after the HAL_SYSTICK_Config() function 
       call. The HAL_NVIC_SetPriority() call the NVIC_SetPriority() function which is a CMSIS function.

   (+) To adjust the SysTick time base, use the following formula:
                            
       Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
       (++) Reload Value is the parameter to be passed for HAL_SYSTICK_Config() function
       (++) Reload Value should not exceed 0xFFFFFF
   
  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f1xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F1xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup CORTEX CORTEX
  * @brief CORTEX HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_CORTEX_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block">/* Private types -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private constants ---------------------------------------------------------*/</comment>
<comment type="block">/* Private macros ------------------------------------------------------------*/</comment>
<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>
<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup CORTEX_Exported_Functions CORTEX Exported Functions
  * @{
  */</comment>


<comment type="block" format="doxygen">/** @defgroup CORTEX_Exported_Functions_Group1 Initialization and de-initialization functions
  *  @brief    Initialization and Configuration functions 
  *
@verbatim    
  ==============================================================================
              ##### Initialization and de-initialization functions #####
  ==============================================================================
    [..]
      This section provides the CORTEX HAL driver functions allowing to configure Interrupts
      Systick functionalities 

@endverbatim
  * @{
  */</comment>


<comment type="block" format="doxygen">/**
  * @brief  Sets the priority grouping field (preemption priority and subpriority)
  *         using the required unlock sequence.
  * @param  PriorityGroup: The priority grouping bits length. 
  *         This parameter can be one of the following values:
  *         @arg NVIC_PRIORITYGROUP_0: 0 bits for preemption priority
  *                                    4 bits for subpriority
  *         @arg NVIC_PRIORITYGROUP_1: 1 bits for preemption priority
  *                                    3 bits for subpriority
  *         @arg NVIC_PRIORITYGROUP_2: 2 bits for preemption priority
  *                                    2 bits for subpriority
  *         @arg NVIC_PRIORITYGROUP_3: 3 bits for preemption priority
  *                                    1 bits for subpriority
  *         @arg NVIC_PRIORITYGROUP_4: 4 bits for preemption priority
  *                                    0 bits for subpriority
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_NVIC_SetPriorityGrouping</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>PriorityGroup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_NVIC_PRIORITY_GROUP</name><argument_list>(<argument><expr><name>PriorityGroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */</comment>
  <expr_stmt><expr><call><name>NVIC_SetPriorityGrouping</name><argument_list>(<argument><expr><name>PriorityGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sets the priority of an interrupt.
  * @param  IRQn: External interrupt number.
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xx.h))
  * @param  PreemptPriority: The preemption priority for the IRQn channel.
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority 
  * @param  SubPriority: the subpriority level for the IRQ channel.
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_NVIC_SetPriority</name><parameter_list>(<parameter><decl><type><name>IRQn_Type</name></type> <name>IRQn</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>PreemptPriority</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>SubPriority</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>prioritygroup</name> <init>= <expr><literal type="number">0x00U</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_NVIC_SUB_PRIORITY</name><argument_list>(<argument><expr><name>SubPriority</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_NVIC_PREEMPTION_PRIORITY</name><argument_list>(<argument><expr><name>PreemptPriority</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>prioritygroup</name> <operator>=</operator> <call><name>NVIC_GetPriorityGrouping</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>NVIC_SetPriority</name><argument_list>(<argument><expr><name>IRQn</name></expr></argument>, <argument><expr><call><name>NVIC_EncodePriority</name><argument_list>(<argument><expr><name>prioritygroup</name></expr></argument>, <argument><expr><name>PreemptPriority</name></expr></argument>, <argument><expr><name>SubPriority</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enables a device specific interrupt in the NVIC interrupt controller.
  * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
  *         function should be called before. 
  * @param  IRQn External interrupt number.
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_NVIC_EnableIRQ</name><parameter_list>(<parameter><decl><type><name>IRQn_Type</name></type> <name>IRQn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_NVIC_DEVICE_IRQ</name><argument_list>(<argument><expr><name>IRQn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable interrupt */</comment>
  <expr_stmt><expr><call><name>NVIC_EnableIRQ</name><argument_list>(<argument><expr><name>IRQn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disables a device specific interrupt in the NVIC interrupt controller.
  * @param  IRQn External interrupt number.
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_NVIC_DisableIRQ</name><parameter_list>(<parameter><decl><type><name>IRQn_Type</name></type> <name>IRQn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_NVIC_DEVICE_IRQ</name><argument_list>(<argument><expr><name>IRQn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable interrupt */</comment>
  <expr_stmt><expr><call><name>NVIC_DisableIRQ</name><argument_list>(<argument><expr><name>IRQn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_NVIC_SystemReset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* System Reset */</comment>
  <expr_stmt><expr><call><name>NVIC_SystemReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the System Timer and its interrupt, and starts the System Tick Timer.
  *         Counter is in free running mode to generate periodic interrupts.
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_SYSTICK_Config</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>TicksNumb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
   <return>return <expr><call><name>SysTick_Config</name><argument_list>(<argument><expr><name>TicksNumb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup CORTEX_Exported_Functions_Group2 Peripheral Control functions
  *  @brief   Cortex control functions 
  *
@verbatim   
  ==============================================================================
                      ##### Peripheral Control functions #####
  ==============================================================================
    [..]
      This subsection provides a set of functions allowing to control the CORTEX
      (NVIC, SYSTICK, MPU) functionalities. 
 
      
@endverbatim
  * @{
  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__MPU_PRESENT</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Disables the MPU
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_MPU_Disable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Make sure outstanding transfers are done */</comment>
  <expr_stmt><expr><call><name>__DMB</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable fault exceptions */</comment>
  <expr_stmt><expr><name><name>SCB</name><operator>-&gt;</operator><name>SHCSR</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SCB_SHCSR_MEMFAULTENA_Msk</name></expr>;</expr_stmt>
  
  <comment type="block">/* Disable the MPU and clear the control register*/</comment>
  <expr_stmt><expr><name><name>MPU</name><operator>-&gt;</operator><name>CTRL</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enable the MPU.
  * @param  MPU_Control: Specifies the control mode of the MPU during hard fault, 
  *          NMI, FAULTMASK and privileged access to the default memory 
  *          This parameter can be one of the following values:
  *            @arg MPU_HFNMI_PRIVDEF_NONE
  *            @arg MPU_HARDFAULT_NMI
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_MPU_Enable</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>MPU_Control</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Enable the MPU */</comment>
  <expr_stmt><expr><name><name>MPU</name><operator>-&gt;</operator><name>CTRL</name></name> <operator>=</operator> <name>MPU_Control</name> <operator>|</operator> <name>MPU_CTRL_ENABLE_Msk</name></expr>;</expr_stmt>
  
  <comment type="block">/* Enable fault exceptions */</comment>
  <expr_stmt><expr><name><name>SCB</name><operator>-&gt;</operator><name>SHCSR</name></name> <operator>|=</operator> <name>SCB_SHCSR_MEMFAULTENA_Msk</name></expr>;</expr_stmt>
  
  <comment type="block">/* Ensure MPU setting take effects */</comment>
  <expr_stmt><expr><call><name>__DSB</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__ISB</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initializes and configures the Region and the memory to be protected.
  * @param  MPU_Init: Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_MPU_ConfigRegion</name><parameter_list>(<parameter><decl><type><name>MPU_Region_InitTypeDef</name> <modifier>*</modifier></type><name>MPU_Init</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_MPU_REGION_NUMBER</name><argument_list>(<argument><expr><name><name>MPU_Init</name><operator>-&gt;</operator><name>Number</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_MPU_REGION_ENABLE</name><argument_list>(<argument><expr><name><name>MPU_Init</name><operator>-&gt;</operator><name>Enable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the Region number */</comment>
  <expr_stmt><expr><name><name>MPU</name><operator>-&gt;</operator><name>RNR</name></name> <operator>=</operator> <name><name>MPU_Init</name><operator>-&gt;</operator><name>Number</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>MPU_Init</name><operator>-&gt;</operator><name>Enable</name></name><operator>)</operator> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_MPU_INSTRUCTION_ACCESS</name><argument_list>(<argument><expr><name><name>MPU_Init</name><operator>-&gt;</operator><name>DisableExec</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_MPU_REGION_PERMISSION_ATTRIBUTE</name><argument_list>(<argument><expr><name><name>MPU_Init</name><operator>-&gt;</operator><name>AccessPermission</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_MPU_TEX_LEVEL</name><argument_list>(<argument><expr><name><name>MPU_Init</name><operator>-&gt;</operator><name>TypeExtField</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_MPU_ACCESS_SHAREABLE</name><argument_list>(<argument><expr><name><name>MPU_Init</name><operator>-&gt;</operator><name>IsShareable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_MPU_ACCESS_CACHEABLE</name><argument_list>(<argument><expr><name><name>MPU_Init</name><operator>-&gt;</operator><name>IsCacheable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_MPU_ACCESS_BUFFERABLE</name><argument_list>(<argument><expr><name><name>MPU_Init</name><operator>-&gt;</operator><name>IsBufferable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_MPU_SUB_REGION_DISABLE</name><argument_list>(<argument><expr><name><name>MPU_Init</name><operator>-&gt;</operator><name>SubRegionDisable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_MPU_REGION_SIZE</name><argument_list>(<argument><expr><name><name>MPU_Init</name><operator>-&gt;</operator><name>Size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>MPU</name><operator>-&gt;</operator><name>RBAR</name></name> <operator>=</operator> <name><name>MPU_Init</name><operator>-&gt;</operator><name>BaseAddress</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>MPU</name><operator>-&gt;</operator><name>RASR</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>MPU_Init</name><operator>-&gt;</operator><name>DisableExec</name></name>             <operator>&lt;&lt;</operator> <name>MPU_RASR_XN_Pos</name><operator>)</operator>   <operator>|</operator>
                <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>MPU_Init</name><operator>-&gt;</operator><name>AccessPermission</name></name>        <operator>&lt;&lt;</operator> <name>MPU_RASR_AP_Pos</name><operator>)</operator>   <operator>|</operator>
                <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>MPU_Init</name><operator>-&gt;</operator><name>TypeExtField</name></name>            <operator>&lt;&lt;</operator> <name>MPU_RASR_TEX_Pos</name><operator>)</operator>  <operator>|</operator>
                <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>MPU_Init</name><operator>-&gt;</operator><name>IsShareable</name></name>             <operator>&lt;&lt;</operator> <name>MPU_RASR_S_Pos</name><operator>)</operator>    <operator>|</operator>
                <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>MPU_Init</name><operator>-&gt;</operator><name>IsCacheable</name></name>             <operator>&lt;&lt;</operator> <name>MPU_RASR_C_Pos</name><operator>)</operator>    <operator>|</operator>
                <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>MPU_Init</name><operator>-&gt;</operator><name>IsBufferable</name></name>            <operator>&lt;&lt;</operator> <name>MPU_RASR_B_Pos</name><operator>)</operator>    <operator>|</operator>
                <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>MPU_Init</name><operator>-&gt;</operator><name>SubRegionDisable</name></name>        <operator>&lt;&lt;</operator> <name>MPU_RASR_SRD_Pos</name><operator>)</operator>  <operator>|</operator>
                <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>MPU_Init</name><operator>-&gt;</operator><name>Size</name></name>                    <operator>&lt;&lt;</operator> <name>MPU_RASR_SIZE_Pos</name><operator>)</operator> <operator>|</operator>
                <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>MPU_Init</name><operator>-&gt;</operator><name>Enable</name></name>                  <operator>&lt;&lt;</operator> <name>MPU_RASR_ENABLE_Pos</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>MPU</name><operator>-&gt;</operator><name>RBAR</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>MPU</name><operator>-&gt;</operator><name>RASR</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __MPU_PRESENT */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB-&gt;AIRCR [10:8] PRIGROUP field)
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_NVIC_GetPriorityGrouping</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Get the PRIGROUP[10:8] field value */</comment>
  <return>return <expr><call><name>NVIC_GetPriorityGrouping</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Gets the priority of an interrupt.
  * @param  IRQn: External interrupt number.
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @param   PriorityGroup: the priority grouping bits length.
  *         This parameter can be one of the following values:
  *           @arg NVIC_PRIORITYGROUP_0: 0 bits for preemption priority
  *                                      4 bits for subpriority
  *           @arg NVIC_PRIORITYGROUP_1: 1 bits for preemption priority
  *                                      3 bits for subpriority
  *           @arg NVIC_PRIORITYGROUP_2: 2 bits for preemption priority
  *                                      2 bits for subpriority
  *           @arg NVIC_PRIORITYGROUP_3: 3 bits for preemption priority
  *                                      1 bits for subpriority
  *           @arg NVIC_PRIORITYGROUP_4: 4 bits for preemption priority
  *                                      0 bits for subpriority
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_NVIC_GetPriority</name><parameter_list>(<parameter><decl><type><name>IRQn_Type</name></type> <name>IRQn</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>PriorityGroup</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pPreemptPriority</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pSubPriority</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_NVIC_PRIORITY_GROUP</name><argument_list>(<argument><expr><name>PriorityGroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <comment type="block">/* Get priority for Cortex-M system or device specific interrupts */</comment>
  <expr_stmt><expr><call><name>NVIC_DecodePriority</name><argument_list>(<argument><expr><call><name>NVIC_GetPriority</name><argument_list>(<argument><expr><name>IRQn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PriorityGroup</name></expr></argument>, <argument><expr><name>pPreemptPriority</name></expr></argument>, <argument><expr><name>pSubPriority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sets Pending bit of an external interrupt.
  * @param  IRQn External interrupt number
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_NVIC_SetPendingIRQ</name><parameter_list>(<parameter><decl><type><name>IRQn_Type</name></type> <name>IRQn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_NVIC_DEVICE_IRQ</name><argument_list>(<argument><expr><name>IRQn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Set interrupt pending */</comment>
  <expr_stmt><expr><call><name>NVIC_SetPendingIRQ</name><argument_list>(<argument><expr><name>IRQn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Gets Pending Interrupt (reads the pending register in the NVIC 
  *         and returns the pending bit for the specified interrupt).
  * @param  IRQn External interrupt number.
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_NVIC_GetPendingIRQ</name><parameter_list>(<parameter><decl><type><name>IRQn_Type</name></type> <name>IRQn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_NVIC_DEVICE_IRQ</name><argument_list>(<argument><expr><name>IRQn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return 1 if pending else 0 */</comment>
  <return>return <expr><call><name>NVIC_GetPendingIRQ</name><argument_list>(<argument><expr><name>IRQn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Clears the pending bit of an external interrupt.
  * @param  IRQn External interrupt number.
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_NVIC_ClearPendingIRQ</name><parameter_list>(<parameter><decl><type><name>IRQn_Type</name></type> <name>IRQn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_NVIC_DEVICE_IRQ</name><argument_list>(<argument><expr><name>IRQn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Clear pending interrupt */</comment>
  <expr_stmt><expr><call><name>NVIC_ClearPendingIRQ</name><argument_list>(<argument><expr><name>IRQn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Gets active interrupt ( reads the active register in NVIC and returns the active bit).
  * @param IRQn External interrupt number
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_NVIC_GetActive</name><parameter_list>(<parameter><decl><type><name>IRQn_Type</name></type> <name>IRQn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_NVIC_DEVICE_IRQ</name><argument_list>(<argument><expr><name>IRQn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return 1 if active else 0 */</comment>
  <return>return <expr><call><name>NVIC_GetActive</name><argument_list>(<argument><expr><name>IRQn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configures the SysTick clock source.
  * @param  CLKSource: specifies the SysTick clock source.
  *         This parameter can be one of the following values:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_SYSTICK_CLKSourceConfig</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>CLKSource</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SYSTICK_CLK_SOURCE</name><argument_list>(<argument><expr><name>CLKSource</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>CLKSource</name> <operator>==</operator> <name>SYSTICK_CLKSOURCE_HCLK</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>SysTick</name><operator>-&gt;</operator><name>CTRL</name></name> <operator>|=</operator> <name>SYSTICK_CLKSOURCE_HCLK</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>SysTick</name><operator>-&gt;</operator><name>CTRL</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SYSTICK_CLKSOURCE_HCLK</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_SYSTICK_IRQHandler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>HAL_SYSTICK_Callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  SYSTICK callback.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SYSTICK_Callback</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_CORTEX_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
