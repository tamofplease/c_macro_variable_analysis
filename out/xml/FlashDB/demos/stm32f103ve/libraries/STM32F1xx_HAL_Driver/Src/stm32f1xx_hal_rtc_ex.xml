<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f103ve/libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rtc_ex.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f1xx_hal_rtc_ex.c
  * @author  MCD Application Team
  * @brief   Extended RTC HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the Real Time Clock (RTC) Extension peripheral:
  *           + RTC Tamper functions
  *           + Extension Control functions
  *           + Extension RTC features functions
  *
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f1xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F1xx_HAL_Driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_RTC_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block" format="doxygen">/** @defgroup RTCEx RTCEx
  * @brief RTC Extended HAL module driver
  * @{
  */</comment>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup RTCEx_Private_Macros RTCEx Private Macros
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup RTCEx_Exported_Functions RTCEx Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RTCEx_Exported_Functions_Group1 RTC Tamper functions
  * @brief    RTC Tamper functions
  *
@verbatim
 ===============================================================================
                 ##### RTC Tamper functions #####
 ===============================================================================

 [..] This section provides functions allowing to configure Tamper feature

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Sets Tamper
  * @note   By calling this API we disable the tamper interrupt for all tampers.
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  sTamper: Pointer to Tamper Structure.
  * @note   Tamper can be enabled only if ASOE and CCO bit are reset
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_SetTamper</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>RTC_TamperTypeDef</name> <modifier>*</modifier></type><name>sTamper</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check input parameters */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hrtc</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>sTamper</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>Tamper</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER_TRIGGER</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>Trigger</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>BKP</name><operator>-&gt;</operator><name>RTCCR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>BKP_RTCCR_CCO</name> <operator>|</operator> <name>BKP_RTCCR_ASOE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>BKP</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>BKP_CR_TPE</name> <operator>|</operator> <name>BKP_CR_TPAL</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>sTamper</name><operator>-&gt;</operator><name>Tamper</name></name> <operator>|</operator> <operator>(</operator><name><name>sTamper</name><operator>-&gt;</operator><name>Trigger</name></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sets Tamper with interrupt.
  * @note   By calling this API we force the tamper interrupt for all tampers.
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  sTamper: Pointer to RTC Tamper.
  * @note   Tamper can be enabled only if ASOE and CCO bit are reset
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_SetTamper_IT</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>RTC_TamperTypeDef</name> <modifier>*</modifier></type><name>sTamper</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check input parameters */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hrtc</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>sTamper</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>Tamper</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER_TRIGGER</name><argument_list>(<argument><expr><name><name>sTamper</name><operator>-&gt;</operator><name>Trigger</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>BKP</name><operator>-&gt;</operator><name>RTCCR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>BKP_RTCCR_CCO</name> <operator>|</operator> <name>BKP_RTCCR_ASOE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>BKP</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>BKP_CR_TPE</name> <operator>|</operator> <name>BKP_CR_TPAL</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>sTamper</name><operator>-&gt;</operator><name>Tamper</name></name> <operator>|</operator> <operator>(</operator><name><name>sTamper</name><operator>-&gt;</operator><name>Trigger</name></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Configure the Tamper Interrupt in the BKP-&gt;CSR */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_TAMPER_ENABLE_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_IT_TAMP1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Deactivates Tamper.
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  Tamper: Selected tamper pin.
  *          This parameter can be a value of @ref RTCEx_Tamper_Pins_Definitions
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_DeactivateTamper</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tamper</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check input parameters */</comment>
  <if_stmt><if>if <condition>(<expr><name>hrtc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>Tamper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_TAMPER</name><argument_list>(<argument><expr><name>Tamper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the selected Tamper pin */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>BKP</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>BKP_CR_TPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the Tamper Interrupt in the BKP-&gt;CSR */</comment>
  <comment type="block">/* Configure the Tamper Interrupt in the BKP-&gt;CSR */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_TAMPER_DISABLE_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_IT_TAMP1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Clear the Tamper interrupt pending bit */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_TAMPER_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_TAMP1F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>BKP</name><operator>-&gt;</operator><name>CSR</name></name></expr></argument>, <argument><expr><name>BKP_CSR_CTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles Tamper interrupt request.
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RTCEx_TamperIRQHandler</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Get the status of the Interrupt */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>__HAL_RTC_TAMPER_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_IT_TAMP1</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Get the TAMPER Interrupt enable bit and pending bit */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_RTC_TAMPER_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_TAMP1F</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Tamper callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_RTC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hrtc</name><operator>-&gt;</operator><name>Tamper1EventCallback</name></name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_RTCEx_Tamper1EventCallback</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_RTC_REGISTER_CALLBACKS */</comment>

      <comment type="block">/* Clear the Tamper interrupt pending bit */</comment>
      <expr_stmt><expr><call><name>__HAL_RTC_TAMPER_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_TAMP1F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Tamper 1 callback.
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_RTCEx_Tamper1EventCallback</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles Tamper1 Polling.
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_PollForTamper1Event</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check input parameters */</comment>
  <if_stmt><if>if <condition>(<expr><name>hrtc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Get the status of the Interrupt */</comment>
  <while>while <condition>(<expr><call><name>__HAL_RTC_TAMPER_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_TAMP1F</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Clear the Tamper Flag */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_TAMPER_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_TAMP1F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RTCEx_Exported_Functions_Group2 RTC Second functions
  * @brief    RTC Second functions
  *
@verbatim
 ===============================================================================
                 ##### RTC Second functions #####
 ===============================================================================

 [..] This section provides functions implementing second interupt handlers

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Sets Interrupt for second
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_SetSecond_IT</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check input parameters */</comment>
  <if_stmt><if>if <condition>(<expr><name>hrtc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Enable Second interuption */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_SECOND_ENABLE_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_IT_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Deactivates Second.
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_DeactivateSecond</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check input parameters */</comment>
  <if_stmt><if>if <condition>(<expr><name>hrtc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Deactivate Second interuption*/</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_SECOND_DISABLE_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_IT_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles second interrupt request.
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RTCEx_RTCIRQHandler</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>__HAL_RTC_SECOND_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_IT_SEC</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Get the status of the Interrupt */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_RTC_SECOND_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_SEC</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check if Overrun occurred */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>__HAL_RTC_SECOND_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_OW</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Second error callback */</comment>
        <expr_stmt><expr><call><name>HAL_RTCEx_RTCEventErrorCallback</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Clear flag Second */</comment>
        <expr_stmt><expr><call><name>__HAL_RTC_OVERFLOW_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_OW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Change RTC state */</comment>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Second callback */</comment>
        <expr_stmt><expr><call><name>HAL_RTCEx_RTCEventCallback</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Change RTC state */</comment>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <comment type="block">/* Clear flag Second */</comment>
      <expr_stmt><expr><call><name>__HAL_RTC_SECOND_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Second event callback.
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_RTCEx_RTCEventCallback</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Second event error callback.
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_RTCEx_RTCEventErrorCallback</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RTCEx_Exported_Functions_Group3 Extended Peripheral Control functions
  * @brief    Extended Peripheral Control functions
  *
@verbatim
 ===============================================================================
              ##### Extension Peripheral Control functions #####
 ===============================================================================
    [..]
    This subsection provides functions allowing to
      (+) Writes a data in a specified RTC Backup data register
      (+) Read a data in a specified RTC Backup data register
      (+) Sets the Smooth calibration parameters.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Writes a data in a specified RTC Backup data register.
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  BackupRegister: RTC Backup data Register number.
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RTCEx_BKUPWrite</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BackupRegister</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_BKP</name><argument_list>(<argument><expr><name>BackupRegister</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>BKP_BASE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <operator>(</operator><name>BackupRegister</name> <operator>*</operator> <literal type="number">4U</literal><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name>Data</name> <operator>&amp;</operator> <name>BKP_DR1_D</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Reads data from the specified RTC Backup data Register.
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  BackupRegister: RTC Backup data Register number.
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RTCEx_BKUPRead</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BackupRegister</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>backupregister</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pvalue</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_BKP</name><argument_list>(<argument><expr><name>BackupRegister</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>backupregister</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>BKP_BASE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>backupregister</name> <operator>+=</operator> <operator>(</operator><name>BackupRegister</name> <operator>*</operator> <literal type="number">4U</literal><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name>pvalue</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>backupregister</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>BKP_DR1_D</name></expr>;</expr_stmt>

  <comment type="block">/* Read the specified register */</comment>
  <return>return <expr><name>pvalue</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  Sets the Smooth calibration parameters.
  * @param  hrtc: RTC handle
  * @param  SmoothCalibPeriod: Not used (only present for compatibility with another families)
  * @param  SmoothCalibPlusPulses: Not used (only present for compatibility with another families)
  * @param  SmouthCalibMinusPulsesValue: specifies the RTC Clock Calibration value.
  *          This parameter must be a number between 0 and 0x7F.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTCEx_SetSmoothCalib</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>SmoothCalibPeriod</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>SmoothCalibPlusPulses</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>SmouthCalibMinusPulsesValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check input parameters */</comment>
  <if_stmt><if>if <condition>(<expr><name>hrtc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>SmoothCalibPeriod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>SmoothCalibPlusPulses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_SMOOTH_CALIB_MINUS</name><argument_list>(<argument><expr><name>SmouthCalibMinusPulsesValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Sets RTC Clock Calibration value.*/</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>BKP</name><operator>-&gt;</operator><name>RTCCR</name></name></expr></argument>, <argument><expr><name>BKP_RTCCR_CAL</name></expr></argument>, <argument><expr><name>SmouthCalibMinusPulsesValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_RTC_MODULE_ENABLED */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>

</unit>
