<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f103ve/libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rtc.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f1xx_hal_rtc.c
  * @author  MCD Application Team
  * @brief   RTC HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the Real Time Clock (RTC) peripheral:
  *           + Initialization and de-initialization functions
  *           + RTC Time and Date functions
  *           + RTC Alarm functions
  *           + Peripheral Control functions
  *           + Peripheral State functions
  *
  @verbatim
  ==============================================================================
                  ##### How to use this driver #####
  ==================================================================
  [..]
    (+) Enable the RTC domain access (see description in the section above).
    (+) Configure the RTC Prescaler (Asynchronous prescaler to generate RTC 1Hz time base)
        using the HAL_RTC_Init() function.

  *** Time and Date configuration ***
  ===================================
  [..]
    (+) To configure the RTC Calendar (Time and Date) use the HAL_RTC_SetTime()
        and HAL_RTC_SetDate() functions.
    (+) To read the RTC Calendar, use the HAL_RTC_GetTime() and HAL_RTC_GetDate() functions.

  *** Alarm configuration ***
  ===========================
  [..]
    (+) To configure the RTC Alarm use the HAL_RTC_SetAlarm() function.
        You can also configure the RTC Alarm with interrupt mode using the HAL_RTC_SetAlarm_IT() function.
    (+) To read the RTC Alarm, use the HAL_RTC_GetAlarm() function.

  *** Tamper configuration ***
  ============================
  [..]
    (+) Enable the RTC Tamper and configure the Tamper Level using the
        HAL_RTCEx_SetTamper() function. You can configure RTC Tamper with interrupt
        mode using HAL_RTCEx_SetTamper_IT() function.
    (+) The TAMPER1 alternate function can be mapped to PC13

  *** Backup Data Registers configuration ***
  ===========================================
  [..]
    (+) To write to the RTC Backup Data registers, use the HAL_RTCEx_BKUPWrite()
        function.
    (+) To read the RTC Backup Data registers, use the HAL_RTCEx_BKUPRead()
        function.

                  ##### WARNING: Drivers Restrictions  #####
  ==================================================================
  [..] RTC version used on STM32F1 families is version V1. All the features supported by V2
       (other families) will be not supported on F1.
  [..] As on V2, main RTC features are managed by HW. But on F1, date feature is completely
       managed by SW.
  [..] Then, there are some restrictions compared to other families:
    (+) Only format 24 hours supported in HAL (format 12 hours not supported)
    (+) Date is saved in SRAM. Then, when MCU is in STOP or STANDBY mode, date will be lost.
        User should implement a way to save date before entering in low power mode (an
        example is provided with firmware package based on backup registers)
    (+) Date is automatically updated each time a HAL_RTC_GetTime or HAL_RTC_GetDate is called.
    (+) Alarm detection is limited to 1 day. It will expire only 1 time (no alarm repetition, need
        to program a new alarm)

              ##### Backup Domain Operating Condition #####
  ==============================================================================
  [..] The real-time clock (RTC) and the RTC backup registers can be powered
       from the VBAT voltage when the main VDD supply is powered off.
       To retain the content of the RTC backup registers and supply the RTC
       when VDD is turned off, VBAT pin can be connected to an optional
       standby voltage supplied by a battery or by another source.

  [..] To allow the RTC operating even when the main digital supply (VDD) is turned
       off, the VBAT pin powers the following blocks:
    (#) The RTC
    (#) The LSE oscillator
    (#) The backup SRAM when the low power backup regulator is enabled
    (#) PC13 to PC15 I/Os, plus PI8 I/O (when available)

  [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
       the following pins are available:
    (+) PC13 can be used as a Tamper pin

  [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT
       because VDD is not present), the following pins are available:
    (+) PC13 can be used as the Tamper pin

                   ##### Backup Domain Reset #####
  ==================================================================
  [..] The backup domain reset sets all RTC registers and the RCC_BDCR register
       to their reset values.
  [..] A backup domain reset is generated when one of the following events occurs:
    (#) Software reset, triggered by setting the BDRST bit in the
        RCC Backup domain control register (RCC_BDCR).
    (#) VDD or VBAT power on, if both supplies have previously been powered off.
    (#) Tamper detection event resets all data backup registers.

                   ##### Backup Domain Access #####
  ==================================================================
  [..] After reset, the backup domain (RTC registers, RTC backup data
       registers and backup SRAM) is protected against possible unwanted write
       accesses.
  [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
    (+) Call the function HAL_RCCEx_PeriphCLKConfig in using RCC_PERIPHCLK_RTC for
        PeriphClockSelection and select RTCClockSelection (LSE, LSI or HSE)
    (+) Enable the BKP clock in using __HAL_RCC_BKP_CLK_ENABLE()

                  ##### RTC and low power modes #####
  ==================================================================
  [..] The MCU can be woken up from a low power mode by an RTC alternate
       function.
  [..] The RTC alternate functions are the RTC alarms (Alarm A),
       and RTC tamper event detection.
       These RTC alternate functions can wake up the system from the Stop and
       Standby low power modes.
  [..] The system can also wake up from low power modes without depending
       on an external interrupt (Auto-wakeup mode), by using the RTC alarm.

  *** Callback registration ***
  =============================================
  [..]
  The compilation define  USE_HAL_RTC_REGISTER_CALLBACKS when set to 1
  allows the user to configure dynamically the driver callbacks.
  Use Function @ref HAL_RTC_RegisterCallback() to register an interrupt callback.
  
  [..]
  Function @ref HAL_RTC_RegisterCallback() allows to register following callbacks:
    (+) AlarmAEventCallback          : RTC Alarm A Event callback.
    (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
    (+) MspInitCallback              : RTC MspInit callback.
    (+) MspDeInitCallback            : RTC MspDeInit callback.
  [..]	  
  This function takes as parameters the HAL peripheral handle, the Callback ID
  and a pointer to the user callback function.
  
  [..]
  Use function @ref HAL_RTC_UnRegisterCallback() to reset a callback to the default
  weak function.
  @ref HAL_RTC_UnRegisterCallback() takes as parameters the HAL peripheral handle,
  and the Callback ID.
  This function allows to reset following callbacks:
    (+) AlarmAEventCallback          : RTC Alarm A Event callback.
    (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
    (+) MspInitCallback              : RTC MspInit callback.
    (+) MspDeInitCallback            : RTC MspDeInit callback.
  [..]
  By default, after the @ref HAL_RTC_Init() and when the state is HAL_RTC_STATE_RESET,
  all callbacks are set to the corresponding weak functions :
  example @ref AlarmAEventCallback().
  Exception done for MspInit and MspDeInit callbacks that are reset to the legacy weak function
  in the @ref HAL_RTC_Init()/@ref HAL_RTC_DeInit() only when these callbacks are null
  (not registered beforehand).
  If not, MspInit or MspDeInit are not null, @ref HAL_RTC_Init()/@ref HAL_RTC_DeInit()
  keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
  [..]
  Callbacks can be registered/unregistered in HAL_RTC_STATE_READY state only.
  Exception done MspInit/MspDeInit that can be registered/unregistered
  in HAL_RTC_STATE_READY or HAL_RTC_STATE_RESET state,
  thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
  In that case first register the MspInit/MspDeInit user callbacks
  using @ref HAL_RTC_RegisterCallback() before calling @ref HAL_RTC_DeInit()
  or @ref HAL_RTC_Init() function.
  [..]
  When The compilation define USE_HAL_RTC_REGISTER_CALLBACKS is set to 0 or
  not defined, the callback registration feature is not available and all callbacks
  are set to the corresponding weak functions.
   @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f1xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F1xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RTC RTC
  * @brief RTC HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_RTC_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup RTC_Private_Constants RTC Private Constants
  * @{
  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTC_ALARM_RESETVALUE_REGISTER</name></cpp:macro>    <cpp:value>(uint16_t)0xFFFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTC_ALARM_RESETVALUE</name></cpp:macro>             <cpp:value>0xFFFFFFFFU</cpp:value></cpp:define>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup RTC_Private_Macros RTC Private Macros
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup RTC_Private_Functions RTC Private Functions
  * @{
  */</comment>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type>           <name>RTC_ReadTimeCounter</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type>  <name>RTC_WriteTimeCounter</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>TimeCounter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type>           <name>RTC_ReadAlarmCounter</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type>  <name>RTC_WriteAlarmCounter</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>AlarmCounter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type>  <name>RTC_EnterInitMode</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type>  <name>RTC_ExitInitMode</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint8_t</name></type>            <name>RTC_ByteToBcd2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint8_t</name></type>            <name>RTC_Bcd2ToByte</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint8_t</name></type>            <name>RTC_IsLeapYear</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>nYear</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>               <name>RTC_DateUpdate</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DayElapsed</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint8_t</name></type>            <name>RTC_WeekDayNum</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>nYear</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>nMonth</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>nDay</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup RTC_Exported_Functions RTC Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RTC_Exported_Functions_Group1 Initialization and de-initialization functions
 *  @brief    Initialization and Configuration functions
 *
@verbatim
 ===============================================================================
              ##### Initialization and de-initialization functions #####
 ===============================================================================
   [..] This section provides functions allowing to initialize and configure the
         RTC Prescaler (Asynchronous), disable RTC registers Write protection,
         enter and exit the RTC initialization mode,
         RTC registers synchronization check and reference clock detection enable.
         (#) The RTC Prescaler should be programmed to generate the RTC 1Hz time base.
         (#) All RTC registers are Write protected. Writing to the RTC registers
             is enabled by setting the CNF bit in the RTC_CRL register.
         (#) To read the calendar after wakeup from low power modes (Standby or Stop)
             the software must first wait for the RSF bit (Register Synchronized Flag)
             in the RTC_CRL register to be set by hardware.
             The HAL_RTC_WaitForSynchro() function implements the above software
             sequence (RSF clear and RSF check).

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the RTC peripheral
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_Init</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>prescaler</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Check input parameters */</comment>
  <if_stmt><if>if <condition>(<expr><name>hrtc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_CALIB_OUTPUT</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutPut</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ASYNCH_PREDIV</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AsynchPrediv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_RTC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_RTC_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>AlarmAEventCallback</name></name>          <operator>=</operator>  <name>HAL_RTC_AlarmAEventCallback</name></expr>;</expr_stmt>        <comment type="block">/* Legacy weak AlarmAEventCallback      */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Tamper1EventCallback</name></name>         <operator>=</operator>  <name>HAL_RTCEx_Tamper1EventCallback</name></expr>;</expr_stmt>     <comment type="block">/* Legacy weak Tamper1EventCallback     */</comment>

    <if_stmt><if>if <condition>(<expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_RTC_MspInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>hrtc</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_RTC_MspDeInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_RTC_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

    <comment type="block">/* Initialize RTC MSP */</comment>
    <expr_stmt><expr><call><name>HAL_RTC_MspInit</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (USE_HAL_RTC_REGISTER_CALLBACKS) */</comment>

  <comment type="block">/* Set RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Waiting for synchro */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_RTC_WaitForSynchro</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set RTC state */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Set Initialization mode */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>RTC_EnterInitMode</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set RTC state */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Clear Flags Bits */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CRL</name></name></expr></argument>, <argument><expr><operator>(</operator><name>RTC_FLAG_OW</name> <operator>|</operator> <name>RTC_FLAG_ALRAF</name> <operator>|</operator> <name>RTC_FLAG_SEC</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hrtc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutPut</name></name> <operator>!=</operator> <name>RTC_OUTPUTSOURCE_NONE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the selected Tamper pin */</comment>
      <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>BKP</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>BKP_CR_TPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Set the signal which will be routed to RTC Tamper pin*/</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>BKP</name><operator>-&gt;</operator><name>RTCCR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>BKP_RTCCR_CCO</name> <operator>|</operator> <name>BKP_RTCCR_ASOE</name> <operator>|</operator> <name>BKP_RTCCR_ASOS</name><operator>)</operator></expr></argument>, <argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutPut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hrtc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AsynchPrediv</name></name> <operator>!=</operator> <name>RTC_AUTO_1_SECOND</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* RTC Prescaler provided directly by end-user*/</comment>
      <expr_stmt><expr><name>prescaler</name> <operator>=</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AsynchPrediv</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* RTC Prescaler will be automatically calculated to get 1 second timebase */</comment>
      <comment type="block">/* Get the RTCCLK frequency */</comment>
      <expr_stmt><expr><name>prescaler</name> <operator>=</operator> <call><name>HAL_RCCEx_GetPeriphCLKFreq</name><argument_list>(<argument><expr><name>RCC_PERIPHCLK_RTC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Check that RTC clock is enabled*/</comment>
      <if_stmt><if>if <condition>(<expr><name>prescaler</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Should not happen. Frequency is not available*/</comment>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* RTC period = RTCCLK/(RTC_PR + 1) */</comment>
        <expr_stmt><expr><name>prescaler</name> <operator>=</operator> <name>prescaler</name> <operator>-</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Configure the RTC_PRLH / RTC_PRLL */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>PRLH</name></name></expr></argument>, <argument><expr><name>RTC_PRLH_PRL</name></expr></argument>, <argument><expr><operator>(</operator><name>prescaler</name> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>PRLL</name></name></expr></argument>, <argument><expr><name>RTC_PRLL_PRL</name></expr></argument>, <argument><expr><operator>(</operator><name>prescaler</name> <operator>&amp;</operator> <name>RTC_PRLL_PRL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait for synchro */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>RTC_ExitInitMode</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Initialize date to 1st of January 2000 */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Year</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Month</name></name> <operator>=</operator> <name>RTC_MONTH_JANUARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Date</name></name> <operator>=</operator> <literal type="number">0x01U</literal></expr>;</expr_stmt>

    <comment type="block">/* Set RTC state */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitializes the RTC peripheral
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @note   This function does not reset the RTC Backup Data registers.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_DeInit</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check input parameters */</comment>
  <if_stmt><if>if <condition>(<expr><name>hrtc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Set Initialization mode */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>RTC_EnterInitMode</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set RTC state */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

    <comment type="block">/* Release Lock */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CNTL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CNTH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>PRLL</name></name></expr></argument>, <argument><expr><literal type="number">0x00008000U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>PRLH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Reset All CRH/CRL bits */</comment>
    <expr_stmt><expr><call><name>CLEAR_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CRH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CRL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>RTC_ExitInitMode</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Wait for synchro*/</comment>
  <expr_stmt><expr><call><name>HAL_RTC_WaitForSynchro</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Clear RSF flag */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CRL</name></name></expr></argument>, <argument><expr><name>RTC_FLAG_RSF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_RTC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_RTC_MspDeInit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* DeInit the low level hardware: CLOCK, NVIC.*/</comment>
  <expr_stmt><expr><call><name><name>hrtc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* De-Initialize RTC MSP */</comment>
  <expr_stmt><expr><call><name>HAL_RTC_MspDeInit</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (USE_HAL_RTC_REGISTER_CALLBACKS) */</comment>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_RTC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User RTC Callback
  *         To be used instead of the weak predefined callback
  * @param  hrtc RTC handle
  * @param  CallbackID ID of the callback to be registered
  *         This parameter can be one of the following values:
  *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
  *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
  *          @arg @ref HAL_RTC_MSPINIT_CB_ID                Msp Init callback ID
  *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID              Msp DeInit callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>HAL_RTC_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>, <parameter><decl><type><name>pRTC_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>HAL_RTC_STATE_READY</name> <operator>==</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_RTC_ALARM_A_EVENT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>AlarmAEventCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_RTC_TAMPER1_EVENT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Tamper1EventCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_RTC_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_RTC_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>HAL_RTC_STATE_RESET</name> <operator>==</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_RTC_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_RTC_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister an RTC Callback
  *         RTC callabck is redirected to the weak predefined callback
  * @param  hrtc RTC handle
  * @param  CallbackID ID of the callback to be unregistered
  *         This parameter can be one of the following values:
  *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
  *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
  *          @arg @ref HAL_RTC_MSPINIT_CB_ID Msp Init callback ID
  *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID Msp DeInit callback ID
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>HAL_RTC_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>HAL_RTC_STATE_READY</name> <operator>==</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_RTC_ALARM_A_EVENT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>AlarmAEventCallback</name></name> <operator>=</operator> <name>HAL_RTC_AlarmAEventCallback</name></expr>;</expr_stmt>         <comment type="block">/* Legacy weak AlarmAEventCallback    */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_RTC_TAMPER1_EVENT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Tamper1EventCallback</name></name> <operator>=</operator> <name>HAL_RTCEx_Tamper1EventCallback</name></expr>;</expr_stmt>         <comment type="block">/* Legacy weak Tamper1EventCallback   */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_RTC_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_RTC_MspInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_RTC_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_RTC_MspDeInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>HAL_RTC_STATE_RESET</name> <operator>==</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_RTC_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_RTC_MspInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_RTC_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_RTC_MspDeInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_RTC_REGISTER_CALLBACKS */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the RTC MSP.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_RTC_MspInit</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitializes the RTC MSP.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_RTC_MspDeInit</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_MspDeInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RTC_Exported_Functions_Group2 Time and Date functions
 *  @brief   RTC Time and Date functions
 *
@verbatim
 ===============================================================================
                 ##### RTC Time and Date functions #####
 ===============================================================================

 [..] This section provides functions allowing to configure Time and Date features

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Sets RTC current time.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  sTime: Pointer to Time structure
  * @param  Format: Specifies the format of the entered parameters.
  *          This parameter can be one of the following values:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_SetTime</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>RTC_TimeTypeDef</name> <modifier>*</modifier></type><name>sTime</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>counter_time</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>counter_alarm</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check input parameters */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hrtc</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>sTime</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_FORMAT</name><argument_list>(<argument><expr><name>Format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>Format</name> <operator>==</operator> <name>RTC_FORMAT_BIN</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOUR24</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_MINUTES</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Minutes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_SECONDS</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Seconds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>counter_time</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTime</name><operator>-&gt;</operator><name>Hours</name></name> <operator>*</operator> <literal type="number">3600U</literal><operator>)</operator> <operator>+</operator> \
                              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTime</name><operator>-&gt;</operator><name>Minutes</name></name> <operator>*</operator> <literal type="number">60U</literal><operator>)</operator> <operator>+</operator> \
                              <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sTime</name><operator>-&gt;</operator><name>Seconds</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOUR24</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_MINUTES</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Minutes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_SECONDS</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Seconds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>counter_time</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Hours</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">3600U</literal><operator>)</operator> <operator>+</operator> \
                    <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Minutes</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">60U</literal><operator>)</operator> <operator>+</operator> \
                    <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Seconds</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Write time counter in RTC registers */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>RTC_WriteTimeCounter</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>counter_time</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set RTC state */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Clear Second and overflow flags */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CRL</name></name></expr></argument>, <argument><expr><operator>(</operator><name>RTC_FLAG_SEC</name> <operator>|</operator> <name>RTC_FLAG_OW</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Read current Alarm counter in RTC registers */</comment>
    <expr_stmt><expr><name>counter_alarm</name> <operator>=</operator> <call><name>RTC_ReadAlarmCounter</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set again alarm to match with new time if enabled */</comment>
    <if_stmt><if>if <condition>(<expr><name>counter_alarm</name> <operator>!=</operator> <name>RTC_ALARM_RESETVALUE</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>counter_alarm</name> <operator>&lt;</operator> <name>counter_time</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Add 1 day to alarm counter*/</comment>
        <expr_stmt><expr><name>counter_alarm</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">24U</literal> <operator>*</operator> <literal type="number">3600U</literal><operator>)</operator></expr>;</expr_stmt>

        <comment type="block">/* Write new Alarm counter in RTC registers */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>RTC_WriteAlarmCounter</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>counter_alarm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set RTC state */</comment>
          <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

          <comment type="block">/* Process Unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Gets RTC current time.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  sTime: Pointer to Time structure
  * @param  Format: Specifies the format of the entered parameters.
  *          This parameter can be one of the following values:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_GetTime</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>RTC_TimeTypeDef</name> <modifier>*</modifier></type><name>sTime</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>counter_time</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>counter_alarm</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>days_elapsed</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>hours</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check input parameters */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hrtc</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>sTime</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_FORMAT</name><argument_list>(<argument><expr><name>Format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check if counter overflow occurred */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>__HAL_RTC_OVERFLOW_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_OW</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Read the time counter*/</comment>
  <expr_stmt><expr><name>counter_time</name> <operator>=</operator> <call><name>RTC_ReadTimeCounter</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Fill the structure fields with the read parameters */</comment>
  <expr_stmt><expr><name>hours</name> <operator>=</operator> <name>counter_time</name> <operator>/</operator> <literal type="number">3600U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sTime</name><operator>-&gt;</operator><name>Minutes</name></name>  <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>counter_time</name> <operator>%</operator> <literal type="number">3600U</literal><operator>)</operator> <operator>/</operator> <literal type="number">60U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sTime</name><operator>-&gt;</operator><name>Seconds</name></name>  <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>counter_time</name> <operator>%</operator> <literal type="number">3600U</literal><operator>)</operator> <operator>%</operator> <literal type="number">60U</literal><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>hours</name> <operator>&gt;=</operator> <literal type="number">24U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Get number of days elapsed from last calculation */</comment>
    <expr_stmt><expr><name>days_elapsed</name> <operator>=</operator> <operator>(</operator><name>hours</name> <operator>/</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Set Hours in RTC_TimeTypeDef structure*/</comment>
    <expr_stmt><expr><name><name>sTime</name><operator>-&gt;</operator><name>Hours</name></name> <operator>=</operator> <operator>(</operator><name>hours</name> <operator>%</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Read Alarm counter in RTC registers */</comment>
    <expr_stmt><expr><name>counter_alarm</name> <operator>=</operator> <call><name>RTC_ReadAlarmCounter</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Calculate remaining time to reach alarm (only if set and not yet expired)*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>counter_alarm</name> <operator>!=</operator> <name>RTC_ALARM_RESETVALUE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>counter_alarm</name> <operator>&gt;</operator> <name>counter_time</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>counter_alarm</name> <operator>-=</operator> <name>counter_time</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* In case of counter_alarm &lt; counter_time */</comment>
      <comment type="block">/* Alarm expiration already occurred but alarm not deactivated */</comment>
      <expr_stmt><expr><name>counter_alarm</name> <operator>=</operator> <name>RTC_ALARM_RESETVALUE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Set updated time in decreasing counter by number of days elapsed */</comment>
    <expr_stmt><expr><name>counter_time</name> <operator>-=</operator> <operator>(</operator><name>days_elapsed</name> <operator>*</operator> <literal type="number">24U</literal> <operator>*</operator> <literal type="number">3600U</literal><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Write time counter in RTC registers */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>RTC_WriteTimeCounter</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>counter_time</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Set updated alarm to be set */</comment>
    <if_stmt><if>if <condition>(<expr><name>counter_alarm</name> <operator>!=</operator> <name>RTC_ALARM_RESETVALUE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>counter_alarm</name> <operator>+=</operator> <name>counter_time</name></expr>;</expr_stmt>

      <comment type="block">/* Write time counter in RTC registers */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>RTC_WriteAlarmCounter</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>counter_alarm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Alarm already occurred. Set it to reset values to avoid unexpected expiration */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>RTC_WriteAlarmCounter</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>counter_alarm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Update date */</comment>
    <expr_stmt><expr><call><name>RTC_DateUpdate</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>days_elapsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>sTime</name><operator>-&gt;</operator><name>Hours</name></name> <operator>=</operator> <name>hours</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Check the input parameters format */</comment>
  <if_stmt><if>if <condition>(<expr><name>Format</name> <operator>!=</operator> <name>RTC_FORMAT_BIN</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Convert the time structure parameters to BCD format */</comment>
    <expr_stmt><expr><name><name>sTime</name><operator>-&gt;</operator><name>Hours</name></name>    <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sTime</name><operator>-&gt;</operator><name>Minutes</name></name>  <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Minutes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sTime</name><operator>-&gt;</operator><name>Seconds</name></name>  <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sTime</name><operator>-&gt;</operator><name>Seconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  Sets RTC current date.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  sDate: Pointer to date structure
  * @param  Format: specifies the format of the entered parameters.
  *          This parameter can be one of the following values:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_SetDate</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>RTC_DateTypeDef</name> <modifier>*</modifier></type><name>sDate</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>counter_time</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>counter_alarm</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>hours</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check input parameters */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hrtc</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>sDate</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_FORMAT</name><argument_list>(<argument><expr><name>Format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>Format</name> <operator>==</operator> <name>RTC_FORMAT_BIN</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_YEAR</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Year</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_MONTH</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Month</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_DATE</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Date</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Change the current date */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Year</name></name>  <operator>=</operator> <name><name>sDate</name><operator>-&gt;</operator><name>Year</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Month</name></name> <operator>=</operator> <name><name>sDate</name><operator>-&gt;</operator><name>Month</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Date</name></name>  <operator>=</operator> <name><name>sDate</name><operator>-&gt;</operator><name>Date</name></name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_YEAR</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Year</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_MONTH</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Month</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_DATE</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Date</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Change the current date */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Year</name></name>  <operator>=</operator> <call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Month</name></name> <operator>=</operator> <call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Month</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Date</name></name>  <operator>=</operator> <call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* WeekDay set by user can be ignored because automatically calculated */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>WeekDay</name></name> <operator>=</operator> <call><name>RTC_WeekDayNum</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Year</name></name></expr></argument>, <argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Month</name></name></expr></argument>, <argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sDate</name><operator>-&gt;</operator><name>WeekDay</name></name> <operator>=</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>WeekDay</name></name></expr>;</expr_stmt>

  <comment type="block">/* Reset time to be aligned on the same day */</comment>
  <comment type="block">/* Read the time counter*/</comment>
  <expr_stmt><expr><name>counter_time</name> <operator>=</operator> <call><name>RTC_ReadTimeCounter</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Fill the structure fields with the read parameters */</comment>
  <expr_stmt><expr><name>hours</name> <operator>=</operator> <name>counter_time</name> <operator>/</operator> <literal type="number">3600U</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>hours</name> <operator>&gt;</operator> <literal type="number">24U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set updated time in decreasing counter by number of days elapsed */</comment>
    <expr_stmt><expr><name>counter_time</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name>hours</name> <operator>/</operator> <literal type="number">24U</literal><operator>)</operator> <operator>*</operator> <literal type="number">24U</literal> <operator>*</operator> <literal type="number">3600U</literal><operator>)</operator></expr>;</expr_stmt>
    <comment type="block">/* Write time counter in RTC registers */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>RTC_WriteTimeCounter</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>counter_time</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set RTC state */</comment>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Read current Alarm counter in RTC registers */</comment>
    <expr_stmt><expr><name>counter_alarm</name> <operator>=</operator> <call><name>RTC_ReadAlarmCounter</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set again alarm to match with new time if enabled */</comment>
    <if_stmt><if>if <condition>(<expr><name>counter_alarm</name> <operator>!=</operator> <name>RTC_ALARM_RESETVALUE</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>counter_alarm</name> <operator>&lt;</operator> <name>counter_time</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Add 1 day to alarm counter*/</comment>
        <expr_stmt><expr><name>counter_alarm</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">24U</literal> <operator>*</operator> <literal type="number">3600U</literal><operator>)</operator></expr>;</expr_stmt>

        <comment type="block">/* Write new Alarm counter in RTC registers */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>RTC_WriteAlarmCounter</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>counter_alarm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set RTC state */</comment>
          <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

          <comment type="block">/* Process Unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>


  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr> ;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Gets RTC current date.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  sDate: Pointer to Date structure
  * @param  Format: Specifies the format of the entered parameters.
  *          This parameter can be one of the following values:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_GetDate</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>RTC_DateTypeDef</name> <modifier>*</modifier></type><name>sDate</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>RTC_TimeTypeDef</name></type> <name>stime</name> <init>= <expr><block>{<expr><literal type="number">0U</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check input parameters */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hrtc</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>sDate</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_FORMAT</name><argument_list>(<argument><expr><name>Format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_RTC_GetTime</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stime</name></expr></argument>, <argument><expr><name>RTC_FORMAT_BIN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Fill the structure fields with the read parameters */</comment>
  <expr_stmt><expr><name><name>sDate</name><operator>-&gt;</operator><name>WeekDay</name></name>  <operator>=</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>WeekDay</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sDate</name><operator>-&gt;</operator><name>Year</name></name>     <operator>=</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Year</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sDate</name><operator>-&gt;</operator><name>Month</name></name>    <operator>=</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Month</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sDate</name><operator>-&gt;</operator><name>Date</name></name>     <operator>=</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Date</name></name></expr>;</expr_stmt>

  <comment type="block">/* Check the input parameters format */</comment>
  <if_stmt><if>if <condition>(<expr><name>Format</name> <operator>!=</operator> <name>RTC_FORMAT_BIN</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Convert the date structure parameters to BCD format */</comment>
    <expr_stmt><expr><name><name>sDate</name><operator>-&gt;</operator><name>Year</name></name>   <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sDate</name><operator>-&gt;</operator><name>Month</name></name>  <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Month</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sDate</name><operator>-&gt;</operator><name>Date</name></name>   <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sDate</name><operator>-&gt;</operator><name>Date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RTC_Exported_Functions_Group3 Alarm functions
 *  @brief   RTC Alarm functions
 *
@verbatim
 ===============================================================================
                 ##### RTC Alarm functions #####
 ===============================================================================

 [..] This section provides functions allowing to configure Alarm feature

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Sets the specified RTC Alarm.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  sAlarm: Pointer to Alarm structure
  * @param  Format: Specifies the format of the entered parameters.
  *          This parameter can be one of the following values:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_SetAlarm</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>RTC_AlarmTypeDef</name> <modifier>*</modifier></type><name>sAlarm</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>counter_alarm</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>counter_time</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>RTC_TimeTypeDef</name></type> <name>stime</name> <init>= <expr><block>{<expr><literal type="number">0U</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check input parameters */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hrtc</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>sAlarm</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_FORMAT</name><argument_list>(<argument><expr><name>Format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>Alarm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_RTC_GetTime</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stime</name></expr></argument>, <argument><expr><name>RTC_FORMAT_BIN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Convert time in seconds */</comment>
  <expr_stmt><expr><name>counter_time</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>stime</name><operator>.</operator><name>Hours</name></name> <operator>*</operator> <literal type="number">3600U</literal><operator>)</operator> <operator>+</operator> \
                            <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>stime</name><operator>.</operator><name>Minutes</name></name> <operator>*</operator> <literal type="number">60U</literal><operator>)</operator> <operator>+</operator> \
                            <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>stime</name><operator>.</operator><name>Seconds</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>Format</name> <operator>==</operator> <name>RTC_FORMAT_BIN</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOUR24</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_MINUTES</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_SECONDS</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>counter_alarm</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name> <operator>*</operator> <literal type="number">3600U</literal><operator>)</operator> <operator>+</operator> \
                               <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name> <operator>*</operator> <literal type="number">60U</literal><operator>)</operator> <operator>+</operator> \
                               <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOUR24</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_MINUTES</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_SECONDS</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>counter_alarm</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">3600U</literal><operator>)</operator> <operator>+</operator> \
                     <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">60U</literal><operator>)</operator> <operator>+</operator> \
                     <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Check that requested alarm should expire in the same day (otherwise add 1 day) */</comment>
  <if_stmt><if>if <condition>(<expr><name>counter_alarm</name> <operator>&lt;</operator> <name>counter_time</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Add 1 day to alarm counter*/</comment>
    <expr_stmt><expr><name>counter_alarm</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">24U</literal> <operator>*</operator> <literal type="number">3600U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Write Alarm counter in RTC registers */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>RTC_WriteAlarmCounter</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>counter_alarm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set RTC state */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sets the specified RTC Alarm with Interrupt
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  sAlarm: Pointer to Alarm structure
  * @param  Format: Specifies the format of the entered parameters.
  *          This parameter can be one of the following values:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_SetAlarm_IT</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>RTC_AlarmTypeDef</name> <modifier>*</modifier></type><name>sAlarm</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>counter_alarm</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>counter_time</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>RTC_TimeTypeDef</name></type> <name>stime</name> <init>= <expr><block>{<expr><literal type="number">0U</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check input parameters */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hrtc</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>sAlarm</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_FORMAT</name><argument_list>(<argument><expr><name>Format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>Alarm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_RTC_GetTime</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stime</name></expr></argument>, <argument><expr><name>RTC_FORMAT_BIN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Convert time in seconds */</comment>
  <expr_stmt><expr><name>counter_time</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>stime</name><operator>.</operator><name>Hours</name></name> <operator>*</operator> <literal type="number">3600U</literal><operator>)</operator> <operator>+</operator> \
                            <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>stime</name><operator>.</operator><name>Minutes</name></name> <operator>*</operator> <literal type="number">60U</literal><operator>)</operator> <operator>+</operator> \
                            <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>stime</name><operator>.</operator><name>Seconds</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>Format</name> <operator>==</operator> <name>RTC_FORMAT_BIN</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOUR24</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_MINUTES</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_SECONDS</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>counter_alarm</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name> <operator>*</operator> <literal type="number">3600U</literal><operator>)</operator> <operator>+</operator> \
                               <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name> <operator>*</operator> <literal type="number">60U</literal><operator>)</operator> <operator>+</operator> \
                               <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_HOUR24</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_MINUTES</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_SECONDS</name><argument_list>(<argument><expr><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>counter_alarm</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">3600U</literal><operator>)</operator> <operator>+</operator> \
                     <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">60U</literal><operator>)</operator> <operator>+</operator> \
                     <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>RTC_Bcd2ToByte</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Check that requested alarm should expire in the same day (otherwise add 1 day) */</comment>
  <if_stmt><if>if <condition>(<expr><name>counter_alarm</name> <operator>&lt;</operator> <name>counter_time</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Add 1 day to alarm counter*/</comment>
    <expr_stmt><expr><name>counter_alarm</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">24U</literal> <operator>*</operator> <literal type="number">3600U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Write alarm counter in RTC registers */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>RTC_WriteAlarmCounter</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>counter_alarm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set RTC state */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Clear flag alarm A */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARM_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_ALRAF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the Alarm interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARM_ENABLE_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_IT_ALRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* RTC Alarm Interrupt Configuration: EXTI configuration */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARM_EXTI_ENABLE_IT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>__HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Gets the RTC Alarm value and masks.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  sAlarm: Pointer to Date structure
  * @param  Alarm: Specifies the Alarm.
  *          This parameter can be one of the following values:
  *             @arg RTC_ALARM_A: Alarm
  * @param  Format: Specifies the format of the entered parameters.
  *          This parameter can be one of the following values:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_GetAlarm</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>RTC_AlarmTypeDef</name> <modifier>*</modifier></type><name>sAlarm</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Alarm</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>counter_alarm</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>Alarm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check input parameters */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hrtc</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>sAlarm</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_FORMAT</name><argument_list>(<argument><expr><name>Format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM</name><argument_list>(<argument><expr><name>Alarm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Read Alarm counter in RTC registers */</comment>
  <expr_stmt><expr><name>counter_alarm</name> <operator>=</operator> <call><name>RTC_ReadAlarmCounter</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Fill the structure with the read parameters */</comment>
  <comment type="block">/* Set hours in a day range (between 0 to 24)*/</comment>
  <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name>   <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>counter_alarm</name> <operator>/</operator> <literal type="number">3600U</literal><operator>)</operator> <operator>%</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>counter_alarm</name> <operator>%</operator> <literal type="number">3600U</literal><operator>)</operator> <operator>/</operator> <literal type="number">60U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>counter_alarm</name> <operator>%</operator> <literal type="number">3600U</literal><operator>)</operator> <operator>%</operator> <literal type="number">60U</literal><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>Format</name> <operator>!=</operator> <name>RTC_FORMAT_BIN</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name>   <operator>=</operator> <call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Hours</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name> <operator>=</operator> <call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Minutes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name> <operator>=</operator> <call><name>RTC_ByteToBcd2</name><argument_list>(<argument><expr><name><name>sAlarm</name><operator>-&gt;</operator><name>AlarmTime</name><operator>.</operator><name>Seconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Deactive the specified RTC Alarm
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  Alarm: Specifies the Alarm.
  *          This parameter can be one of the following values:
  *            @arg RTC_ALARM_A:  AlarmA
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_DeactivateAlarm</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Alarm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>Alarm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RTC_ALARM</name><argument_list>(<argument><expr><name>Alarm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check input parameters */</comment>
  <if_stmt><if>if <condition>(<expr><name>hrtc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* In case of interrupt mode is used, the interrupt source must disabled */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_ALARM_DISABLE_IT</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_IT_ALRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set Initialization mode */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>RTC_EnterInitMode</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set RTC state */</comment>
    <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Clear flag alarm A */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARM_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_ALRAF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set to default values ALRH &amp; ALRL registers */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRH</name></name></expr></argument>, <argument><expr><name>RTC_ALARM_RESETVALUE_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRL</name></name></expr></argument>, <argument><expr><name>RTC_ALARM_RESETVALUE_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* RTC Alarm Interrupt Configuration: Disable EXTI configuration */</comment>
    <expr_stmt><expr><call><name>__HAL_RTC_ALARM_EXTI_DISABLE_IT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait for synchro */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>RTC_ExitInitMode</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_ERROR</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles Alarm interrupt request.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RTC_AlarmIRQHandler</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>__HAL_RTC_ALARM_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_IT_ALRA</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Get the status of the Interrupt */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_RTC_ALARM_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_ALRAF</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* AlarmA callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_RTC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hrtc</name><operator>-&gt;</operator><name>AlarmAEventCallback</name></name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_RTC_AlarmAEventCallback</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_RTC_REGISTER_CALLBACKS */</comment>

      <comment type="block">/* Clear the Alarm interrupt pending bit */</comment>
      <expr_stmt><expr><call><name>__HAL_RTC_ALARM_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_ALRAF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Clear the EXTI's line Flag for RTC Alarm */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_ALARM_EXTI_CLEAR_FLAG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Alarm A callback.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_RTC_AlarmAEventCallback</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles AlarmA Polling request.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_PollForAlarmAEvent</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check input parameters */</comment>
  <if_stmt><if>if <condition>(<expr><name>hrtc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><call><name>__HAL_RTC_ALARM_GET_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_ALRAF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_TIMEOUT</name></expr>;</expr_stmt>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Clear the Alarm interrupt pending bit */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_ALARM_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>, <argument><expr><name>RTC_FLAG_ALRAF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RTC state */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RTC_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RTC_Exported_Functions_Group4 Peripheral State functions
 *  @brief   Peripheral State functions
 *
@verbatim
 ===============================================================================
                     ##### Peripheral State functions #####
 ===============================================================================
    [..]
    This subsection provides functions allowing to
      (+) Get RTC state

@endverbatim
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @brief  Returns the RTC state.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL state
  */</comment>
<function><type><name>HAL_RTCStateTypeDef</name></type> <name>HAL_RTC_GetState</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hrtc</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RTC_Exported_Functions_Group5 Peripheral Control functions
 *  @brief   Peripheral Control functions
 *
@verbatim
 ===============================================================================
                     ##### Peripheral Control functions #####
 ===============================================================================
    [..]
    This subsection provides functions allowing to
      (+) Wait for RTC Time and Date Synchronization

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Waits until the RTC registers (RTC_CNT, RTC_ALR and RTC_PRL)
  *   are synchronized with RTC APB clock.
  * @note   This function must be called before any read operation after an APB reset
  *   or an APB clock stop.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RTC_WaitForSynchro</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check input parameters */</comment>
  <if_stmt><if>if <condition>(<expr><name>hrtc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Clear RSF flag */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CRL</name></name></expr></argument>, <argument><expr><name>RTC_FLAG_RSF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait the registers to be synchronised */</comment>
  <while>while <condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CRL</name></name> <operator>&amp;</operator> <name>RTC_FLAG_RSF</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator>  <name>RTC_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>


<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup RTC_Private_Functions
  * @{
  */</comment>


<comment type="block" format="doxygen">/**
  * @brief  Read the time counter available in RTC_CNT registers.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>RTC_ReadTimeCounter</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>high1</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>high2</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>low</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>timecounter</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>high1</name> <operator>=</operator> <call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CNTH</name></name> <operator>&amp;</operator> <name>RTC_CNTH_RTC_CNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>low</name>   <operator>=</operator> <call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CNTL</name></name> <operator>&amp;</operator> <name>RTC_CNTL_RTC_CNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>high2</name> <operator>=</operator> <call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CNTH</name></name> <operator>&amp;</operator> <name>RTC_CNTH_RTC_CNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>high1</name> <operator>!=</operator> <name>high2</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */</comment>
    <expr_stmt><expr><name>timecounter</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>high2</name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator> <call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CNTL</name></name> <operator>&amp;</operator> <name>RTC_CNTL_RTC_CNT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */</comment>
    <expr_stmt><expr><name>timecounter</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>high1</name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator> <name>low</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>timecounter</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Write the time counter in RTC_CNT registers.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>RTC_WriteTimeCounter</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>TimeCounter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Set Initialization mode */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>RTC_EnterInitMode</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Set RTC COUNTER MSB word */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CNTH</name></name></expr></argument>, <argument><expr><operator>(</operator><name>TimeCounter</name> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Set RTC COUNTER LSB word */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CNTL</name></name></expr></argument>, <argument><expr><operator>(</operator><name>TimeCounter</name> <operator>&amp;</operator> <name>RTC_CNTL_RTC_CNT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait for synchro */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>RTC_ExitInitMode</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Read the time counter available in RTC_ALR registers.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>RTC_ReadAlarmCounter</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>high1</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>low</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>high1</name> <operator>=</operator> <call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRH</name></name> <operator>&amp;</operator> <name>RTC_CNTH_RTC_CNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>low</name>   <operator>=</operator> <call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRL</name></name> <operator>&amp;</operator> <name>RTC_CNTL_RTC_CNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>high1</name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator> <name>low</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Write the time counter in RTC_ALR registers.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>RTC_WriteAlarmCounter</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>AlarmCounter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Set Initialization mode */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>RTC_EnterInitMode</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Set RTC COUNTER MSB word */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRH</name></name></expr></argument>, <argument><expr><operator>(</operator><name>AlarmCounter</name> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Set RTC COUNTER LSB word */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ALRL</name></name></expr></argument>, <argument><expr><operator>(</operator><name>AlarmCounter</name> <operator>&amp;</operator> <name>RTC_ALRL_RTC_ALR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait for synchro */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>RTC_ExitInitMode</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enters the RTC Initialization mode.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>RTC_EnterInitMode</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Wait till RTC is in INIT state and if Time out is reached exit */</comment>
  <while>while <condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CRL</name></name> <operator>&amp;</operator> <name>RTC_CRL_RTOFF</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator>  <name>RTC_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_DISABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>RTC_ExitInitMode</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Disable the write protection for RTC registers */</comment>
  <expr_stmt><expr><call><name>__HAL_RTC_WRITEPROTECTION_ENABLE</name><argument_list>(<argument><expr><name>hrtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Wait till RTC is in INIT state and if Time out is reached exit */</comment>
  <while>while <condition>(<expr><operator>(</operator><name><name>hrtc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CRL</name></name> <operator>&amp;</operator> <name>RTC_CRL_RTOFF</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator>  <name>RTC_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */</comment>
<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>RTC_ByteToBcd2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>Value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>bcdhigh</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>Value</name> <operator>&gt;=</operator> <literal type="number">10U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>bcdhigh</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>Value</name> <operator>-=</operator> <literal type="number">10U</literal></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>bcdhigh</name> <operator>&lt;&lt;</operator> <literal type="number">4U</literal><operator>)</operator> <operator>|</operator> <name>Value</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */</comment>
<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>RTC_Bcd2ToByte</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>Value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>Value</name> <operator>&amp;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xF0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x4</literal><operator>)</operator> <operator>*</operator> <literal type="number">10U</literal></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>tmp</name> <operator>+</operator> <operator>(</operator><name>Value</name> <operator>&amp;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x0F</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Updates date when time is 23:59:59.
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>RTC_DateUpdate</name><parameter_list>(<parameter><decl><type><name>RTC_HandleTypeDef</name> <modifier>*</modifier></type><name>hrtc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DayElapsed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>year</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>month</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>day</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>loop</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Get the current year*/</comment>
  <expr_stmt><expr><name>year</name> <operator>=</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Year</name></name></expr>;</expr_stmt>

  <comment type="block">/* Get the current month and day */</comment>
  <expr_stmt><expr><name>month</name> <operator>=</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Month</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>day</name> <operator>=</operator> <name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Date</name></name></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>loop</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>loop</name> <operator>&lt;</operator> <name>DayElapsed</name></expr>;</condition> <incr><expr><name>loop</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>month</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>month</name> <operator>==</operator> <literal type="number">3U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>month</name> <operator>==</operator> <literal type="number">5U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>month</name> <operator>==</operator> <literal type="number">7U</literal><operator>)</operator> <operator>||</operator> \
        <operator>(</operator><name>month</name> <operator>==</operator> <literal type="number">8U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>month</name> <operator>==</operator> <literal type="number">10U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>month</name> <operator>==</operator> <literal type="number">12U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>day</name> <operator>&lt;</operator> <literal type="number">31U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>day</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if>
      <comment type="block">/* Date structure member: day = 31 */</comment>
      <else>else
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>month</name> <operator>!=</operator> <literal type="number">12U</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name>month</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>day</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="block">/* Date structure member: day = 31 &amp; month =12 */</comment>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><name>month</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>day</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>year</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>month</name> <operator>==</operator> <literal type="number">4U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>month</name> <operator>==</operator> <literal type="number">6U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>month</name> <operator>==</operator> <literal type="number">9U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>month</name> <operator>==</operator> <literal type="number">11U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>day</name> <operator>&lt;</operator> <literal type="number">30U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>day</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if>
      <comment type="block">/* Date structure member: day = 30 */</comment>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><name>month</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>day</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>month</name> <operator>==</operator> <literal type="number">2U</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>day</name> <operator>&lt;</operator> <literal type="number">28U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>day</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>day</name> <operator>==</operator> <literal type="number">28U</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Leap year */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>RTC_IsLeapYear</name><argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name>day</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><name>month</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>day</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>day</name> <operator>==</operator> <literal type="number">29U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>month</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>day</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Update year */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Year</name></name> <operator>=</operator> <name>year</name></expr>;</expr_stmt>

  <comment type="block">/* Update day and month */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Month</name></name> <operator>=</operator> <name>month</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>Date</name></name> <operator>=</operator> <name>day</name></expr>;</expr_stmt>

  <comment type="block">/* Update day of the week */</comment>
  <expr_stmt><expr><name><name>hrtc</name><operator>-&gt;</operator><name>DateToUpdate</name><operator>.</operator><name>WeekDay</name></name> <operator>=</operator> <call><name>RTC_WeekDayNum</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Check whether the passed year is Leap or not.
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */</comment>
<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>RTC_IsLeapYear</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>nYear</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>nYear</name> <operator>%</operator> <literal type="number">4U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><literal type="number">0U</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>nYear</name> <operator>%</operator> <literal type="number">100U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><literal type="number">1U</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>nYear</name> <operator>%</operator> <literal type="number">400U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><literal type="number">1U</literal></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><literal type="number">0U</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Determines the week number, the day number and the week day number.
  * @param  nYear   year to check
  * @param  nMonth  Month to check
  * @param  nDay    Day to check
  * @note   Day is calculated with hypothesis that year &gt; 2000
  * @retval Value which can take one of the following parameters:
  *         @arg RTC_WEEKDAY_MONDAY
  *         @arg RTC_WEEKDAY_TUESDAY
  *         @arg RTC_WEEKDAY_WEDNESDAY
  *         @arg RTC_WEEKDAY_THURSDAY
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */</comment>
<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>RTC_WeekDayNum</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>nYear</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>nMonth</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>nDay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>year</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>weekday</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>year</name> <operator>=</operator> <literal type="number">2000U</literal> <operator>+</operator> <name>nYear</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>nMonth</name> <operator>&lt;</operator> <literal type="number">3U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/</comment>
    <expr_stmt><expr><name>weekday</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">23U</literal> <operator>*</operator> <name>nMonth</name><operator>)</operator> <operator>/</operator> <literal type="number">9U</literal><operator>)</operator> <operator>+</operator> <name>nDay</name> <operator>+</operator> <literal type="number">4U</literal> <operator>+</operator> <name>year</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>year</name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>/</operator> <literal type="number">4U</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>year</name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>/</operator> <literal type="number">100U</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>year</name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>/</operator> <literal type="number">400U</literal><operator>)</operator><operator>)</operator> <operator>%</operator> <literal type="number">7U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/</comment>
    <expr_stmt><expr><name>weekday</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">23U</literal> <operator>*</operator> <name>nMonth</name><operator>)</operator> <operator>/</operator> <literal type="number">9U</literal><operator>)</operator> <operator>+</operator> <name>nDay</name> <operator>+</operator> <literal type="number">4U</literal> <operator>+</operator> <name>year</name> <operator>+</operator> <operator>(</operator><name>year</name> <operator>/</operator> <literal type="number">4U</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>year</name> <operator>/</operator> <literal type="number">100U</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>year</name> <operator>/</operator> <literal type="number">400U</literal><operator>)</operator> <operator>-</operator> <literal type="number">2U</literal><operator>)</operator> <operator>%</operator> <literal type="number">7U</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>weekday</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_RTC_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
