<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f103ve/libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_nor.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f1xx_hal_nor.c
  * @author  MCD Application Team
  * @brief   NOR HAL module driver.
  *          This file provides a generic firmware to drive NOR memories mounted
  *          as external device.
  *
  @verbatim
  ==============================================================================
                     ##### How to use this driver #####
  ==============================================================================
    [..]
      This driver is a generic layered driver which contains a set of APIs used to
      control NOR flash memories. It uses the FSMC layer functions to interface
      with NOR devices. This driver is used as follows:

      (+) NOR flash memory configuration sequence using the function HAL_NOR_Init()
          with control and timing parameters for both normal and extended mode.

      (+) Read NOR flash memory manufacturer code and device IDs using the function
          HAL_NOR_Read_ID(). The read information is stored in the NOR_ID_TypeDef
          structure declared by the function caller.

      (+) Access NOR flash memory by read/write data unit operations using the functions
          HAL_NOR_Read(), HAL_NOR_Program().

      (+) Perform NOR flash erase block/chip operations using the functions
          HAL_NOR_Erase_Block() and HAL_NOR_Erase_Chip().

      (+) Read the NOR flash CFI (common flash interface) IDs using the function
          HAL_NOR_Read_CFI(). The read information is stored in the NOR_CFI_TypeDef
          structure declared by the function caller.

      (+) You can also control the NOR device by calling the control APIs HAL_NOR_WriteOperation_Enable()/
          HAL_NOR_WriteOperation_Disable() to respectively enable/disable the NOR write operation

      (+) You can monitor the NOR device HAL state by calling the function
          HAL_NOR_GetState()
    [..]
     (@) This driver is a set of generic APIs which handle standard NOR flash operations.
         If a NOR flash device contains different operations and/or implementations,
         it should be implemented separately.

     *** NOR HAL driver macros list ***
     =============================================
     [..]
       Below the list of most used macros in NOR HAL driver.

      (+) NOR_WRITE : NOR memory write data to specified address

    *** Callback registration ***
    =============================================
    [..]
      The compilation define  USE_HAL_NOR_REGISTER_CALLBACKS when set to 1
      allows the user to configure dynamically the driver callbacks.

      Use Functions @ref HAL_NOR_RegisterCallback() to register a user callback,
      it allows to register following callbacks:
        (+) MspInitCallback    : NOR MspInit.
        (+) MspDeInitCallback  : NOR MspDeInit.
      This function takes as parameters the HAL peripheral handle, the Callback ID
      and a pointer to the user callback function.

      Use function @ref HAL_NOR_UnRegisterCallback() to reset a callback to the default
      weak (surcharged) function. It allows to reset following callbacks:
        (+) MspInitCallback    : NOR MspInit.
        (+) MspDeInitCallback  : NOR MspDeInit.
      This function) takes as parameters the HAL peripheral handle and the Callback ID.

      By default, after the @ref HAL_NOR_Init and if the state is HAL_NOR_STATE_RESET
      all callbacks are reset to the corresponding legacy weak (surcharged) functions.
      Exception done for MspInit and MspDeInit callbacks that are respectively
      reset to the legacy weak (surcharged) functions in the @ref HAL_NOR_Init
      and @ref  HAL_NOR_DeInit only when these callbacks are null (not registered beforehand).
      If not, MspInit or MspDeInit are not null, the @ref HAL_NOR_Init and @ref HAL_NOR_DeInit
      keep and use the user MspInit/MspDeInit callbacks (registered beforehand)

      Callbacks can be registered/unregistered in READY state only.
      Exception done for MspInit/MspDeInit callbacks that can be registered/unregistered
      in READY or RESET state, thus registered (user) MspInit/DeInit callbacks can be used
      during the Init/DeInit.
      In that case first register the MspInit/MspDeInit user callbacks
      using @ref HAL_NOR_RegisterCallback before calling @ref HAL_NOR_DeInit
      or @ref HAL_NOR_Init function.

      When The compilation define USE_HAL_NOR_REGISTER_CALLBACKS is set to 0 or
      not defined, the callback registering feature is not available
      and weak (surcharged) callbacks are used.

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                       opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f1xx_hal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>FSMC_BANK1</name></expr></cpp:if>

<comment type="block" format="doxygen">/** @addtogroup STM32F1xx_HAL_Driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_NOR_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block" format="doxygen">/** @defgroup NOR NOR
  * @brief NOR driver modules
  * @{
  */</comment>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup NOR_Private_Defines NOR Private Defines
  * @{
  */</comment>

<comment type="block">/* Constants to define address to set to write a command */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_ADDRESS_FIRST</name></cpp:macro>                 <cpp:value>(uint16_t)0x0555</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_ADDRESS_FIRST_CFI</name></cpp:macro>             <cpp:value>(uint16_t)0x0055</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_ADDRESS_SECOND</name></cpp:macro>                <cpp:value>(uint16_t)0x02AA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_ADDRESS_THIRD</name></cpp:macro>                 <cpp:value>(uint16_t)0x0555</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_ADDRESS_FOURTH</name></cpp:macro>                <cpp:value>(uint16_t)0x0555</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_ADDRESS_FIFTH</name></cpp:macro>                 <cpp:value>(uint16_t)0x02AA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_ADDRESS_SIXTH</name></cpp:macro>                 <cpp:value>(uint16_t)0x0555</cpp:value></cpp:define>

<comment type="block">/* Constants to define data to program a command */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_DATA_READ_RESET</name></cpp:macro>               <cpp:value>(uint16_t)0x00F0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_DATA_FIRST</name></cpp:macro>                    <cpp:value>(uint16_t)0x00AA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_DATA_SECOND</name></cpp:macro>                   <cpp:value>(uint16_t)0x0055</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_DATA_AUTO_SELECT</name></cpp:macro>              <cpp:value>(uint16_t)0x0090</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_DATA_PROGRAM</name></cpp:macro>                  <cpp:value>(uint16_t)0x00A0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_DATA_CHIP_BLOCK_ERASE_THIRD</name></cpp:macro>   <cpp:value>(uint16_t)0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_DATA_CHIP_BLOCK_ERASE_FOURTH</name></cpp:macro>  <cpp:value>(uint16_t)0x00AA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_DATA_CHIP_BLOCK_ERASE_FIFTH</name></cpp:macro>   <cpp:value>(uint16_t)0x0055</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_DATA_CHIP_ERASE</name></cpp:macro>               <cpp:value>(uint16_t)0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_DATA_CFI</name></cpp:macro>                      <cpp:value>(uint16_t)0x0098</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_DATA_BUFFER_AND_PROG</name></cpp:macro>          <cpp:value>(uint8_t)0x25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_DATA_BUFFER_AND_PROG_CONFIRM</name></cpp:macro>  <cpp:value>(uint8_t)0x29</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_CMD_DATA_BLOCK_ERASE</name></cpp:macro>              <cpp:value>(uint8_t)0x30</cpp:value></cpp:define>

<comment type="block">/* Mask on NOR STATUS REGISTER */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_MASK_STATUS_DQ5</name></cpp:macro>                   <cpp:value>(uint16_t)0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR_MASK_STATUS_DQ6</name></cpp:macro>                   <cpp:value>(uint16_t)0x0040</cpp:value></cpp:define>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup NOR_Private_Variables NOR Private Variables
  * @{
  */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>uwNORMemoryDataWidth</name>  <init>= <expr><name>NOR_MEMORY_8B</name></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>
<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup NOR_Exported_Functions NOR Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup NOR_Exported_Functions_Group1 Initialization and de-initialization functions
  * @brief    Initialization and Configuration functions
  *
  @verbatim
  ==============================================================================
           ##### NOR Initialization and de_initialization functions #####
  ==============================================================================
  [..]
    This section provides functions allowing to initialize/de-initialize
    the NOR memory

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Perform the NOR memory Initialization sequence
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @param  Timing pointer to NOR control timing structure
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_NOR_Init</name><parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>, <parameter><decl><type><name>FSMC_NORSRAM_TimingTypeDef</name> <modifier>*</modifier></type><name>Timing</name></decl></parameter>, <parameter><decl><type><name>FSMC_NORSRAM_TimingTypeDef</name> <modifier>*</modifier></type><name>ExtTiming</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the NOR handle parameter */</comment>
  <if_stmt><if>if <condition>(<expr><name>hnor</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_NOR_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_NOR_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <if_stmt><if>if<condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_NOR_MspInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>hnor</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Initialize the low level hardware (MSP) */</comment>
    <expr_stmt><expr><call><name>HAL_NOR_MspInit</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (USE_HAL_NOR_REGISTER_CALLBACKS) */</comment>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Initialize NOR control Interface */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>FSMC_NORSRAM_Init</name><argument_list>(<argument><expr><name><name>hnor</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>hnor</name><operator>-&gt;</operator><name>Init</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize NOR timing Interface */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>FSMC_NORSRAM_Timing_Init</name><argument_list>(<argument><expr><name><name>hnor</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Timing</name></expr></argument>, <argument><expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize NOR extended mode timing Interface */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>FSMC_NORSRAM_Extended_Timing_Init</name><argument_list>(<argument><expr><name><name>hnor</name><operator>-&gt;</operator><name>Extended</name></name></expr></argument>, <argument><expr><name>ExtTiming</name></expr></argument>, <argument><expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name></expr></argument>, <argument><expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ExtendedMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the NORSRAM device */</comment>
  <expr_stmt><expr><call><name>__FSMC_NORSRAM_ENABLE</name><argument_list>(<argument><expr><name><name>hnor</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize NOR Memory Data Width*/</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>MemoryDataWidth</name></name> <operator>==</operator> <name>FSMC_NORSRAM_MEM_BUS_WIDTH_8</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>uwNORMemoryDataWidth</name> <operator>=</operator> <name>NOR_MEMORY_8B</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>uwNORMemoryDataWidth</name> <operator>=</operator> <name>NOR_MEMORY_16B</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Initialize the NOR controller state */</comment>
  <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_NOR_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Perform NOR memory De-Initialization sequence
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_NOR_DeInit</name><parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_NOR_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_NOR_MspDeInit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name><name>hnor</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* De-Initialize the low level hardware (MSP) */</comment>
  <expr_stmt><expr><call><name>HAL_NOR_MspDeInit</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (USE_HAL_NOR_REGISTER_CALLBACKS) */</comment>

  <comment type="block">/* Configure the NOR registers with their reset values */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>FSMC_NORSRAM_DeInit</name><argument_list>(<argument><expr><name><name>hnor</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name><name>hnor</name><operator>-&gt;</operator><name>Extended</name></name></expr></argument>, <argument><expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Reset the NOR controller state */</comment>
  <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_NOR_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  NOR MSP Init
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_NOR_MspInit</name><parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NOR_MspInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  NOR MSP DeInit
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_NOR_MspDeInit</name><parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NOR_MspDeInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  NOR MSP Wait for Ready/Busy signal
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @param  Timeout Maximum timeout value
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_NOR_MspWait</name><parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NOR_MspWait could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup NOR_Exported_Functions_Group2 Input and Output functions
  * @brief    Input Output and memory control functions
  *
  @verbatim
  ==============================================================================
                ##### NOR Input and Output functions #####
  ==============================================================================
  [..]
    This section provides functions allowing to use and control the NOR memory

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Read NOR flash IDs
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @param  pNOR_ID  pointer to NOR ID structure
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_NOR_Read_ID</name><parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>, <parameter><decl><type><name>NOR_IDTypeDef</name> <modifier>*</modifier></type><name>pNOR_ID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>deviceaddress</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_NOR_StateTypeDef</name></type> <name>state</name></decl>;</decl_stmt>

  <comment type="block">/* Check the NOR controller state */</comment>
  <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>hnor</name><operator>-&gt;</operator><name>State</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_READY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_PROTECTED</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_NOR_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Select the NOR device address */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK1</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS1</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK2</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS2</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK3</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS3</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="block">/* FSMC_NORSRAM_BANK4 */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS4</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Send read ID command */</comment>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_FIRST</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_SECOND</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_SECOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_THIRD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_AUTO_SELECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Read the NOR IDs */</comment>
    <expr_stmt><expr><name><name>pNOR_ID</name><operator>-&gt;</operator><name>Manufacturer_Code</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>MC_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNOR_ID</name><operator>-&gt;</operator><name>Device_Code1</name></name>      <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>DEVICE_CODE1_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNOR_ID</name><operator>-&gt;</operator><name>Device_Code2</name></name>      <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>DEVICE_CODE2_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNOR_ID</name><operator>-&gt;</operator><name>Device_Code3</name></name>      <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>DEVICE_CODE3_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns the NOR memory to Read mode.
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_NOR_ReturnToReadMode</name><parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>deviceaddress</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_NOR_StateTypeDef</name></type> <name>state</name></decl>;</decl_stmt>

  <comment type="block">/* Check the NOR controller state */</comment>
  <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>hnor</name><operator>-&gt;</operator><name>State</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_READY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_PROTECTED</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_NOR_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Select the NOR device address */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK1</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS1</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK2</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS2</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK3</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS3</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="block">/* FSMC_NORSRAM_BANK4 */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS4</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>NOR_CMD_DATA_READ_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Read data from NOR memory
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @param  pAddress pointer to Device address
  * @param  pData  pointer to read data
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_NOR_Read</name><parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>deviceaddress</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_NOR_StateTypeDef</name></type> <name>state</name></decl>;</decl_stmt>

  <comment type="block">/* Check the NOR controller state */</comment>
  <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>hnor</name><operator>-&gt;</operator><name>State</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_READY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_PROTECTED</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_NOR_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Select the NOR device address */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK1</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS1</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK2</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS2</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK3</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS3</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="block">/* FSMC_NORSRAM_BANK4 */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS4</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Send read data command */</comment>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_FIRST</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_SECOND</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_SECOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_THIRD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_READ_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Read the data */</comment>
    <expr_stmt><expr><operator>*</operator><name>pData</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>pAddress</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Check the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Program data to NOR memory
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @param  pAddress Device address
  * @param  pData  pointer to the data to write
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_NOR_Program</name><parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>deviceaddress</name></decl>;</decl_stmt>

  <comment type="block">/* Check the NOR controller state */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_NOR_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_NOR_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_NOR_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Select the NOR device address */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK1</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS1</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK2</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS2</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK3</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS3</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="block">/* FSMC_NORSRAM_BANK4 */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS4</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Send program data command */</comment>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_FIRST</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_SECOND</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_SECOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_THIRD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_PROGRAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Write the data */</comment>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><name>pAddress</name></expr></argument>, <argument><expr><operator>*</operator><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_NOR_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Reads a half-word buffer from the NOR memory.
  * @param  hnor pointer to the NOR handle
  * @param  uwAddress NOR memory internal address to read from.
  * @param  pData pointer to the buffer that receives the data read from the
  *         NOR memory.
  * @param  uwBufferSize  number of Half word to read.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_NOR_ReadBuffer</name><parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>uwAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>uwBufferSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>deviceaddress</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><name>uwBufferSize</name></expr></init></decl>, <decl><type ref="prev"/><name>address</name> <init>= <expr><name>uwAddress</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>pData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_NOR_StateTypeDef</name></type> <name>state</name></decl>;</decl_stmt>

  <comment type="block">/* Check the NOR controller state */</comment>
  <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>hnor</name><operator>-&gt;</operator><name>State</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_READY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_PROTECTED</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_NOR_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Select the NOR device address */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK1</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS1</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK2</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS2</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK3</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS3</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="block">/* FSMC_NORSRAM_BANK4 */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS4</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Send read data command */</comment>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_FIRST</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_SECOND</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_SECOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_THIRD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_READ_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Read buffer */</comment>
    <while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>address</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>address</name> <operator>+=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Check the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Writes a half-word buffer to the NOR memory. This function must be used
            only with S29GL128P NOR memory.
  * @param  hnor pointer to the NOR handle
  * @param  uwAddress NOR memory internal start write address
  * @param  pData pointer to source data buffer.
  * @param  uwBufferSize Size of the buffer to write
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_NOR_ProgramBuffer</name><parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>uwAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>uwBufferSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_currentaddress</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>p_endaddress</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>pData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>lastloadedaddress</name></decl>, <decl><type ref="prev"/><name>deviceaddress</name></decl>;</decl_stmt>

  <comment type="block">/* Check the NOR controller state */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_NOR_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_NOR_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_NOR_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Select the NOR device address */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK1</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS1</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK2</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS2</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK3</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS3</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="block">/* FSMC_NORSRAM_BANK4 */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS4</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Initialize variables */</comment>
    <expr_stmt><expr><name>p_currentaddress</name>  <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uwAddress</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>p_endaddress</name>      <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uwAddress</name> <operator>+</operator> <operator>(</operator><name>uwBufferSize</name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>lastloadedaddress</name> <operator>=</operator> <name>uwAddress</name></expr>;</expr_stmt>

    <comment type="block">/* Issue unlock command sequence */</comment>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_FIRST</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_SECOND</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_SECOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Write Buffer Load Command */</comment>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>uwAddress</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_BUFFER_AND_PROG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>uwAddress</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>uwBufferSize</name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Load Data into NOR Buffer */</comment>
    <while>while <condition>(<expr><name>p_currentaddress</name> <operator>&lt;=</operator> <name>p_endaddress</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Store last loaded address &amp; data value (for polling) */</comment>
      <expr_stmt><expr><name>lastloadedaddress</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>p_currentaddress</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><name>p_currentaddress</name></expr></argument>, <argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>p_currentaddress</name> <operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>lastloadedaddress</name><operator>)</operator></expr></argument>, <argument><expr><name>NOR_CMD_DATA_BUFFER_AND_PROG_CONFIRM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_NOR_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>

</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Erase the specified block of the NOR memory
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @param  BlockAddress  Block to erase address
  * @param  Address Device address
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_NOR_Erase_Block</name><parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BlockAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>deviceaddress</name></decl>;</decl_stmt>

  <comment type="block">/* Check the NOR controller state */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_NOR_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_NOR_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_NOR_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Select the NOR device address */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK1</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS1</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK2</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS2</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK3</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS3</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="block">/* FSMC_NORSRAM_BANK4 */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS4</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Send block erase command sequence */</comment>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_FIRST</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_SECOND</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_SECOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_THIRD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_CHIP_BLOCK_ERASE_THIRD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_FOURTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_CHIP_BLOCK_ERASE_FOURTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_FIFTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_CHIP_BLOCK_ERASE_FIFTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>BlockAddress</name> <operator>+</operator> <name>Address</name><operator>)</operator></expr></argument>, <argument><expr><name>NOR_CMD_DATA_BLOCK_ERASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check the NOR memory status and update the controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_NOR_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>

</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Erase the entire NOR chip.
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @param  Address  Device address
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_NOR_Erase_Chip</name><parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>deviceaddress</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>Address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the NOR controller state */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_NOR_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_NOR_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_NOR_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Select the NOR device address */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK1</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS1</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK2</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS2</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK3</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS3</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="block">/* FSMC_NORSRAM_BANK4 */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS4</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Send NOR chip erase command sequence */</comment>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_FIRST</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_SECOND</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_SECOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_THIRD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_CHIP_BLOCK_ERASE_THIRD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_FOURTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_CHIP_BLOCK_ERASE_FOURTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_FIFTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_CHIP_BLOCK_ERASE_FIFTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_SIXTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_CHIP_ERASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check the NOR memory status and update the controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_NOR_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Read NOR flash CFI IDs
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @param  pNOR_CFI  pointer to NOR CFI IDs structure
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_NOR_Read_CFI</name><parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>, <parameter><decl><type><name>NOR_CFITypeDef</name> <modifier>*</modifier></type><name>pNOR_CFI</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>deviceaddress</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_NOR_StateTypeDef</name></type> <name>state</name></decl>;</decl_stmt>

  <comment type="block">/* Check the NOR controller state */</comment>
  <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>hnor</name><operator>-&gt;</operator><name>State</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_READY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_PROTECTED</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_NOR_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Select the NOR device address */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK1</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS1</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK2</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS2</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name> <operator>==</operator> <name>FSMC_NORSRAM_BANK3</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS3</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="block">/* FSMC_NORSRAM_BANK4 */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name>deviceaddress</name> <operator>=</operator> <name>NOR_MEMORY_ADRESS4</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Send read CFI query command */</comment>
    <expr_stmt><expr><call><name>NOR_WRITE</name><argument_list>(<argument><expr><call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>NOR_CMD_ADDRESS_FIRST_CFI</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NOR_CMD_DATA_CFI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* read the NOR CFI information */</comment>
    <expr_stmt><expr><name><name>pNOR_CFI</name><operator>-&gt;</operator><name>CFI_1</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>CFI1_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNOR_CFI</name><operator>-&gt;</operator><name>CFI_2</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>CFI2_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNOR_CFI</name><operator>-&gt;</operator><name>CFI_3</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>CFI3_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNOR_CFI</name><operator>-&gt;</operator><name>CFI_4</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <call><name>NOR_ADDR_SHIFT</name><argument_list>(<argument><expr><name>deviceaddress</name></expr></argument>, <argument><expr><name>uwNORMemoryDataWidth</name></expr></argument>, <argument><expr><name>CFI4_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_NOR_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User NOR Callback
  *         To be used instead of the weak (surcharged) predefined callback
  * @param hnor : NOR handle
  * @param CallbackId : ID of the callback to be registered
  *        This parameter can be one of the following values:
  *          @arg @ref HAL_NOR_MSP_INIT_CB_ID       NOR MspInit callback ID
  *          @arg @ref HAL_NOR_MSP_DEINIT_CB_ID     NOR MspDeInit callback ID
  * @param pCallback : pointer to the Callback function
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_NOR_RegisterCallback</name> <parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>, <parameter><decl><type><name>HAL_NOR_CallbackIDTypeDef</name></type> <name>CallbackId</name></decl></parameter>, <parameter><decl><type><name>pNOR_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_NOR_StateTypeDef</name></type> <name>state</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>hnor</name><operator>-&gt;</operator><name>State</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_READY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_RESET</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_PROTECTED</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackId</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_NOR_MSP_INIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_NOR_MSP_DEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister a User NOR Callback
  *         NOR Callback is redirected to the weak (surcharged) predefined callback
  * @param hnor : NOR handle
  * @param CallbackId : ID of the callback to be unregistered
  *        This parameter can be one of the following values:
  *          @arg @ref HAL_NOR_MSP_INIT_CB_ID       NOR MspInit callback ID
  *          @arg @ref HAL_NOR_MSP_DEINIT_CB_ID     NOR MspDeInit callback ID
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_NOR_UnRegisterCallback</name> <parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>, <parameter><decl><type><name>HAL_NOR_CallbackIDTypeDef</name></type> <name>CallbackId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_NOR_StateTypeDef</name></type> <name>state</name></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>hnor</name><operator>-&gt;</operator><name>State</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_READY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_RESET</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_NOR_STATE_PROTECTED</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackId</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_NOR_MSP_INIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_NOR_MspInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_NOR_MSP_DEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_NOR_MspDeInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (USE_HAL_NOR_REGISTER_CALLBACKS) */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup NOR_Exported_Functions_Group3 NOR Control functions
 *  @brief   management functions
 *
@verbatim
  ==============================================================================
                        ##### NOR Control functions #####
  ==============================================================================
  [..]
    This subsection provides a set of functions allowing to control dynamically
    the NOR interface.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Enables dynamically NOR write operation.
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_NOR_WriteOperation_Enable</name><parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the NOR controller state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_NOR_STATE_PROTECTED</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_NOR_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Enable write operation */</comment>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>FSMC_NORSRAM_WriteOperation_Enable</name><argument_list>(<argument><expr><name><name>hnor</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_NOR_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disables dynamically NOR write operation.
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_NOR_WriteOperation_Disable</name><parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the NOR controller state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_NOR_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_NOR_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Disable write operation */</comment>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>FSMC_NORSRAM_WriteOperation_Disable</name><argument_list>(<argument><expr><name><name>hnor</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name><name>hnor</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update the NOR controller state */</comment>
    <expr_stmt><expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_NOR_STATE_PROTECTED</name></expr>;</expr_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup NOR_Exported_Functions_Group4 NOR State functions
 *  @brief   Peripheral State functions
 *
@verbatim
  ==============================================================================
                      ##### NOR State functions #####
  ==============================================================================
  [..]
    This subsection permits to get in run-time the status of the NOR controller
    and the data flow.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  return the NOR controller state
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval NOR controller state
  */</comment>
<function><type><name>HAL_NOR_StateTypeDef</name></type> <name>HAL_NOR_GetState</name><parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hnor</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns the NOR operation status.
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @param  Address Device address
  * @param  Timeout NOR programming Timeout
  * @retval NOR_Status The returned value can be: HAL_NOR_STATUS_SUCCESS, HAL_NOR_STATUS_ERROR
  *         or HAL_NOR_STATUS_TIMEOUT
  */</comment>
<function><type><name>HAL_NOR_StatusTypeDef</name></type> <name>HAL_NOR_GetStatus</name><parameter_list>(<parameter><decl><type><name>NOR_HandleTypeDef</name> <modifier>*</modifier></type><name>hnor</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Address</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_NOR_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_NOR_STATUS_ONGOING</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>tmpSR1</name></decl>, <decl><type ref="prev"/><name>tmpSR2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <comment type="block">/* Poll on NOR memory Ready/Busy signal ------------------------------------*/</comment>
  <expr_stmt><expr><call><name>HAL_NOR_MspWait</name><argument_list>(<argument><expr><name>hnor</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the NOR memory operation status -------------------------------------*/</comment>

  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>status</name> <operator>!=</operator> <name>HAL_NOR_STATUS_SUCCESS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>status</name> <operator>!=</operator> <name>HAL_NOR_STATUS_TIMEOUT</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if <condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_NOR_STATUS_TIMEOUT</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Read NOR status register (DQ6 and DQ5) */</comment>
    <expr_stmt><expr><name>tmpSR1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>Address</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmpSR2</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>Address</name></expr>;</expr_stmt>

    <comment type="block">/* If DQ6 did not toggle between the two reads then return HAL_NOR_STATUS_SUCCESS  */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpSR1</name> <operator>&amp;</operator> <name>NOR_MASK_STATUS_DQ6</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>tmpSR2</name> <operator>&amp;</operator> <name>NOR_MASK_STATUS_DQ6</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_NOR_STATUS_SUCCESS</name></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpSR1</name> <operator>&amp;</operator> <name>NOR_MASK_STATUS_DQ5</name><operator>)</operator> <operator>==</operator> <name>NOR_MASK_STATUS_DQ5</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_NOR_STATUS_ONGOING</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>tmpSR1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>Address</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmpSR2</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>Address</name></expr>;</expr_stmt>

    <comment type="block">/* If DQ6 did not toggle between the two reads then return HAL_NOR_STATUS_SUCCESS  */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpSR1</name> <operator>&amp;</operator> <name>NOR_MASK_STATUS_DQ6</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>tmpSR2</name> <operator>&amp;</operator> <name>NOR_MASK_STATUS_DQ6</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_NOR_STATUS_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpSR1</name> <operator>&amp;</operator> <name>NOR_MASK_STATUS_DQ5</name><operator>)</operator> <operator>==</operator> <name>NOR_MASK_STATUS_DQ5</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_NOR_STATUS_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Return the operation status */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_NOR_MODULE_ENABLED */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FSMC_BANK1 */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
