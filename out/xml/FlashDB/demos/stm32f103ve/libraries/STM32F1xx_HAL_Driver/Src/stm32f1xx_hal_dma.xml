<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f103ve/libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f1xx_hal_dma.c
  * @author  MCD Application Team
  * @brief   DMA HAL module driver.
  *         This file provides firmware functions to manage the following
  *         functionalities of the Direct Memory Access (DMA) peripheral:
  *           + Initialization and de-initialization functions
  *           + IO operation functions
  *           + Peripheral State and errors functions
  @verbatim
  ==============================================================================
                        ##### How to use this driver #####
  ==============================================================================
  [..]
   (#) Enable and configure the peripheral to be connected to the DMA Channel
       (except for internal SRAM / FLASH memories: no initialization is 
       necessary). Please refer to the Reference manual for connection between peripherals
       and DMA requests.

   (#) For a given Channel, program the required configuration through the following parameters:
       Channel request, Transfer Direction, Source and Destination data formats,
       Circular or Normal mode, Channel Priority level, Source and Destination Increment mode
       using HAL_DMA_Init() function.

   (#) Use HAL_DMA_GetState() function to return the DMA state and HAL_DMA_GetError() in case of error 
       detection.
                    
   (#) Use HAL_DMA_Abort() function to abort the current transfer
                   
     -@-   In Memory-to-Memory transfer mode, Circular mode is not allowed.
     *** Polling mode IO operation ***
     =================================
    [..]
          (+) Use HAL_DMA_Start() to start DMA transfer after the configuration of Source
              address and destination address and the Length of data to be transferred
          (+) Use HAL_DMA_PollForTransfer() to poll for the end of current transfer, in this
              case a fixed Timeout can be configured by User depending from his application.

     *** Interrupt mode IO operation ***
     ===================================
    [..]
          (+) Configure the DMA interrupt priority using HAL_NVIC_SetPriority()
          (+) Enable the DMA IRQ handler using HAL_NVIC_EnableIRQ()
          (+) Use HAL_DMA_Start_IT() to start DMA transfer after the configuration of
              Source address and destination address and the Length of data to be transferred.
              In this case the DMA interrupt is configured
          (+) Use HAL_DMA_IRQHandler() called under DMA_IRQHandler() Interrupt subroutine
          (+) At the end of data transfer HAL_DMA_IRQHandler() function is executed and user can
              add his own function by customization of function pointer XferCpltCallback and
              XferErrorCallback (i.e. a member of DMA handle structure).

     *** DMA HAL driver macros list ***
     ============================================= 
      [..]
       Below the list of most used macros in DMA HAL driver.

       (+) __HAL_DMA_ENABLE: Enable the specified DMA Channel.
       (+) __HAL_DMA_DISABLE: Disable the specified DMA Channel.
       (+) __HAL_DMA_GET_FLAG: Get the DMA Channel pending flags.
       (+) __HAL_DMA_CLEAR_FLAG: Clear the DMA Channel pending flags.
       (+) __HAL_DMA_ENABLE_IT: Enable the specified DMA Channel interrupts.
       (+) __HAL_DMA_DISABLE_IT: Disable the specified DMA Channel interrupts.
       (+) __HAL_DMA_GET_IT_SOURCE: Check whether the specified DMA Channel interrupt has occurred or not. 

     [..] 
      (@) You can refer to the DMA HAL driver header file for more useful macros  

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f1xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F1xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DMA DMA
  * @brief DMA HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_DMA_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup DMA_Private_Functions DMA Private Functions
  * @{
  */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DMA_SetConfig</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>SrcAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DstAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DataLength</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Exported functions ---------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup DMA_Exported_Functions DMA Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DMA_Exported_Functions_Group1 Initialization and de-initialization functions
  *  @brief   Initialization and de-initialization functions 
  *
@verbatim
 ===============================================================================
             ##### Initialization and de-initialization functions  #####
 ===============================================================================
    [..]
    This section provides functions allowing to initialize the DMA Channel source
    and destination addresses, incrementation and data sizes, transfer direction, 
    circular/normal mode selection, memory-to-memory mode selection and Channel priority value.
    [..]
    The HAL_DMA_Init() function follows the DMA configuration procedures as described in
    reference manual.  

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initialize the DMA according to the specified
  *         parameters in the DMA_InitTypeDef and initialize the associated handle.
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA_Init</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the DMA handle allocation */</comment>
  <if_stmt><if>if<condition>(<expr><name>hdma</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA_DIRECTION</name><argument_list>(<argument><expr><name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Direction</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA_PERIPHERAL_INC_STATE</name><argument_list>(<argument><expr><name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PeriphInc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA_MEMORY_INC_STATE</name><argument_list>(<argument><expr><name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>MemInc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA_PERIPHERAL_DATA_SIZE</name><argument_list>(<argument><expr><name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PeriphDataAlignment</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA_MEMORY_DATA_SIZE</name><argument_list>(<argument><expr><name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>MemDataAlignment</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA_MODE</name><argument_list>(<argument><expr><name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA_PRIORITY</name><argument_list>(<argument><expr><name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Priority</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>DMA2</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* calculation of the channel index */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name></name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>DMA2_Channel1</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* DMA1 */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>ChannelIndex</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name></name> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA1_Channel1</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA1_Channel2</name> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA1_Channel1</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>DmaBaseAddress</name></name> <operator>=</operator> <name>DMA1</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else 
  <block>{<block_content>
    <comment type="block">/* DMA2 */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>ChannelIndex</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name></name> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA2_Channel1</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA2_Channel2</name> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA2_Channel1</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>DmaBaseAddress</name></name> <operator>=</operator> <name>DMA2</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* DMA1 */</comment>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>ChannelIndex</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name></name> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA1_Channel1</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA1_Channel2</name> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA1_Channel1</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>DmaBaseAddress</name></name> <operator>=</operator> <name>DMA1</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DMA2 */</comment>

  <comment type="block">/* Change DMA peripheral state */</comment>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Get the CR register value */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name></expr>;</expr_stmt>

  <comment type="block">/* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>&amp;=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><operator>(</operator><name>DMA_CCR_PL</name>    <operator>|</operator> <name>DMA_CCR_MSIZE</name>  <operator>|</operator> <name>DMA_CCR_PSIZE</name>  <operator>|</operator> \
                      <name>DMA_CCR_MINC</name>  <operator>|</operator> <name>DMA_CCR_PINC</name>   <operator>|</operator> <name>DMA_CCR_CIRC</name>   <operator>|</operator> \
                      <name>DMA_CCR_DIR</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Prepare the DMA Channel configuration */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>|=</operator>  <name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Direction</name></name>        <operator>|</operator>
          <name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PeriphInc</name></name>           <operator>|</operator> <name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>MemInc</name></name>           <operator>|</operator>
          <name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PeriphDataAlignment</name></name> <operator>|</operator> <name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>MemDataAlignment</name></name> <operator>|</operator>
          <name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name>                <operator>|</operator> <name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Priority</name></name></expr>;</expr_stmt>

  <comment type="block">/* Write to DMA Channel CR register */</comment>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

  <comment type="block">/* Initialise the error code */</comment>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Initialize the DMA state*/</comment>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA_STATE_READY</name></expr>;</expr_stmt>
  <comment type="block">/* Allocate lock resource and initialize it */</comment>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitialize the DMA peripheral.
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA_DeInit</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the DMA handle allocation */</comment>
  <if_stmt><if>if<condition>(<expr><name>hdma</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the selected DMA Channelx */</comment>
  <expr_stmt><expr><call><name>__HAL_DMA_DISABLE</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Reset DMA Channel control register */</comment>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name>  <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

  <comment type="block">/* Reset DMA Channel Number of Data to Transfer register */</comment>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CNDTR</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

  <comment type="block">/* Reset DMA Channel peripheral address register */</comment>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CPAR</name></name>  <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

  <comment type="block">/* Reset DMA Channel memory address register */</comment>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CMAR</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>DMA2</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* calculation of the channel index */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name></name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>DMA2_Channel1</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* DMA1 */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>ChannelIndex</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name></name> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA1_Channel1</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA1_Channel2</name> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA1_Channel1</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>DmaBaseAddress</name></name> <operator>=</operator> <name>DMA1</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* DMA2 */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>ChannelIndex</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name></name> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA2_Channel1</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA2_Channel2</name> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA2_Channel1</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>DmaBaseAddress</name></name> <operator>=</operator> <name>DMA2</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* DMA1 */</comment>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>ChannelIndex</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name></name> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA1_Channel1</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA1_Channel2</name> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>DMA1_Channel1</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>DmaBaseAddress</name></name> <operator>=</operator> <name>DMA1</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DMA2 */</comment>

  <comment type="block">/* Clear all flags */</comment>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>DmaBaseAddress</name><operator>-&gt;</operator><name>IFCR</name></name> <operator>=</operator> <operator>(</operator><name>DMA_ISR_GIF1</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>ChannelIndex</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Clean all callbacks */</comment>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/* Reset the error code */</comment>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Reset the DMA state */</comment>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DMA_Exported_Functions_Group2 Input and Output operation functions
  *  @brief   Input and Output operation functions
  *
@verbatim
 ===============================================================================
                      #####  IO operation functions  #####
 ===============================================================================
    [..]  This section provides functions allowing to:
      (+) Configure the source, destination address and data length and Start DMA transfer
      (+) Configure the source, destination address and data length and
          Start DMA transfer with interrupt
      (+) Abort DMA transfer
      (+) Poll for transfer complete
      (+) Handle DMA interrupt request

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Start the DMA Transfer.
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @param  SrcAddress: The source memory Buffer address
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA_Start</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>SrcAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DstAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DataLength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA_BUFFER_SIZE</name><argument_list>(<argument><expr><name>DataLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>HAL_DMA_STATE_READY</name> <operator>==</operator> <name><name>hdma</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Change DMA peripheral state */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA_STATE_BUSY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_NONE</name></expr>;</expr_stmt>
            
    <comment type="block">/* Disable the peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_DMA_DISABLE</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Configure the source, destination address and the data length &amp; clear flags*/</comment>
    <expr_stmt><expr><call><name>DMA_SetConfig</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><name>SrcAddress</name></expr></argument>, <argument><expr><name>DstAddress</name></expr></argument>, <argument><expr><name>DataLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Enable the Peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_DMA_ENABLE</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
   <comment type="block">/* Process Unlocked */</comment>
   <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
   <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_BUSY</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>  
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Start the DMA Transfer with interrupt enabled.
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @param  SrcAddress: The source memory Buffer address
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA_Start_IT</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>SrcAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DstAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DataLength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DMA_BUFFER_SIZE</name><argument_list>(<argument><expr><name>DataLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name>HAL_DMA_STATE_READY</name> <operator>==</operator> <name><name>hdma</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Change DMA peripheral state */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA_STATE_BUSY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_NONE</name></expr>;</expr_stmt>
    
    <comment type="block">/* Disable the peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_DMA_DISABLE</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Configure the source, destination address and the data length &amp; clear flags*/</comment>
    <expr_stmt><expr><call><name>DMA_SetConfig</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><name>SrcAddress</name></expr></argument>, <argument><expr><name>DstAddress</name></expr></argument>, <argument><expr><name>DataLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Enable the transfer complete interrupt */</comment>
    <comment type="block">/* Enable the transfer Error interrupt */</comment>
    <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>hdma</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable the Half transfer complete interrupt as well */</comment>
      <expr_stmt><expr><call><name>__HAL_DMA_ENABLE_IT</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><operator>(</operator><name>DMA_IT_TC</name> <operator>|</operator> <name>DMA_IT_HT</name> <operator>|</operator> <name>DMA_IT_TE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>__HAL_DMA_DISABLE_IT</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><name>DMA_IT_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>__HAL_DMA_ENABLE_IT</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><operator>(</operator><name>DMA_IT_TC</name> <operator>|</operator> <name>DMA_IT_TE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* Enable the Peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_DMA_ENABLE</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>      
    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

    <comment type="block">/* Remain BUSY */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_BUSY</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>    
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Abort the DMA Transfer.
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA_Abort</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hdma</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_DMA_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* no transfer ongoing */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_NO_XFER</name></expr>;</expr_stmt>
    
    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else

  <block>{<block_content>
    <comment type="block">/* Disable DMA IT */</comment>
    <expr_stmt><expr><call><name>__HAL_DMA_DISABLE_IT</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><operator>(</operator><name>DMA_IT_TC</name> <operator>|</operator> <name>DMA_IT_HT</name> <operator>|</operator> <name>DMA_IT_TE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
    <comment type="block">/* Disable the channel */</comment>
    <expr_stmt><expr><call><name>__HAL_DMA_DISABLE</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
    <comment type="block">/* Clear all flags */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>DmaBaseAddress</name><operator>-&gt;</operator><name>IFCR</name></name> <operator>=</operator> <operator>(</operator><name>DMA_ISR_GIF1</name> <operator>&lt;&lt;</operator> <name><name>hdma</name><operator>-&gt;</operator><name>ChannelIndex</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Change the DMA state */</comment>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
  
  <return>return <expr><name>status</name></expr>;</return> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Aborts the DMA Transfer in Interrupt mode.
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA_Abort_IT</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>  
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name>HAL_DMA_STATE_BUSY</name> <operator>!=</operator> <name><name>hdma</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* no transfer ongoing */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_NO_XFER</name></expr>;</expr_stmt>
        
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content> 
    <comment type="block">/* Disable DMA IT */</comment>
    <expr_stmt><expr><call><name>__HAL_DMA_DISABLE_IT</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><operator>(</operator><name>DMA_IT_TC</name> <operator>|</operator> <name>DMA_IT_HT</name> <operator>|</operator> <name>DMA_IT_TE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Disable the channel */</comment>
    <expr_stmt><expr><call><name>__HAL_DMA_DISABLE</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear all flags */</comment>
    <expr_stmt><expr><call><name>__HAL_DMA_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><call><name>__HAL_DMA_GET_GI_FLAG_INDEX</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Change the DMA state */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Call User Abort callback */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>hdma</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name><name>hdma</name><operator>-&gt;</operator><name>XferAbortCallback</name></name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt> 
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Polling for transfer complete.
  * @param  hdma:    pointer to a DMA_HandleTypeDef structure that contains
  *                  the configuration information for the specified DMA Channel.
  * @param  CompleteLevel: Specifies the DMA level complete.
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA_PollForTransfer</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>CompleteLevel</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>temp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>HAL_DMA_STATE_BUSY</name> <operator>!=</operator> <name><name>hdma</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* no transfer ongoing */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_NO_XFER</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Polling mode not supported in circular mode */</comment>
  <if_stmt><if>if <condition>(<expr><name>RESET</name> <operator>!=</operator> <operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name> <operator>&amp;</operator> <name>DMA_CCR_CIRC</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_NOT_SUPPORTED</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Get the level transfer complete flag */</comment>
  <if_stmt><if>if<condition>(<expr><name>CompleteLevel</name> <operator>==</operator> <name>HAL_DMA_FULL_TRANSFER</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Transfer Complete flag */</comment>
    <expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>__HAL_DMA_GET_TC_FLAG_INDEX</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Half Transfer Complete flag */</comment>
    <expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>__HAL_DMA_GET_HT_FLAG_INDEX</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <while>while<condition>(<expr><call><name>__HAL_DMA_GET_FLAG</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>__HAL_DMA_GET_FLAG</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><call><name>__HAL_DMA_GET_TE_FLAG_INDEX</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* When a DMA transfer error occurs */</comment>
      <comment type="block">/* A hardware clear of its EN bits is performed */</comment>
      <comment type="block">/* Clear all flags */</comment>
      <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>DmaBaseAddress</name><operator>-&gt;</operator><name>IFCR</name></name> <operator>=</operator> <operator>(</operator><name>DMA_ISR_GIF1</name> <operator>&lt;&lt;</operator> <name><name>hdma</name><operator>-&gt;</operator><name>ChannelIndex</name></name><operator>)</operator></expr>;</expr_stmt>

      <comment type="block">/* Update error code */</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hdma</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_DMA_ERROR_TE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Change the DMA state */</comment>
      <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_DMA_STATE_READY</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Update error code */</comment>
        <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hdma</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_DMA_ERROR_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Change the DMA state */</comment>
        <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA_STATE_READY</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if<condition>(<expr><name>CompleteLevel</name> <operator>==</operator> <name>HAL_DMA_FULL_TRANSFER</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear the transfer complete flag */</comment>
    <expr_stmt><expr><call><name>__HAL_DMA_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><call><name>__HAL_DMA_GET_TC_FLAG_INDEX</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA_STATE_READY</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Clear the half transfer complete flag */</comment>
    <expr_stmt><expr><call><name>__HAL_DMA_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><call><name>__HAL_DMA_GET_HT_FLAG_INDEX</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Handles DMA interrupt request.
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_DMA_IRQHandler</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>flag_it</name> <init>= <expr><name><name>hdma</name><operator>-&gt;</operator><name>DmaBaseAddress</name><operator>-&gt;</operator><name>ISR</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>source_it</name> <init>= <expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Half Transfer Complete Interrupt management ******************************/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>flag_it</name> <operator>&amp;</operator> <operator>(</operator><name>DMA_FLAG_HT1</name> <operator>&lt;&lt;</operator> <name><name>hdma</name><operator>-&gt;</operator><name>ChannelIndex</name></name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>source_it</name> <operator>&amp;</operator> <name>DMA_IT_HT</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name> <operator>&amp;</operator> <name>DMA_CCR_CIRC</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the half transfer interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_DMA_DISABLE_IT</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><name>DMA_IT_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Clear the half transfer complete flag */</comment>
    <expr_stmt><expr><call><name>__HAL_DMA_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><call><name>__HAL_DMA_GET_HT_FLAG_INDEX</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* DMA peripheral state is not updated in Half Transfer */</comment>
    <comment type="block">/* but in Transfer Complete case */</comment>

    <if_stmt><if>if<condition>(<expr><name><name>hdma</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Half transfer callback */</comment>
      <expr_stmt><expr><call><name><name>hdma</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>

  <comment type="block">/* Transfer Complete Interrupt management ***********************************/</comment>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>flag_it</name> <operator>&amp;</operator> <operator>(</operator><name>DMA_FLAG_TC1</name> <operator>&lt;&lt;</operator> <name><name>hdma</name><operator>-&gt;</operator><name>ChannelIndex</name></name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>source_it</name> <operator>&amp;</operator> <name>DMA_IT_TC</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CCR</name></name> <operator>&amp;</operator> <name>DMA_CCR_CIRC</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the transfer complete and error interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_DMA_DISABLE_IT</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><name>DMA_IT_TE</name> <operator>|</operator> <name>DMA_IT_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  

      <comment type="block">/* Change the DMA state */</comment>
      <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA_STATE_READY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Clear the transfer complete flag */</comment>
      <expr_stmt><expr><call><name>__HAL_DMA_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><call><name>__HAL_DMA_GET_TC_FLAG_INDEX</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>hdma</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Transfer complete callback */</comment>
      <expr_stmt><expr><call><name><name>hdma</name><operator>-&gt;</operator><name>XferCpltCallback</name></name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>

  <comment type="block">/* Transfer Error Interrupt management **************************************/</comment>
  <if type="elseif">else if <condition>(<expr><operator>(</operator> <name>RESET</name> <operator>!=</operator> <operator>(</operator><name>flag_it</name> <operator>&amp;</operator> <operator>(</operator><name>DMA_FLAG_TE1</name> <operator>&lt;&lt;</operator> <name><name>hdma</name><operator>-&gt;</operator><name>ChannelIndex</name></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>RESET</name> <operator>!=</operator> <operator>(</operator><name>source_it</name> <operator>&amp;</operator> <name>DMA_IT_TE</name><operator>)</operator><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* When a DMA transfer error occurs */</comment>
    <comment type="block">/* A hardware clear of its EN bits is performed */</comment>
    <comment type="block">/* Disable ALL DMA IT */</comment>
    <expr_stmt><expr><call><name>__HAL_DMA_DISABLE_IT</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>, <argument><expr><operator>(</operator><name>DMA_IT_TC</name> <operator>|</operator> <name>DMA_IT_HT</name> <operator>|</operator> <name>DMA_IT_TE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear all flags */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>DmaBaseAddress</name><operator>-&gt;</operator><name>IFCR</name></name> <operator>=</operator> <operator>(</operator><name>DMA_ISR_GIF1</name> <operator>&lt;&lt;</operator> <name><name>hdma</name><operator>-&gt;</operator><name>ChannelIndex</name></name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Update error code */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_TE</name></expr>;</expr_stmt>

    <comment type="block">/* Change the DMA state */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DMA_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hdma</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Transfer error callback */</comment>
      <expr_stmt><expr><call><name><name>hdma</name><operator>-&gt;</operator><name>XferErrorCallback</name></name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Register callbacks
  * @param hdma: pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @param CallbackID: User Callback identifer
  *                    a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @param pCallback: pointer to private callbacsk function which has pointer to 
  *                   a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */</comment>                          
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>, <parameter><decl><type><name>HAL_DMA_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>pCallback</name>)<parameter_list>( <parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type> <name>_hdma</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name>HAL_DMA_STATE_READY</name> <operator>==</operator> <name><name>hdma</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case  <expr><name>HAL_DMA_XFER_CPLT_CB_ID</name></expr>:</case>
      <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
      
    <case>case  <expr><name>HAL_DMA_XFER_HALFCPLT_CB_ID</name></expr>:</case>
      <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>         

    <case>case  <expr><name>HAL_DMA_XFER_ERROR_CB_ID</name></expr>:</case>
      <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>         
      
    <case>case  <expr><name>HAL_DMA_XFER_ABORT_CB_ID</name></expr>:</case>
      <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break> 
      
    <default>default:</default>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>                                                            
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt> 
  
  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief UnRegister callbacks
  * @param hdma: pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @param CallbackID: User Callback identifer
  *                    a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */</comment>              
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DMA_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>, <parameter><decl><type><name>HAL_DMA_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name>HAL_DMA_STATE_READY</name> <operator>==</operator> <name><name>hdma</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case  <expr><name>HAL_DMA_XFER_CPLT_CB_ID</name></expr>:</case>
      <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case  <expr><name>HAL_DMA_XFER_HALFCPLT_CB_ID</name></expr>:</case>
      <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>         

    <case>case  <expr><name>HAL_DMA_XFER_ERROR_CB_ID</name></expr>:</case>
      <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>         

    <case>case  <expr><name>HAL_DMA_XFER_ABORT_CB_ID</name></expr>:</case>
      <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break> 

    <case>case   <expr><name>HAL_DMA_XFER_ALL_CB_ID</name></expr>:</case>
      <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break> 

    <default>default:</default>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt> 
  
  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
  
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup DMA_Exported_Functions_Group3 Peripheral State and Errors functions
  *  @brief    Peripheral State and Errors functions
  *
@verbatim
 ===============================================================================
            ##### Peripheral State and Errors functions #####
 ===============================================================================  
    [..]
    This subsection provides functions allowing to
      (+) Check the DMA state
      (+) Get error code

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Return the DMA hande state.
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */</comment>
<function><type><name>HAL_DMA_StateTypeDef</name></type> <name>HAL_DMA_GetState</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Return DMA handle state */</comment>
  <return>return <expr><name><name>hdma</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the DMA error code.
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_DMA_GetError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hdma</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup DMA_Private_Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Sets the DMA Transfer parameter.
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @param  SrcAddress: The source memory Buffer address
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DMA_SetConfig</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>SrcAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DstAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DataLength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Clear all flags */</comment>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>DmaBaseAddress</name><operator>-&gt;</operator><name>IFCR</name></name> <operator>=</operator> <operator>(</operator><name>DMA_ISR_GIF1</name> <operator>&lt;&lt;</operator> <name><name>hdma</name><operator>-&gt;</operator><name>ChannelIndex</name></name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Configure DMA Channel data length */</comment>
  <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CNDTR</name></name> <operator>=</operator> <name>DataLength</name></expr>;</expr_stmt>

  <comment type="block">/* Memory to Peripheral */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Direction</name></name><operator>)</operator> <operator>==</operator> <name>DMA_MEMORY_TO_PERIPH</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Configure DMA Channel destination address */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CPAR</name></name> <operator>=</operator> <name>DstAddress</name></expr>;</expr_stmt>

    <comment type="block">/* Configure DMA Channel source address */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CMAR</name></name> <operator>=</operator> <name>SrcAddress</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Peripheral to Memory */</comment>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Configure DMA Channel source address */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CPAR</name></name> <operator>=</operator> <name>SrcAddress</name></expr>;</expr_stmt>

    <comment type="block">/* Configure DMA Channel destination address */</comment>
    <expr_stmt><expr><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CMAR</name></name> <operator>=</operator> <name>DstAddress</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_DMA_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
