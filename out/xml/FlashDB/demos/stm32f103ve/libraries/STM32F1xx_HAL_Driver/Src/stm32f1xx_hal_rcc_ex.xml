<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f103ve/libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc_ex.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f1xx_hal_rcc_ex.c
  * @author  MCD Application Team
  * @brief   Extended RCC HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities RCC extension peripheral:
  *           + Extended Peripheral Control functions
  *
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f1xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F1xx_HAL_Driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_RCC_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block" format="doxygen">/** @defgroup RCCEx RCCEx
  * @brief RCC Extension HAL module driver.
  * @{
  */</comment>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup RCCEx_Private_Constants RCCEx Private Constants
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup RCCEx_Private_Macros RCCEx Private Macros
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup RCCEx_Exported_Functions RCCEx Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RCCEx_Exported_Functions_Group1 Peripheral Control functions
  *  @brief  Extended Peripheral Control functions
  *
@verbatim
 ===============================================================================
                ##### Extended Peripheral Control functions  #####
 ===============================================================================
    [..]
    This subsection provides a set of functions allowing to control the RCC Clocks
    frequencies.
    [..]
    (@) Important note: Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to
        select the RTC clock source; in this case the Backup domain will be reset in
        order to modify the RTC Clock source, as consequence RTC registers (including
        the backup registers) are set to their reset values.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the RCC extended peripherals clocks according to the specified parameters in the
  *         RCC_PeriphCLKInitTypeDef.
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         contains the configuration information for the Extended Peripherals clocks(RTC clock).
  *
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source; in this case the Backup domain will be reset in
  *         order to modify the RTC Clock source, as consequence RTC registers (including
  *         the backup registers) are set to their reset values.
  *
  * @note   In case of STM32F105xC or STM32F107xC devices, PLLI2S will be enabled if requested on
  *         one of 2 I2S interfaces. When PLLI2S is enabled, you need to call HAL_RCCEx_DisablePLLI2S to
  *         manually disable it.
  *
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCCEx_PeriphCLKConfig</name><parameter_list>(<parameter><decl><type><name>RCC_PeriphCLKInitTypeDef</name>  <modifier>*</modifier></type><name>PeriphClkInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>temp_reg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F105xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F107xC</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>uint32_t</name></type>  <name>pllactive</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F105xC || STM32F107xC */</comment>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PERIPHCLOCK</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*------------------------------- RTC/LCD Configuration ------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_RTC</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_RTC</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* check for RTC Parameters used to output RTCCLK */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_RTCCLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>FlagStatus</name></type>       <name>pwrclkchanged</name> <init>= <expr><name>RESET</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */</comment>
    <comment type="block">/* Requires to enable write access to Backup Domain of necessary */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_RCC_PWR_IS_CLK_DISABLED</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>__HAL_RCC_PWR_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pwrclkchanged</name> <operator>=</operator> <name>SET</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>PWR_CR_DBP</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable write access to Backup domain */</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>PWR_CR_DBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Wait for Backup domain Write protection disable */</comment>
      <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>PWR_CR_DBP</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>RCC_DBP_TIMEOUT_VALUE</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */</comment>
    <expr_stmt><expr><name>temp_reg</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>temp_reg</name> <operator>!=</operator> <literal type="number">0x00000000U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>temp_reg</name> <operator>!=</operator> <operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Store the content of BDCR register before the reset of Backup Domain */</comment>
      <expr_stmt><expr><name>temp_reg</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>RCC_BDCR_RTCSEL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
      <comment type="block">/* RTC Clock selection can be changed only if the Backup Domain is reset */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_BACKUPRESET_FORCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>__HAL_RCC_BACKUPRESET_RELEASE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Restore the Content of BDCR register */</comment>
      <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>=</operator> <name>temp_reg</name></expr>;</expr_stmt>

      <comment type="block">/* Wait for LSERDY if LSE was enabled */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name>temp_reg</name></expr></argument>, <argument><expr><name>RCC_BDCR_LSEON</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Get Start Tick */</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till LSE is ready */</comment>
        <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_LSERDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>RCC_LSE_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>__HAL_RCC_RTC_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Require to disable power clock if necessary */</comment>
    <if_stmt><if>if <condition>(<expr><name>pwrclkchanged</name> <operator>==</operator> <name>SET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>__HAL_RCC_PWR_CLK_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*------------------------------ ADC clock Configuration ------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_ADC</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_ADC</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_ADCPLLCLK_DIV</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>AdcClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the ADC clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_ADC_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>AdcClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F105xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F107xC</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/*------------------------------ I2S2 Configuration ------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_I2S2</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_I2S2</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_I2S2CLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2s2ClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the I2S2 clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_I2S2_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2s2ClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*------------------------------ I2S3 Configuration ------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_I2S3</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_I2S3</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_I2S3CLKSOURCE</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2s3ClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the I2S3 clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_I2S3_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2s3ClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*------------------------------ PLL I2S Configuration ----------------------*/</comment>
  <comment type="block">/* Check that PLLI2S need to be enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name></expr></argument>, <argument><expr><name>RCC_CFGR2_I2S2SRC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name></expr></argument>, <argument><expr><name>RCC_CFGR2_I2S3SRC</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update flag to indicate that PLL I2S should be active */</comment>
    <expr_stmt><expr><name>pllactive</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check if PLL I2S need to be enabled */</comment>
  <if_stmt><if>if <condition>(<expr><name>pllactive</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable PLL I2S only if not active */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLL3ON</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check the parameters */</comment>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2S_MUL</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SMUL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_HSE_PREDIV2</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>HSEPrediv2Value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Prediv2 can be written only when the PLL2 is disabled. */</comment>
      <comment type="block">/* Return an error only if new value is different from the programmed value */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLL2ON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
          <operator>(</operator><call><name>__HAL_RCC_HSE_GET_PREDIV2</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>HSEPrediv2Value</name></name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Configure the HSE prediv2 factor --------------------------------*/</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_HSE_PREDIV2_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>HSEPrediv2Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Configure the main PLLI2S multiplication factors. */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SMUL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Enable the main PLLI2S. */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Get Start Tick*/</comment>
      <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Wait till PLLI2S is ready */</comment>
      <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLI2SRDY</name></expr></argument>)</argument_list></call>  <operator>==</operator> <name>RESET</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLLI2S_TIMEOUT_VALUE</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name></expr></argument>, <argument><expr><name>RCC_CFGR2_PLL3MUL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PLLI2S</name><operator>.</operator><name>PLLI2SMUL</name></name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F105xC || STM32F107xC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F102x6</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F102xB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103x6</name></expr></argument>)</argument_list></call>\
 <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xG</name></expr></argument>)</argument_list></call>\
 <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F105xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F107xC</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/*------------------------------ USB clock Configuration ------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_PERIPHCLK_USB</name><operator>)</operator> <operator>==</operator> <name>RCC_PERIPHCLK_USB</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_USBPLLCLK_DIV</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>UsbClockSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the USB clock source */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_USB_CONFIG</name><argument_list>(<argument><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>UsbClockSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */</comment>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Get the PeriphClkInit according to the internal
  * RCC configuration registers.
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         returns the configuration information for the Extended Peripherals clocks(RTC, I2S, ADC clocks).
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RCCEx_GetPeriphCLKConfig</name><parameter_list>(<parameter><decl><type><name>RCC_PeriphCLKInitTypeDef</name>  <modifier>*</modifier></type><name>PeriphClkInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>srcclk</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Set all possible values for the extended clock type parameter------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name> <operator>=</operator> <name>RCC_PERIPHCLK_RTC</name></expr>;</expr_stmt>

  <comment type="block">/* Get the RTC configuration -----------------------------------------------*/</comment>
  <expr_stmt><expr><name>srcclk</name> <operator>=</operator> <call><name>__HAL_RCC_GET_RTC_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Source clock is LSE or LSI*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>RTCClockSelection</name></name> <operator>=</operator> <name>srcclk</name></expr>;</expr_stmt>

  <comment type="block">/* Get the ADC clock configuration -----------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name> <operator>|=</operator> <name>RCC_PERIPHCLK_ADC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>AdcClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_ADC_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F105xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F107xC</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Get the I2S2 clock configuration -----------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name> <operator>|=</operator> <name>RCC_PERIPHCLK_I2S2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2s2ClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_I2S2_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the I2S3 clock configuration -----------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name> <operator>|=</operator> <name>RCC_PERIPHCLK_I2S3</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2s3ClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_I2S3_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F105xC || STM32F107xC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xG</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Get the I2S2 clock configuration -----------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name> <operator>|=</operator> <name>RCC_PERIPHCLK_I2S2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2s2ClockSelection</name></name> <operator>=</operator> <name>RCC_I2S2CLKSOURCE_SYSCLK</name></expr>;</expr_stmt>

  <comment type="block">/* Get the I2S3 clock configuration -----------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name> <operator>|=</operator> <name>RCC_PERIPHCLK_I2S3</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>I2s3ClockSelection</name></name> <operator>=</operator> <name>RCC_I2S3CLKSOURCE_SYSCLK</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F103xE || STM32F103xG */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F102x6</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F102xB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103x6</name></expr></argument>)</argument_list></call>\
 <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xG</name></expr></argument>)</argument_list></call>\
 <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F105xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F107xC</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Get the USB clock configuration -----------------------------------------*/</comment>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>PeriphClockSelection</name></name> <operator>|=</operator> <name>RCC_PERIPHCLK_USB</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>PeriphClkInit</name><operator>-&gt;</operator><name>UsbClockSelection</name></name> <operator>=</operator> <call><name>__HAL_RCC_GET_USB_SOURCE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns the peripheral clock frequency
  * @note   Returns 0 if peripheral clock is unknown
  * @param  PeriphClk Peripheral clock identifier
  *         This parameter can be one of the following values:
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  *            @arg @ref RCC_PERIPHCLK_ADC  ADC peripheral clock
  @if STM32F103xE
  *            @arg @ref RCC_PERIPHCLK_I2S2 I2S2 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
  @endif
  @if STM32F103xG
  *            @arg @ref RCC_PERIPHCLK_I2S2 I2S2 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_I2S2 I2S2 peripheral clock
  @endif
  @if STM32F105xC
  *            @arg @ref RCC_PERIPHCLK_I2S2 I2S2 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_I2S2 I2S2 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_I2S2 I2S2 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  @if STM32F107xC
  *            @arg @ref RCC_PERIPHCLK_I2S2 I2S2 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_I2S2 I2S2 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_I2S2 I2S2 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  @if STM32F102xx
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  @if STM32F103xx
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RCCEx_GetPeriphCLKFreq</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>PeriphClk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F105xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F107xC</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>aPLLMULFactorTable</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>aPredivFactorTable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>prediv1</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>pllclk</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>pllmul</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pll2mul</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>pll3mul</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>prediv2</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F105xC || STM32F107xC */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F102x6</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F102xB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103x6</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xG</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>aPLLMULFactorTable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>aPredivFactorTable</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>prediv1</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>pllclk</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>pllmul</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>temp_reg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>frequency</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PERIPHCLOCK</name><argument_list>(<argument><expr><name>PeriphClk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>PeriphClk</name></expr>)</condition>
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F102x6</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F102xB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103x6</name></expr></argument>)</argument_list></call>\
 <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xG</name></expr></argument>)</argument_list></call>\
 <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F105xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F107xC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><name>RCC_PERIPHCLK_USB</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Get RCC configuration ------------------------------------------------------*/</comment>
      <expr_stmt><expr><name>temp_reg</name> <operator>=</operator> <name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name></expr>;</expr_stmt>

      <comment type="block">/* Check if PLL is enabled */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLLON</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>pllmul</name> <operator>=</operator> <name><name>aPLLMULFactorTable</name><index>[<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>temp_reg</name> <operator>&amp;</operator> <name>RCC_CFGR_PLLMULL</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CFGR_PLLMULL_Pos</name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>temp_reg</name> <operator>&amp;</operator> <name>RCC_CFGR_PLLSRC</name><operator>)</operator> <operator>!=</operator> <name>RCC_PLLSOURCE_HSI_DIV2</name></expr>)</condition>
        <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F105xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F107xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F100xB</name></expr></argument>)</argument_list></call>\
 <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F100xE</name></expr></argument>)</argument_list></call></expr></cpp:if>
          <expr_stmt><expr><name>prediv1</name> <operator>=</operator> <name><name>aPredivFactorTable</name><index>[<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name> <operator>&amp;</operator> <name>RCC_CFGR2_PREDIV1</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CFGR2_PREDIV1_Pos</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <expr_stmt><expr><name>prediv1</name> <operator>=</operator> <name><name>aPredivFactorTable</name><index>[<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_PLLXTPRE</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CFGR_PLLXTPRE_Pos</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F105xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F107xC</name></expr></argument>)</argument_list></call></expr></cpp:if>
          <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name></expr></argument>, <argument><expr><name>RCC_CFGR2_PREDIV1SRC</name></expr></argument>)</argument_list></call></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* PLL2 selected as Prediv1 source */</comment>
            <comment type="block">/* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */</comment>
            <expr_stmt><expr><name>prediv2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name> <operator>&amp;</operator> <name>RCC_CFGR2_PREDIV2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CFGR2_PREDIV2_Pos</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>pll2mul</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name> <operator>&amp;</operator> <name>RCC_CFGR2_PLL2MUL</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CFGR2_PLL2MUL_Pos</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>pllclk</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <name>prediv2</name><operator>)</operator> <operator>*</operator> <name>pll2mul</name><operator>)</operator> <operator>/</operator> <name>prediv1</name><operator>)</operator> <operator>*</operator> <name>pllmul</name><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */</comment>
            <expr_stmt><expr><name>pllclk</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <name>prediv1</name><operator>)</operator> <operator>*</operator> <name>pllmul</name><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <comment type="block">/* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */</comment>
          <comment type="block">/* In this case need to divide pllclk by 2 */</comment>
          <if_stmt><if>if <condition>(<expr><name>pllmul</name> <operator>==</operator> <name><name>aPLLMULFactorTable</name><index>[<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>RCC_CFGR_PLLMULL6_5</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CFGR_PLLMULL_Pos</name></expr>]</index></name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><name>pllclk</name> <operator>=</operator> <name>pllclk</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>temp_reg</name> <operator>&amp;</operator> <name>RCC_CFGR_PLLSRC</name><operator>)</operator> <operator>!=</operator> <name>RCC_PLLSOURCE_HSI_DIV2</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */</comment>
            <expr_stmt><expr><name>pllclk</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <name>prediv1</name><operator>)</operator> <operator>*</operator> <name>pllmul</name><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F105xC || STM32F107xC */</comment>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <comment type="block">/* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */</comment>
          <expr_stmt><expr><name>pllclk</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>HSI_VALUE</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>pllmul</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* Calcul of the USB frequency*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F105xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F107xC</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <comment type="block">/* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>__HAL_RCC_GET_USB_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_USBCLKSOURCE_PLL_DIV2</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Prescaler of 2 selected for USB */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>pllclk</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <comment type="block">/* Prescaler of 3 selected for USB */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>pllclk</name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <comment type="block">/* USBCLK = PLLCLK / USB prescaler */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>__HAL_RCC_GET_USB_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_USBCLKSOURCE_PLL</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* No prescaler selected for USB */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>pllclk</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <comment type="block">/* Prescaler of 1.5 selected for USB */</comment>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>pllclk</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F105xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F107xC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><name>RCC_PERIPHCLK_I2S2</name></expr>:</case>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xG</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <comment type="block">/* SYSCLK used as source clock for I2S2 */</comment>
      <expr_stmt><expr><name>frequency</name> <operator>=</operator> <call><name>HAL_RCC_GetSysClockFreq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <if_stmt><if>if <condition>(<expr><call><name>__HAL_RCC_GET_I2S2_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_I2S2CLKSOURCE_SYSCLK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* SYSCLK used as source clock for I2S2 */</comment>
        <expr_stmt><expr><name>frequency</name> <operator>=</operator> <call><name>HAL_RCC_GetSysClockFreq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Check if PLLI2S is enabled */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLL3ON</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* PLLI2SVCO = 2 * PLLI2SCLK = 2 * (HSE/PREDIV2 * PLL3MUL) */</comment>
          <expr_stmt><expr><name>prediv2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name> <operator>&amp;</operator> <name>RCC_CFGR2_PREDIV2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CFGR2_PREDIV2_Pos</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>pll3mul</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name> <operator>&amp;</operator> <name>RCC_CFGR2_PLL3MUL</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CFGR2_PLL3MUL_Pos</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <name>prediv2</name><operator>)</operator> <operator>*</operator> <name>pll3mul</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F103xE || STM32F103xG */</comment>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>RCC_PERIPHCLK_I2S3</name></expr>:</case>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F103xG</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <comment type="block">/* SYSCLK used as source clock for I2S3 */</comment>
      <expr_stmt><expr><name>frequency</name> <operator>=</operator> <call><name>HAL_RCC_GetSysClockFreq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <if_stmt><if>if <condition>(<expr><call><name>__HAL_RCC_GET_I2S3_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_I2S3CLKSOURCE_SYSCLK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* SYSCLK used as source clock for I2S3 */</comment>
        <expr_stmt><expr><name>frequency</name> <operator>=</operator> <call><name>HAL_RCC_GetSysClockFreq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Check if PLLI2S is enabled */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLL3ON</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* PLLI2SVCO = 2 * PLLI2SCLK = 2 * (HSE/PREDIV2 * PLL3MUL) */</comment>
          <expr_stmt><expr><name>prediv2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name> <operator>&amp;</operator> <name>RCC_CFGR2_PREDIV2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CFGR2_PREDIV2_Pos</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>pll3mul</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name> <operator>&amp;</operator> <name>RCC_CFGR2_PLL3MUL</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CFGR2_PLL3MUL_Pos</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>frequency</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <name>prediv2</name><operator>)</operator> <operator>*</operator> <name>pll3mul</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F103xE || STM32F103xG */</comment>
      <break>break;</break>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */</comment>
    <case>case <expr><name>RCC_PERIPHCLK_RTC</name></expr>:</case>
    <block>{<block_content>
      <comment type="block">/* Get RCC BDCR configuration ------------------------------------------------------*/</comment>
      <expr_stmt><expr><name>temp_reg</name> <operator>=</operator> <name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name></expr>;</expr_stmt>

      <comment type="block">/* Check if LSE is ready if RTC clock selection is LSE */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>temp_reg</name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator> <operator>==</operator> <name>RCC_RTCCLKSOURCE_LSE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name>temp_reg</name></expr></argument>, <argument><expr><name>RCC_BDCR_LSERDY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>LSE_VALUE</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <comment type="block">/* Check if LSI is ready if RTC clock selection is LSI */</comment>
      <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>temp_reg</name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator> <operator>==</operator> <name>RCC_RTCCLKSOURCE_LSI</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CSR</name></name></expr></argument>, <argument><expr><name>RCC_CSR_LSIRDY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>LSI_VALUE</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>temp_reg</name> <operator>&amp;</operator> <name>RCC_BDCR_RTCSEL</name><operator>)</operator> <operator>==</operator> <name>RCC_RTCCLKSOURCE_HSE_DIV128</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_HSERDY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>frequency</name> <operator>=</operator> <name>HSE_VALUE</name> <operator>/</operator> <literal type="number">128U</literal></expr>;</expr_stmt>
      </block_content>}</block></if>
      <comment type="block">/* Clock not enabled for RTC*/</comment>
      <else>else
      <block>{<block_content>
        <comment type="block">/* nothing to do: frequency already initialized to 0U */</comment>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>RCC_PERIPHCLK_ADC</name></expr>:</case>
    <block>{<block_content>
      <expr_stmt><expr><name>frequency</name> <operator>=</operator> <call><name>HAL_RCC_GetPCLK2Freq</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><operator>(</operator><operator>(</operator><call><name>__HAL_RCC_GET_ADC_SOURCE</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <name>RCC_CFGR_ADCPRE_Pos</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
    <block>{<block_content>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><operator>(</operator><name>frequency</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F105xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F107xC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/** @defgroup RCCEx_Exported_Functions_Group2 PLLI2S Management function
  *  @brief  PLLI2S Management functions
  *
@verbatim
 ===============================================================================
                ##### Extended PLLI2S Management functions  #####
 ===============================================================================
    [..]
    This subsection provides a set of functions allowing to control the PLLI2S
    activation or deactivation
@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Enable PLLI2S
  * @param  PLLI2SInit pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @note   The PLLI2S configuration not modified if used by I2S2 or I2S3 Interface.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCCEx_EnablePLLI2S</name><parameter_list>(<parameter><decl><type><name>RCC_PLLI2SInitTypeDef</name>  <modifier>*</modifier></type><name>PLLI2SInit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check that PLL I2S has not been already enabled by I2S2 or I2S3*/</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name></expr></argument>, <argument><expr><name>RCC_CFGR2_I2S2SRC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name></expr></argument>, <argument><expr><name>RCC_CFGR2_I2S3SRC</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLI2S_MUL</name><argument_list>(<argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SMUL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_HSE_PREDIV2</name><argument_list>(<argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>HSEPrediv2Value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Prediv2 can be written only when the PLL2 is disabled. */</comment>
    <comment type="block">/* Return an error only if new value is different from the programmed value */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLL2ON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
        <operator>(</operator><call><name>__HAL_RCC_HSE_GET_PREDIV2</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>PLLI2SInit</name><operator>-&gt;</operator><name>HSEPrediv2Value</name></name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Disable the main PLLI2S. */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get Start Tick*/</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait till PLLI2S is ready */</comment>
    <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLI2SRDY</name></expr></argument>)</argument_list></call>  <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLLI2S_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Configure the HSE prediv2 factor --------------------------------*/</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_HSE_PREDIV2_CONFIG</name><argument_list>(<argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>HSEPrediv2Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="block">/* Configure the main PLLI2S multiplication factors. */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_CONFIG</name><argument_list>(<argument><expr><name><name>PLLI2SInit</name><operator>-&gt;</operator><name>PLLI2SMUL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the main PLLI2S. */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get Start Tick*/</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait till PLLI2S is ready */</comment>
    <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLI2SRDY</name></expr></argument>)</argument_list></call>  <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLLI2S_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* PLLI2S cannot be modified as already used by I2S2 or I2S3 */</comment>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable PLLI2S
  * @note   PLLI2S is not disabled if used by I2S2 or I2S3 Interface.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCCEx_DisablePLLI2S</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Disable PLL I2S as not requested by I2S2 or I2S3*/</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name></expr></argument>, <argument><expr><name>RCC_CFGR2_I2S2SRC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name></expr></argument>, <argument><expr><name>RCC_CFGR2_I2S3SRC</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the main PLLI2S. */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLLI2S_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get Start Tick*/</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait till PLLI2S is ready */</comment>
    <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLI2SRDY</name></expr></argument>)</argument_list></call>  <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLLI2S_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* PLLI2S is currently used by I2S2 or I2S3. Cannot be disabled.*/</comment>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RCCEx_Exported_Functions_Group3 PLL2 Management function
  *  @brief  PLL2 Management functions
  *
@verbatim
 ===============================================================================
                ##### Extended PLL2 Management functions  #####
 ===============================================================================
    [..]
    This subsection provides a set of functions allowing to control the PLL2
    activation or deactivation
@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Enable PLL2
  * @param  PLL2Init pointer to an RCC_PLL2InitTypeDef structure that
  *         contains the configuration information for the PLL2
  * @note   The PLL2 configuration not modified if used indirectly as system clock.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCCEx_EnablePLL2</name><parameter_list>(<parameter><decl><type><name>RCC_PLL2InitTypeDef</name>  <modifier>*</modifier></type><name>PLL2Init</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* This bit can not be cleared if the PLL2 clock is used indirectly as system
    clock (i.e. it is used as PLL clock entry that is used as system clock). */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>__HAL_RCC_GET_PLL_OSCSOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name><operator>)</operator> <operator>&amp;&amp;</operator> \
      <operator>(</operator><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_SYSCLKSOURCE_STATUS_PLLCLK</name><operator>)</operator> <operator>&amp;&amp;</operator> \
      <operator>(</operator><operator>(</operator><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name></expr></argument>, <argument><expr><name>RCC_CFGR2_PREDIV1SRC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RCC_CFGR2_PREDIV1SRC_PLL2</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLL2_MUL</name><argument_list>(<argument><expr><name><name>PLL2Init</name><operator>-&gt;</operator><name>PLL2MUL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_HSE_PREDIV2</name><argument_list>(<argument><expr><name><name>PLL2Init</name><operator>-&gt;</operator><name>HSEPrediv2Value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Prediv2 can be written only when the PLLI2S is disabled. */</comment>
    <comment type="block">/* Return an error only if new value is different from the programmed value */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLL3ON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
        <operator>(</operator><call><name>__HAL_RCC_HSE_GET_PREDIV2</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>PLL2Init</name><operator>-&gt;</operator><name>HSEPrediv2Value</name></name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Disable the main PLL2. */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLL2_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get Start Tick*/</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait till PLL2 is disabled */</comment>
    <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLL2RDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLL2_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Configure the HSE prediv2 factor --------------------------------*/</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_HSE_PREDIV2_CONFIG</name><argument_list>(<argument><expr><name><name>PLL2Init</name><operator>-&gt;</operator><name>HSEPrediv2Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure the main PLL2 multiplication factors. */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLL2_CONFIG</name><argument_list>(<argument><expr><name><name>PLL2Init</name><operator>-&gt;</operator><name>PLL2MUL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the main PLL2. */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLL2_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get Start Tick*/</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait till PLL2 is ready */</comment>
    <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLL2RDY</name></expr></argument>)</argument_list></call>  <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLL2_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable PLL2
  * @note   PLL2 is not disabled if used indirectly as system clock.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCCEx_DisablePLL2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* This bit can not be cleared if the PLL2 clock is used indirectly as system
    clock (i.e. it is used as PLL clock entry that is used as system clock). */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>__HAL_RCC_GET_PLL_OSCSOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name><operator>)</operator> <operator>&amp;&amp;</operator> \
      <operator>(</operator><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_SYSCLKSOURCE_STATUS_PLLCLK</name><operator>)</operator> <operator>&amp;&amp;</operator> \
      <operator>(</operator><operator>(</operator><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name></expr></argument>, <argument><expr><name>RCC_CFGR2_PREDIV1SRC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RCC_CFGR2_PREDIV1SRC_PLL2</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Disable the main PLL2. */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PLL2_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get Start Tick*/</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait till PLL2 is disabled */</comment>
    <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLL2RDY</name></expr></argument>)</argument_list></call>  <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLL2_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F105xC || STM32F107xC */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_RCC_MODULE_ENABLED */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>

</unit>
