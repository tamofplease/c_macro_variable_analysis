<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f103ve/libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f1xx_hal_rcc.c
  * @author  MCD Application Team
  * @brief   RCC HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the Reset and Clock Control (RCC) peripheral:
  *           + Initialization and de-initialization functions
  *           + Peripheral Control functions
  *
  @verbatim
  ==============================================================================
                      ##### RCC specific features #####
  ==============================================================================
    [..]
      After reset the device is running from Internal High Speed oscillator
      (HSI 8MHz) with Flash 0 wait state, Flash prefetch buffer is enabled,
      and all peripherals are off except internal SRAM, Flash and JTAG.
      (+) There is no prescaler on High speed (AHB) and Low speed (APB) buses;
          all peripherals mapped on these buses are running at HSI speed.
      (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
      (+) All GPIOs are in input floating state, except the JTAG pins which
          are assigned to be used for debug purpose.
    [..] Once the device started from reset, the user application has to:
      (+) Configure the clock source to be used to drive the System clock
          (if the application needs higher frequency/performance)
      (+) Configure the System clock frequency and Flash settings
      (+) Configure the AHB and APB buses prescalers
      (+) Enable the clock for the peripheral(s) to be used
      (+) Configure the clock source(s) for peripherals whose clocks are not
          derived from the System clock (I2S, RTC, ADC, USB OTG FS)

                      ##### RCC Limitations #####
  ==============================================================================
    [..]
      A delay between an RCC peripheral clock enable and the effective peripheral
      enabling should be taken into account in order to manage the peripheral read/write
      from/to registers.
      (+) This delay depends on the peripheral mapping.
        (++) AHB &amp; APB peripherals, 1 dummy read is necessary

    [..]
      Workarounds:
      (#) For AHB &amp; APB peripherals, a dummy read to the peripheral register has been
          inserted in each __HAL_RCC_PPP_CLK_ENABLE() macro.

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f1xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F1xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RCC RCC
* @brief RCC HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_RCC_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup RCC_Private_Constants RCC Private Constants
 * @{
 */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup RCC_Private_Macros RCC Private Macros
  * @{
  */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCO1_CLK_ENABLE</name><parameter_list>()</parameter_list></cpp:macro>     <cpp:value>__HAL_RCC_GPIOA_CLK_ENABLE()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCO1_GPIO_PORT</name></cpp:macro>        <cpp:value>GPIOA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCO1_PIN</name></cpp:macro>              <cpp:value>GPIO_PIN_8</cpp:value></cpp:define>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup RCC_Private_Variables RCC Private Variables
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RCC_Delay</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>mdelay</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup RCC_Exported_Functions RCC Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RCC_Exported_Functions_Group1 Initialization and de-initialization functions
  *  @brief    Initialization and Configuration functions
  *
  @verbatim
  ===============================================================================
           ##### Initialization and de-initialization functions #####
  ===============================================================================
    [..]
      This section provides functions allowing to configure the internal/external oscillators
      (HSE, HSI, LSE, LSI, PLL, CSS and MCO) and the System buses clocks (SYSCLK, AHB, APB1
      and APB2).

    [..] Internal/external clock and PLL configuration
      (#) HSI (high-speed internal), 8 MHz factory-trimmed RC used directly or through
          the PLL as System clock source.
      (#) LSI (low-speed internal), ~40 KHz low consumption RC used as IWDG and/or RTC
          clock source.

      (#) HSE (high-speed external), 4 to 24 MHz (STM32F100xx) or 4 to 16 MHz (STM32F101x/STM32F102x/STM32F103x) or 3 to 25 MHz (STM32F105x/STM32F107x)  crystal oscillator used directly or
          through the PLL as System clock source. Can be used also as RTC clock source.

      (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.

      (#) PLL (clocked by HSI or HSE), featuring different output clocks:
        (++) The first output is used to generate the high speed system clock (up to 72 MHz for STM32F10xxx or up to 24 MHz for STM32F100xx)
        (++) The second output is used to generate the clock for the USB OTG FS (48 MHz)

      (#) CSS (Clock security system), once enable using the macro __HAL_RCC_CSS_ENABLE()
          and if a HSE clock failure occurs(HSE used directly or through PLL as System
          clock source), the System clocks automatically switched to HSI and an interrupt
          is generated if enabled. The interrupt is linked to the Cortex-M3 NMI
          (Non-Maskable Interrupt) exception vector.

      (#) MCO1 (microcontroller clock output), used to output SYSCLK, HSI,
          HSE or PLL clock (divided by 2) on PA8 pin + PLL2CLK, PLL3CLK/2, PLL3CLK and XTI for STM32F105x/STM32F107x

    [..] System, AHB and APB buses clocks configuration
      (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
          HSE and PLL.
          The AHB clock (HCLK) is derived from System clock through configurable
          prescaler and used to clock the CPU, memory and peripherals mapped
          on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived
          from AHB clock through configurable prescalers and used to clock
          the peripherals mapped on these buses. You can use
          "@ref HAL_RCC_GetSysClockFreq()" function to retrieve the frequencies of these clocks.

      -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
          (+@) RTC: RTC clock can be derived either from the LSI, LSE or HSE clock
              divided by 128.
          (+@) USB OTG FS and RTC: USB OTG FS require a frequency equal to 48 MHz
              to work correctly. This clock is derived of the main PLL through PLL Multiplier.
          (+@) I2S interface on STM32F105x/STM32F107x can be derived from PLL3CLK
          (+@) IWDG clock which is always the LSI clock.

      (#) For STM32F10xxx, the maximum frequency of the SYSCLK and HCLK/PCLK2 is 72 MHz, PCLK1 36 MHz.
          For STM32F100xx, the maximum frequency of the SYSCLK and HCLK/PCLK1/PCLK2 is 24 MHz.
          Depending on the SYSCLK frequency, the flash latency should be adapted accordingly.
  @endverbatim
  * @{
  */</comment>

<comment type="block">/*
  Additional consideration on the SYSCLK based on Latency settings:
        +-----------------------------------------------+
        | Latency       | SYSCLK clock frequency (MHz)  |
        |---------------|-------------------------------|
        |0WS(1CPU cycle)|       0 &lt; SYSCLK &lt;= 24        |
        |---------------|-------------------------------|
        |1WS(2CPU cycle)|      24 &lt; SYSCLK &lt;= 48        |
        |---------------|-------------------------------|
        |2WS(3CPU cycle)|      48 &lt; SYSCLK &lt;= 72        |
        +-----------------------------------------------+
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @note   The default reset state of the clock configuration is given below:
  *            - HSI ON and used as system clock source
  *            - HSE, PLL, PLL2 and PLL3 are OFF
  *            - AHB, APB1 and APB2 prescaler set to 1.
  *            - CSS and MCO1 OFF
  *            - All interrupts disabled
  *            - All flags are cleared
  * @note   This function does not modify the configuration of the
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCC_DeInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <comment type="block">/* Get Start Tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set HSION bit */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_HSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till HSI is ready */</comment>
  <while>while <condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_HSIRDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>HSI_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Set HSITRIM bits to the reset value */</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_HSITRIM</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">0x10U</literal> <operator>&lt;&lt;</operator> <name>RCC_CR_HSITRIM_Pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get Start Tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Reset CFGR register */</comment>
  <expr_stmt><expr><call><name>CLEAR_REG</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till clock switch is ready */</comment>
  <while>while <condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name></expr></argument>, <argument><expr><name>RCC_CFGR_SWS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>CLOCKSWITCH_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Update the SystemCoreClock global variable */</comment>
  <expr_stmt><expr><name>SystemCoreClock</name> <operator>=</operator> <name>HSI_VALUE</name></expr>;</expr_stmt>

  <comment type="block">/* Adapt Systick interrupt period */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_InitTick</name><argument_list>(<argument><expr><name>uwTickPrio</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Get Start Tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Second step is to clear PLLON bit */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLLON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till PLL is disabled */</comment>
  <while>while <condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLLRDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLL_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Ensure to reset PLLSRC and PLLMUL bits */</comment>
  <expr_stmt><expr><call><name>CLEAR_REG</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get Start Tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Reset HSEON &amp; CSSON bits */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_HSEON</name> <operator>|</operator> <name>RCC_CR_CSSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till HSE is disabled */</comment>
  <while>while <condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_HSERDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>HSE_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Reset HSEBYP bit */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_HSEBYP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_PLL2_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Get Start Tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Clear PLL2ON bit */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLL2ON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till PLL2 is disabled */</comment>
  <while>while <condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLL2RDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLL2_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_PLL2_SUPPORT */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_PLLI2S_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Get Start Tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Clear PLL3ON bit */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLL3ON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait till PLL3 is disabled */</comment>
  <while>while <condition>(<expr><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLL3RDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLLI2S_TIMEOUT_VALUE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_PLLI2S_SUPPORT */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_CFGR2_PREDIV1</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Reset CFGR2 register */</comment>
  <expr_stmt><expr><call><name>CLEAR_REG</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_CFGR2_PREDIV1 */</comment>

  <comment type="block">/* Reset all CSR flags */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CSR</name></name></expr></argument>, <argument><expr><name>RCC_CSR_RMVF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable all interrupts */</comment>
  <expr_stmt><expr><call><name>CLEAR_REG</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CIR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the RCC Oscillators according to the specified parameters in the
  *         RCC_OscInitTypeDef.
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB FS)
  * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
  *         supported by this macro. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCC_OscConfig</name><parameter_list>(<parameter><decl><type><name>RCC_OscInitTypeDef</name>  <modifier>*</modifier></type><name>RCC_OscInitStruct</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pll_config</name></decl>;</decl_stmt>

  <comment type="block">/* Check Null pointer */</comment>
  <if_stmt><if>if <condition>(<expr><name>RCC_OscInitStruct</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_OSCILLATORTYPE</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>OscillatorType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*------------------------------- HSE Configuration ------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>OscillatorType</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_OSCILLATORTYPE_HSE</name><operator>)</operator> <operator>==</operator> <name>RCC_OSCILLATORTYPE_HSE</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_HSE</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSEState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_SYSCLKSOURCE_STATUS_HSE</name><operator>)</operator>
        <operator>||</operator> <operator>(</operator><operator>(</operator><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_SYSCLKSOURCE_STATUS_PLLCLK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>__HAL_RCC_GET_PLL_OSCSOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_HSERDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSEState</name></name> <operator>==</operator> <name>RCC_HSE_OFF</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Set the new HSE configuration ---------------------------------------*/</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_HSE_CONFIG</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSEState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


      <comment type="block">/* Check the HSE State */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSEState</name></name> <operator>!=</operator> <name>RCC_HSE_OFF</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Get Start Tick */</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till HSE is ready */</comment>
        <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_HSERDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>HSE_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Get Start Tick */</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till HSE is disabled */</comment>
        <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_HSERDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>HSE_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*----------------------------- HSI Configuration --------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>OscillatorType</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_OSCILLATORTYPE_HSI</name><operator>)</operator> <operator>==</operator> <name>RCC_OSCILLATORTYPE_HSI</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_HSI</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSIState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_CALIBRATION_VALUE</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSICalibrationValue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_SYSCLKSOURCE_STATUS_HSI</name><operator>)</operator>
        <operator>||</operator> <operator>(</operator><operator>(</operator><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_SYSCLKSOURCE_STATUS_PLLCLK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>__HAL_RCC_GET_PLL_OSCSOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_PLLSOURCE_HSI_DIV2</name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* When HSI is used as system clock it will not disabled */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_HSIRDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSIState</name></name> <operator>!=</operator> <name>RCC_HSI_ON</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if>
      <comment type="block">/* Otherwise, just the calibration is allowed */</comment>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSICalibrationValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Check the HSI State */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSIState</name></name> <operator>!=</operator> <name>RCC_HSI_OFF</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the Internal High Speed oscillator (HSI). */</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_HSI_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get Start Tick */</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till HSI is ready */</comment>
        <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_HSIRDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>HSI_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>

        <comment type="block">/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSICalibrationValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Disable the Internal High Speed oscillator (HSI). */</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_HSI_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get Start Tick */</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till HSI is disabled */</comment>
        <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_HSIRDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>HSI_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*------------------------------ LSI Configuration -------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>OscillatorType</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_OSCILLATORTYPE_LSI</name><operator>)</operator> <operator>==</operator> <name>RCC_OSCILLATORTYPE_LSI</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_LSI</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSIState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check the LSI State */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSIState</name></name> <operator>!=</operator> <name>RCC_LSI_OFF</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable the Internal Low Speed oscillator (LSI). */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_LSI_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Get Start Tick */</comment>
      <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Wait till LSI is ready */</comment>
      <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_LSIRDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>LSI_TIMEOUT_VALUE</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
      <comment type="block">/*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/</comment>
      <expr_stmt><expr><call><name>RCC_Delay</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Disable the Internal Low Speed oscillator (LSI). */</comment>
      <expr_stmt><expr><call><name>__HAL_RCC_LSI_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Get Start Tick */</comment>
      <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Wait till LSI is disabled */</comment>
      <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_LSIRDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>LSI_TIMEOUT_VALUE</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*------------------------------ LSE Configuration -------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>OscillatorType</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_OSCILLATORTYPE_LSE</name><operator>)</operator> <operator>==</operator> <name>RCC_OSCILLATORTYPE_LSE</name></expr>)</condition>
  <block>{<block_content>
    <decl_stmt><decl><type><name>FlagStatus</name></type>       <name>pwrclkchanged</name> <init>= <expr><name>RESET</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_LSE</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSEState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update LSE configuration in Backup Domain control register    */</comment>
    <comment type="block">/* Requires to enable write access to Backup Domain of necessary */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_RCC_PWR_IS_CLK_DISABLED</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>__HAL_RCC_PWR_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pwrclkchanged</name> <operator>=</operator> <name>SET</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>PWR_CR_DBP</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable write access to Backup domain */</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>PWR_CR_DBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Wait for Backup domain Write protection disable */</comment>
      <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>PWR</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>PWR_CR_DBP</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>RCC_DBP_TIMEOUT_VALUE</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Set the new LSE configuration -----------------------------------------*/</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_LSE_CONFIG</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSEState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Check the LSE State */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSEState</name></name> <operator>!=</operator> <name>RCC_LSE_OFF</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Get Start Tick */</comment>
      <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Wait till LSE is ready */</comment>
      <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_LSERDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>RCC_LSE_TIMEOUT_VALUE</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Get Start Tick */</comment>
      <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Wait till LSE is disabled */</comment>
      <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_LSERDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>RCC_LSE_TIMEOUT_VALUE</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Require to disable power clock if necessary */</comment>
    <if_stmt><if>if <condition>(<expr><name>pwrclkchanged</name> <operator>==</operator> <name>SET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>__HAL_RCC_PWR_CLK_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_CR_PLL2ON</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/*-------------------------------- PLL2 Configuration -----------------------*/</comment>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLL2</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL2</name><operator>.</operator><name>PLL2State</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL2</name><operator>.</operator><name>PLL2State</name></name><operator>)</operator> <operator>!=</operator> <name>RCC_PLL2_NONE</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>__HAL_RCC_GET_PLL_OSCSOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name><operator>)</operator> <operator>&amp;&amp;</operator> \
        <operator>(</operator><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RCC_SYSCLKSOURCE_STATUS_PLLCLK</name><operator>)</operator> <operator>&amp;&amp;</operator> \
        <operator>(</operator><operator>(</operator><call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name></expr></argument>, <argument><expr><name>RCC_CFGR2_PREDIV1SRC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RCC_CFGR2_PREDIV1SRC_PLL2</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL2</name><operator>.</operator><name>PLL2State</name></name><operator>)</operator> <operator>==</operator> <name>RCC_PLL2_ON</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Check the parameters */</comment>
        <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLL2_MUL</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL2</name><operator>.</operator><name>PLL2MUL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_HSE_PREDIV2</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL2</name><operator>.</operator><name>HSEPrediv2Value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Prediv2 can be written only when the PLLI2S is disabled. */</comment>
        <comment type="block">/* Return an error only if new value is different from the programmed value */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RCC_CR_PLL3ON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
            <operator>(</operator><call><name>__HAL_RCC_HSE_GET_PREDIV2</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL2</name><operator>.</operator><name>HSEPrediv2Value</name></name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Disable the main PLL2. */</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_PLL2_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get Start Tick */</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till PLL2 is disabled */</comment>
        <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLL2RDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLL2_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>

        <comment type="block">/* Configure the HSE prediv2 factor --------------------------------*/</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_HSE_PREDIV2_CONFIG</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL2</name><operator>.</operator><name>HSEPrediv2Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Configure the main PLL2 multiplication factors. */</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_PLL2_CONFIG</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL2</name><operator>.</operator><name>PLL2MUL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Enable the main PLL2. */</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_PLL2_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get Start Tick */</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till PLL2 is ready */</comment>
        <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLL2RDY</name></expr></argument>)</argument_list></call>  <operator>==</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLL2_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Set PREDIV1 source to HSE */</comment>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name></expr></argument>, <argument><expr><name>RCC_CFGR2_PREDIV1SRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Disable the main PLL2. */</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_PLL2_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get Start Tick */</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till PLL2 is disabled */</comment>
        <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLL2RDY</name></expr></argument>)</argument_list></call>  <operator>!=</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLL2_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_CR_PLL2ON */</comment>
  <comment type="block">/*-------------------------------- PLL Configuration -----------------------*/</comment>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLL</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLState</name></name><operator>)</operator> <operator>!=</operator> <name>RCC_PLL_NONE</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check if the PLL is used as system clock or not */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>RCC_SYSCLKSOURCE_STATUS_PLLCLK</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLState</name></name><operator>)</operator> <operator>==</operator> <name>RCC_PLL_ON</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Check the parameters */</comment>
        <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLLSOURCE</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLSource</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PLL_MUL</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLMUL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Disable the main PLL. */</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_PLL_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get Start Tick */</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till PLL is disabled */</comment>
        <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLRDY</name></expr></argument>)</argument_list></call>  <operator>!=</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLL_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>

        <comment type="block">/* Configure the HSE prediv factor --------------------------------*/</comment>
        <comment type="block">/* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLSource</name></name> <operator>==</operator> <name>RCC_PLLSOURCE_HSE</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Check the parameter */</comment>
          <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_HSE_PREDIV</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSEPredivValue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_CFGR2_PREDIV1SRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
          <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PREDIV1_SOURCE</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>Prediv1Source</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Set PREDIV1 source */</comment>
          <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name></expr></argument>, <argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>Prediv1Source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_CFGR2_PREDIV1SRC */</comment>

          <comment type="block">/* Set PREDIV1 Value */</comment>
          <expr_stmt><expr><call><name>__HAL_RCC_HSE_PREDIV_CONFIG</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSEPredivValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Configure the main PLL clock source and multiplication factors. */</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_PLL_CONFIG</name><argument_list>(<argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLSource</name></name></expr></argument>,
                             <argument><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLMUL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Enable the main PLL. */</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_PLL_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get Start Tick */</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till PLL is ready */</comment>
        <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLRDY</name></expr></argument>)</argument_list></call>  <operator>==</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLL_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Disable the main PLL. */</comment>
        <expr_stmt><expr><call><name>__HAL_RCC_PLL_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get Start Tick */</comment>
        <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait till PLL is disabled */</comment>
        <while>while <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLRDY</name></expr></argument>)</argument_list></call>  <operator>!=</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>PLL_TIMEOUT_VALUE</name></expr>)</condition>
          <block>{<block_content>
            <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Check if there is a request to disable the PLL used as System clock source */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLState</name></name><operator>)</operator> <operator>==</operator> <name>RCC_PLL_OFF</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Do not return HAL_ERROR if request repeats the current configuration */</comment>
        <expr_stmt><expr><name>pll_config</name> <operator>=</operator> <name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>READ_BIT</name><argument_list>(<argument><expr><name>pll_config</name></expr></argument>, <argument><expr><name>RCC_CFGR_PLLSRC</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLSource</name></name><operator>)</operator> <operator>||</operator>
            <operator>(</operator><call><name>READ_BIT</name><argument_list>(<argument><expr><name>pll_config</name></expr></argument>, <argument><expr><name>RCC_CFGR_PLLMULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLMUL</name></name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the CPU, AHB and APB buses clocks according to the specified
  *         parameters in the RCC_ClkInitStruct.
  * @param  RCC_ClkInitStruct pointer to an RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC peripheral.
  * @param  FLatency FLASH Latency
  *          The value of this parameter depend on device used within the same series
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated by @ref HAL_RCC_GetHCLKFreq() function called within this function
  *
  * @note   The HSI is used (enabled by hardware) as system clock source after
  *         start-up from Reset, wake-up from STOP and STANDBY mode, or in case
  *         of failure of the HSE used directly or indirectly as system clock
  *         (if the Clock Security System CSS is enabled).
  *
  * @note   A switch from one clock source to another occurs only if the target
  *         clock source is ready (clock stable after start-up delay or PLL locked).
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source will be ready.
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RCC_ClockConfig</name><parameter_list>(<parameter><decl><type><name>RCC_ClkInitTypeDef</name>  <modifier>*</modifier></type><name>RCC_ClkInitStruct</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>FLatency</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <comment type="block">/* Check Null pointer */</comment>
  <if_stmt><if>if <condition>(<expr><name>RCC_ClkInitStruct</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_CLOCKTYPE</name><argument_list>(<argument><expr><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>ClockType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FLASH_LATENCY</name><argument_list>(<argument><expr><name>FLatency</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_ACR_LATENCY</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Increasing the number of wait states because of higher CPU frequency */</comment>
  <if_stmt><if>if <condition>(<expr><name>FLatency</name> <operator>&gt;</operator> <call><name>__HAL_FLASH_GET_LATENCY</name><argument_list>()</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */</comment>
    <expr_stmt><expr><call><name>__HAL_FLASH_SET_LATENCY</name><argument_list>(<argument><expr><name>FLatency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_FLASH_GET_LATENCY</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>FLatency</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_ACR_LATENCY */</comment>
<comment type="block">/*-------------------------- HCLK Configuration --------------------------*/</comment>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>ClockType</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_CLOCKTYPE_HCLK</name><operator>)</operator> <operator>==</operator> <name>RCC_CLOCKTYPE_HCLK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>ClockType</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_CLOCKTYPE_PCLK1</name><operator>)</operator> <operator>==</operator> <name>RCC_CLOCKTYPE_PCLK1</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name></expr></argument>, <argument><expr><name>RCC_CFGR_PPRE1</name></expr></argument>, <argument><expr><name>RCC_HCLK_DIV16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>ClockType</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_CLOCKTYPE_PCLK2</name><operator>)</operator> <operator>==</operator> <name>RCC_CLOCKTYPE_PCLK2</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name></expr></argument>, <argument><expr><name>RCC_CFGR_PPRE2</name></expr></argument>, <argument><expr><operator>(</operator><name>RCC_HCLK_DIV16</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Set the new HCLK clock divider */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_HCLK</name><argument_list>(<argument><expr><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>AHBCLKDivider</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name></expr></argument>, <argument><expr><name>RCC_CFGR_HPRE</name></expr></argument>, <argument><expr><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>AHBCLKDivider</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*------------------------- SYSCLK Configuration ---------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>ClockType</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_CLOCKTYPE_SYSCLK</name><operator>)</operator> <operator>==</operator> <name>RCC_CLOCKTYPE_SYSCLK</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_SYSCLKSOURCE</name><argument_list>(<argument><expr><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>SYSCLKSource</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* HSE is selected as System Clock Source */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>SYSCLKSource</name></name> <operator>==</operator> <name>RCC_SYSCLKSOURCE_HSE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check the HSE ready flag */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_HSERDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <comment type="block">/* PLL is selected as System Clock Source */</comment>
    <if type="elseif">else if <condition>(<expr><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>SYSCLKSource</name></name> <operator>==</operator> <name>RCC_SYSCLKSOURCE_PLLCLK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check the PLL ready flag */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_PLLRDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <comment type="block">/* HSI is selected as System Clock Source */</comment>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Check the HSI ready flag */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>__HAL_RCC_GET_FLAG</name><argument_list>(<argument><expr><name>RCC_FLAG_HSIRDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>__HAL_RCC_SYSCLK_CONFIG</name><argument_list>(<argument><expr><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>SYSCLKSource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get Start Tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><call><name>__HAL_RCC_GET_SYSCLK_SOURCE</name><argument_list>()</argument_list></call> <operator>!=</operator> <operator>(</operator><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>SYSCLKSource</name></name> <operator>&lt;&lt;</operator> <name>RCC_CFGR_SWS_Pos</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>CLOCKSWITCH_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_ACR_LATENCY</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Decreasing the number of wait states because of lower CPU frequency */</comment>
  <if_stmt><if>if <condition>(<expr><name>FLatency</name> <operator>&lt;</operator> <call><name>__HAL_FLASH_GET_LATENCY</name><argument_list>()</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */</comment>
    <expr_stmt><expr><call><name>__HAL_FLASH_SET_LATENCY</name><argument_list>(<argument><expr><name>FLatency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_FLASH_GET_LATENCY</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>FLatency</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FLASH_ACR_LATENCY */</comment>

<comment type="block">/*-------------------------- PCLK1 Configuration ---------------------------*/</comment>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>ClockType</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_CLOCKTYPE_PCLK1</name><operator>)</operator> <operator>==</operator> <name>RCC_CLOCKTYPE_PCLK1</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PCLK</name><argument_list>(<argument><expr><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>APB1CLKDivider</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name></expr></argument>, <argument><expr><name>RCC_CFGR_PPRE1</name></expr></argument>, <argument><expr><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>APB1CLKDivider</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*-------------------------- PCLK2 Configuration ---------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>ClockType</name></name><operator>)</operator> <operator>&amp;</operator> <name>RCC_CLOCKTYPE_PCLK2</name><operator>)</operator> <operator>==</operator> <name>RCC_CLOCKTYPE_PCLK2</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_PCLK</name><argument_list>(<argument><expr><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>APB2CLKDivider</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name></expr></argument>, <argument><expr><name>RCC_CFGR_PPRE2</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>APB2CLKDivider</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Update the SystemCoreClock global variable */</comment>
  <expr_stmt><expr><name>SystemCoreClock</name> <operator>=</operator> <call><name>HAL_RCC_GetSysClockFreq</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <name><name>AHBPrescTable</name><index>[<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_HPRE</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CFGR_HPRE_Pos</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* Configure the source of time base considering new system clocks settings*/</comment>
  <expr_stmt><expr><call><name>HAL_InitTick</name><argument_list>(<argument><expr><name>uwTickPrio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup RCC_Exported_Functions_Group2 Peripheral Control functions
  *  @brief   RCC clocks control functions
  *
  @verbatim
  ===============================================================================
                  ##### Peripheral Control functions #####
  ===============================================================================
    [..]
    This subsection provides a set of functions allowing to control the RCC Clocks
    frequencies.

  @endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Selects the clock source to output on MCO pin.
  * @note   MCO pin should be configured in alternate function mode.
  * @param  RCC_MCOx specifies the output direction for the clock source.
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCO1 Clock source to output on MCO1 pin(PA8).
  * @param  RCC_MCOSource specifies the clock source to output.
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCO1SOURCE_NOCLOCK     No clock selected as MCO clock
  *            @arg @ref RCC_MCO1SOURCE_SYSCLK      System clock selected as MCO clock
  *            @arg @ref RCC_MCO1SOURCE_HSI         HSI selected as MCO clock
  *            @arg @ref RCC_MCO1SOURCE_HSE         HSE selected as MCO clock
  @if STM32F105xC
  *            @arg @ref RCC_MCO1SOURCE_PLLCLK       PLL clock divided by 2 selected as MCO source
  *            @arg @ref RCC_MCO1SOURCE_PLL2CLK      PLL2 clock selected as MCO source
  *            @arg @ref RCC_MCO1SOURCE_PLL3CLK_DIV2 PLL3 clock divided by 2 selected as MCO source
  *            @arg @ref RCC_MCO1SOURCE_EXT_HSE      XT1 external 3-25 MHz oscillator clock selected as MCO source
  *            @arg @ref RCC_MCO1SOURCE_PLL3CLK      PLL3 clock selected as MCO source
  @endif
  @if STM32F107xC
  *            @arg @ref RCC_MCO1SOURCE_PLLCLK       PLL clock divided by 2 selected as MCO source
  *            @arg @ref RCC_MCO1SOURCE_PLL2CLK      PLL2 clock selected as MCO source
  *            @arg @ref RCC_MCO1SOURCE_PLL3CLK_DIV2 PLL3 clock divided by 2 selected as MCO source
  *            @arg @ref RCC_MCO1SOURCE_EXT_HSE XT1  external 3-25 MHz oscillator clock selected as MCO source
  *            @arg @ref RCC_MCO1SOURCE_PLL3CLK      PLL3 clock selected as MCO source
  @endif
  * @param  RCC_MCODiv specifies the MCO DIV.
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RCC_MCOConfig</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>RCC_MCOx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>RCC_MCOSource</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>RCC_MCODiv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GPIO_InitTypeDef</name></type> <name>gpio</name> <init>= <expr><block>{<expr><literal type="number">0U</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_MCO</name><argument_list>(<argument><expr><name>RCC_MCOx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_MCODIV</name><argument_list>(<argument><expr><name>RCC_MCODiv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RCC_MCO1SOURCE</name><argument_list>(<argument><expr><name>RCC_MCOSource</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>RCC_MCOx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>RCC_MCODiv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Configure the MCO1 pin in alternate function mode */</comment>
  <expr_stmt><expr><name><name>gpio</name><operator>.</operator><name>Mode</name></name>      <operator>=</operator> <name>GPIO_MODE_AF_PP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gpio</name><operator>.</operator><name>Speed</name></name>     <operator>=</operator> <name>GPIO_SPEED_FREQ_HIGH</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gpio</name><operator>.</operator><name>Pull</name></name>      <operator>=</operator> <name>GPIO_NOPULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gpio</name><operator>.</operator><name>Pin</name></name>       <operator>=</operator> <name>MCO1_PIN</name></expr>;</expr_stmt>

  <comment type="block">/* MCO1 Clock Enable */</comment>
  <expr_stmt><expr><call><name>MCO1_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>HAL_GPIO_Init</name><argument_list>(<argument><expr><name>MCO1_GPIO_PORT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gpio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Configure the MCO clock source */</comment>
  <expr_stmt><expr><call><name>__HAL_RCC_MCO1_CONFIG</name><argument_list>(<argument><expr><name>RCC_MCOSource</name></expr></argument>, <argument><expr><name>RCC_MCODiv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enables the Clock Security System.
  * @note   If a failure is detected on the HSE oscillator clock, this oscillator
  *         is automatically disabled and an interrupt is generated to inform the
  *         software about the failure (Clock Security System Interrupt, CSSI),
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RCC_EnableCSS</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>RCC_CR_CSSON_BB</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ENABLE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RCC_DisableCSS</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>RCC_CR_CSSON_BB</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>DISABLE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns the SYSCLK frequency
  * @note   The system frequency computed by this function is not the real
  *         frequency in the chip. It is calculated based on the predefined
  *         constant and the selected clock source:
  * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
  * @note     If SYSCLK source is HSE, function returns a value based on HSE_VALUE
  *           divided by PREDIV factor(**)
  * @note     If SYSCLK source is PLL, function returns a value based on HSE_VALUE
  *           divided by PREDIV factor(**) or HSI_VALUE(*) multiplied by the PLL factor.
  * @note     (*) HSI_VALUE is a constant defined in stm32f1xx_hal_conf.h file (default value
  *               8 MHz) but the real value may vary depending on the variations
  *               in voltage and temperature.
  * @note     (**) HSE_VALUE is a constant defined in stm32f1xx_hal_conf.h file (default value
  *                8 MHz), user has to ensure that HSE_VALUE is same as the real
  *                frequency of the crystal used. Otherwise, this function may
  *                have wrong result.
  *
  * @note   The result of this function could be not correct when using fractional
  *         value for HSE crystal.
  *
  * @note   This function can be used by the user application to compute the
  *         baud-rate for the communication peripherals or configure other parameters.
  *
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RCC_GetSysClockFreq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_CFGR2_PREDIV1SRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>aPLLMULFactorTable</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>aPredivFactorTable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>aPLLMULFactorTable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_CFGR2_PREDIV1</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>aPredivFactorTable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>aPredivFactorTable</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/*RCC_CFGR2_PREDIV1*/</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>prediv</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>pllclk</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>pllmul</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>sysclockfreq</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_CFGR2_PREDIV1SRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>prediv2</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>pll2mul</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/*RCC_CFGR2_PREDIV1SRC*/</comment>

  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name></expr>;</expr_stmt>

  <comment type="block">/* Get SYSCLK source -------------------------------------------------------*/</comment>
  <switch>switch <condition>(<expr><name>tmpreg</name> <operator>&amp;</operator> <name>RCC_CFGR_SWS</name></expr>)</condition>
  <block>{<block_content>
    <case>case <expr><name>RCC_SYSCLKSOURCE_STATUS_HSE</name></expr>:</case>  <comment type="block">/* HSE used as system clock */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name>sysclockfreq</name> <operator>=</operator> <name>HSE_VALUE</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>RCC_SYSCLKSOURCE_STATUS_PLLCLK</name></expr>:</case>  <comment type="block">/* PLL used as system clock */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name>pllmul</name> <operator>=</operator> <name><name>aPLLMULFactorTable</name><index>[<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <name>RCC_CFGR_PLLMULL</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CFGR_PLLMULL_Pos</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <name>RCC_CFGR_PLLSRC</name><operator>)</operator> <operator>!=</operator> <name>RCC_PLLSOURCE_HSI_DIV2</name></expr>)</condition>
      <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_CFGR2_PREDIV1</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><name>prediv</name> <operator>=</operator> <name><name>aPredivFactorTable</name><index>[<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name> <operator>&amp;</operator> <name>RCC_CFGR2_PREDIV1</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CFGR2_PREDIV1_Pos</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name>prediv</name> <operator>=</operator> <name><name>aPredivFactorTable</name><index>[<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_PLLXTPRE</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CFGR_PLLXTPRE_Pos</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/*RCC_CFGR2_PREDIV1*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_CFGR2_PREDIV1SRC</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name></expr></argument>, <argument><expr><name>RCC_CFGR2_PREDIV1SRC</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* PLL2 selected as Prediv1 source */</comment>
          <comment type="block">/* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */</comment>
          <expr_stmt><expr><name>prediv2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name> <operator>&amp;</operator> <name>RCC_CFGR2_PREDIV2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CFGR2_PREDIV2_Pos</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>pll2mul</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name> <operator>&amp;</operator> <name>RCC_CFGR2_PLL2MUL</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CFGR2_PLL2MUL_Pos</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>pllclk</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>HSE_VALUE</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>pll2mul</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>pllmul</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>prediv2</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>prediv</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <comment type="block">/* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */</comment>
          <expr_stmt><expr><name>pllclk</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>HSE_VALUE</name> <operator>*</operator> <name>pllmul</name><operator>)</operator> <operator>/</operator> <name>prediv</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */</comment>
        <comment type="block">/* In this case need to divide pllclk by 2 */</comment>
        <if_stmt><if>if <condition>(<expr><name>pllmul</name> <operator>==</operator> <name><name>aPLLMULFactorTable</name><index>[<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>RCC_CFGR_PLLMULL6_5</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CFGR_PLLMULL_Pos</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name>pllclk</name> <operator>=</operator> <name>pllclk</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <comment type="block">/* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */</comment>
        <expr_stmt><expr><name>pllclk</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>HSE_VALUE</name>  <operator>*</operator> <name>pllmul</name><operator>)</operator> <operator>/</operator> <name>prediv</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/*RCC_CFGR2_PREDIV1SRC*/</comment>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */</comment>
        <expr_stmt><expr><name>pllclk</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>HSI_VALUE</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>pllmul</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>sysclockfreq</name> <operator>=</operator> <name>pllclk</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>RCC_SYSCLKSOURCE_STATUS_HSI</name></expr>:</case>  <comment type="block">/* HSI used as system clock source */</comment>
    <default>default:</default> <comment type="block">/* HSI used as system clock */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name>sysclockfreq</name> <operator>=</operator> <name>HSI_VALUE</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><name>sysclockfreq</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns the HCLK frequency
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RCC_GetHCLKFreq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name>SystemCoreClock</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns the PCLK1 frequency
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RCC_GetPCLK1Freq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/</comment>
  <return>return <expr><operator>(</operator><call><name>HAL_RCC_GetHCLKFreq</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <name><name>APBPrescTable</name><index>[<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_PPRE1</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CFGR_PPRE1_Pos</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns the PCLK2 frequency
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RCC_GetPCLK2Freq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/</comment>
  <return>return <expr><operator>(</operator><call><name>HAL_RCC_GetHCLKFreq</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <name><name>APBPrescTable</name><index>[<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_PPRE2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CFGR_PPRE2_Pos</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configures the RCC_OscInitStruct according to the internal
  * RCC configuration registers.
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RCC_GetOscConfig</name><parameter_list>(<parameter><decl><type><name>RCC_OscInitTypeDef</name>  <modifier>*</modifier></type><name>RCC_OscInitStruct</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><name>RCC_OscInitStruct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set all possible values for the Oscillator type parameter ---------------*/</comment>
  <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>OscillatorType</name></name> <operator>=</operator> <name>RCC_OSCILLATORTYPE_HSE</name> <operator>|</operator> <name>RCC_OSCILLATORTYPE_HSI</name>  \
                                      <operator>|</operator> <name>RCC_OSCILLATORTYPE_LSE</name> <operator>|</operator> <name>RCC_OSCILLATORTYPE_LSI</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_CFGR2_PREDIV1SRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Get the Prediv1 source --------------------------------------------------*/</comment>
  <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>Prediv1Source</name></name> <operator>=</operator> <call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name></expr></argument>, <argument><expr><name>RCC_CFGR2_PREDIV1SRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_CFGR2_PREDIV1SRC */</comment>

  <comment type="block">/* Get the HSE configuration -----------------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RCC_CR_HSEBYP</name><operator>)</operator> <operator>==</operator> <name>RCC_CR_HSEBYP</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSEState</name></name> <operator>=</operator> <name>RCC_HSE_BYPASS</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RCC_CR_HSEON</name><operator>)</operator> <operator>==</operator> <name>RCC_CR_HSEON</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSEState</name></name> <operator>=</operator> <name>RCC_HSE_ON</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSEState</name></name> <operator>=</operator> <name>RCC_HSE_OFF</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSEPredivValue</name></name> <operator>=</operator> <call><name>__HAL_RCC_HSE_GET_PREDIV</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the HSI configuration -----------------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RCC_CR_HSION</name><operator>)</operator> <operator>==</operator> <name>RCC_CR_HSION</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSIState</name></name> <operator>=</operator> <name>RCC_HSI_ON</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSIState</name></name> <operator>=</operator> <name>RCC_HSI_OFF</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>HSICalibrationValue</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RCC_CR_HSITRIM</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RCC_CR_HSITRIM_Pos</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Get the LSE configuration -----------------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <name>RCC_BDCR_LSEBYP</name><operator>)</operator> <operator>==</operator> <name>RCC_BDCR_LSEBYP</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSEState</name></name> <operator>=</operator> <name>RCC_LSE_BYPASS</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>BDCR</name></name> <operator>&amp;</operator> <name>RCC_BDCR_LSEON</name><operator>)</operator> <operator>==</operator> <name>RCC_BDCR_LSEON</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSEState</name></name> <operator>=</operator> <name>RCC_LSE_ON</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSEState</name></name> <operator>=</operator> <name>RCC_LSE_OFF</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Get the LSI configuration -----------------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CSR</name></name> <operator>&amp;</operator> <name>RCC_CSR_LSION</name><operator>)</operator> <operator>==</operator> <name>RCC_CSR_LSION</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSIState</name></name> <operator>=</operator> <name>RCC_LSI_ON</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>LSIState</name></name> <operator>=</operator> <name>RCC_LSI_OFF</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>


  <comment type="block">/* Get the PLL configuration -----------------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RCC_CR_PLLON</name><operator>)</operator> <operator>==</operator> <name>RCC_CR_PLLON</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLState</name></name> <operator>=</operator> <name>RCC_PLL_ON</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLState</name></name> <operator>=</operator> <name>RCC_PLL_OFF</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLSource</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_PLLSRC</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL</name><operator>.</operator><name>PLLMUL</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_PLLMULL</name><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCC_CR_PLL2ON</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Get the PLL2 configuration -----------------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>RCC_CR_PLL2ON</name><operator>)</operator> <operator>==</operator> <name>RCC_CR_PLL2ON</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL2</name><operator>.</operator><name>PLL2State</name></name> <operator>=</operator> <name>RCC_PLL2_ON</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL2</name><operator>.</operator><name>PLL2State</name></name> <operator>=</operator> <name>RCC_PLL2_OFF</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL2</name><operator>.</operator><name>HSEPrediv2Value</name></name> <operator>=</operator> <call><name>__HAL_RCC_HSE_GET_PREDIV2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>-&gt;</operator><name>PLL2</name><operator>.</operator><name>PLL2MUL</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR2</name></name> <operator>&amp;</operator> <name>RCC_CFGR2_PLL2MUL</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RCC_CR_PLL2ON */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Get the RCC_ClkInitStruct according to the internal
  * RCC configuration registers.
  * @param  RCC_ClkInitStruct pointer to an RCC_ClkInitTypeDef structure that
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RCC_GetClockConfig</name><parameter_list>(<parameter><decl><type><name>RCC_ClkInitTypeDef</name>  <modifier>*</modifier></type><name>RCC_ClkInitStruct</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pFLatency</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><name>RCC_ClkInitStruct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><name>pFLatency</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set all possible values for the Clock type parameter --------------------*/</comment>
  <expr_stmt><expr><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>ClockType</name></name> <operator>=</operator> <name>RCC_CLOCKTYPE_SYSCLK</name> <operator>|</operator> <name>RCC_CLOCKTYPE_HCLK</name> <operator>|</operator> <name>RCC_CLOCKTYPE_PCLK1</name> <operator>|</operator> <name>RCC_CLOCKTYPE_PCLK2</name></expr>;</expr_stmt>

  <comment type="block">/* Get the SYSCLK configuration --------------------------------------------*/</comment>
  <expr_stmt><expr><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>SYSCLKSource</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_SW</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Get the HCLK configuration ----------------------------------------------*/</comment>
  <expr_stmt><expr><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>AHBCLKDivider</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_HPRE</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Get the APB1 configuration ----------------------------------------------*/</comment>
  <expr_stmt><expr><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>APB1CLKDivider</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_PPRE1</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Get the APB2 configuration ----------------------------------------------*/</comment>
  <expr_stmt><expr><name><name>RCC_ClkInitStruct</name><operator>-&gt;</operator><name>APB2CLKDivider</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_PPRE2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive>   <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLASH_ACR_LATENCY</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Get the Flash Wait State (Latency) configuration ------------------------*/</comment>
  <expr_stmt><expr><operator>*</operator><name>pFLatency</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>FLASH</name><operator>-&gt;</operator><name>ACR</name></name> <operator>&amp;</operator> <name>FLASH_ACR_LATENCY</name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* For VALUE lines devices, only LATENCY_0 can be set*/</comment>
  <expr_stmt><expr><operator>*</operator><name>pFLatency</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>FLASH_LATENCY_0</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_RCC_NMI_IRQHandler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check RCC CSSF flag  */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>__HAL_RCC_GET_IT</name><argument_list>(<argument><expr><name>RCC_IT_CSS</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* RCC Clock Security System interrupt user callback */</comment>
    <expr_stmt><expr><call><name>HAL_RCC_CSSCallback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear RCC CSS pending bit */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_CLEAR_IT</name><argument_list>(<argument><expr><name>RCC_IT_CSS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>RCC_Delay</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>mdelay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>Delay</name> <init>= <expr><name>mdelay</name> <operator>*</operator> <operator>(</operator><name>SystemCoreClock</name> <operator>/</operator> <literal type="number">8U</literal> <operator>/</operator> <literal type="number">1000U</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <do>do
  <block>{<block_content>
    <expr_stmt><expr><call><name>__NOP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
  while <condition>(<expr><name>Delay</name> <operator>--</operator></expr>)</condition>;</do>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_RCC_CSSCallback</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_RCC_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
