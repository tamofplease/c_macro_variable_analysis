<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f103ve/libraries/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pcd_ex.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f1xx_hal_pcd_ex.c
  * @author  MCD Application Team
  * @brief   PCD Extended HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the USB Peripheral Controller:
  *           + Extended features functions
  *
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f1xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F1xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup PCDEx PCDEx
  * @brief PCD Extended HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_PCD_MODULE_ENABLED</name></cpp:ifdef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_FS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Private types -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private constants ---------------------------------------------------------*/</comment>
<comment type="block">/* Private macros ------------------------------------------------------------*/</comment>
<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>
<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup PCDEx_Exported_Functions PCDEx Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup PCDEx_Exported_Functions_Group1 Peripheral Control functions
  * @brief    PCDEx control functions
 *
@verbatim
 ===============================================================================
                 ##### Extended features functions #####
 ===============================================================================
    [..]  This section provides functions allowing to:
      (+) Update FIFO configuration

@endverbatim
  * @{
  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_FS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Set Tx FIFO
  * @param  hpcd PCD handle
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCDEx_SetTxFiFo</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>fifo</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>Tx_Offset</name></decl>;</decl_stmt>

  <comment type="block">/*  TXn min size = 16 words. (n  : Transmit FIFO index)
      When a TxFIFO is not used, the Configuration should be as follows:
          case 1 :  n &gt; m    and Txn is not used    (n,m  : Transmit FIFO indexes)
         --&gt; Txm can use the space allocated for Txn.
         case2  :  n &lt; m    and Txn is not used    (n,m  : Transmit FIFO indexes)
         --&gt; Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */</comment>

  <expr_stmt><expr><name>Tx_Offset</name> <operator>=</operator> <name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>GRXFSIZ</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>fifo</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIEPTXF0_HNPTXFSIZ</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>size</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <name>Tx_Offset</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>Tx_Offset</name> <operator>+=</operator> <operator>(</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIEPTXF0_HNPTXFSIZ</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>fifo</name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>Tx_Offset</name> <operator>+=</operator> <operator>(</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIEPTXF</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Multiply Tx_Size by 2 to get higher performance */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIEPTXF</name><index>[<expr><name>fifo</name> <operator>-</operator> <literal type="number">1U</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>size</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <name>Tx_Offset</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Set Rx FIFO
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCDEx_SetRxFiFo</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>GRXFSIZ</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined (USB_OTG_FS) */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Configure PMA for EP
  * @param  hpcd  Device instance
  * @param  ep_addr endpoint address
  * @param  ep_kind endpoint Kind
  *                  USB_SNG_BUF: Single Buffer used
  *                  USB_DBL_BUF: Double Buffer used
  * @param  pmaadress: EP address in The PMA: In case of single buffer endpoint
  *                   this parameter is 16-bit value providing the address
  *                   in PMA allocated to endpoint.
  *                   In case of double buffer endpoint this parameter
  *                   is a 32-bit value providing the endpoint buffer 0 address
  *                   in the LSB part of 32-bit value and endpoint buffer 1 address
  *                   in the MSB part of 32-bit value.
  * @retval HAL status
  */</comment>

<function><type><name>HAL_StatusTypeDef</name></type>  <name>HAL_PCDEx_PMAConfig</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>,
                                       <parameter><decl><type><name>uint16_t</name></type> <name>ep_addr</name></decl></parameter>,
                                       <parameter><decl><type><name>uint16_t</name></type> <name>ep_kind</name></decl></parameter>,
                                       <parameter><decl><type><name>uint32_t</name></type> <name>pmaadress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>PCD_EPTypeDef</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

  <comment type="block">/* initialize ep structure*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x80U</literal> <operator>&amp;</operator> <name>ep_addr</name><operator>)</operator> <operator>==</operator> <literal type="number">0x80U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>&amp;</operator><name><name>hpcd</name><operator>-&gt;</operator><name>IN_ep</name><index>[<expr><name>ep_addr</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>&amp;</operator><name><name>hpcd</name><operator>-&gt;</operator><name>OUT_ep</name><index>[<expr><name>ep_addr</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Here we check if the endpoint is single or double Buffer*/</comment>
  <if_stmt><if>if <condition>(<expr><name>ep_kind</name> <operator>==</operator> <name>PCD_SNG_BUF</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Single Buffer */</comment>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>doublebuffer</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <comment type="block">/* Configure the PMA */</comment>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>pmaadress</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>pmaadress</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <comment type="block">/* USB_DBL_BUF */</comment>
  <block>{<block_content>
    <comment type="block">/* Double Buffer Endpoint */</comment>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>doublebuffer</name></name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    <comment type="block">/* Configure the PMA */</comment>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>pmaaddr0</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>pmaadress</name> <operator>&amp;</operator> <literal type="number">0xFFFFU</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>pmaaddr1</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>pmaadress</name> <operator>&amp;</operator> <literal type="number">0xFFFF0000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Software Device Connection,
  *         this function is not required by USB OTG FS peripheral, it is used
  *         only by USB Device FS peripheral.
  * @param  hpcd: PCD handle
  * @param  state: connection state (0 : disconnected / 1: connected)
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCDEx_SetConnectionState</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */</comment>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined (USB) */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Send LPM message to user layer callback.
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCDEx_LPM_Callback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>PCD_LPM_MsgTypeDef</name></type> <name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Send BatteryCharging message to user layer callback.
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCDEx_BCD_Callback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>PCD_BCD_MsgTypeDef</name></type> <name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_BCD_Callback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined (USB) || defined (USB_OTG_FS) */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_PCD_MODULE_ENABLED */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
