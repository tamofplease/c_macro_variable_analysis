<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f103ve/drivers/drv_usart.c"><comment type="block">/*
 * Copyright (c) 2006-2019, RT-Thread Development Team
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Change Logs:
 * Date           Author       Notes
 * 2019-11-09     xiangxistu   first version
 * 2020-05-18     chenyaxing   modify stm32_uart_config struct
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stm32f1xx.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"uart_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;board.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__STM32_PORT</name><parameter_list>(<parameter><type><name>port</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>GPIO##port##_BASE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PIN</name><parameter_list>(<parameter><type><name>PORTx</name></type></parameter>,<parameter><type><name>PIN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(long)((16 * ( ((long)__STM32_PORT(PORTx) - (long)GPIOA_BASE)/(0x0400UL) )) + PIN)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>UART_HandleTypeDef</name></type> <name>handle</name></decl>;</decl_stmt>

<comment type="block">/* stm32 config class */</comment>
<struct>struct <name>stm32_uart_config</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>USART_TypeDef</name> <modifier>*</modifier></type><name>Instance</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IRQn_Type</name></type> <name>irq_type</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tx_pin_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rx_pin_name</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>stm32_uart_config</name></name> <modifier>*</modifier></type><name>_uart_config</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stm32_uart_config</name></name></type> <name><name>uart_config</name><index>[]</index></name> <init>=
<expr><block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART1</name></cpp:ifdef>
    <expr><name>UART1_CONFIG</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART2</name></cpp:ifdef>
    <expr><name>UART2_CONFIG</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART3</name></cpp:ifdef>
    <expr><name>UART3_CONFIG</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART4</name></cpp:ifdef>
    <expr><name>UART4_CONFIG</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART5</name></cpp:ifdef>
    <expr><name>UART5_CONFIG</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART6</name></cpp:ifdef>
    <expr><name>UART6_CONFIG</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART7</name></cpp:ifdef>
    <expr><name>UART7_CONFIG</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART8</name></cpp:ifdef>
    <expr><name>UART8_CONFIG</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_LPUART1</name></cpp:ifdef>
    <expr><name>LPUART1_CONFIG</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>long</name></type> <name>stm32_uart_clk_enable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stm32_uart_config</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_INSTANCE</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* uart clock enable */</comment>
    <switch>switch <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>config</name><operator>-&gt;</operator><name>Instance</name></name></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART1</name></cpp:ifdef>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USART1</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_USART1_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BSP_USING_UART1 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART2</name></cpp:ifdef>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USART2</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_USART2_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BSP_USING_UART2 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART3</name></cpp:ifdef>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USART3</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_USART3_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BSP_USING_UART3 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART4</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32F0</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32L0</name></expr></argument>)</argument_list></call> <operator>||</operator> \
   <call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32G0</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USART4</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_USART4_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>UART4</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_UART4_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BSP_USING_UART4 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART5</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32F0</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32L0</name></expr></argument>)</argument_list></call> <operator>||</operator> \
   <call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32G0</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USART5</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_USART5_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>UART5</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_UART5_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BSP_USING_UART5 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART6</name></cpp:ifdef>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USART6</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_USART6_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BSP_USING_UART6 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART7</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32F0</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USART7</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_USART7_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>UART7</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_UART7_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BSP_USING_UART7 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART8</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32F0</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USART8</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_USART8_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>UART8</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_UART8_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BSP_USING_UART8 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_LPUART1</name></cpp:ifdef>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>LPUART1</name></expr>:</case>
       <expr_stmt><expr><call><name>__HAL_RCC_LPUART1_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BSP_USING_LPUART1 */</comment>
    <default>default:</default>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></switch>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type> <name>stm32_gpio_clk_enable</name><parameter_list>(<parameter><decl><type><name>GPIO_TypeDef</name> <modifier>*</modifier></type><name>gpiox</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_GPIO_ALL_INSTANCE</name><argument_list>(<argument><expr><name>gpiox</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* gpio ports clock enable */</comment>
    <switch>switch <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>gpiox</name></expr>)</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOA_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOA</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOA_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOB_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOB</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOB_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOC_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOC</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOC_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOD_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOD</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOD_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOE_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOE</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOE_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOF_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOF</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOF_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOG_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOG</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOG_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOH_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOH</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOH_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOI_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOI</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOI_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOJ_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOJ</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOJ_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOK_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOK</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOK_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <default>default:</default>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></switch>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>up_char</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>c</name> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_pin_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pin_name</name></decl></parameter>, <parameter><decl><type><name>GPIO_TypeDef</name> <modifier>*</modifier><modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>pin_num</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>pin_name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>port_name</name> <init>= <expr><name><name>pin_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>up_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>up_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>GPIO_TypeDef</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>GPIOA</name>
            <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name>port_name</name> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>GPIOB</name> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>GPIOA</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pin</name> <operator>=</operator> <operator>(</operator><name>GPIO_PIN_0</name> <operator>&lt;&lt;</operator> <name>pin_num</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>__lowest_bit_bitmap</name><index>[]</index></name> <init>=
<expr><block>{
    <comment type="block">/* 00 */</comment> <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* 10 */</comment> <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* 20 */</comment> <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* 30 */</comment> <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* 40 */</comment> <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* 50 */</comment> <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* 60 */</comment> <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* 70 */</comment> <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* 80 */</comment> <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* 90 */</comment> <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* A0 */</comment> <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* B0 */</comment> <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* C0 */</comment> <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* D0 */</comment> <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* E0 */</comment> <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* F0 */</comment> <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * This function finds the first bit set (beginning with the least significant bit)
 * in value and return the index of that bit.
 *
 * Bits are numbered starting at 1 (the least significant bit).  A return value of
 * zero from any of these functions means that the argument was zero.
 *
 * @return return the index of the first bit set. If value is 0, then this function
 * shall return 0.
 */</comment>
<function><type><name>int</name></type> <name>__rt_ffs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>__lowest_bit_bitmap</name><index>[<expr><name>value</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;</operator> <literal type="number">0xff00</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>__lowest_bit_bitmap</name><index>[<expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>__lowest_bit_bitmap</name><index>[<expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>]</index></name> <operator>+</operator> <literal type="number">17</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name><name>__lowest_bit_bitmap</name><index>[<expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>+</operator> <literal type="number">25</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>stm32_get_pin</name><parameter_list>(<parameter><decl><type><name>GPIO_TypeDef</name> <modifier>*</modifier></type><name>pin_port</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pin_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><literal type="number">16</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name>pin_port</name> <operator>-</operator> <operator>(</operator><name>long</name><operator>)</operator><name>GPIOA_BASE</name><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">0x0400UL</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>__rt_ffs</name><argument_list>(<argument><expr><name>pin_num</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>long</name></type> <name>stm32_gpio_configure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stm32_uart_config</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UART_IS_TX</name></cpp:macro>        <cpp:value>(1U&lt;&lt;7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UART_IS_RX</name></cpp:macro>        <cpp:value>(0U)</cpp:value></cpp:define>

    <decl_stmt><decl><type><name>uint16_t</name></type> <name>tx_pin_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rx_pin_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rx_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tx_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>uart_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>uart_is_remap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPIO_TypeDef</name> <modifier>*</modifier></type><name>tx_port</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPIO_TypeDef</name> <modifier>*</modifier></type><name>rx_port</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>tx_pin</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>rx_pin</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>get_pin_by_name</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>rx_pin_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rx_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rx_pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>get_pin_by_name</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>tx_pin_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tx_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tx_pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <struct>struct <name>gpio_uart_remap</name> <block>{
        <comment type="block">/* index get by GET_PIN */</comment>
        <decl_stmt><decl><type><name>uint16_t</name></type> <name>pin_index</name></decl>;</decl_stmt>
        <comment type="block">/* -1: not uart, 1: uart1, 2: uart2 ... */</comment>
        <decl_stmt><decl><type><name>int8_t</name></type> <name>normal_uart</name></decl>;</decl_stmt>
        <comment type="block">/* -1: not uart, 1: uart1, 2: uart2 ... */</comment>
        <decl_stmt><decl><type><name>int8_t</name></type> <name>remap_uart</name></decl>;</decl_stmt>
    }</block>;</struct>

   <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>gpio_uart_remap</name></name></type> <name><name>uart_remaps</name><index>[]</index></name> <init>=
       <expr><block>{
           <comment type="block">/* usart1 configure */</comment>
           <expr><block>{ <expr><operator>.</operator><name>pin_index</name> <operator>=</operator> <call><name>GET_PIN</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>,  <expr><operator>.</operator><name>normal_uart</name> <operator>=</operator>  <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>remap_uart</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
           <expr><block>{ <expr><operator>.</operator><name>pin_index</name> <operator>=</operator> <call><name>GET_PIN</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>normal_uart</name> <operator>=</operator>  <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>remap_uart</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
           <expr><block>{ <expr><operator>.</operator><name>pin_index</name> <operator>=</operator> <call><name>GET_PIN</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>,  <expr><operator>.</operator><name>normal_uart</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>remap_uart</name> <operator>=</operator>  <literal type="number">1</literal></expr> }</block></expr>,
           <expr><block>{ <expr><operator>.</operator><name>pin_index</name> <operator>=</operator> <call><name>GET_PIN</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>,  <expr><operator>.</operator><name>normal_uart</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>remap_uart</name> <operator>=</operator>  <literal type="number">1</literal></expr> }</block></expr>,

           <comment type="block">/* usart2 configure */</comment>
           <expr><block>{ <expr><operator>.</operator><name>pin_index</name> <operator>=</operator> <call><name>GET_PIN</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,  <expr><operator>.</operator><name>normal_uart</name> <operator>=</operator>  <literal type="number">2</literal></expr>, <expr><operator>.</operator><name>remap_uart</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
           <expr><block>{ <expr><operator>.</operator><name>pin_index</name> <operator>=</operator> <call><name>GET_PIN</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>,  <expr><operator>.</operator><name>normal_uart</name> <operator>=</operator>  <literal type="number">2</literal></expr>, <expr><operator>.</operator><name>remap_uart</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
           <expr><block>{ <expr><operator>.</operator><name>pin_index</name> <operator>=</operator> <call><name>GET_PIN</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>,  <expr><operator>.</operator><name>normal_uart</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>remap_uart</name> <operator>=</operator>  <literal type="number">2</literal></expr> }</block></expr>,
           <expr><block>{ <expr><operator>.</operator><name>pin_index</name> <operator>=</operator> <call><name>GET_PIN</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>,  <expr><operator>.</operator><name>normal_uart</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>remap_uart</name> <operator>=</operator>  <literal type="number">2</literal></expr> }</block></expr>,

           <comment type="block">/* usart3 configure */</comment>
           <expr><block>{ <expr><operator>.</operator><name>pin_index</name> <operator>=</operator> <call><name>GET_PIN</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>normal_uart</name> <operator>=</operator>  <literal type="number">3</literal></expr>, <expr><operator>.</operator><name>remap_uart</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
           <expr><block>{ <expr><operator>.</operator><name>pin_index</name> <operator>=</operator> <call><name>GET_PIN</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>normal_uart</name> <operator>=</operator>  <literal type="number">3</literal></expr>, <expr><operator>.</operator><name>remap_uart</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
           <expr><block>{ <expr><operator>.</operator><name>pin_index</name> <operator>=</operator> <call><name>GET_PIN</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,  <expr><operator>.</operator><name>normal_uart</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>remap_uart</name> <operator>=</operator>  <literal type="number">3</literal></expr> }</block></expr>,
           <expr><block>{ <expr><operator>.</operator><name>pin_index</name> <operator>=</operator> <call><name>GET_PIN</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>,  <expr><operator>.</operator><name>normal_uart</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>remap_uart</name> <operator>=</operator>  <literal type="number">3</literal></expr> }</block></expr>,
           <expr><block>{ <expr><operator>.</operator><name>pin_index</name> <operator>=</operator> <call><name>GET_PIN</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>normal_uart</name> <operator>=</operator>  <literal type="number">4</literal></expr>, <expr><operator>.</operator><name>remap_uart</name> <operator>=</operator>  <literal type="number">3</literal></expr> }</block></expr>,
           <expr><block>{ <expr><operator>.</operator><name>pin_index</name> <operator>=</operator> <call><name>GET_PIN</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>normal_uart</name> <operator>=</operator>  <literal type="number">4</literal></expr>, <expr><operator>.</operator><name>remap_uart</name> <operator>=</operator>  <literal type="number">3</literal></expr> }</block></expr>,
       }</block></expr></init></decl>;</decl_stmt>
   <comment type="block">/* get tx/rx pin index */</comment>
   <expr_stmt><expr><name>tx_pin_num</name> <operator>=</operator> <call><name>stm32_get_pin</name><argument_list>(<argument><expr><name>tx_port</name></expr></argument>, <argument><expr><name>tx_pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><name>rx_pin_num</name> <operator>=</operator> <call><name>stm32_get_pin</name><argument_list>(<argument><expr><name>rx_port</name></expr></argument>, <argument><expr><name>rx_pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uart_remaps</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>gpio_uart_remap</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
   <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><name><name>uart_remaps</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>pin_index</name> <operator>==</operator> <name>tx_pin_num</name></expr>)</condition>
       <block>{<block_content>
           <expr_stmt><expr><name>tx_index</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
       </block_content>}</block></if>
       <if type="elseif">else if <condition>(<expr><name><name>uart_remaps</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>pin_index</name> <operator>==</operator> <name>rx_pin_num</name></expr>)</condition>
       <block>{<block_content>
           <expr_stmt><expr><name>rx_index</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
   </block_content>}</block></for>

   <comment type="block">/* check tx/rx pin remap information */</comment>
   <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><name><name>uart_remaps</name><index>[<expr><name>tx_index</name></expr>]</index></name><operator>.</operator><name>normal_uart</name> <operator>==</operator> <name><name>uart_remaps</name><index>[<expr><name>rx_index</name></expr>]</index></name><operator>.</operator><name>normal_uart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><name><name>uart_remaps</name><index>[<expr><name>tx_index</name></expr>]</index></name><operator>.</operator><name>remap_uart</name> <operator>==</operator> <name><name>uart_remaps</name><index>[<expr><name>rx_index</name></expr>]</index></name><operator>.</operator><name>remap_uart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <expr_stmt><expr><name>uart_num</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
   <expr_stmt><expr><name>uart_is_remap</name> <operator>=</operator> <ternary><condition><expr><name><name>uart_remaps</name><index>[<expr><name>tx_index</name></expr>]</index></name><operator>.</operator><name>remap_uart</name> <operator>==</operator> <name>uart_num</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

   <block>{<block_content>

       <decl_stmt><decl><type><name>GPIO_InitTypeDef</name></type> <name>GPIO_InitStruct</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

       <comment type="block">/* gpio ports clock enable */</comment>
       <expr_stmt><expr><call><name>stm32_gpio_clk_enable</name><argument_list>(<argument><expr><name>tx_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>tx_port</name> <operator>!=</operator> <name>rx_port</name></expr>)</condition>
       <block>{<block_content>
           <expr_stmt><expr><call><name>stm32_gpio_clk_enable</name><argument_list>(<argument><expr><name>rx_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>

       <comment type="block">/* tx pin initialize */</comment>
       <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Pin</name></name> <operator>=</operator> <name>tx_pin</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Mode</name></name> <operator>=</operator> <name>GPIO_MODE_AF_PP</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Speed</name></name> <operator>=</operator> <name>GPIO_SPEED_FREQ_HIGH</name></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>HAL_GPIO_Init</name><argument_list>(<argument><expr><name>tx_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GPIO_InitStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <comment type="block">/* rx pin initialize */</comment>
       <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Pin</name></name> <operator>=</operator> <name>rx_pin</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Mode</name></name> <operator>=</operator> <name>GPIO_MODE_INPUT</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Pull</name></name> <operator>=</operator> <name>GPIO_NOPULL</name></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>HAL_GPIO_Init</name><argument_list>(<argument><expr><name>rx_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GPIO_InitStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <comment type="block">/* enable the remapping of usart alternate */</comment>
       <if_stmt><if>if <condition>(<expr><name>uart_is_remap</name></expr>)</condition>
       <block>{<block_content>
           <expr_stmt><expr><call><name>__HAL_RCC_AFIO_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           <switch>switch <condition>(<expr><name>uart_num</name></expr>)</condition>
           <block>{<block_content>
           <case>case <expr><literal type="number">1</literal></expr>:</case>
               <expr_stmt><expr><call><name>__HAL_AFIO_REMAP_USART1_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               <break>break;</break>
           <case>case <expr><literal type="number">2</literal></expr>:</case>
               <expr_stmt><expr><call><name>__HAL_AFIO_REMAP_USART2_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               <break>break;</break>
            <case>case <expr><literal type="number">3</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name><name>uart_remaps</name><index>[<expr><name>tx_index</name></expr>]</index></name><operator>.</operator><name>normal_uart</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AFIO_MAPR_USART3_REMAP_FULLREMAP</name></cpp:ifdef>
                    <expr_stmt><expr><call><name>__HAL_AFIO_REMAP_USART3_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AFIO_MAPR_USART3_REMAP_PARTIALREMAP</name></cpp:ifdef>
                    <expr_stmt><expr><call><name>__HAL_AFIO_REMAP_USART3_PARTIAL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block></else></if_stmt>
                <break>break;</break>
           <default>default:</default>
               <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></switch>
       </block_content>}</block></if></if_stmt>
   </block_content>}</block>

   <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>HAL_UART_MspInit</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* if this uart is shell function */</comment>
    <if_stmt><if>if<condition>(<expr><name>huart</name> <operator>==</operator> <operator>&amp;</operator><name>handle</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>stm32_gpio_configure</name><argument_list>(<argument><expr><name>_uart_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type> <name>stm32_configure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stm32_uart_config</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>stm32_uart_clk_enable</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>handle</name><operator>.</operator><name>Instance</name></name>          <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>Instance</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handle</name><operator>.</operator><name>Init</name><operator>.</operator><name>BaudRate</name></name>     <operator>=</operator> <literal type="number">115200</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handle</name><operator>.</operator><name>Init</name><operator>.</operator><name>HwFlowCtl</name></name>    <operator>=</operator> <name>UART_HWCONTROL_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handle</name><operator>.</operator><name>Init</name><operator>.</operator><name>Mode</name></name>         <operator>=</operator> <name>UART_MODE_TX_RX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handle</name><operator>.</operator><name>Init</name><operator>.</operator><name>OverSampling</name></name> <operator>=</operator> <name>UART_OVERSAMPLING_16</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handle</name><operator>.</operator><name>Init</name><operator>.</operator><name>WordLength</name></name>   <operator>=</operator> <name>UART_WORDLENGTH_8B</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handle</name><operator>.</operator><name>Init</name><operator>.</operator><name>StopBits</name></name>     <operator>=</operator> <name>UART_STOPBITS_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handle</name><operator>.</operator><name>Init</name><operator>.</operator><name>Parity</name></name>       <operator>=</operator> <name>UART_PARITY_NONE</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>HAL_UART_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rt_hw_usart_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>_uart_config</name> <operator>=</operator> <operator>&amp;</operator><name><name>uart_config</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>stm32_configure</name><argument_list>(<argument><expr><name>_uart_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>print_char</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>HAL_UART_Transmit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>c</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
