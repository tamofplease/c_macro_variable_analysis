<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/sfud/src/sfud_sfdp.c"><comment type="block">/*
 * This file is part of the Serial Flash Universal Driver Library.
 *
 * Copyright (c) 2016, Armink, &lt;armink.ztl@gmail.com&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Function: Analyze the SFDP (Serial Flash Discoverable Parameters) which from JESD216/A/B (V1.X) standard.
 *           JESD216  (V1.0) document: http://www.jedec.org/sites/default/files/docs/JESD216.pdf
 *           JESD216A (V1.5) document: http://www.jedec.org/sites/default/files/docs/JESD216A.pdf
 *           JESD216B (V1.6) document: http://www.jedec.org/sites/default/files/docs/JESD216B.pdf
 *
 * Created on: 2016-05-26
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sfud.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * JEDEC Standard JESD216 Terms and definitions:
 *
 * DWORD: Four consecutive 8-bit bytes used as the basic 32-bit building block for headers and parameter tables.
 *
 * Sector: The minimum granularity - size and alignment - of an area that can be erased in the data array
 * of a flash memory device. Different areas within the address range of the data array may have a different
 * minimum erase granularity (sector size).
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SFUD_USING_SFDP</name></cpp:ifdef>

<comment type="block">/* support maximum SFDP major revision by driver */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUPPORT_MAX_SFDP_MAJOR_REV</name></cpp:macro>                  <cpp:value>1</cpp:value></cpp:define>
<comment type="block">/* the JEDEC basic flash parameter table length is 9 DWORDs (288-bit) on JESD216 (V1.0) initial release standard */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASIC_TABLE_LEN</name></cpp:macro>                             <cpp:value>9</cpp:value></cpp:define>
<comment type="block">/* the smallest eraser in SFDP eraser table */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMALLEST_ERASER_INDEX</name></cpp:macro>                       <cpp:value>0</cpp:value></cpp:define>
<comment type="block" format="doxygen">/**
 *  SFDP parameter header structure
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>id</name></decl>;</decl_stmt>                                  <comment type="block" format="doxygen">/**&lt; Parameter ID LSB */</comment>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>minor_rev</name></decl>;</decl_stmt>                           <comment type="block" format="doxygen">/**&lt; Parameter minor revision */</comment>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>major_rev</name></decl>;</decl_stmt>                           <comment type="block" format="doxygen">/**&lt; Parameter major revision */</comment>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>len</name></decl>;</decl_stmt>                                 <comment type="block" format="doxygen">/**&lt; Parameter table length(in double words) */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>ptp</name></decl>;</decl_stmt>                                <comment type="block" format="doxygen">/**&lt; Parameter table 24bit pointer (byte address) */</comment>
}</block></struct></type> <name>sfdp_para_header</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>sfud_err</name></type> <name>read_sfdp_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>read_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>read_sfdp_header</name><parameter_list>(<parameter><decl><type><name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>read_basic_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>sfdp_para_header</name> <modifier>*</modifier></type><name>basic_header</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>read_basic_table</name><parameter_list>(<parameter><decl><type><name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>sfdp_para_header</name> <modifier>*</modifier></type><name>basic_header</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* ../port/sfup_port.c */</comment>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>sfud_log_debug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>sfud_log_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * Read SFDP parameter information
 *
 * @param flash flash device
 *
 * @return true: read OK
 */</comment>
<function><type><name>bool</name></type> <name>sfud_read_sfdp</name><parameter_list>(<parameter><decl><type><name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* JEDEC basic flash parameter header */</comment>
    <decl_stmt><decl><type><name>sfdp_para_header</name></type> <name>basic_header</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>read_sfdp_header</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>read_basic_header</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>basic_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>read_basic_table</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>basic_header</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Warning: Read SFDP parameter header information failed. The %s is not support JEDEC SFDP."</literal></expr></argument>, <argument><expr><name><name>flash</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Read SFDP parameter header
 *
 * @param flash flash device
 *
 * @return true: read OK
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>read_sfdp_header</name><parameter_list>(<parameter><decl><type><name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sfud_sfdp</name> <modifier>*</modifier></type><name>sfdp</name> <init>= <expr><operator>&amp;</operator><name><name>flash</name><operator>-&gt;</operator><name>sfdp</name></name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* The SFDP header is located at address 000000h of the SFDP data structure.
     * It identifies the SFDP Signature, the number of parameter headers, and the SFDP revision numbers. */</comment>
    <comment type="block">/* sfdp parameter header address */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>header_addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <comment type="block">/* each parameter header being 2 DWORDs (64-bit) */</comment>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>header</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>available</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <comment type="block">/* read SFDP header */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>read_sfdp_data</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>header_addr</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Can't read SFDP header."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* check SFDP header */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator>
          <name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'F'</literal> <operator>&amp;&amp;</operator>
          <name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'D'</literal> <operator>&amp;&amp;</operator>
          <name><name>header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Error: Check SFDP signature error. It's must be 50444653h('S' 'F' 'D' 'P')."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>minor_rev</name></name> <operator>=</operator> <name><name>header</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>major_rev</name></name> <operator>=</operator> <name><name>header</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>sfdp</name><operator>-&gt;</operator><name>major_rev</name></name> <operator>&gt;</operator> <name>SUPPORT_MAX_SFDP_MAJOR_REV</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: This reversion(V%d.%d) SFDP is not supported."</literal></expr></argument>, <argument><expr><name><name>sfdp</name><operator>-&gt;</operator><name>major_rev</name></name></expr></argument>, <argument><expr><name><name>sfdp</name><operator>-&gt;</operator><name>minor_rev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Check SFDP header is OK. The reversion is V%d.%d, NPN is %d."</literal></expr></argument>, <argument><expr><name><name>sfdp</name><operator>-&gt;</operator><name>major_rev</name></name></expr></argument>, <argument><expr><name><name>sfdp</name><operator>-&gt;</operator><name>minor_rev</name></name></expr></argument>,
            <argument><expr><name><name>header</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Read JEDEC basic parameter header
 *
 * @param flash flash device
 *
 * @return true: read OK
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>read_basic_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>sfdp_para_header</name> <modifier>*</modifier></type><name>basic_header</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* The basic parameter header is mandatory, is defined by this standard, and starts at byte offset 08h. */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>header_addr</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <comment type="block">/* each parameter header being 2 DWORDs (64-bit) */</comment>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>header</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>basic_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* read JEDEC basic flash parameter header */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>read_sfdp_data</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>header_addr</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Can't read JEDEC basic flash parameter header."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>basic_header</name><operator>-&gt;</operator><name>id</name></name>        <operator>=</operator> <name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>basic_header</name><operator>-&gt;</operator><name>minor_rev</name></name> <operator>=</operator> <name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>basic_header</name><operator>-&gt;</operator><name>major_rev</name></name> <operator>=</operator> <name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>basic_header</name><operator>-&gt;</operator><name>len</name></name>       <operator>=</operator> <name><name>header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>basic_header</name><operator>-&gt;</operator><name>ptp</name></name>       <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>header</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>header</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>header</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    <comment type="block">/* check JEDEC basic flash parameter header */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>basic_header</name><operator>-&gt;</operator><name>major_rev</name></name> <operator>&gt;</operator> <name>SUPPORT_MAX_SFDP_MAJOR_REV</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: This reversion(V%d.%d) JEDEC basic flash parameter header is not supported."</literal></expr></argument>,
                <argument><expr><name><name>basic_header</name><operator>-&gt;</operator><name>major_rev</name></name></expr></argument>, <argument><expr><name><name>basic_header</name><operator>-&gt;</operator><name>minor_rev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>basic_header</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>BASIC_TABLE_LEN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: The JEDEC basic flash parameter table length (now is %d) error."</literal></expr></argument>, <argument><expr><name><name>basic_header</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Check JEDEC basic flash parameter header is OK. The table id is %d, reversion is V%d.%d,"</literal>
            <literal type="string">" length is %d, parameter table pointer is 0x%06lX."</literal></expr></argument>, <argument><expr><name><name>basic_header</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>basic_header</name><operator>-&gt;</operator><name>major_rev</name></name></expr></argument>,
            <argument><expr><name><name>basic_header</name><operator>-&gt;</operator><name>minor_rev</name></name></expr></argument>, <argument><expr><name><name>basic_header</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>basic_header</name><operator>-&gt;</operator><name>ptp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Read JEDEC basic parameter table
 *
 * @param flash flash device
 *
 * @return true: read OK
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>read_basic_table</name><parameter_list>(<parameter><decl><type><name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>sfdp_para_header</name> <modifier>*</modifier></type><name>basic_header</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sfud_sfdp</name> <modifier>*</modifier></type><name>sfdp</name> <init>= <expr><operator>&amp;</operator><name><name>flash</name><operator>-&gt;</operator><name>sfdp</name></name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* parameter table address */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>table_addr</name> <init>= <expr><name><name>basic_header</name><operator>-&gt;</operator><name>ptp</name></name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* parameter table */</comment>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>table</name><index>[<expr><name>BASIC_TABLE_LEN</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>basic_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* read JEDEC basic flash parameter table */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>read_sfdp_data</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>table_addr</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Warning: Can't read JEDEC basic flash parameter table."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* print JEDEC basic flash parameter table info */</comment>
    <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"JEDEC basic flash parameter table info:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"MSB-LSB  3    2    1    0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BASIC_TABLE_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"[%04d] 0x%02X 0x%02X 0x%02X 0x%02X"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>table</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>table</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>table</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
                <argument><expr><name><name>table</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* get block/sector 4 KB erase supported and command */</comment>
    <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>erase_4k_cmd</name></name> <operator>=</operator> <name><name>table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>erase_4k</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"4 KB Erase is supported throughout the device. Command is 0x%02X."</literal></expr></argument>, <argument><expr><name><name>sfdp</name><operator>-&gt;</operator><name>erase_4k_cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><literal type="number">3</literal></expr>:</case>
        <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>erase_4k</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Uniform 4 KB erase is unavailable for this device."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Uniform 4 KB erase supported information error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></switch>
    <comment type="block">/* get write granularity */</comment>
    <comment type="line">//TODO Ä¿Ç°Îª 1.0 ËùÌá¹©µÄ·½Ê½£¬ºóÆÚÖ§³Ö V1.5 ¼°ÒÔÉÏµÄ·½Ê½¶ÁÈ¡ page size</comment>
    <switch>switch <condition>(<expr><operator>(</operator><name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x01</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
        <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>write_gran</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Write granularity is 1 byte."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>write_gran</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Write granularity is 64 bytes or larger."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
    <comment type="block">/* volatile status register block protect bits */</comment>
    <switch>switch <condition>(<expr><operator>(</operator><name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x01</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
        <comment type="block">/* Block Protect bits in device's status register are solely non-volatile or may be
         * programmed either as volatile using the 50h instruction for write enable or non-volatile
         * using the 06h instruction for write enable.
         */</comment>
        <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>sr_is_non_vola</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Target flash status register is non-volatile."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
        <comment type="block">/* block protect bits in device's status register are solely volatile. */</comment>
        <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>sr_is_non_vola</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Block Protect bits in device's status register are solely volatile."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* write enable instruction select for writing to volatile status register */</comment>
        <switch>switch <condition>(<expr><operator>(</operator><name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x01</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
            <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>vola_sr_we_cmd</name></name> <operator>=</operator> <name>SFUD_VOLATILE_SR_WRITE_ENABLE</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Flash device requires instruction 50h as the write enable prior "</literal>
                    <literal type="string">"to performing a volatile write to the status register."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>vola_sr_we_cmd</name></name> <operator>=</operator> <name>SFUD_CMD_WRITE_ENABLE</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Flash device requires instruction 06h as the write enable prior "</literal>
                    <literal type="string">"to performing a volatile write to the status register."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
        <break>break;</break>
    </block_content>}</block></switch>
    <comment type="block">/* get address bytes, number of bytes used in addressing flash array read, write and erase. */</comment>
    <switch>switch <condition>(<expr><operator>(</operator><name><name>table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x03</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
        <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>addr_3_byte</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>addr_4_byte</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"3-Byte only addressing."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>addr_3_byte</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>addr_4_byte</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"3- or 4-Byte addressing."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
        <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>addr_3_byte</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>addr_4_byte</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"4-Byte only addressing."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>addr_3_byte</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>addr_4_byte</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Read address bytes error!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></switch>
    <comment type="block">/* get flash memory capacity */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>table2_temp</name> <init>= <expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>table</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>table</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>table</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><operator>(</operator><name><name>table</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x01</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
        <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>table2_temp</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><name>table2_temp</name> <operator>&amp;=</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>table2_temp</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sfdp</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: The flash capacity is grater than 32 Gb/ 4 GB! Not Supported."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>table2_temp</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Capacity is %ld Bytes."</literal></expr></argument>, <argument><expr><name><name>sfdp</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* get erase size and erase command  */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SFUD_SFDP_ERASE_TYPE_MAX_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>table</name><index>[<expr><literal type="number">28</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>eraser</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <name><name>table</name><index>[<expr><literal type="number">28</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>eraser</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>cmd</name> <operator>=</operator> <name><name>table</name><index>[<expr><literal type="number">28</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Flash device supports %ldKB block erase. Command is 0x%02X."</literal></expr></argument>, <argument><expr><name><name>sfdp</name><operator>-&gt;</operator><name>eraser</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>,
                    <argument><expr><name><name>sfdp</name><operator>-&gt;</operator><name>eraser</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* sort the eraser size from small to large */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SFUD_SFDP_ERASE_TYPE_MAX_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>sfdp</name><operator>-&gt;</operator><name>eraser</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SFUD_SFDP_ERASE_TYPE_MAX_NUM</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>sfdp</name><operator>-&gt;</operator><name>eraser</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sfdp</name><operator>-&gt;</operator><name>eraser</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&gt;</operator> <name><name>sfdp</name><operator>-&gt;</operator><name>eraser</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition> <block>{<block_content>
                    <comment type="block">/* swap the small eraser */</comment>
                    <decl_stmt><decl><type><name>uint32_t</name></type> <name>temp_size</name> <init>= <expr><name><name>sfdp</name><operator>-&gt;</operator><name>eraser</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>uint8_t</name></type> <name>temp_cmd</name> <init>= <expr><name><name>sfdp</name><operator>-&gt;</operator><name>eraser</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cmd</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>eraser</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name><name>sfdp</name><operator>-&gt;</operator><name>eraser</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>eraser</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cmd</name> <operator>=</operator> <name><name>sfdp</name><operator>-&gt;</operator><name>eraser</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>cmd</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>eraser</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>temp_size</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>eraser</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>cmd</name> <operator>=</operator> <name>temp_cmd</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>sfdp</name><operator>-&gt;</operator><name>available</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sfud_err</name></type> <name>read_sfdp_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>read_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{
            <expr><name>SFUD_CMD_READ_SFDP_REGISTER</name></expr>,
            <expr><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>,
            <expr><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>,
            <expr><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>,
            <expr><name>SFUD_DUMMY_DATA</name></expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>addr</name> <operator>&lt;</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>read_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name><name>flash</name><operator>-&gt;</operator><name>spi</name><operator>.</operator><name>wr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>flash</name><operator>-&gt;</operator><name>spi</name><operator>.</operator><name>wr</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>flash</name><operator>-&gt;</operator><name>spi</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>read_buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get the most suitable eraser for erase process from SFDP parameter
 *
 * @param flash flash device
 * @param addr start address
 * @param erase_size will be erased size
 *
 * @return the eraser index of SFDP eraser table  @see sfud_sfdp.eraser[]
 */</comment>
<function><type><name>size_t</name></type> <name>sfud_sfdp_get_suitable_eraser</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>erase_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><name>SMALLEST_ERASER_INDEX</name></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <comment type="block">/* only used when flash supported SFDP */</comment>
    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name><name>flash</name><operator>-&gt;</operator><name>sfdp</name><operator>.</operator><name>available</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* the address isn't align by smallest eraser's size, then use the smallest eraser */</comment>
    <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>%</operator> <name><name>flash</name><operator>-&gt;</operator><name>sfdp</name><operator>.</operator><name>eraser</name><index>[<expr><name>SMALLEST_ERASER_INDEX</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SMALLEST_ERASER_INDEX</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Find the suitable eraser.
     * The largest size eraser is at the end of eraser table.
     * In order to decrease erase command counts, so the find process is from the end of eraser table. */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>SFUD_SFDP_ERASE_TYPE_MAX_NUM</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>flash</name><operator>-&gt;</operator><name>sfdp</name><operator>.</operator><name>eraser</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>erase_size</name> <operator>&gt;=</operator> <name><name>flash</name><operator>-&gt;</operator><name>sfdp</name><operator>.</operator><name>eraser</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name><operator>)</operator>
                <operator>&amp;&amp;</operator> <operator>(</operator><name>addr</name> <operator>%</operator> <name><name>flash</name><operator>-&gt;</operator><name>sfdp</name><operator>.</operator><name>eraser</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>SMALLEST_ERASER_INDEX</name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SFUD_USING_SFDP */</comment>
</unit>
