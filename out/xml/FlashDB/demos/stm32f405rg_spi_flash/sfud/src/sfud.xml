<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/sfud/src/sfud.c"><comment type="block">/*
 * This file is part of the Serial Flash Universal Driver Library.
 *
 * Copyright (c) 2016-2018, Armink, &lt;armink.ztl@gmail.com&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Function: serial flash operate functions by SFUD lib.
 * Created on: 2016-04-23
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sfud.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="block">/* send dummy data for read data */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMMY_DATA</name></cpp:macro>                               <cpp:value>0xFF</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SFUD_FLASH_DEVICE_TABLE</name></cpp:ifndef>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Please configure the flash device information table in (in sfud_cfg.h)."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* user configured flash device information table */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>sfud_flash</name></type> <name><name>flash_table</name><index>[]</index></name> <init>= <expr><name>SFUD_FLASH_DEVICE_TABLE</name></expr></init></decl>;</decl_stmt>
<comment type="block">/* supported manufacturer information table */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sfud_mf</name></type> <name><name>mf_table</name><index>[]</index></name> <init>= <expr><name>SFUD_MF_TABLE</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SFUD_USING_FLASH_INFO_TABLE</name></cpp:ifdef>
<comment type="block">/* supported flash chip information table */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sfud_flash_chip</name></type> <name><name>flash_chip_table</name><index>[]</index></name> <init>= <expr><name>SFUD_FLASH_CHIP_TABLE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SFUD_USING_QSPI</name></cpp:ifdef>
<comment type="block" format="doxygen">/**
 * flash read data mode
 */</comment>
<enum>enum <name>sfud_qspi_read_mode</name> <block>{
    <decl><name>NORMAL_SPI_READ</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,               <comment type="block" format="doxygen">/**&lt; mormal spi read mode */</comment>
    <decl><name>DUAL_OUTPUT</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,                   <comment type="block" format="doxygen">/**&lt; qspi fast read dual output */</comment>
    <decl><name>DUAL_IO</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,                       <comment type="block" format="doxygen">/**&lt; qspi fast read dual input/output */</comment>
    <decl><name>QUAD_OUTPUT</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,                   <comment type="block" format="doxygen">/**&lt; qspi fast read quad output */</comment>
    <decl><name>QUAD_IO</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,                       <comment type="block" format="doxygen">/**&lt; qspi fast read quad input/output */</comment>
}</block>;</enum>

<comment type="block">/* QSPI flash chip's extended information table */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sfud_qspi_flash_ext_info</name></type> <name><name>qspi_flash_ext_info_table</name><index>[]</index></name> <init>= <expr><name>SFUD_FLASH_EXT_INFO_TABLE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SFUD_USING_QSPI */</comment>

<function_decl><type><specifier>static</specifier> <name>sfud_err</name></type> <name>software_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sfud_err</name></type> <name>hardware_init</name><parameter_list>(<parameter><decl><type><name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sfud_err</name></type> <name>page256_or_1_byte_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>write_gran</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sfud_err</name></type> <name>aai_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sfud_err</name></type> <name>wait_busy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sfud_err</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sfud_err</name></type> <name>read_jedec_id</name><parameter_list>(<parameter><decl><type><name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sfud_err</name></type> <name>set_write_enabled</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sfud_err</name></type> <name>set_4_byte_address_mode</name><parameter_list>(<parameter><decl><type><name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>make_adress_byte_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* ../port/sfup_port.c */</comment>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>sfud_log_debug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>sfud_log_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * SFUD initialize by flash device
 *
 * @param flash flash device
 *
 * @return result
 */</comment>
<function><type><name>sfud_err</name></type> <name>sfud_device_init</name><parameter_list>(<parameter><decl><type><name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sfud_err</name></type> <name>result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* hardware initialize */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>hardware_init</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>software_init</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>init_ok</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"%s flash device is initialize success."</literal></expr></argument>, <argument><expr><name><name>flash</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>init_ok</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: %s flash device is initialize fail."</literal></expr></argument>, <argument><expr><name><name>flash</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * SFUD library initialize.
 *
 * @return result
 */</comment>
<function><type><name>sfud_err</name></type> <name>sfud_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sfud_err</name></type> <name>cur_flash_result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>, <decl><type ref="prev"/><name>all_flash_result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Start initialize Serial Flash Universal Driver(SFUD) V%s."</literal></expr></argument>, <argument><expr><name>SFUD_SW_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"You can get the latest version on https://github.com/armink/SFUD ."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* initialize all flash device in flash device table */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>flash_table</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sfud_flash</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <comment type="block">/* initialize flash device index of flash device information table */</comment>
        <expr_stmt><expr><name><name>flash_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur_flash_result</name> <operator>=</operator> <call><name>sfud_device_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>flash_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>cur_flash_result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>all_flash_result</name> <operator>=</operator> <name>cur_flash_result</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>all_flash_result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get flash device by its index which in the flash information table
 *
 * @param index the index which in the flash information table  @see flash_table
 *
 * @return flash device
 */</comment>
<function><type><name>sfud_flash</name> <modifier>*</modifier></type><name>sfud_get_device</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <call><name>sfud_get_device_num</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>&amp;</operator><name><name>flash_table</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get flash device total number on flash device information table  @see flash_table
 *
 * @return flash device total number
 */</comment>
<function><type><name>size_t</name></type> <name>sfud_get_device_num</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>flash_table</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sfud_flash</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get flash device information table  @see flash_table
 *
 * @return flash device table pointer
 */</comment>
<function><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>sfud_get_device_table</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>flash_table</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SFUD_USING_QSPI</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>qspi_set_read_cmd_format</name><parameter_list>(<parameter><decl><type><name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>ins</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>ins_lines</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>addr_lines</name></decl></parameter>,
        <parameter><decl><type><name>uint8_t</name></type> <name>dummy_cycles</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>data_lines</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* if medium size greater than 16Mb, use 4-Byte address, instruction should be added one */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>capacity</name></name> <operator>&lt;=</operator> <literal type="number">0x1000000</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>read_cmd_format</name><operator>.</operator><name>instruction</name></name> <operator>=</operator> <name>ins</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>read_cmd_format</name><operator>.</operator><name>address_size</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>read_cmd_format</name><operator>.</operator><name>instruction</name></name> <operator>=</operator> <name>ins</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>read_cmd_format</name><operator>.</operator><name>address_size</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>read_cmd_format</name><operator>.</operator><name>instruction_lines</name></name> <operator>=</operator> <name>ins_lines</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>read_cmd_format</name><operator>.</operator><name>address_lines</name></name> <operator>=</operator> <name>addr_lines</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>read_cmd_format</name><operator>.</operator><name>alternate_bytes_lines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>read_cmd_format</name><operator>.</operator><name>dummy_cycles</name></name> <operator>=</operator> <name>dummy_cycles</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>read_cmd_format</name><operator>.</operator><name>data_lines</name></name> <operator>=</operator> <name>data_lines</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Enbale the fast read mode in QSPI flash mode. Default read mode is normal SPI mode.
 *
 * it will find the appropriate fast-read instruction to replace the read instruction(0x03)
 * fast-read instruction @see SFUD_FLASH_EXT_INFO_TABLE
 *
 * @note When Flash is in QSPI mode, the method must be called after sfud_device_init().
 *
 * @param flash flash device
 * @param data_line_width the data lines max width which QSPI bus supported, such as 1, 2, 4
 *
 * @return result
 */</comment>
<function><type><name>sfud_err</name></type> <name>sfud_qspi_fast_read_enable</name><parameter_list>(<parameter><decl><type><name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>data_line_width</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>read_mode</name> <init>= <expr><name>NORMAL_SPI_READ</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sfud_err</name></type> <name>result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>data_line_width</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>data_line_width</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>data_line_width</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* get read_mode, If don't found, the default is SFUD_QSPI_NORMAL_SPI_READ */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>qspi_flash_ext_info_table</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sfud_qspi_flash_ext_info</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>qspi_flash_ext_info_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mf_id</name> <operator>==</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>mf_id</name></name><operator>)</operator>
                <operator>&amp;&amp;</operator> <operator>(</operator><name><name>qspi_flash_ext_info_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type_id</name> <operator>==</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>type_id</name></name><operator>)</operator>
                <operator>&amp;&amp;</operator> <operator>(</operator><name><name>qspi_flash_ext_info_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>capacity_id</name> <operator>==</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>capacity_id</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>read_mode</name> <operator>=</operator> <name><name>qspi_flash_ext_info_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>read_mode</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* determine qspi supports which read mode and set read_cmd_format struct */</comment>
    <switch>switch <condition>(<expr><name>data_line_width</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><call><name>qspi_set_read_cmd_format</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>SFUD_CMD_READ_DATA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>read_mode</name> <operator>&amp;</operator> <name>DUAL_IO</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>qspi_set_read_cmd_format</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>SFUD_CMD_DUAL_IO_READ_DATA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>read_mode</name> <operator>&amp;</operator> <name>DUAL_OUTPUT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>qspi_set_read_cmd_format</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>SFUD_CMD_DUAL_OUTPUT_READ_DATA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>qspi_set_read_cmd_format</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>SFUD_CMD_READ_DATA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    <case>case <expr><literal type="number">4</literal></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>read_mode</name> <operator>&amp;</operator> <name>QUAD_IO</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>qspi_set_read_cmd_format</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>SFUD_CMD_QUAD_IO_READ_DATA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>read_mode</name> <operator>&amp;</operator> <name>QUAD_OUTPUT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>qspi_set_read_cmd_format</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>SFUD_CMD_QUAD_OUTPUT_READ_DATA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>qspi_set_read_cmd_format</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>SFUD_CMD_READ_DATA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SFUD_USING_QSPI */</comment>

<comment type="block" format="doxygen">/**
 * hardware initialize
 */</comment>
<function><type><specifier>static</specifier> <name>sfud_err</name></type> <name>hardware_init</name><parameter_list>(<parameter><decl><type><name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>sfud_err</name></type> <name>sfud_spi_port_init</name><argument_list>(<argument><expr><name>sfud_flash</name> <operator>*</operator> <name>flash</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>sfud_err</name></type> <name>result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sfud_spi_port_init</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SFUD_USING_QSPI</name></cpp:ifdef>
    <comment type="block">/* set default read instruction */</comment>
    <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>read_cmd_format</name><operator>.</operator><name>instruction</name></name> <operator>=</operator> <name>SFUD_CMD_READ_DATA</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SFUD_USING_QSPI */</comment>

    <comment type="block">/* SPI write read function must be initialize */</comment>
    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name><name>flash</name><operator>-&gt;</operator><name>spi</name><operator>.</operator><name>wr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* if the user don't configure flash chip information then using SFDP parameter or static flash parameter table */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>capacity</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>write_mode</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>erase_gran</name></name> <operator>==</operator> <literal type="number">0</literal>
            <operator>||</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>erase_gran_cmd</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* read JEDEC ID include manufacturer ID, memory type ID and flash capacity ID */</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>read_jedec_id</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SFUD_USING_SFDP</name></cpp:ifdef>
        <decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>sfud_read_sfdp</name><argument_list>(<argument><expr><name>sfud_flash</name> <operator>*</operator><name>flash</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <comment type="block">/* read SFDP parameters */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>sfud_read_sfdp</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name><name>flash</name><operator>-&gt;</operator><name>sfdp</name><operator>.</operator><name>capacity</name></name></expr>;</expr_stmt>
            <comment type="block">/* only 1 byte or 256 bytes write mode for SFDP */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>flash</name><operator>-&gt;</operator><name>sfdp</name><operator>.</operator><name>write_gran</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>write_mode</name></name> <operator>=</operator> <name>SFUD_WM_BYTE</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>write_mode</name></name> <operator>=</operator> <name>SFUD_WM_PAGE_256B</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <comment type="block">/* find the the smallest erase sector size for eraser. then will use this size for erase granularity */</comment>
            <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>erase_gran</name></name> <operator>=</operator> <name><name>flash</name><operator>-&gt;</operator><name>sfdp</name><operator>.</operator><name>eraser</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>erase_gran_cmd</name></name> <operator>=</operator> <name><name>flash</name><operator>-&gt;</operator><name>sfdp</name><operator>.</operator><name>eraser</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cmd</name></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SFUD_SFDP_ERASE_TYPE_MAX_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>flash</name><operator>-&gt;</operator><name>sfdp</name><operator>.</operator><name>eraser</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>erase_gran</name></name> <operator>&gt;</operator> <name><name>flash</name><operator>-&gt;</operator><name>sfdp</name><operator>.</operator><name>eraser</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>erase_gran</name></name> <operator>=</operator> <name><name>flash</name><operator>-&gt;</operator><name>sfdp</name><operator>.</operator><name>eraser</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>erase_gran_cmd</name></name> <operator>=</operator> <name><name>flash</name><operator>-&gt;</operator><name>sfdp</name><operator>.</operator><name>eraser</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cmd</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SFUD_USING_FLASH_INFO_TABLE</name></cpp:ifdef>
            <comment type="block">/* read SFDP parameters failed then using SFUD library provided static parameter */</comment>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>flash_chip_table</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sfud_flash_chip</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>flash_chip_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mf_id</name> <operator>==</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>mf_id</name></name><operator>)</operator>
                        <operator>&amp;&amp;</operator> <operator>(</operator><name><name>flash_chip_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type_id</name> <operator>==</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>type_id</name></name><operator>)</operator>
                        <operator>&amp;&amp;</operator> <operator>(</operator><name><name>flash_chip_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>capacity_id</name> <operator>==</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>capacity_id</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>flash_chip_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name><name>flash_chip_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>capacity</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>write_mode</name></name> <operator>=</operator> <name><name>flash_chip_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>write_mode</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>erase_gran</name></name> <operator>=</operator> <name><name>flash_chip_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>erase_gran</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>erase_gran_cmd</name></name> <operator>=</operator> <name><name>flash_chip_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>erase_gran_cmd</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SFUD_USING_SFDP</name></cpp:ifdef>
        </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>capacity</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>write_mode</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>erase_gran</name></name> <operator>==</operator> <literal type="number">0</literal>
            <operator>||</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>erase_gran_cmd</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Warning: This flash device is not found or not support."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>SFUD_ERR_NOT_FOUND</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flash_mf_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <comment type="block">/* find the manufacturer information */</comment>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mf_table</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sfud_mf</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>mf_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>mf_id</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>flash_mf_name</name> <operator>=</operator> <name><name>mf_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <comment type="block">/* print manufacturer and flash chip name */</comment>
        <if_stmt><if>if <condition>(<expr><name>flash_mf_name</name> <operator>&amp;&amp;</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Find a %s %s flash chip. Size is %ld bytes."</literal></expr></argument>, <argument><expr><name>flash_mf_name</name></expr></argument>, <argument><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>name</name></name></expr></argument>,
                    <argument><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flash_mf_name</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Find a %s flash chip. Size is %ld bytes."</literal></expr></argument>, <argument><expr><name>flash_mf_name</name></expr></argument>, <argument><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Find a flash chip. Size is %ld bytes."</literal></expr></argument>, <argument><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* reset flash device */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>reset</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* I found when the flash write mode is supported AAI mode. The flash all blocks is protected,
     * so need change the flash status to unprotected before write and erase operate. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>write_mode</name></name> <operator>&amp;</operator> <name>SFUD_WM_AAI</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sfud_write_status</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* if the flash is large than 16MB (256Mb) then enter in 4-Byte addressing mode */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>capacity</name></name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_4_byte_address_mode</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>addr_in_4_byte</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * software initialize
 *
 * @param flash flash device
 *
 * @return result
 */</comment>
<function><type><specifier>static</specifier> <name>sfud_err</name></type> <name>software_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sfud_err</name></type> <name>result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * read flash data
 *
 * @param flash flash device
 * @param addr start address
 * @param size read size
 * @param data read data pointer
 *
 * @return result
 */</comment>
<function><type><name>sfud_err</name></type> <name>sfud_read</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sfud_err</name></type> <name>result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>sfud_spi</name> <modifier>*</modifier></type><name>spi</name> <init>= <expr><operator>&amp;</operator><name><name>flash</name><operator>-&gt;</operator><name>spi</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>cmd_size</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* must be call this function after initialize OK */</comment>
    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name><name>flash</name><operator>-&gt;</operator><name>init_ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* check the flash address bound */</comment>
    <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Flash address is out of bound."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>SFUD_ERR_ADDR_OUT_OF_BOUND</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* lock SPI */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>spi</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>spi</name><operator>-&gt;</operator><name>lock</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>wait_busy</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SFUD_USING_QSPI</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name><name>flash</name><operator>-&gt;</operator><name>read_cmd_format</name><operator>.</operator><name>instruction</name></name> <operator>!=</operator> <name>SFUD_CMD_READ_DATA</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>spi</name><operator>-&gt;</operator><name>qspi_read</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>sfud_qspi_read_cmd_format</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>flash</name><operator>-&gt;</operator><name>read_cmd_format</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <block>{<block_content>
            <expr_stmt><expr><name><name>cmd_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SFUD_CMD_READ_DATA</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>make_adress_byte_array</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cmd_size</name> <operator>=</operator> <ternary><condition><expr><name><name>flash</name><operator>-&gt;</operator><name>addr_in_4_byte</name></name></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>spi</name><operator>-&gt;</operator><name>wr</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>, <argument><expr><name>cmd_data</name></expr></argument>, <argument><expr><name>cmd_size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* unlock SPI */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>spi</name><operator>-&gt;</operator><name>unlock</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>spi</name><operator>-&gt;</operator><name>unlock</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * erase all flash data
 *
 * @param flash flash device
 *
 * @return result
 */</comment>
<function><type><name>sfud_err</name></type> <name>sfud_chip_erase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sfud_err</name></type> <name>result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>sfud_spi</name> <modifier>*</modifier></type><name>spi</name> <init>= <expr><operator>&amp;</operator><name><name>flash</name><operator>-&gt;</operator><name>spi</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* must be call this function after initialize OK */</comment>
    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name><name>flash</name><operator>-&gt;</operator><name>init_ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* lock SPI */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>spi</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>spi</name><operator>-&gt;</operator><name>lock</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* set the flash write enable */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_write_enabled</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>__exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>cmd_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SFUD_CMD_ERASE_CHIP</name></expr>;</expr_stmt>
    <comment type="block">/* dual-buffer write, like AT45DB series flash chip erase operate is different for other flash */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>write_mode</name></name> <operator>&amp;</operator> <name>SFUD_WM_DUAL_BUFFER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>cmd_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x94</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmd_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmd_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x9A</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>spi</name><operator>-&gt;</operator><name>wr</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>, <argument><expr><name>cmd_data</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>spi</name><operator>-&gt;</operator><name>wr</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>, <argument><expr><name>cmd_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Flash chip erase SPI communicate error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>__exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>wait_busy</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>__exit</name>:</label>
    <comment type="block">/* set the flash write disable */</comment>
    <expr_stmt><expr><call><name>set_write_enabled</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* unlock SPI */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>spi</name><operator>-&gt;</operator><name>unlock</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>spi</name><operator>-&gt;</operator><name>unlock</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * erase flash data
 *
 * @note It will erase align by erase granularity.
 *
 * @param flash flash device
 * @param addr start address
 * @param size erase size
 *
 * @return result
 */</comment>
<function><type><name>sfud_err</name></type> <name>sfud_erase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>sfud_sfdp_get_suitable_eraser</name><argument_list>(<argument><expr><specifier>const</specifier> <name>sfud_flash</name> <operator>*</operator><name>flash</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>addr</name></expr></argument>, <argument><expr><name>size_t</name> <name>erase_size</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>sfud_err</name></type> <name>result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>sfud_spi</name> <modifier>*</modifier></type><name>spi</name> <init>= <expr><operator>&amp;</operator><name><name>flash</name><operator>-&gt;</operator><name>spi</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>cmd_size</name></decl>, <decl><type ref="prev"/><name>cur_erase_cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>cur_erase_size</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* must be call this function after initialize OK */</comment>
    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name><name>flash</name><operator>-&gt;</operator><name>init_ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* check the flash address bound */</comment>
    <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Flash address is out of bound."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>SFUD_ERR_ADDR_OUT_OF_BOUND</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>==</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>sfud_chip_erase</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* lock SPI */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>spi</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>spi</name><operator>-&gt;</operator><name>lock</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* loop erase operate. erase unit is erase granularity */</comment>
    <while>while <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* if this flash is support SFDP parameter, then used SFDP parameter supplies eraser */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SFUD_USING_SFDP</name></cpp:ifdef>
        <decl_stmt><decl><type><name>size_t</name></type> <name>eraser_index</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>flash</name><operator>-&gt;</operator><name>sfdp</name><operator>.</operator><name>available</name></name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* get the suitable eraser for erase process from SFDP parameter */</comment>
            <expr_stmt><expr><name>eraser_index</name> <operator>=</operator> <call><name>sfud_sfdp_get_suitable_eraser</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cur_erase_cmd</name> <operator>=</operator> <name><name>flash</name><operator>-&gt;</operator><name>sfdp</name><operator>.</operator><name>eraser</name><index>[<expr><name>eraser_index</name></expr>]</index></name><operator>.</operator><name>cmd</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cur_erase_size</name> <operator>=</operator> <name><name>flash</name><operator>-&gt;</operator><name>sfdp</name><operator>.</operator><name>eraser</name><index>[<expr><name>eraser_index</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>cur_erase_cmd</name> <operator>=</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>erase_gran_cmd</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cur_erase_size</name> <operator>=</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>erase_gran</name></name></expr>;</expr_stmt>
        </block_content>}</block>
        <comment type="block">/* set the flash write enable */</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_write_enabled</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>__exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>cmd_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>cur_erase_cmd</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>make_adress_byte_array</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cmd_size</name> <operator>=</operator> <ternary><condition><expr><name><name>flash</name><operator>-&gt;</operator><name>addr_in_4_byte</name></name></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>spi</name><operator>-&gt;</operator><name>wr</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>, <argument><expr><name>cmd_data</name></expr></argument>, <argument><expr><name>cmd_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Flash erase SPI communicate error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>__exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>wait_busy</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>__exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* make erase align and calculate next erase address */</comment>
        <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>%</operator> <name>cur_erase_size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>cur_erase_size</name> <operator>-</operator> <operator>(</operator><name>addr</name> <operator>%</operator> <name>cur_erase_size</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>size</name> <operator>-=</operator> <name>cur_erase_size</name> <operator>-</operator> <operator>(</operator><name>addr</name> <operator>%</operator> <name>cur_erase_size</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>addr</name> <operator>+=</operator> <name>cur_erase_size</name> <operator>-</operator> <operator>(</operator><name>addr</name> <operator>%</operator> <name>cur_erase_size</name><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <goto>goto <name>__exit</name>;</goto>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>cur_erase_size</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>size</name> <operator>-=</operator> <name>cur_erase_size</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>addr</name> <operator>+=</operator> <name>cur_erase_size</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <goto>goto <name>__exit</name>;</goto>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

<label><name>__exit</name>:</label>
    <comment type="block">/* set the flash write disable */</comment>
    <expr_stmt><expr><call><name>set_write_enabled</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* unlock SPI */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>spi</name><operator>-&gt;</operator><name>unlock</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>spi</name><operator>-&gt;</operator><name>unlock</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></while>

<comment type="block" format="doxygen">/**
 * write flash data (no erase operate) for write 1 to 256 bytes per page mode or byte write mode
 *
 * @param flash flash device
 * @param addr start address
 * @param size write size
 * @param write_gran write granularity bytes, only support 1 or 256
 * @param data write data
 *
 * @return result
 */</comment>
<function><type><specifier>static</specifier> <name>sfud_err</name></type> <name>page256_or_1_byte_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>write_gran</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sfud_err</name></type> <name>result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>sfud_spi</name> <modifier>*</modifier></type><name>spi</name> <init>= <expr><operator>&amp;</operator><name><name>flash</name><operator>-&gt;</operator><name>spi</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>cmd_data</name><index>[<expr><literal type="number">5</literal> <operator>+</operator> <name>SFUD_WRITE_MAX_PAGE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>cmd_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>data_size</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* only support 1 or 256 */</comment>
    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>write_gran</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>write_gran</name> <operator>==</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* must be call this function after initialize OK */</comment>
    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name><name>flash</name><operator>-&gt;</operator><name>init_ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* check the flash address bound */</comment>
    <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Flash address is out of bound."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>SFUD_ERR_ADDR_OUT_OF_BOUND</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* lock SPI */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>spi</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>spi</name><operator>-&gt;</operator><name>lock</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* loop write operate. write unit is write granularity */</comment>
    <while>while <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* set the flash write enable */</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_write_enabled</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>__exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>cmd_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SFUD_CMD_PAGE_PROGRAM</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>make_adress_byte_array</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cmd_size</name> <operator>=</operator> <ternary><condition><expr><name><name>flash</name><operator>-&gt;</operator><name>addr_in_4_byte</name></name></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>

        <comment type="block">/* make write align and calculate next write address */</comment>
        <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>%</operator> <name>write_gran</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>write_gran</name> <operator>-</operator> <operator>(</operator><name>addr</name> <operator>%</operator> <name>write_gran</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>data_size</name> <operator>=</operator> <name>write_gran</name> <operator>-</operator> <operator>(</operator><name>addr</name> <operator>%</operator> <name>write_gran</name><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>data_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>write_gran</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>data_size</name> <operator>=</operator> <name>write_gran</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>data_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>size</name> <operator>-=</operator> <name>data_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>addr</name> <operator>+=</operator> <name>data_size</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd_data</name><index>[<expr><name>cmd_size</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>spi</name><operator>-&gt;</operator><name>wr</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>, <argument><expr><name>cmd_data</name></expr></argument>, <argument><expr><name>cmd_size</name> <operator>+</operator> <name>data_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Flash write SPI communicate error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>__exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>wait_busy</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>__exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>data</name> <operator>+=</operator> <name>data_size</name></expr>;</expr_stmt>
    </block_content>}</block></while>

<label><name>__exit</name>:</label>
    <comment type="block">/* set the flash write disable */</comment>
    <expr_stmt><expr><call><name>set_write_enabled</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* unlock SPI */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>spi</name><operator>-&gt;</operator><name>unlock</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>spi</name><operator>-&gt;</operator><name>unlock</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * write flash data (no erase operate) for auto address increment mode
 *
 * If the address is odd number, it will place one 0xFF before the start of data for protect the old data.
 * If the latest remain size is 1, it will append one 0xFF at the end of data for protect the old data.
 *
 * @param flash flash device
 * @param addr start address
 * @param size write size
 * @param data write data
 *
 * @return result
 */</comment>
<function><type><specifier>static</specifier> <name>sfud_err</name></type> <name>aai_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sfud_err</name></type> <name>result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>sfud_spi</name> <modifier>*</modifier></type><name>spi</name> <init>= <expr><operator>&amp;</operator><name><name>flash</name><operator>-&gt;</operator><name>spi</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd_data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>cmd_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>first_write</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name><name>flash</name><operator>-&gt;</operator><name>init_ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* check the flash address bound */</comment>
    <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Flash address is out of bound."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>SFUD_ERR_ADDR_OUT_OF_BOUND</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* lock SPI */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>spi</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>spi</name><operator>-&gt;</operator><name>lock</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* The address must be even for AAI write mode. So it must write one byte first when address is odd. */</comment>
    <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>page256_or_1_byte_write</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>addr</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>__exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* set the flash write enable */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_write_enabled</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>__exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* loop write operate. */</comment>
    <expr_stmt><expr><name><name>cmd_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SFUD_CMD_AAI_WORD_PROGRAM</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>first_write</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>make_adress_byte_array</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cmd_size</name> <operator>=</operator> <ternary><condition><expr><name><name>flash</name><operator>-&gt;</operator><name>addr_in_4_byte</name></name></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cmd_data</name><index>[<expr><name>cmd_size</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>data</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cmd_data</name><index>[<expr><name>cmd_size</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>data</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>first_write</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>cmd_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cmd_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>data</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cmd_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>data</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>spi</name><operator>-&gt;</operator><name>wr</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>, <argument><expr><name>cmd_data</name></expr></argument>, <argument><expr><name>cmd_size</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Flash write SPI communicate error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>__exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>wait_busy</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>__exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <comment type="block">/* set the flash write disable for exit AAI mode */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_write_enabled</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* write last one byte data when origin write size is odd */</comment>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SFUD_SUCCESS</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>page256_or_1_byte_write</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<label><name>__exit</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>set_write_enabled</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* unlock SPI */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>spi</name><operator>-&gt;</operator><name>unlock</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>spi</name><operator>-&gt;</operator><name>unlock</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * write flash data (no erase operate)
 *
 * @param flash flash device
 * @param addr start address
 * @param size write size
 * @param data write data
 *
 * @return result
 */</comment>
<function><type><name>sfud_err</name></type> <name>sfud_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sfud_err</name></type> <name>result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>write_mode</name></name> <operator>&amp;</operator> <name>SFUD_WM_PAGE_256B</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>page256_or_1_byte_write</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>write_mode</name></name> <operator>&amp;</operator> <name>SFUD_WM_AAI</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>aai_write</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>write_mode</name></name> <operator>&amp;</operator> <name>SFUD_WM_DUAL_BUFFER</name></expr>)</condition> <block>{<block_content>
        <comment type="line">//TODO dual-buffer write mode</comment>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * erase and write flash data
 *
 * @param flash flash device
 * @param addr start address
 * @param size write size
 * @param data write data
 *
 * @return result
 */</comment>
<function><type><name>sfud_err</name></type> <name>sfud_erase_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sfud_err</name></type> <name>result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sfud_erase</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sfud_write</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sfud_err</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sfud_err</name></type> <name>result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>sfud_spi</name> <modifier>*</modifier></type><name>spi</name> <init>= <expr><operator>&amp;</operator><name><name>flash</name><operator>-&gt;</operator><name>spi</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>cmd_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SFUD_CMD_ENABLE_RESET</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>spi</name><operator>-&gt;</operator><name>wr</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>, <argument><expr><name>cmd_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>wait_busy</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Flash device reset failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>cmd_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>SFUD_CMD_RESET</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>spi</name><operator>-&gt;</operator><name>wr</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>wait_busy</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Flash device reset success."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Flash device reset failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sfud_err</name></type> <name>read_jedec_id</name><parameter_list>(<parameter><decl><type><name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sfud_err</name></type> <name>result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>sfud_spi</name> <modifier>*</modifier></type><name>spi</name> <init>= <expr><operator>&amp;</operator><name><name>flash</name><operator>-&gt;</operator><name>spi</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>recv_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>cmd_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SFUD_CMD_JEDEC_ID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>spi</name><operator>-&gt;</operator><name>wr</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>, <argument><expr><name>cmd_data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd_data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>recv_data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>recv_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>mf_id</name></name> <operator>=</operator> <name><name>recv_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>type_id</name></name> <operator>=</operator> <name><name>recv_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>capacity_id</name></name> <operator>=</operator> <name><name>recv_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"The flash device manufacturer ID is 0x%02X, memory type ID is 0x%02X, capacity ID is 0x%02X."</literal></expr></argument>,
                <argument><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>mf_id</name></name></expr></argument>, <argument><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>type_id</name></name></expr></argument>, <argument><expr><name><name>flash</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>capacity_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Read flash device JEDEC ID error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * set the flash write enable or write disable
 *
 * @param flash flash device
 * @param enabled true: enable  false: disable
 *
 * @return result
 */</comment>
<function><type><specifier>static</specifier> <name>sfud_err</name></type> <name>set_write_enabled</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sfud_err</name></type> <name>result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>cmd</name></decl>, <decl><type ref="prev"/><name>register_status</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>enabled</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>SFUD_CMD_WRITE_ENABLE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>SFUD_CMD_WRITE_DISABLE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>flash</name><operator>-&gt;</operator><name>spi</name><operator>.</operator><name>wr</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>flash</name><operator>-&gt;</operator><name>spi</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sfud_read_status</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>register_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>enabled</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>register_status</name> <operator>&amp;</operator> <name>SFUD_STATUS_REGISTER_WEL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Can't enable write status."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>SFUD_ERR_WRITE</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>enabled</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>register_status</name> <operator>&amp;</operator> <name>SFUD_STATUS_REGISTER_WEL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Can't disable write status."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>SFUD_ERR_WRITE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * enable or disable 4-Byte addressing for flash
 *
 * @note The 4-Byte addressing just supported for the flash capacity which is large then 16MB (256Mb).
 *
 * @param flash flash device
 * @param enabled true: enable   false: disable
 *
 * @return result
 */</comment>
<function><type><specifier>static</specifier> <name>sfud_err</name></type> <name>set_4_byte_address_mode</name><parameter_list>(<parameter><decl><type><name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sfud_err</name></type> <name>result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>cmd</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* set the flash write enable */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_write_enabled</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enabled</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>SFUD_CMD_ENTER_4B_ADDRESS_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>SFUD_CMD_EXIT_4B_ADDRESS_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>flash</name><operator>-&gt;</operator><name>spi</name><operator>.</operator><name>wr</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>flash</name><operator>-&gt;</operator><name>spi</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>addr_in_4_byte</name></name> <operator>=</operator> <ternary><condition><expr><name>enabled</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SFUD_DEBUG</name><argument_list>(<argument><expr><literal type="string">"%s 4-Byte addressing mode success."</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>enabled</name></expr> ?</condition><then> <expr><literal type="string">"Enter"</literal></expr> </then><else>: <expr><literal type="string">"Exit"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: %s 4-Byte addressing mode failed."</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>enabled</name></expr> ?</condition><then> <expr><literal type="string">"Enter"</literal></expr> </then><else>: <expr><literal type="string">"Exit"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * read flash register status
 *
 * @param flash flash device
 * @param status register status
 *
 * @return result
 */</comment>
<function><type><name>sfud_err</name></type> <name>sfud_read_status</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>cmd</name> <init>= <expr><name>SFUD_CMD_READ_STATUS_REGISTER</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>flash</name><operator>-&gt;</operator><name>spi</name><operator>.</operator><name>wr</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>flash</name><operator>-&gt;</operator><name>spi</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sfud_err</name></type> <name>wait_busy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sfud_err</name></type> <name>result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>retry_times</name> <init>= <expr><name><name>flash</name><operator>-&gt;</operator><name>retry</name><operator>.</operator><name>times</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sfud_read_status</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SFUD_SUCCESS</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>status</name> <operator>&amp;</operator> <name>SFUD_STATUS_REGISTER_BUSY</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* retry counts */</comment>
        <expr_stmt><expr><call><name>SFUD_RETRY_PROCESS</name><argument_list>(<argument><expr><name><name>flash</name><operator>-&gt;</operator><name>retry</name><operator>.</operator><name>delay</name></name></expr></argument>, <argument><expr><name>retry_times</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>status</name> <operator>&amp;</operator> <name>SFUD_STATUS_REGISTER_BUSY</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Flash wait busy has an error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_adress_byte_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name><name>flash</name><operator>-&gt;</operator><name>addr_in_4_byte</name></name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>len</name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * write status register
 *
 * @param flash flash device
 * @param is_volatile true: volatile mode, false: non-volatile mode
 * @param status register status
 *
 * @return result
 */</comment>
<function><type><name>sfud_err</name></type> <name>sfud_write_status</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_volatile</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sfud_err</name></type> <name>result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>sfud_spi</name> <modifier>*</modifier></type><name>spi</name> <init>= <expr><operator>&amp;</operator><name><name>flash</name><operator>-&gt;</operator><name>spi</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>is_volatile</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>cmd_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SFUD_VOLATILE_SR_WRITE_ENABLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>spi</name><operator>-&gt;</operator><name>wr</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>, <argument><expr><name>cmd_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_write_enabled</name><argument_list>(<argument><expr><name>flash</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>cmd_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SFUD_CMD_WRITE_STATUS_REGISTER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmd_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>spi</name><operator>-&gt;</operator><name>wr</name></name><argument_list>(<argument><expr><name>spi</name></expr></argument>, <argument><expr><name>cmd_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Write_status register failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function></block_content></block></function>
</unit>
