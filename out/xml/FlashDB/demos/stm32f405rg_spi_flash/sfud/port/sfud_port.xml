<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/sfud/port/sfud_port.c"><comment type="block">/*
 * This file is part of the Serial Flash Universal Driver Library.
 *
 * Copyright (c) 2016, Armink, &lt;armink.ztl@gmail.com&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Function: Portable interface for each platform.
 * Created on: 2016-04-23
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sfud.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stm32f4xx_hal.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>SPI_TypeDef</name> <modifier>*</modifier></type><name>spix</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SPI_HandleTypeDef</name> <modifier>*</modifier></type><name>spi_handle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPIO_TypeDef</name> <modifier>*</modifier></type><name>cs_gpiox</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>cs_gpio_pin</name></decl>;</decl_stmt>
}</block></struct></type> <name>spi_user_data</name><operator>,</operator> *<name>spi_user_data_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>log_buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>sfud_log_debug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>SPI_HandleTypeDef</name></type> <name>hspi2</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>spi_configuration</name><parameter_list>(<parameter><decl><type><name>spi_user_data_t</name></type> <name>spi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SPI_HandleTypeDef</name> <modifier>*</modifier></type><name>spi_handle</name> <init>= <expr><name><name>spi</name><operator>-&gt;</operator><name>spi_handle</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>spi_handle</name><operator>-&gt;</operator><name>Instance</name></name> <operator>=</operator> <name><name>spi</name><operator>-&gt;</operator><name>spix</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spi_handle</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>=</operator> <name>SPI_MODE_MASTER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spi_handle</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Direction</name></name> <operator>=</operator> <name>SPI_DIRECTION_2LINES</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spi_handle</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>=</operator> <name>SPI_DATASIZE_8BIT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spi_handle</name><operator>-&gt;</operator><name>TxXferSize</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spi_handle</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spi_handle</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>CLKPhase</name></name> <operator>=</operator> <name>SPI_PHASE_1EDGE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spi_handle</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>CLKPolarity</name></name> <operator>=</operator> <name>SPI_POLARITY_LOW</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spi_handle</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSS</name></name> <operator>=</operator> <name>SPI_NSS_SOFT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spi_handle</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BaudRatePrescaler</name></name> <operator>=</operator> <name>SPI_BAUDRATEPRESCALER_2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spi_handle</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FirstBit</name></name> <operator>=</operator> <name>SPI_FIRSTBIT_MSB</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spi_handle</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>TIMode</name></name> <operator>=</operator> <name>SPI_TIMODE_DISABLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spi_handle</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>CRCCalculation</name></name> <operator>=</operator> <name>SPI_CRCCALCULATION_DISABLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spi_handle</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPI_STATE_RESET</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HAL_SPI_Init</name><argument_list>(<argument><expr><name>spi_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spi_lock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_spi</name> <modifier>*</modifier></type><name>spi</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>__disable_irq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spi_unlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_spi</name> <modifier>*</modifier></type><name>spi</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>__enable_irq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * SPI write data then read data
 */</comment>
<function><type><specifier>static</specifier> <name>sfud_err</name></type> <name>spi_write_read</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sfud_spi</name> <modifier>*</modifier></type><name>spi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>write_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>write_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>read_buf</name></decl></parameter>,
        <parameter><decl><type><name>size_t</name></type> <name>read_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sfud_err</name></type> <name>result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>spi_user_data_t</name></type> <name>spi_dev</name> <init>= <expr><operator>(</operator><name>spi_user_data_t</name><operator>)</operator> <name><name>spi</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>state</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>write_size</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>write_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>read_size</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SFUD_ASSERT</name><argument_list>(<argument><expr><name>read_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>HAL_GPIO_WritePin</name><argument_list>(<argument><expr><name><name>spi_dev</name><operator>-&gt;</operator><name>cs_gpiox</name></name></expr></argument>, <argument><expr><name><name>spi_dev</name><operator>-&gt;</operator><name>cs_gpio_pin</name></name></expr></argument>, <argument><expr><name>GPIO_PIN_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>write_size</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>HAL_SPI_Transmit</name><argument_list>(<argument><expr><name><name>spi_dev</name><operator>-&gt;</operator><name>spi_handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>write_buf</name></expr></argument>, <argument><expr><name>write_size</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name>HAL_SPI_GetState</name><argument_list>(<argument><expr><name><name>spi_dev</name><operator>-&gt;</operator><name>spi_handle</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_SPI_STATE_READY</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>__exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>read_size</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>read_buf</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><name>read_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>HAL_SPI_Receive</name><argument_list>(<argument><expr><name><name>spi_dev</name><operator>-&gt;</operator><name>spi_handle</name></name></expr></argument>, <argument><expr><name>read_buf</name></expr></argument>, <argument><expr><name>read_size</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name>HAL_SPI_GetState</name><argument_list>(<argument><expr><name><name>spi_dev</name><operator>-&gt;</operator><name>spi_handle</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_SPI_STATE_READY</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
    </block_content>}</block></if></if_stmt>

<label><name>__exit</name>:</label>

    <expr_stmt><expr><call><name>HAL_GPIO_WritePin</name><argument_list>(<argument><expr><name><name>spi_dev</name><operator>-&gt;</operator><name>cs_gpiox</name></name></expr></argument>, <argument><expr><name><name>spi_dev</name><operator>-&gt;</operator><name>cs_gpio_pin</name></name></expr></argument>, <argument><expr><name>GPIO_PIN_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* about 100 microsecond delay */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>retry_delay_100us</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>delay</name> <init>= <expr><literal type="number">120</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>delay</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>spi_user_data</name></type> <name>spi2</name> <init>= <expr><block>{ <expr><operator>.</operator><name>spix</name> <operator>=</operator> <name>SPI2</name></expr>, <expr><operator>.</operator><name>cs_gpiox</name> <operator>=</operator> <name>GPIOB</name></expr>, <expr><operator>.</operator><name>cs_gpio_pin</name> <operator>=</operator> <name>GPIO_PIN_12</name></expr>, <expr><operator>.</operator><name>spi_handle</name> <operator>=</operator> <operator>&amp;</operator><name>hspi2</name></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><name>sfud_err</name></type> <name>sfud_spi_port_init</name><parameter_list>(<parameter><decl><type><name>sfud_flash</name> <modifier>*</modifier></type><name>flash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sfud_err</name></type> <name>result</name> <init>= <expr><name>SFUD_SUCCESS</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>flash</name><operator>-&gt;</operator><name>spi</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"SPI2"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GPIO_InitTypeDef</name></type> <name>GPIO_Initure</name></decl>;</decl_stmt>
        <comment type="block">/* SPI ÍâÉè³õÊ¼»¯ */</comment>
        <expr_stmt><expr><call><name>spi_configuration</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spi2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* ³õÊ¼»¯ CS Òý½Å */</comment>
        <expr_stmt><expr><name><name>GPIO_Initure</name><operator>.</operator><name>Pin</name></name> <operator>=</operator> <name><name>spi2</name><operator>.</operator><name>cs_gpio_pin</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>GPIO_Initure</name><operator>.</operator><name>Mode</name></name> <operator>=</operator> <name>GPIO_MODE_OUTPUT_PP</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>GPIO_Initure</name><operator>.</operator><name>Pull</name></name> <operator>=</operator> <name>GPIO_PULLUP</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>GPIO_Initure</name><operator>.</operator><name>Speed</name></name> <operator>=</operator> <name>GPIO_SPEED_FREQ_HIGH</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HAL_GPIO_Init</name><argument_list>(<argument><expr><name><name>spi2</name><operator>.</operator><name>cs_gpiox</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GPIO_Initure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HAL_GPIO_WritePin</name><argument_list>(<argument><expr><name><name>spi2</name><operator>.</operator><name>cs_gpiox</name></name></expr></argument>, <argument><expr><name><name>spi2</name><operator>.</operator><name>cs_gpio_pin</name></name></expr></argument>, <argument><expr><name>GPIO_PIN_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Í¬²½ Flash ÒÆÖ²ËùÐèµÄ½Ó¿Ú¼°Êý¾Ý */</comment>
        <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>spi</name><operator>.</operator><name>wr</name></name> <operator>=</operator> <name>spi_write_read</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>spi</name><operator>.</operator><name>lock</name></name> <operator>=</operator> <name>spi_lock</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>spi</name><operator>.</operator><name>unlock</name></name> <operator>=</operator> <name>spi_unlock</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>spi</name><operator>.</operator><name>user_data</name></name> <operator>=</operator> <operator>&amp;</operator><name>spi2</name></expr>;</expr_stmt>
        <comment type="block">/* about 100 microsecond delay */</comment>
        <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>retry</name><operator>.</operator><name>delay</name></name> <operator>=</operator> <name>retry_delay_100us</name></expr>;</expr_stmt>
        <comment type="block">/* adout 60 seconds timeout */</comment>
        <expr_stmt><expr><name><name>flash</name><operator>-&gt;</operator><name>retry</name><operator>.</operator><name>times</name></name> <operator>=</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function is print debug info.
 *
 * @param file the file which has call this function
 * @param line the line number which has call this function
 * @param format output format
 * @param ... args
 */</comment>
<function><type><name>void</name></type> <name>sfud_log_debug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

    <comment type="block">/* args point to the first variable parameter */</comment>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[SFUD](%s:%ld) "</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* must use vprintf to print */</comment>
    <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>log_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>log_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\r\n"</literal></expr></argument>, <argument><expr><name>log_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function is print routine info.
 *
 * @param format output format
 * @param ... args
 */</comment>
<function><type><name>void</name></type> <name>sfud_log_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

    <comment type="block">/* args point to the first variable parameter */</comment>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[SFUD]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* must use vprintf to print */</comment>
    <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>log_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>log_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\r\n"</literal></expr></argument>, <argument><expr><name>log_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
