<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/applications/main.c"><comment type="block">/*
 * Copyright (c) 2006-2020, RT-Thread Development Team
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Change Logs:
 * Date           Author       Notes
 * 2020-05-31     armink       first version
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;board.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;flashdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stm32f4xx_hal.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDB_LOG_TAG</name></cpp:macro> <cpp:value>"[main]"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>boot_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name></type> <name><name>boot_time</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/* default KV nodes */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>fdb_default_kv_node</name></name></type> <name><name>default_kv_table</name><index>[]</index></name> <init>= <expr><block>{
        <expr><block>{<expr><literal type="string">"username"</literal></expr>, <expr><literal type="string">"armink"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <comment type="block">/* string KV */</comment>
        <expr><block>{<expr><literal type="string">"password"</literal></expr>, <expr><literal type="string">"123456"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <comment type="block">/* string KV */</comment>
        <expr><block>{<expr><literal type="string">"boot_count"</literal></expr>, <expr><operator>&amp;</operator><name>boot_count</name></expr>, <expr>sizeof<operator>(</operator><name>boot_count</name><operator>)</operator></expr>}</block></expr>, <comment type="block">/* int type KV */</comment>
        <expr><block>{<expr><literal type="string">"boot_time"</literal></expr>, <expr><operator>&amp;</operator><name>boot_time</name></expr>, <expr>sizeof<operator>(</operator><name>boot_time</name><operator>)</operator></expr>}</block></expr>,    <comment type="block">/* int array type KV */</comment>
}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/* KVDB object */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>fdb_kvdb</name></name></type> <name>kvdb</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<comment type="block">/* TSDB object */</comment>
<decl_stmt><decl><type><name><name>struct</name> <name>fdb_tsdb</name></name></type> <name>tsdb</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<comment type="block">/* counts for simulated timestamp */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>counts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>kvdb_basic_sample</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>kvdb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>kvdb_type_string_sample</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>kvdb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>kvdb_type_blob_sample</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>kvdb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>tsdb_sample</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>tsdb</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lock</name><parameter_list>(<parameter><decl><type><name>fdb_db_t</name></type> <name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>__disable_irq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unlock</name><parameter_list>(<parameter><decl><type><name>fdb_db_t</name></type> <name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>__enable_irq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fdb_time_t</name></type> <name>get_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* Using the counts instead of timestamp.
     * Please change this function to return RTC time.
     */</comment>
    <return>return <expr><operator>++</operator><name>counts</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_KVDB</name></cpp:ifdef>
    <block>{<block_content> <comment type="block">/* KVDB Sample */</comment>
        <decl_stmt><decl><type><name><name>struct</name> <name>fdb_default_kv</name></name></type> <name>default_kv</name></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>default_kv</name><operator>.</operator><name>kvs</name></name> <operator>=</operator> <name>default_kv_table</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>default_kv</name><operator>.</operator><name>num</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>default_kv_table</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>default_kv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <comment type="block">/* set the lock and unlock function if you want */</comment>
        <expr_stmt><expr><call><name>fdb_kvdb_control</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kvdb</name></expr></argument>, <argument><expr><name>FDB_KVDB_CTRL_SET_LOCK</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fdb_kvdb_control</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kvdb</name></expr></argument>, <argument><expr><name>FDB_KVDB_CTRL_SET_UNLOCK</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>unlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Key-Value database initialization
         *
         *       &amp;kvdb: database object
         *       "env": database name
         * "fdb_kvdb1": The flash partition name base on FAL. Please make sure it's in FAL partition table.
         *              Please change to YOUR partition name.
         * &amp;default_kv: The default KV nodes. It will auto add to KVDB when first initialize successfully.
         *        NULL: The user data if you need, now is empty.
         */</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>fdb_kvdb_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kvdb</name></expr></argument>, <argument><expr><literal type="string">"env"</literal></expr></argument>, <argument><expr><literal type="string">"fdb_kvdb1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>default_kv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* run basic KV samples */</comment>
        <expr_stmt><expr><call><name>kvdb_basic_sample</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kvdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* run string KV samples */</comment>
        <expr_stmt><expr><call><name>kvdb_type_string_sample</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kvdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* run blob KV samples */</comment>
        <expr_stmt><expr><call><name>kvdb_type_blob_sample</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kvdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_USING_KVDB */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_TSDB</name></cpp:ifdef>
    <block>{<block_content> <comment type="block">/* TSDB Sample */</comment>
        <comment type="block">/* set the lock and unlock function if you want */</comment>
        <expr_stmt><expr><call><name>fdb_tsdb_control</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsdb</name></expr></argument>, <argument><expr><name>FDB_TSDB_CTRL_SET_LOCK</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fdb_tsdb_control</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsdb</name></expr></argument>, <argument><expr><name>FDB_TSDB_CTRL_SET_UNLOCK</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>unlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Time series database initialization
         *
         *       &amp;tsdb: database object
         *       "log": database name
         * "fdb_tsdb1": The flash partition name base on FAL. Please make sure it's in FAL partition table.
         *              Please change to YOUR partition name.
         *    get_time: The get current timestamp function.
         *         128: maximum length of each log
         *        NULL: The user data if you need, now is empty.
         */</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>fdb_tsdb_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsdb</name></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>, <argument><expr><literal type="string">"fdb_tsdb1"</literal></expr></argument>, <argument><expr><name>get_time</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* read last saved time for simulated timestamp */</comment>
        <expr_stmt><expr><call><name>fdb_tsdb_control</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsdb</name></expr></argument>, <argument><expr><name>FDB_TSDB_CTRL_GET_LAST_TIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>counts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* run TSDB sample */</comment>
        <expr_stmt><expr><call><name>tsdb_sample</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_USING_TSDB */</comment>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
