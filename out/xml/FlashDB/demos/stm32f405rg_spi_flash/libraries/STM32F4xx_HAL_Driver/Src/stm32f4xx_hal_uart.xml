<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_uart.c
  * @author  MCD Application Team
  * @brief   UART HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
  *           + Initialization and de-initialization functions
  *           + IO operation functions
  *           + Peripheral Control functions
  *           + Peripheral State and Errors functions
  @verbatim
  ==============================================================================
                        ##### How to use this driver #####
  ==============================================================================
  [..]
    The UART HAL driver can be used as follows:

    (#) Declare a UART_HandleTypeDef handle structure (eg. UART_HandleTypeDef huart).
    (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
        (##) Enable the USARTx interface clock.
        (##) UART pins configuration:
            (+++) Enable the clock for the UART GPIOs.
            (+++) Configure these UART pins (TX as alternate function pull-up, RX as alternate function Input).
        (##) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
             and HAL_UART_Receive_IT() APIs):
            (+++) Configure the USARTx interrupt priority.
            (+++) Enable the NVIC USART IRQ handle.
        (##) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
             and HAL_UART_Receive_DMA() APIs):
            (+++) Declare a DMA handle structure for the Tx/Rx stream.
            (+++) Enable the DMAx interface clock.
            (+++) Configure the declared DMA handle structure with the required
                  Tx/Rx parameters.
            (+++) Configure the DMA Tx/Rx stream.
            (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
            (+++) Configure the priority and enable the NVIC for the transfer complete
                  interrupt on the DMA Tx/Rx stream.
            (+++) Configure the USARTx interrupt priority and enable the NVIC USART IRQ handle
                  (used for last byte sending completion detection in DMA non circular mode)

    (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
        flow control and Mode(Receiver/Transmitter) in the huart Init structure.

    (#) For the UART asynchronous mode, initialize the UART registers by calling
        the HAL_UART_Init() API.

    (#) For the UART Half duplex mode, initialize the UART registers by calling
        the HAL_HalfDuplex_Init() API.

    (#) For the LIN mode, initialize the UART registers by calling the HAL_LIN_Init() API.

    (#) For the Multi-Processor mode, initialize the UART registers by calling
        the HAL_MultiProcessor_Init() API.

     [..]
       (@) The specific UART interrupts (Transmission complete interrupt,
            RXNE interrupt and Error Interrupts) will be managed using the macros
            __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT() inside the transmit
            and receive process.

     [..]
       (@) These APIs (HAL_UART_Init() and HAL_HalfDuplex_Init()) configure also the
            low level Hardware GPIO, CLOCK, CORTEX...etc) by calling the customized
            HAL_UART_MspInit() API.

    ##### Callback registration #####
    ==================================

    [..]
    The compilation define USE_HAL_UART_REGISTER_CALLBACKS when set to 1
    allows the user to configure dynamically the driver callbacks.

    [..]
    Use Function @ref HAL_UART_RegisterCallback() to register a user callback.
    Function @ref HAL_UART_RegisterCallback() allows to register following callbacks:
    (+) TxHalfCpltCallback        : Tx Half Complete Callback.
    (+) TxCpltCallback            : Tx Complete Callback.
    (+) RxHalfCpltCallback        : Rx Half Complete Callback.
    (+) RxCpltCallback            : Rx Complete Callback.
    (+) ErrorCallback             : Error Callback.
    (+) AbortCpltCallback         : Abort Complete Callback.
    (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
    (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
    (+) MspInitCallback           : UART MspInit.
    (+) MspDeInitCallback         : UART MspDeInit.
    This function takes as parameters the HAL peripheral handle, the Callback ID
    and a pointer to the user callback function.

    [..]
    Use function @ref HAL_UART_UnRegisterCallback() to reset a callback to the default
    weak (surcharged) function.
    @ref HAL_UART_UnRegisterCallback() takes as parameters the HAL peripheral handle,
    and the Callback ID.
    This function allows to reset following callbacks:
    (+) TxHalfCpltCallback        : Tx Half Complete Callback.
    (+) TxCpltCallback            : Tx Complete Callback.
    (+) RxHalfCpltCallback        : Rx Half Complete Callback.
    (+) RxCpltCallback            : Rx Complete Callback.
    (+) ErrorCallback             : Error Callback.
    (+) AbortCpltCallback         : Abort Complete Callback.
    (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
    (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
    (+) MspInitCallback           : UART MspInit.
    (+) MspDeInitCallback         : UART MspDeInit.

    [..]
    By default, after the @ref HAL_UART_Init() and when the state is HAL_UART_STATE_RESET
    all callbacks are set to the corresponding weak (surcharged) functions:
    examples @ref HAL_UART_TxCpltCallback(), @ref HAL_UART_RxHalfCpltCallback().
    Exception done for MspInit and MspDeInit functions that are respectively
    reset to the legacy weak (surcharged) functions in the @ref HAL_UART_Init()
    and @ref HAL_UART_DeInit() only when these callbacks are null (not registered beforehand).
    If not, MspInit or MspDeInit are not null, the @ref HAL_UART_Init() and @ref HAL_UART_DeInit()
    keep and use the user MspInit/MspDeInit callbacks (registered beforehand).

    [..]
    Callbacks can be registered/unregistered in HAL_UART_STATE_READY state only.
    Exception done MspInit/MspDeInit that can be registered/unregistered
    in HAL_UART_STATE_READY or HAL_UART_STATE_RESET state, thus registered (user)
    MspInit/DeInit callbacks can be used during the Init/DeInit.
    In that case first register the MspInit/MspDeInit user callbacks
    using @ref HAL_UART_RegisterCallback() before calling @ref HAL_UART_DeInit()
    or @ref HAL_UART_Init() function.

    [..]
    When The compilation define USE_HAL_UART_REGISTER_CALLBACKS is set to 0 or
    not defined, the callback registration feature is not available
    and weak (surcharged) callbacks are used.

     [..]
        Three operation modes are available within this driver :

     *** Polling mode IO operation ***
     =================================
     [..]
       (+) Send an amount of data in blocking mode using HAL_UART_Transmit()
       (+) Receive an amount of data in blocking mode using HAL_UART_Receive()

     *** Interrupt mode IO operation ***
     ===================================
     [..]
       (+) Send an amount of data in non blocking mode using HAL_UART_Transmit_IT()
       (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
            add his own code by customization of function pointer HAL_UART_TxCpltCallback
       (+) Receive an amount of data in non blocking mode using HAL_UART_Receive_IT()
       (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
            add his own code by customization of function pointer HAL_UART_RxCpltCallback
       (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
            add his own code by customization of function pointer HAL_UART_ErrorCallback

     *** DMA mode IO operation ***
     ==============================
     [..]
       (+) Send an amount of data in non blocking mode (DMA) using HAL_UART_Transmit_DMA()
       (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user can
            add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback
       (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
            add his own code by customization of function pointer HAL_UART_TxCpltCallback
       (+) Receive an amount of data in non blocking mode (DMA) using HAL_UART_Receive_DMA()
       (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can
            add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback
       (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
            add his own code by customization of function pointer HAL_UART_RxCpltCallback
       (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
            add his own code by customization of function pointer HAL_UART_ErrorCallback
       (+) Pause the DMA Transfer using HAL_UART_DMAPause()
       (+) Resume the DMA Transfer using HAL_UART_DMAResume()
       (+) Stop the DMA Transfer using HAL_UART_DMAStop()

     *** UART HAL driver macros list ***
     =============================================
     [..]
       Below the list of most used macros in UART HAL driver.

      (+) __HAL_UART_ENABLE: Enable the UART peripheral
      (+) __HAL_UART_DISABLE: Disable the UART peripheral
      (+) __HAL_UART_GET_FLAG : Check whether the specified UART flag is set or not
      (+) __HAL_UART_CLEAR_FLAG : Clear the specified UART pending flag
      (+) __HAL_UART_ENABLE_IT: Enable the specified UART interrupt
      (+) __HAL_UART_DISABLE_IT: Disable the specified UART interrupt
      (+) __HAL_UART_GET_IT_SOURCE: Check whether the specified UART interrupt has occurred or not

     [..]
       (@) You can refer to the UART HAL driver header file for more useful macros

  @endverbatim
     [..]
       (@) Additionnal remark: If the parity is enabled, then the MSB bit of the data written
           in the data register is transmitted but is changed by the parity bit.
           Depending on the frame length defined by the M bit (8-bits or 9-bits),
           the possible UART frame formats are as listed in the following table:
    +-------------------------------------------------------------+
    |   M bit |  PCE bit  |            UART frame                 |
    |---------------------|---------------------------------------|
    |    0    |    0      |    | SB | 8 bit data | STB |          |
    |---------|-----------|---------------------------------------|
    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
    |---------|-----------|---------------------------------------|
    |    1    |    0      |    | SB | 9 bit data | STB |          |
    |---------|-----------|---------------------------------------|
    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
    +-------------------------------------------------------------+
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup UART UART
  * @brief HAL UART module driver
  * @{
  */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_UART_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup UART_Private_Constants
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup UART_Private_Functions  UART Private Functions
  * @{
  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>UART_InitCallbacksToDefault</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UART_EndTxTransfer</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UART_EndRxTransfer</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMATransmitCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMAReceiveCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMATxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMARxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMAAbortOnError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMATxAbortCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMARxAbortCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMATxOnlyAbortCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMARxOnlyAbortCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>UART_Transmit_IT</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>UART_EndTransmit_IT</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>UART_Receive_IT</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>UART_WaitOnFlagUntilTimeout</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Flag</name></decl></parameter>, <parameter><decl><type><name>FlagStatus</name></type> <name>Status</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tickstart</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UART_SetConfig</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Exported functions ---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup UART_Exported_Functions UART Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
  *  @brief    Initialization and Configuration functions
  *
@verbatim
 ===============================================================================
            ##### Initialization and Configuration functions #####
 ===============================================================================
    [..]
    This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
    in asynchronous mode.
      (+) For the asynchronous mode only these parameters can be configured:
        (++) Baud Rate
        (++) Word Length
        (++) Stop Bit
        (++) Parity: If the parity is enabled, then the MSB bit of the data written
             in the data register is transmitted but is changed by the parity bit.
             Depending on the frame length defined by the M bit (8-bits or 9-bits),
             please refer to Reference manual for possible UART frame formats.
        (++) Hardware flow control
        (++) Receiver/transmitter modes
        (++) Over Sampling Method
    [..]
    The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init() and HAL_MultiProcessor_Init() APIs
    follow respectively the UART asynchronous, UART Half duplex, LIN and Multi-Processor configuration
    procedures (details for the procedures are available in reference manual
    (RM0430 for STM32F4X3xx MCUs and RM0402 for STM32F412xx MCUs
     RM0383 for STM32F411xC/E MCUs and RM0401 for STM32F410xx MCUs
     RM0090 for STM32F4X5xx/STM32F4X7xx/STM32F429xx/STM32F439xx MCUs
     RM0390 for STM32F446xx MCUs and RM0386 for STM32F469xx/STM32F479xx MCUs)).

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the UART mode according to the specified parameters in
  *         the UART_InitTypeDef and create the associated handle.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_UART_Init</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the UART handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>huart</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HwFlowCtl</name></name> <operator>!=</operator> <name>UART_HWCONTROL_NONE</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_HWFLOW_INSTANCE</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_HARDWARE_FLOW_CONTROL</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HwFlowCtl</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_INSTANCE</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_WORD_LENGTH</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>WordLength</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_OVERSAMPLING</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OverSampling</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_UART_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name>UART_InitCallbacksToDefault</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_UART_MspInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Init the low level hardware : GPIO, CLOCK */</comment>
    <expr_stmt><expr><call><name>HAL_UART_MspInit</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (USE_HAL_UART_REGISTER_CALLBACKS) */</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_UART_DISABLE</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the UART Communication parameters */</comment>
  <expr_stmt><expr><call><name>UART_SetConfig</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR2_LINEN</name> <operator>|</operator> <name>USART_CR2_CLKEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR3_SCEN</name> <operator>|</operator> <name>USART_CR3_HDSEL</name> <operator>|</operator> <name>USART_CR3_IREN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_UART_ENABLE</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize the UART state */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the half-duplex mode according to the specified
  *         parameters in the UART_InitTypeDef and create the associated handle.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_HalfDuplex_Init</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the UART handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>huart</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_HALFDUPLEX_INSTANCE</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_WORD_LENGTH</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>WordLength</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_OVERSAMPLING</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OverSampling</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_UART_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name>UART_InitCallbacksToDefault</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_UART_MspInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Init the low level hardware : GPIO, CLOCK */</comment>
    <expr_stmt><expr><call><name>HAL_UART_MspInit</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (USE_HAL_UART_REGISTER_CALLBACKS) */</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_UART_DISABLE</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the UART Communication parameters */</comment>
  <expr_stmt><expr><call><name>UART_SetConfig</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR2_LINEN</name> <operator>|</operator> <name>USART_CR2_CLKEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR3_IREN</name> <operator>|</operator> <name>USART_CR3_SCEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_HDSEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_UART_ENABLE</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize the UART state*/</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the LIN mode according to the specified
  *         parameters in the UART_InitTypeDef and create the associated handle.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @param  BreakDetectLength Specifies the LIN break detection length.
  *         This parameter can be one of the following values:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LIN_Init</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BreakDetectLength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the UART handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>huart</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the LIN UART instance */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_LIN_INSTANCE</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the Break detection length parameter */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_LIN_BREAK_DETECT_LENGTH</name><argument_list>(<argument><expr><name>BreakDetectLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_LIN_WORD_LENGTH</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>WordLength</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_LIN_OVERSAMPLING</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OverSampling</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_UART_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name>UART_InitCallbacksToDefault</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_UART_MspInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Init the low level hardware : GPIO, CLOCK */</comment>
    <expr_stmt><expr><call><name>HAL_UART_MspInit</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (USE_HAL_UART_REGISTER_CALLBACKS) */</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_UART_DISABLE</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the UART Communication parameters */</comment>
  <expr_stmt><expr><call><name>UART_SetConfig</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR2_CLKEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR3_HDSEL</name> <operator>|</operator> <name>USART_CR3_IREN</name> <operator>|</operator> <name>USART_CR3_SCEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the LIN mode by setting the LINEN bit in the CR2 register */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>USART_CR2_LINEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the USART LIN Break detection length. */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>USART_CR2_LBDL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>BreakDetectLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_UART_ENABLE</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize the UART state*/</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the Multi-Processor mode according to the specified
  *         parameters in the UART_InitTypeDef and create the associated handle.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @param  Address USART address
  * @param  WakeUpMethod specifies the USART wake-up method.
  *         This parameter can be one of the following values:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_MultiProcessor_Init</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>Address</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>WakeUpMethod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the UART handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>huart</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_INSTANCE</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the Address &amp; wake up method parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_WAKEUPMETHOD</name><argument_list>(<argument><expr><name>WakeUpMethod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_ADDRESS</name><argument_list>(<argument><expr><name>Address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_WORD_LENGTH</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>WordLength</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_OVERSAMPLING</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OverSampling</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_UART_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name>UART_InitCallbacksToDefault</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_UART_MspInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Init the low level hardware : GPIO, CLOCK */</comment>
    <expr_stmt><expr><call><name>HAL_UART_MspInit</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (USE_HAL_UART_REGISTER_CALLBACKS) */</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_UART_DISABLE</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the UART Communication parameters */</comment>
  <expr_stmt><expr><call><name>UART_SetConfig</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR2_LINEN</name> <operator>|</operator> <name>USART_CR2_CLKEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR3_SCEN</name> <operator>|</operator> <name>USART_CR3_HDSEL</name> <operator>|</operator> <name>USART_CR3_IREN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the USART address node */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>USART_CR2_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>Address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the wake up method by setting the WAKE bit in the CR1 register */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_WAKE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>WakeUpMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_UART_ENABLE</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize the UART state */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitializes the UART peripheral.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_UART_DeInit</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the UART handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>huart</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_INSTANCE</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_UART_DISABLE</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_UART_MspDeInit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name>HAL_UART_MspDeInit</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (USE_HAL_UART_REGISTER_CALLBACKS) */</comment>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_RESET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  UART MSP Init.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_UART_MspInit</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  UART MSP DeInit.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_UART_MspDeInit</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User UART Callback
  *         To be used instead of the weak predefined callback
  * @param  huart uart handle
  * @param  CallbackID ID of the callback to be registered
  *         This parameter can be one of the following values:
  *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
  *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
  *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
  *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
  *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
  *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
  *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
  *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
  *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
  *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_UART_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>, <parameter><decl><type><name>HAL_UART_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>, <parameter><decl><type><name>pUART_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_UART_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_UART_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_UART_TX_HALFCOMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_TX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_RX_HALFCOMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_RX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_ERROR_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_ABORT_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>AbortTransmitCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>AbortReceiveCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_UART_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_UART_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_UART_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_UART_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_UART_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister an UART Callback
  *         UART callaback is redirected to the weak predefined callback
  * @param  huart uart handle
  * @param  CallbackID ID of the callback to be unregistered
  *         This parameter can be one of the following values:
  *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
  *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
  *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
  *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
  *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
  *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
  *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
  *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
  *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
  *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_UART_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>, <parameter><decl><type><name>HAL_UART_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>HAL_UART_STATE_READY</name> <operator>==</operator> <name><name>huart</name><operator>-&gt;</operator><name>gState</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_UART_TX_HALFCOMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_UART_TxHalfCpltCallback</name></expr>;</expr_stmt>               <comment type="block">/* Legacy weak  TxHalfCpltCallback       */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_TX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxCpltCallback</name></name> <operator>=</operator> <name>HAL_UART_TxCpltCallback</name></expr>;</expr_stmt>                       <comment type="block">/* Legacy weak TxCpltCallback            */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_RX_HALFCOMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_UART_RxHalfCpltCallback</name></expr>;</expr_stmt>               <comment type="block">/* Legacy weak RxHalfCpltCallback        */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_RX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxCpltCallback</name></name> <operator>=</operator> <name>HAL_UART_RxCpltCallback</name></expr>;</expr_stmt>                       <comment type="block">/* Legacy weak RxCpltCallback            */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_ERROR_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>HAL_UART_ErrorCallback</name></expr>;</expr_stmt>                         <comment type="block">/* Legacy weak ErrorCallback             */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_ABORT_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name> <operator>=</operator> <name>HAL_UART_AbortCpltCallback</name></expr>;</expr_stmt>                 <comment type="block">/* Legacy weak AbortCpltCallback         */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>AbortTransmitCpltCallback</name></name> <operator>=</operator> <name>HAL_UART_AbortTransmitCpltCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak AbortTransmitCpltCallback */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>AbortReceiveCpltCallback</name></name> <operator>=</operator> <name>HAL_UART_AbortReceiveCpltCallback</name></expr>;</expr_stmt>   <comment type="block">/* Legacy weak AbortReceiveCpltCallback  */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_UART_MspInit</name></expr>;</expr_stmt>                             <comment type="block">/* Legacy weak MspInitCallback           */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_UART_MspDeInit</name></expr>;</expr_stmt>                         <comment type="block">/* Legacy weak MspDeInitCallback         */</comment>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_UART_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>HAL_UART_STATE_RESET</name> <operator>==</operator> <name><name>huart</name><operator>-&gt;</operator><name>gState</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_UART_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_UART_MspInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_UART_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_UART_MspDeInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_UART_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_UART_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup UART_Exported_Functions_Group2 IO operation functions
  *  @brief UART Transmit and Receive functions
  *
@verbatim
 ===============================================================================
                      ##### IO operation functions #####
 ===============================================================================
    This subsection provides a set of functions allowing to manage the UART asynchronous
    and Half duplex data transfers.

    (#) There are two modes of transfer:
       (+) Blocking mode: The communication is performed in polling mode.
           The HAL status of all data processing is returned by the same function
           after finishing transfer.
       (+) Non-Blocking mode: The communication is performed using Interrupts
           or DMA, these API's return the HAL status.
           The end of the data processing will be indicated through the
           dedicated UART IRQ when using Interrupt mode or the DMA IRQ when
           using DMA mode.
           The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks
           will be executed respectively at the end of the transmit or receive process
           The HAL_UART_ErrorCallback()user callback will be executed when a communication error is detected.

    (#) Blocking mode API's are :
        (+) HAL_UART_Transmit()
        (+) HAL_UART_Receive()

    (#) Non-Blocking mode API's with Interrupt are :
        (+) HAL_UART_Transmit_IT()
        (+) HAL_UART_Receive_IT()
        (+) HAL_UART_IRQHandler()

    (#) Non-Blocking mode API's with DMA are :
        (+) HAL_UART_Transmit_DMA()
        (+) HAL_UART_Receive_DMA()
        (+) HAL_UART_DMAPause()
        (+) HAL_UART_DMAResume()
        (+) HAL_UART_DMAStop()

    (#) A set of Transfer Complete Callbacks are provided in Non_Blocking mode:
        (+) HAL_UART_TxHalfCpltCallback()
        (+) HAL_UART_TxCpltCallback()
        (+) HAL_UART_RxHalfCpltCallback()
        (+) HAL_UART_RxCpltCallback()
        (+) HAL_UART_ErrorCallback()

    (#) Non-Blocking mode transfers could be aborted using Abort API's :
        (+) HAL_UART_Abort()
        (+) HAL_UART_AbortTransmit()
        (+) HAL_UART_AbortReceive()
        (+) HAL_UART_Abort_IT()
        (+) HAL_UART_AbortTransmit_IT()
        (+) HAL_UART_AbortReceive_IT()

    (#) For Abort services based on interrupts (HAL_UART_Abortxxx_IT), a set of Abort Complete Callbacks are provided:
        (+) HAL_UART_AbortCpltCallback()
        (+) HAL_UART_AbortTransmitCpltCallback()
        (+) HAL_UART_AbortReceiveCpltCallback()

    (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
        Errors are handled as follows :
       (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but error severity is
           to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in Interrupt mode reception .
           Received character is then retrieved and stored in Rx buffer, Error code is set to allow user to identify error type,
           and HAL_UART_ErrorCallback() user callback is executed. Transfer is kept ongoing on UART side.
           If user wants to abort it, Abort services should be called by user.
       (+) Error is considered as Blocking : Transfer could not be completed properly and is aborted.
           This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
           Error code is set to allow user to identify error type, and HAL_UART_ErrorCallback() user callback is executed.

    -@- In the Half duplex communication, it is forbidden to run the transmit
        and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX can't be useful.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Sends an amount of data in blocking mode.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_UART_Transmit</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check that a Tx process is not already ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_UART_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_BUSY_TX</name></expr>;</expr_stmt>

    <comment type="block">/* Init tickstart for timeout managment */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>WordLength</name></name> <operator>==</operator> <name>UART_WORDLENGTH_9B</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>UART_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>huart</name></expr></argument>, <argument><expr><name>UART_FLAG_TXE</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>pData</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>tmp</name> <operator>&amp;</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0x01FF</literal><operator>)</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Parity</name></name> <operator>==</operator> <name>UART_PARITY_NONE</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name>pData</name> <operator>+=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><name>pData</name> <operator>+=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>UART_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>huart</name></expr></argument>, <argument><expr><name>UART_FLAG_TXE</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>pData</name><operator>++</operator> <operator>&amp;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><call><name>UART_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>huart</name></expr></argument>, <argument><expr><name>UART_FLAG_TC</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* At end of Tx process, restore huart-&gt;gState to Ready */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receives an amount of data in blocking mode.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_UART_Receive</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check that a Rx process is not already ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>==</operator> <name>HAL_UART_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_BUSY_RX</name></expr>;</expr_stmt>

    <comment type="block">/* Init tickstart for timeout managment */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>

    <comment type="block">/* Check the remain data to be received */</comment>
    <while>while <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>WordLength</name></name> <operator>==</operator> <name>UART_WORDLENGTH_9B</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>UART_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>huart</name></expr></argument>, <argument><expr><name>UART_FLAG_RXNE</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>pData</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Parity</name></name> <operator>==</operator> <name>UART_PARITY_NONE</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0x01FF</literal><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>pData</name> <operator>+=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0x00FF</literal><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>pData</name> <operator>+=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>UART_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>huart</name></expr></argument>, <argument><expr><name>UART_FLAG_RXNE</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Parity</name></name> <operator>==</operator> <name>UART_PARITY_NONE</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pData</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x00FF</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pData</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x007F</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* At end of Rx process, restore huart-&gt;RxState to Ready */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sends an amount of data in non blocking mode.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_UART_Transmit_IT</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check that a Tx process is not already ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_UART_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_BUSY_TX</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the UART Transmit data register empty Interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_UART_ENABLE_IT</name><argument_list>(<argument><expr><name>huart</name></expr></argument>, <argument><expr><name>UART_IT_TXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receives an amount of data in non blocking mode.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_UART_Receive_IT</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check that a Rx process is not already ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>==</operator> <name>HAL_UART_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_BUSY_RX</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the UART Parity Error Interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_UART_ENABLE_IT</name><argument_list>(<argument><expr><name>huart</name></expr></argument>, <argument><expr><name>UART_IT_PE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */</comment>
    <expr_stmt><expr><call><name>__HAL_UART_ENABLE_IT</name><argument_list>(<argument><expr><name>huart</name></expr></argument>, <argument><expr><name>UART_IT_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the UART Data Register not empty Interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_UART_ENABLE_IT</name><argument_list>(<argument><expr><name>huart</name></expr></argument>, <argument><expr><name>UART_IT_RXNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sends an amount of data in non blocking mode.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_UART_Transmit_DMA</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

  <comment type="block">/* Check that a Tx process is not already ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_UART_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_BUSY_TX</name></expr>;</expr_stmt>

    <comment type="block">/* Set the UART DMA transfer complete callback */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>UART_DMATransmitCplt</name></expr>;</expr_stmt>

    <comment type="block">/* Set the UART DMA Half transfer complete callback */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>UART_DMATxHalfCplt</name></expr>;</expr_stmt>

    <comment type="block">/* Set the DMA error callback */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>UART_DMAError</name></expr>;</expr_stmt>

    <comment type="block">/* Set the DMA abort callback */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Enable the UART transmit DMA stream */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear the TC flag in the SR register by writing 0 to it */</comment>
    <expr_stmt><expr><call><name>__HAL_UART_CLEAR_FLAG</name><argument_list>(<argument><expr><name>huart</name></expr></argument>, <argument><expr><name>UART_FLAG_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receives an amount of data in non blocking mode.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_UART_Receive_DMA</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

  <comment type="block">/* Check that a Rx process is not already ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>==</operator> <name>HAL_UART_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_BUSY_RX</name></expr>;</expr_stmt>

    <comment type="block">/* Set the UART DMA transfer complete callback */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>UART_DMAReceiveCplt</name></expr>;</expr_stmt>

    <comment type="block">/* Set the UART DMA Half transfer complete callback */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>UART_DMARxHalfCplt</name></expr>;</expr_stmt>

    <comment type="block">/* Set the DMA error callback */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>UART_DMAError</name></expr>;</expr_stmt>

    <comment type="block">/* Set the DMA abort callback */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Enable the DMA stream */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */</comment>
    <expr_stmt><expr><call><name>__HAL_UART_CLEAR_OREFLAG</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the UART Parity Error Interrupt */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_PEIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Pauses the DMA Transfer.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_UART_DMAPause</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>dmarequest</name> <init>= <expr><literal type="number">0x00U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>dmarequest</name> <operator>=</operator> <call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_UART_STATE_BUSY_TX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dmarequest</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the UART DMA Tx request */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>dmarequest</name> <operator>=</operator> <call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>==</operator> <name>HAL_UART_STATE_BUSY_RX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dmarequest</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_PEIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Disable the UART DMA Rx request */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Resumes the DMA Transfer.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_UART_DMAResume</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_UART_STATE_BUSY_TX</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable the UART DMA Tx request */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>==</operator> <name>HAL_UART_STATE_BUSY_RX</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear the Overrun flag before resuming the Rx transfer*/</comment>
    <expr_stmt><expr><call><name>__HAL_UART_CLEAR_OREFLAG</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_PEIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the UART DMA Rx request */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Stops the DMA Transfer.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_UART_DMAStop</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>dmarequest</name> <init>= <expr><literal type="number">0x00U</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* The Lock is not implemented on this API to allow the user application
     to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback():
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */</comment>

  <comment type="block">/* Stop UART DMA Tx request if ongoing */</comment>
  <expr_stmt><expr><name>dmarequest</name> <operator>=</operator> <call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_UART_STATE_BUSY_TX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dmarequest</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the UART DMA Tx stream */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>UART_EndTxTransfer</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Stop UART DMA Rx request if ongoing */</comment>
  <expr_stmt><expr><name>dmarequest</name> <operator>=</operator> <call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>==</operator> <name>HAL_UART_STATE_BUSY_RX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dmarequest</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the UART DMA Rx stream */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>UART_EndRxTransfer</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Abort ongoing transfers (blocking mode).
  * @param  huart UART handle.
  * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or DMA mode.
  *         This procedure performs following operations :
  *           - Disable UART Interrupts (Tx and Rx)
  *           - Disable the DMA transfer in the peripheral register (if enabled)
  *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_UART_Abort</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR1_RXNEIE</name> <operator>|</operator> <name>USART_CR1_PEIE</name> <operator>|</operator> <name>USART_CR1_TXEIE</name> <operator>|</operator> <name>USART_CR1_TCIE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the UART DMA Tx request if enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */</comment>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_GetError</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAL_DMA_ERROR_TIMEOUT</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set error code to DMA */</comment>
          <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_DMA</name></expr>;</expr_stmt>

          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Disable the UART DMA Rx request if enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */</comment>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_GetError</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAL_DMA_ERROR_TIMEOUT</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set error code to DMA */</comment>
          <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_DMA</name></expr>;</expr_stmt>

          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Reset Tx and Rx transfer counters */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

  <comment type="block">/* Reset ErrorCode */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Restore huart-&gt;RxState and huart-&gt;gState to Ready */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Abort ongoing Transmit transfer (blocking mode).
  * @param  huart UART handle.
  * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt or DMA mode.
  *         This procedure performs following operations :
  *           - Disable UART Interrupts (Tx)
  *           - Disable the DMA transfer in the peripheral register (if enabled)
  *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_UART_AbortTransmit</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable TXEIE and TCIE interrupts */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR1_TXEIE</name> <operator>|</operator> <name>USART_CR1_TCIE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the UART DMA Tx request if enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */</comment>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_GetError</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAL_DMA_ERROR_TIMEOUT</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set error code to DMA */</comment>
          <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_DMA</name></expr>;</expr_stmt>

          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Reset Tx transfer counter */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

  <comment type="block">/* Restore huart-&gt;gState to Ready */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Abort ongoing Receive transfer (blocking mode).
  * @param  huart UART handle.
  * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt or DMA mode.
  *         This procedure performs following operations :
  *           - Disable UART Interrupts (Rx)
  *           - Disable the DMA transfer in the peripheral register (if enabled)
  *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_UART_AbortReceive</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR1_RXNEIE</name> <operator>|</operator> <name>USART_CR1_PEIE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the UART DMA Rx request if enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */</comment>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_GetError</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAL_DMA_ERROR_TIMEOUT</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set error code to DMA */</comment>
          <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_DMA</name></expr>;</expr_stmt>

          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Reset Rx transfer counter */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

  <comment type="block">/* Restore huart-&gt;RxState to Ready */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Abort ongoing transfers (Interrupt mode).
  * @param  huart UART handle.
  * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or DMA mode.
  *         This procedure performs following operations :
  *           - Disable UART Interrupts (Tx and Rx)
  *           - Disable the DMA transfer in the peripheral register (if enabled)
  *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
  *           - Set handle State to READY
  *           - At abort completion, call user abort complete callback
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_UART_Abort_IT</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>AbortCplt</name> <init>= <expr><literal type="number">0x01U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR1_RXNEIE</name> <operator>|</operator> <name>USART_CR1_PEIE</name> <operator>|</operator> <name>USART_CR1_TXEIE</name> <operator>|</operator> <name>USART_CR1_TCIE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */</comment>
  <comment type="block">/* DMA Tx Handle is valid */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>UART_DMATxAbortCallback</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* DMA Rx Handle is valid */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>UART_DMARxAbortCallback</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Disable the UART DMA Tx request if enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable DMA Tx at UART level */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */</comment>

      <comment type="block">/* Abort DMA TX */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><name>AbortCplt</name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Disable the UART DMA Rx request if enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */</comment>

      <comment type="block">/* Abort DMA RX */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>AbortCplt</name> <operator>=</operator> <literal type="number">0x01U</literal></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><name>AbortCplt</name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* if no DMA abort complete callback execution is required =&gt; call user Abort Complete callback */</comment>
  <if_stmt><if>if <condition>(<expr><name>AbortCplt</name> <operator>==</operator> <literal type="number">0x01U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Reset Tx and Rx transfer counters */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

    <comment type="block">/* Reset ErrorCode */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Restore huart-&gt;gState and huart-&gt;RxState to Ready */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name>  <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* As no DMA to be aborted, call directly user Abort complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/* Call registered Abort complete callback */</comment>
    <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Call legacy weak Abort complete callback */</comment>
    <expr_stmt><expr><call><name>HAL_UART_AbortCpltCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Abort ongoing Transmit transfer (Interrupt mode).
  * @param  huart UART handle.
  * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt or DMA mode.
  *         This procedure performs following operations :
  *           - Disable UART Interrupts (Tx)
  *           - Disable the DMA transfer in the peripheral register (if enabled)
  *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
  *           - Set handle State to READY
  *           - At abort completion, call user abort complete callback
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_UART_AbortTransmit_IT</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable TXEIE and TCIE interrupts */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR1_TXEIE</name> <operator>|</operator> <name>USART_CR1_TCIE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the UART DMA Tx request if enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */</comment>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>UART_DMATxOnlyAbortCallback</name></expr>;</expr_stmt>

      <comment type="block">/* Abort DMA TX */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Call Directly huart-&gt;hdmatx-&gt;XferAbortCallback function in case of error */</comment>
        <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Reset Tx transfer counter */</comment>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

      <comment type="block">/* Restore huart-&gt;gState to Ready */</comment>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

      <comment type="block">/* As no DMA to be aborted, call directly user Abort complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <comment type="block">/* Call registered Abort Transmit Complete Callback */</comment>
      <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>AbortTransmitCpltCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/* Call legacy weak Abort Transmit Complete Callback */</comment>
      <expr_stmt><expr><call><name>HAL_UART_AbortTransmitCpltCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Reset Tx transfer counter */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

    <comment type="block">/* Restore huart-&gt;gState to Ready */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* As no DMA to be aborted, call directly user Abort complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/* Call registered Abort Transmit Complete Callback */</comment>
    <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>AbortTransmitCpltCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Call legacy weak Abort Transmit Complete Callback */</comment>
    <expr_stmt><expr><call><name>HAL_UART_AbortTransmitCpltCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Abort ongoing Receive transfer (Interrupt mode).
  * @param  huart UART handle.
  * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt or DMA mode.
  *         This procedure performs following operations :
  *           - Disable UART Interrupts (Rx)
  *           - Disable the DMA transfer in the peripheral register (if enabled)
  *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
  *           - Set handle State to READY
  *           - At abort completion, call user abort complete callback
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_UART_AbortReceive_IT</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR1_RXNEIE</name> <operator>|</operator> <name>USART_CR1_PEIE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the UART DMA Rx request if enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */</comment>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>UART_DMARxOnlyAbortCallback</name></expr>;</expr_stmt>

      <comment type="block">/* Abort DMA RX */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Call Directly huart-&gt;hdmarx-&gt;XferAbortCallback function in case of error */</comment>
        <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Reset Rx transfer counter */</comment>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

      <comment type="block">/* Restore huart-&gt;RxState to Ready */</comment>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

      <comment type="block">/* As no DMA to be aborted, call directly user Abort complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <comment type="block">/* Call registered Abort Receive Complete Callback */</comment>
      <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>AbortReceiveCpltCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/* Call legacy weak Abort Receive Complete Callback */</comment>
      <expr_stmt><expr><call><name>HAL_UART_AbortReceiveCpltCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Reset Rx transfer counter */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

    <comment type="block">/* Restore huart-&gt;RxState to Ready */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* As no DMA to be aborted, call directly user Abort complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/* Call registered Abort Receive Complete Callback */</comment>
    <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>AbortReceiveCpltCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Call legacy weak Abort Receive Complete Callback */</comment>
    <expr_stmt><expr><call><name>HAL_UART_AbortReceiveCpltCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles UART interrupt request.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_UART_IRQHandler</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>isrflags</name>   <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>cr1its</name>     <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>cr3its</name>     <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorflags</name> <init>= <expr><literal type="number">0x00U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>dmarequest</name> <init>= <expr><literal type="number">0x00U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* If no error occurs */</comment>
  <expr_stmt><expr><name>errorflags</name> <operator>=</operator> <operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>USART_SR_PE</name> <operator>|</operator> <name>USART_SR_FE</name> <operator>|</operator> <name>USART_SR_ORE</name> <operator>|</operator> <name>USART_SR_NE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>errorflags</name> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* UART in mode Receiver -------------------------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>USART_SR_RXNE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cr1its</name> <operator>&amp;</operator> <name>USART_CR1_RXNEIE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>UART_Receive_IT</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* If some errors occur */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>errorflags</name> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>cr3its</name> <operator>&amp;</operator> <name>USART_CR3_EIE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>cr1its</name> <operator>&amp;</operator> <operator>(</operator><name>USART_CR1_RXNEIE</name> <operator>|</operator> <name>USART_CR1_PEIE</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* UART parity error interrupt occurred ----------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>USART_SR_PE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cr1its</name> <operator>&amp;</operator> <name>USART_CR1_PEIE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_UART_ERROR_PE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* UART noise error interrupt occurred -----------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>USART_SR_NE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cr3its</name> <operator>&amp;</operator> <name>USART_CR3_EIE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_UART_ERROR_NE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* UART frame error interrupt occurred -----------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>USART_SR_FE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cr3its</name> <operator>&amp;</operator> <name>USART_CR3_EIE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_UART_ERROR_FE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* UART Over-Run interrupt occurred --------------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>USART_SR_ORE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cr3its</name> <operator>&amp;</operator> <name>USART_CR3_EIE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_UART_ERROR_ORE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Call UART Error Call back function if need be --------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>!=</operator> <name>HAL_UART_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* UART in mode Receiver -----------------------------------------------*/</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>USART_SR_RXNE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cr1its</name> <operator>&amp;</operator> <name>USART_CR1_RXNEIE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>UART_Receive_IT</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */</comment>
      <expr_stmt><expr><name>dmarequest</name> <operator>=</operator> <call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>&amp;</operator> <name>HAL_UART_ERROR_ORE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>||</operator> <name>dmarequest</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */</comment>
        <expr_stmt><expr><call><name>UART_EndRxTransfer</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Disable the UART DMA Rx request if enabled */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Abort the UART DMA Rx stream */</comment>
          <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */</comment>
            <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>UART_DMAAbortOnError</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
            <block>{<block_content>
              <comment type="block">/* Call Directly XferAbortCallback function in case of error */</comment>
              <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <comment type="block">/* Call user error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
            <comment type="block">/*Call registered error callback*/</comment>
            <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <comment type="block">/*Call legacy weak error callback*/</comment>
            <expr_stmt><expr><call><name>HAL_UART_ErrorCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <comment type="block">/* Call user error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
          <comment type="block">/*Call registered error callback*/</comment>
          <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <comment type="block">/*Call legacy weak error callback*/</comment>
          <expr_stmt><expr><call><name>HAL_UART_ErrorCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <comment type="block">/*Call registered error callback*/</comment>
        <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <comment type="block">/*Call legacy weak error callback*/</comment>
        <expr_stmt><expr><call><name>HAL_UART_ErrorCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>

        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_NONE</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt> <comment type="block">/* End if some error occurs */</comment>

  <comment type="block">/* UART in mode Transmitter ------------------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>USART_SR_TXE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cr1its</name> <operator>&amp;</operator> <name>USART_CR1_TXEIE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>UART_Transmit_IT</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* UART in mode Transmitter end --------------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>USART_SR_TC</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cr1its</name> <operator>&amp;</operator> <name>USART_CR1_TCIE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>UART_EndTransmit_IT</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Tx Transfer completed callbacks.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_UART_TxCpltCallback</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_UART_TxHalfCpltCallback</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Rx Transfer completed callbacks.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_UART_RxCpltCallback</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Rx Half Transfer completed callbacks.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_UART_RxHalfCpltCallback</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  UART error callbacks.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_UART_ErrorCallback</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_UART_AbortCpltCallback</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_UART_AbortTransmitCpltCallback</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_UART_AbortReceiveCpltCallback</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
  *  @brief   UART control functions
  *
@verbatim
  ==============================================================================
                      ##### Peripheral Control functions #####
  ==============================================================================
  [..]
    This subsection provides a set of functions allowing to control the UART:
    (+) HAL_LIN_SendBreak() API can be helpful to transmit the break character.
    (+) HAL_MultiProcessor_EnterMuteMode() API can be helpful to enter the UART in mute mode.
    (+) HAL_MultiProcessor_ExitMuteMode() API can be helpful to exit the UART mute mode by software.
    (+) HAL_HalfDuplex_EnableTransmitter() API to enable the UART transmitter and disables the UART receiver in Half Duplex mode
    (+) HAL_HalfDuplex_EnableReceiver() API to enable the UART receiver and disables the UART transmitter in Half Duplex mode

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Transmits break characters.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LIN_SendBreak</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_INSTANCE</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Send break characters */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_SBK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enters the UART in mute mode.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_MultiProcessor_EnterMuteMode</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_INSTANCE</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Enable the USART mute mode  by setting the RWU bit in the CR1 register */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_RWU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Exits the UART mute mode: wake up software.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_MultiProcessor_ExitMuteMode</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_INSTANCE</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the USART mute mode by clearing the RWU bit in the CR1 register */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_RWU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enables the UART transmitter and disables the UART receiver.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_HalfDuplex_EnableTransmitter</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name> <init>= <expr><literal type="number">0x00U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/*-------------------------- USART CR1 Configuration -----------------------*/</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr>;</expr_stmt>

  <comment type="block">/* Clear TE and RE bits */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>USART_CR1_TE</name> <operator>|</operator> <name>USART_CR1_RE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>USART_CR1_TE</name></expr>;</expr_stmt>

  <comment type="block">/* Write to USART CR1 */</comment>
  <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>tmpreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enables the UART receiver and disables the UART transmitter.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_HalfDuplex_EnableReceiver</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name> <init>= <expr><literal type="number">0x00U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/*-------------------------- USART CR1 Configuration -----------------------*/</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr>;</expr_stmt>

  <comment type="block">/* Clear TE and RE bits */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>USART_CR1_TE</name> <operator>|</operator> <name>USART_CR1_RE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>USART_CR1_RE</name></expr>;</expr_stmt>

  <comment type="block">/* Write to USART CR1 */</comment>
  <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>tmpreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup UART_Exported_Functions_Group4 Peripheral State and Errors functions
  *  @brief   UART State and Errors functions
  *
@verbatim
  ==============================================================================
                 ##### Peripheral State and Errors functions #####
  ==============================================================================
 [..]
   This subsection provides a set of functions allowing to return the State of
   UART communication process, return Peripheral Errors occurred during communication
   process
   (+) HAL_UART_GetState() API can be helpful to check in run-time the state of the UART peripheral.
   (+) HAL_UART_GetError() check in run-time errors that could be occurred during communication.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Returns the UART state.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */</comment>
<function><type><name>HAL_UART_StateTypeDef</name></type> <name>HAL_UART_GetState</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>temp1</name> <init>= <expr><literal type="number">0x00U</literal></expr></init></decl>, <decl><type ref="prev"/><name>temp2</name> <init>= <expr><literal type="number">0x00U</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>temp1</name> <operator>=</operator> <name><name>huart</name><operator>-&gt;</operator><name>gState</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>temp2</name> <operator>=</operator> <name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><name>HAL_UART_StateTypeDef</name><operator>)</operator><operator>(</operator><name>temp1</name> <operator>|</operator> <name>temp2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the UART error code
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_UART_GetError</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup UART_Private_Functions UART Private Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initialize the callbacks to their default values.
  * @param  huart UART handle.
  * @retval none
  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<function><type><name>void</name></type> <name>UART_InitCallbacksToDefault</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Init the UART Callback settings */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name>        <operator>=</operator> <name>HAL_UART_TxHalfCpltCallback</name></expr>;</expr_stmt>        <comment type="block">/* Legacy weak TxHalfCpltCallback        */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxCpltCallback</name></name>            <operator>=</operator> <name>HAL_UART_TxCpltCallback</name></expr>;</expr_stmt>            <comment type="block">/* Legacy weak TxCpltCallback            */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name>        <operator>=</operator> <name>HAL_UART_RxHalfCpltCallback</name></expr>;</expr_stmt>        <comment type="block">/* Legacy weak RxHalfCpltCallback        */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxCpltCallback</name></name>            <operator>=</operator> <name>HAL_UART_RxCpltCallback</name></expr>;</expr_stmt>            <comment type="block">/* Legacy weak RxCpltCallback            */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCallback</name></name>             <operator>=</operator> <name>HAL_UART_ErrorCallback</name></expr>;</expr_stmt>             <comment type="block">/* Legacy weak ErrorCallback             */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name>         <operator>=</operator> <name>HAL_UART_AbortCpltCallback</name></expr>;</expr_stmt>         <comment type="block">/* Legacy weak AbortCpltCallback         */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>AbortTransmitCpltCallback</name></name> <operator>=</operator> <name>HAL_UART_AbortTransmitCpltCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak AbortTransmitCpltCallback */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>AbortReceiveCpltCallback</name></name>  <operator>=</operator> <name>HAL_UART_AbortReceiveCpltCallback</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak AbortReceiveCpltCallback  */</comment>

</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>

<comment type="block" format="doxygen">/**
  * @brief  DMA UART transmit process complete callback.
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMATransmitCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name> <init>= <expr><operator>(</operator><name>UART_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* DMA Normal mode*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DMA_SxCR_CIRC</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

    <comment type="block">/* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the UART Transmit Complete Interrupt */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_TCIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if>
  <comment type="block">/* DMA Circular mode */</comment>
  <else>else
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/*Call registered Tx complete callback*/</comment>
    <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>TxCpltCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/*Call legacy weak Tx complete callback*/</comment>
    <expr_stmt><expr><call><name>HAL_UART_TxCpltCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DMA UART transmit process half complete callback
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMATxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name> <init>= <expr><operator>(</operator><name>UART_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/*Call registered Tx complete callback*/</comment>
  <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/*Call legacy weak Tx complete callback*/</comment>
  <expr_stmt><expr><call><name>HAL_UART_TxHalfCpltCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA UART receive process complete callback.
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMAReceiveCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name> <init>= <expr><operator>(</operator><name>UART_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* DMA Normal mode*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DMA_SxCR_CIRC</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

    <comment type="block">/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_PEIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* At end of Rx process, restore huart-&gt;RxState to Ready */</comment>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/*Call registered Rx complete callback*/</comment>
  <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>RxCpltCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/*Call legacy weak Rx complete callback*/</comment>
  <expr_stmt><expr><call><name>HAL_UART_RxCpltCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DMA UART receive process half complete callback
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMARxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name> <init>= <expr><operator>(</operator><name>UART_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/*Call registered Rx Half complete callback*/</comment>
  <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/*Call legacy weak Rx Half complete callback*/</comment>
  <expr_stmt><expr><call><name>HAL_UART_RxHalfCpltCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA UART communication error callback.
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>dmarequest</name> <init>= <expr><literal type="number">0x00U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name> <init>= <expr><operator>(</operator><name>UART_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Stop UART DMA Tx request if ongoing */</comment>
  <expr_stmt><expr><name>dmarequest</name> <operator>=</operator> <call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_UART_STATE_BUSY_TX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dmarequest</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UART_EndTxTransfer</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Stop UART DMA Rx request if ongoing */</comment>
  <expr_stmt><expr><name>dmarequest</name> <operator>=</operator> <call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>==</operator> <name>HAL_UART_STATE_BUSY_RX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dmarequest</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UART_EndRxTransfer</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_UART_ERROR_DMA</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/*Call registered error callback*/</comment>
  <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/*Call legacy weak error callback*/</comment>
  <expr_stmt><expr><call><name>HAL_UART_ErrorCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles UART Communication Timeout.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @param  Flag specifies the UART flag to check.
  * @param  Status The new Flag status (SET or RESET).
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>UART_WaitOnFlagUntilTimeout</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Flag</name></decl></parameter>, <parameter><decl><type><name>FlagStatus</name></type> <name>Status</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tickstart</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Wait until flag is set */</comment>
  <while>while <condition>(<expr><operator>(</operator><ternary><condition><expr><call><name>__HAL_UART_GET_FLAG</name><argument_list>(<argument><expr><name>huart</name></expr></argument>, <argument><expr><name>Flag</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SET</name></expr> </then><else>: <expr><name>RESET</name></expr></else></ternary><operator>)</operator> <operator>==</operator> <name>Status</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if <condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>Tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */</comment>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR1_RXNEIE</name> <operator>|</operator> <name>USART_CR1_PEIE</name> <operator>|</operator> <name>USART_CR1_TXEIE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name>  <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UART_EndTxTransfer</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable TXEIE and TCIE interrupts */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR1_TXEIE</name> <operator>|</operator> <name>USART_CR1_TCIE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* At end of Tx process, restore huart-&gt;gState to Ready */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UART_EndRxTransfer</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR1_RXNEIE</name> <operator>|</operator> <name>USART_CR1_PEIE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* At end of Rx process, restore huart-&gt;RxState to Ready */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMAAbortOnError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name> <init>= <expr><operator>(</operator><name>UART_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/*Call registered error callback*/</comment>
  <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/*Call legacy weak error callback*/</comment>
  <expr_stmt><expr><call><name>HAL_UART_ErrorCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA UART Tx communication abort callback, when initiated by user
  *         (To be called at end of DMA Tx Abort procedure following user abort request).
  * @note   When this callback is executed, User Abort complete call back is called only if no
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMATxAbortCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name> <init>= <expr><operator>(</operator><name>UART_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/* Check if an Abort process is still ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

  <comment type="block">/* Reset ErrorCode */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Restore huart-&gt;gState and huart-&gt;RxState to Ready */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name>  <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Call user Abort complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/* Call registered Abort complete callback */</comment>
  <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Call legacy weak Abort complete callback */</comment>
  <expr_stmt><expr><call><name>HAL_UART_AbortCpltCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA UART Rx communication abort callback, when initiated by user
  *         (To be called at end of DMA Rx Abort procedure following user abort request).
  * @note   When this callback is executed, User Abort complete call back is called only if no
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMARxAbortCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name> <init>= <expr><operator>(</operator><name>UART_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/* Check if an Abort process is still ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

  <comment type="block">/* Reset ErrorCode */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_UART_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Restore huart-&gt;gState and huart-&gt;RxState to Ready */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name>  <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Call user Abort complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/* Call registered Abort complete callback */</comment>
  <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Call legacy weak Abort complete callback */</comment>
  <expr_stmt><expr><call><name>HAL_UART_AbortCpltCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
  *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
  *         (This callback is executed at end of DMA Tx Abort procedure following user abort request,
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMATxOnlyAbortCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name> <init>= <expr><operator>(</operator><name>UART_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

  <comment type="block">/* Restore huart-&gt;gState to Ready */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Call user Abort complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/* Call registered Abort Transmit Complete Callback */</comment>
  <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>AbortTransmitCpltCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Call legacy weak Abort Transmit Complete Callback */</comment>
  <expr_stmt><expr><call><name>HAL_UART_AbortTransmitCpltCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
  *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
  *         (This callback is executed at end of DMA Rx Abort procedure following user abort request,
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UART_DMARxOnlyAbortCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name> <init>= <expr><operator>(</operator><name>UART_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

  <comment type="block">/* Restore huart-&gt;RxState to Ready */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Call user Abort complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/* Call registered Abort Receive Complete Callback */</comment>
  <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>AbortReceiveCpltCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Call legacy weak Abort Receive Complete Callback */</comment>
  <expr_stmt><expr><call><name>HAL_UART_AbortReceiveCpltCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sends an amount of data in non blocking mode.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>UART_Transmit_IT</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

  <comment type="block">/* Check that a Tx process is ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_UART_STATE_BUSY_TX</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>WordLength</name></name> <operator>==</operator> <name>UART_WORDLENGTH_9B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>huart</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>tmp</name> <operator>&amp;</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0x01FF</literal><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Parity</name></name> <operator>==</operator> <name>UART_PARITY_NONE</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name> <operator>+=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name> <operator>+=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name><name>huart</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name><operator>++</operator> <operator>&amp;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x00FF</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>huart</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the UART Transmit Complete Interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_UART_DISABLE_IT</name><argument_list>(<argument><expr><name>huart</name></expr></argument>, <argument><expr><name>UART_IT_TXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Enable the UART Transmit Complete Interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_UART_ENABLE_IT</name><argument_list>(<argument><expr><name>huart</name></expr></argument>, <argument><expr><name>UART_IT_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Wraps up transmission in non blocking mode.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>UART_EndTransmit_IT</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable the UART Transmit Complete Interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_UART_DISABLE_IT</name><argument_list>(<argument><expr><name>huart</name></expr></argument>, <argument><expr><name>UART_IT_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Tx process is ended, restore huart-&gt;gState to Ready */</comment>
  <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/*Call registered Tx complete callback*/</comment>
  <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>TxCpltCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/*Call legacy weak Tx complete callback*/</comment>
  <expr_stmt><expr><call><name>HAL_UART_TxCpltCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receives an amount of data in non blocking mode
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>UART_Receive_IT</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

  <comment type="block">/* Check that a Rx process is ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>==</operator> <name>HAL_UART_STATE_BUSY_RX</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>WordLength</name></name> <operator>==</operator> <name>UART_WORDLENGTH_9B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>huart</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Parity</name></name> <operator>==</operator> <name>UART_PARITY_NONE</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0x01FF</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>+=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0x00FF</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>+=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Parity</name></name> <operator>==</operator> <name>UART_PARITY_NONE</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name><name>huart</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x00FF</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name><name>huart</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x007F</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>huart</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the UART Data Register not empty Interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_UART_DISABLE_IT</name><argument_list>(<argument><expr><name>huart</name></expr></argument>, <argument><expr><name>UART_IT_RXNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Disable the UART Parity Error Interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_UART_DISABLE_IT</name><argument_list>(<argument><expr><name>huart</name></expr></argument>, <argument><expr><name>UART_IT_PE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */</comment>
      <expr_stmt><expr><call><name>__HAL_UART_DISABLE_IT</name><argument_list>(<argument><expr><name>huart</name></expr></argument>, <argument><expr><name>UART_IT_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Rx process is completed, restore huart-&gt;RxState to Ready */</comment>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_UART_STATE_READY</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_UART_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <comment type="block">/*Call registered Rx complete callback*/</comment>
      <expr_stmt><expr><call><name><name>huart</name><operator>-&gt;</operator><name>RxCpltCallback</name></name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/*Call legacy weak Rx complete callback*/</comment>
      <expr_stmt><expr><call><name>HAL_UART_RxCpltCallback</name><argument_list>(<argument><expr><name>huart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>

      <return>return <expr><name>HAL_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configures the UART peripheral.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UART_SetConfig</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name> <modifier>*</modifier></type><name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_BAUDRATE</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BaudRate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_STOPBITS</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>StopBits</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_PARITY</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Parity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_MODE</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*-------------------------- USART CR2 Configuration -----------------------*/</comment>
  <comment type="block">/* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart-&gt;Init.StopBits value */</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>USART_CR2_STOP</name></expr></argument>, <argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>StopBits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*-------------------------- USART CR1 Configuration -----------------------*/</comment>
  <comment type="block">/* Configure the UART Word Length, Parity and mode:
     Set the M bits according to huart-&gt;Init.WordLength value
     Set PCE and PS bits according to huart-&gt;Init.Parity value
     Set TE and RE bits according to huart-&gt;Init.Mode value
     Set OVER8 bit according to huart-&gt;Init.OverSampling value */</comment>

  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>WordLength</name></name> <operator>|</operator> <name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Parity</name></name> <operator>|</operator> <name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>|</operator> <name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OverSampling</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>,
             <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>USART_CR1_M</name> <operator>|</operator> <name>USART_CR1_PCE</name> <operator>|</operator> <name>USART_CR1_PS</name> <operator>|</operator> <name>USART_CR1_TE</name> <operator>|</operator> <name>USART_CR1_RE</name> <operator>|</operator> <name>USART_CR1_OVER8</name><operator>)</operator></expr></argument>,
             <argument><expr><name>tmpreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*-------------------------- USART CR3 Configuration -----------------------*/</comment>
  <comment type="block">/* Configure the UART HFC: Set CTSE and RTSE bits according to huart-&gt;Init.HwFlowCtl value */</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR3_RTSE</name> <operator>|</operator> <name>USART_CR3_CTSE</name><operator>)</operator></expr></argument>, <argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HwFlowCtl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the Over Sampling */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OverSampling</name></name> <operator>==</operator> <name>UART_OVERSAMPLING_8</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/*-------------------------- USART BRR Configuration ---------------------*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USART6</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>huart</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>USART1</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>huart</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>USART6</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BRR</name></name> <operator>=</operator> <call><name>UART_BRR_SAMPLING8</name><argument_list>(<argument><expr><call><name>HAL_RCC_GetPCLK2Freq</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BaudRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>USART1</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BRR</name></name> <operator>=</operator> <call><name>UART_BRR_SAMPLING8</name><argument_list>(<argument><expr><call><name>HAL_RCC_GetPCLK2Freq</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BaudRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USART6 */</comment>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BRR</name></name> <operator>=</operator> <call><name>UART_BRR_SAMPLING8</name><argument_list>(<argument><expr><call><name>HAL_RCC_GetPCLK1Freq</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BaudRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/*-------------------------- USART BRR Configuration ---------------------*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USART6</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>huart</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>USART1</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>huart</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>USART6</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BRR</name></name> <operator>=</operator> <call><name>UART_BRR_SAMPLING16</name><argument_list>(<argument><expr><call><name>HAL_RCC_GetPCLK2Freq</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BaudRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>USART1</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BRR</name></name> <operator>=</operator> <call><name>UART_BRR_SAMPLING16</name><argument_list>(<argument><expr><call><name>HAL_RCC_GetPCLK2Freq</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BaudRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USART6 */</comment>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BRR</name></name> <operator>=</operator> <call><name>UART_BRR_SAMPLING16</name><argument_list>(<argument><expr><call><name>HAL_RCC_GetPCLK1Freq</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>huart</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BaudRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_UART_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
