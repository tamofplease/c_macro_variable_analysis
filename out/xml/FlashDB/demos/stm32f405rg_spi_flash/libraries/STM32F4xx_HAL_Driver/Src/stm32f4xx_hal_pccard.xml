<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pccard.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_pccard.c
  * @author  MCD Application Team
  * @brief   PCCARD HAL module driver.
  *          This file provides a generic firmware to drive PCCARD memories mounted 
  *          as external device.
  *         
  @verbatim
 ===============================================================================
                        ##### How to use this driver #####
 ===============================================================================  
   [..]
     This driver is a generic layered driver which contains a set of APIs used to 
     control PCCARD/compact flash memories. It uses the FMC/FSMC layer functions 
     to interface with PCCARD devices. This driver is used for:
    
    (+) PCCARD/Compact Flash memory configuration sequence using the function 
        HAL_PCCARD_Init()/HAL_CF_Init() with control and timing parameters for
        both common and attribute spaces.
            
    (+) Read PCCARD/Compact Flash memory maker and device IDs using the function
        HAL_PCCARD_Read_ID()/HAL_CF_Read_ID(). The read information is stored in
        the CompactFlash_ID structure declared by the function caller. 
        
    (+) Access PCCARD/Compact Flash memory by read/write operations using the functions
        HAL_PCCARD_Read_Sector()/ HAL_PCCARD_Write_Sector() - 
        HAL_CF_Read_Sector()/HAL_CF_Write_Sector(), to read/write sector. 
        
    (+) Perform PCCARD/Compact Flash Reset chip operation using the function
        HAL_PCCARD_Reset()/HAL_CF_Reset.
        
    (+) Perform PCCARD/Compact Flash erase sector operation using the function 
        HAL_PCCARD_Erase_Sector()/HAL_CF_Erase_Sector.
    
    (+) Read the PCCARD/Compact Flash status operation using the function
        HAL_PCCARD_ReadStatus()/HAL_CF_ReadStatus().
     
    (+) You can monitor the PCCARD/Compact Flash  device HAL state by calling
        the function HAL_PCCARD_GetState()/HAL_CF_GetState()
        
   [..]
     (@) This driver is a set of generic APIs which handle standard PCCARD/compact flash 
         operations. If a PCCARD/Compact Flash device contains different operations 
         and/or implementations, it should be implemented separately.
   
      *** Callback registration ***
    =============================================
    [..]
      The compilation define  USE_HAL_PCCARD_REGISTER_CALLBACKS when set to 1
      allows the user to configure dynamically the driver callbacks.

      Use Functions @ref HAL_PCCARD_RegisterCallback() to register a user callback,
      it allows to register following callbacks:
        (+) MspInitCallback    : PCCARD MspInit.
        (+) MspDeInitCallback  : PCCARD MspDeInit.
      This function takes as parameters the HAL peripheral handle, the Callback ID
      and a pointer to the user callback function.

      Use function @ref HAL_PCCARD_UnRegisterCallback() to reset a callback to the default
      weak (surcharged) function. It allows to reset following callbacks:
        (+) MspInitCallback    : PCCARD MspInit.
        (+) MspDeInitCallback  : PCCARD MspDeInit.
      This function) takes as parameters the HAL peripheral handle and the Callback ID.

      By default, after the @ref HAL_PCCARD_Init and if the state is HAL_PCCARD_STATE_RESET
      all callbacks are reset to the corresponding legacy weak (surcharged) functions.
      Exception done for MspInit and MspDeInit callbacks that are respectively
      reset to the legacy weak (surcharged) functions in the @ref HAL_PCCARD_Init
      and @ref  HAL_PCCARD_DeInit only when these callbacks are null (not registered beforehand).
      If not, MspInit or MspDeInit are not null, the @ref HAL_PCCARD_Init and @ref HAL_PCCARD_DeInit
      keep and use the user MspInit/MspDeInit callbacks (registered beforehand)

      Callbacks can be registered/unregistered in READY state only.
      Exception done for MspInit/MspDeInit callbacks that can be registered/unregistered
      in READY or RESET state, thus registered (user) MspInit/DeInit callbacks can be used
      during the Init/DeInit.
      In that case first register the MspInit/MspDeInit user callbacks
      using @ref HAL_PCCARD_RegisterCallback before calling @ref HAL_PCCARD_DeInit
      or @ref HAL_PCCARD_Init function.

      When The compilation define USE_HAL_PCCARD_REGISTER_CALLBACKS is set to 0 or
      not defined, the callback registering feature is not available
      and weak (surcharged) callbacks are used.

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment> 

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_PCCARD_MODULE_ENABLED</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F405xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F415xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F407xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F417xx</name></expr></argument>)</argument_list></call> <operator>||</operator>\
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/** @defgroup PCCARD PCCARD  
  * @brief PCCARD HAL module driver
  * @{
  */</comment>
<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
    
<comment type="block" format="doxygen">/** @defgroup PCCARD_Private_Defines PCCARD Private Defines
  * @{
  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCCARD_TIMEOUT_READ_ID</name></cpp:macro>                 <cpp:value>0x0000FFFFU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCCARD_TIMEOUT_READ_WRITE_SECTOR</name></cpp:macro>       <cpp:value>0x0000FFFFU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCCARD_TIMEOUT_ERASE_SECTOR</name></cpp:macro>            <cpp:value>0x00000400U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCCARD_TIMEOUT_STATUS</name></cpp:macro>                  <cpp:value>0x01000000U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCCARD_STATUS_OK</name></cpp:macro>                       <cpp:value>(uint8_t)0x58</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCCARD_STATUS_WRITE_OK</name></cpp:macro>                 <cpp:value>(uint8_t)0x50</cpp:value></cpp:define>
<comment type="block" format="doxygen">/**
  * @}
  */</comment> 
    
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function ----------------------------------------------------------*/</comment>
<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup PCCARD_Exported_Functions PCCARD Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup PCCARD_Exported_Functions_Group1 Initialization and de-initialization functions 
  * @brief    Initialization and Configuration functions 
  *
  @verbatim    
  ==============================================================================
          ##### PCCARD Initialization and de-initialization functions #####
  ==============================================================================
  [..]  
    This section provides functions allowing to initialize/de-initialize
    the PCCARD memory
  
@endverbatim
  * @{
  */</comment>
    
<comment type="block" format="doxygen">/**
  * @brief  Perform the PCCARD memory Initialization sequence
  * @param  hpccard pointer to a PCCARD_HandleTypeDef structure that contains
  *                the configuration information for PCCARD module.
  * @param  ComSpaceTiming Common space timing structure
  * @param  AttSpaceTiming Attribute space timing structure
  * @param  IOSpaceTiming IO space timing structure     
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCCARD_Init</name><parameter_list>(<parameter><decl><type><name>PCCARD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpccard</name></decl></parameter>, <parameter><decl><type><name>FMC_NAND_PCC_TimingTypeDef</name> <modifier>*</modifier></type><name>ComSpaceTiming</name></decl></parameter>, <parameter><decl><type><name>FMC_NAND_PCC_TimingTypeDef</name> <modifier>*</modifier></type><name>AttSpaceTiming</name></decl></parameter>, <parameter><decl><type><name>FMC_NAND_PCC_TimingTypeDef</name> <modifier>*</modifier></type><name>IOSpaceTiming</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the PCCARD controller state */</comment>
  <if_stmt><if>if<condition>(<expr><name>hpccard</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
     <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCCARD_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>  
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCCARD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <if_stmt><if>if<condition>(<expr><name><name>hpccard</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_PCCARD_MspInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>ItCallback</name></name> <operator>=</operator> <name>HAL_PCCARD_ITCallback</name></expr>;</expr_stmt>

    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>hpccard</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Initialize the low level hardware (MSP) */</comment>
    <expr_stmt><expr><call><name>HAL_PCCARD_MspInit</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Initialize the PCCARD state */</comment>
  <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_PCCARD_STATE_BUSY</name></expr>;</expr_stmt>    

  <comment type="block">/* Initialize PCCARD control Interface */</comment>
  <expr_stmt><expr><call><name>FMC_PCCARD_Init</name><argument_list>(<argument><expr><name><name>hpccard</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>hpccard</name><operator>-&gt;</operator><name>Init</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Init PCCARD common space timing Interface */</comment>
  <expr_stmt><expr><call><name>FMC_PCCARD_CommonSpace_Timing_Init</name><argument_list>(<argument><expr><name><name>hpccard</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>ComSpaceTiming</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Init PCCARD attribute space timing Interface */</comment>  
  <expr_stmt><expr><call><name>FMC_PCCARD_AttributeSpace_Timing_Init</name><argument_list>(<argument><expr><name><name>hpccard</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>AttSpaceTiming</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Init PCCARD IO space timing Interface */</comment>  
  <expr_stmt><expr><call><name>FMC_PCCARD_IOSpace_Timing_Init</name><argument_list>(<argument><expr><name><name>hpccard</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>IOSpaceTiming</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Enable the PCCARD device */</comment>
  <expr_stmt><expr><call><name>__FMC_PCCARD_ENABLE</name><argument_list>(<argument><expr><name><name>hpccard</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <comment type="block">/* Update the PCCARD state */</comment>
  <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_PCCARD_STATE_READY</name></expr>;</expr_stmt>  
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>

</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Perform the PCCARD memory De-initialization sequence
  * @param  hpccard pointer to a PCCARD_HandleTypeDef structure that contains
  *                the configuration information for PCCARD module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type>  <name>HAL_PCCARD_DeInit</name><parameter_list>(<parameter><decl><type><name>PCCARD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpccard</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCCARD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><name><name>hpccard</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_PCCARD_MspDeInit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name><name>hpccard</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* De-Initialize the low level hardware (MSP) */</comment>
  <expr_stmt><expr><call><name>HAL_PCCARD_MspDeInit</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Configure the PCCARD registers with their reset values */</comment>
  <expr_stmt><expr><call><name>FMC_PCCARD_DeInit</name><argument_list>(<argument><expr><name><name>hpccard</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Update the PCCARD controller state */</comment>
  <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_PCCARD_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  PCCARD MSP Init
  * @param  hpccard pointer to a PCCARD_HandleTypeDef structure that contains
  *                the configuration information for PCCARD module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCCARD_MspInit</name><parameter_list>(<parameter><decl><type><name>PCCARD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpccard</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCCARD_MspInit could be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  PCCARD MSP DeInit
  * @param  hpccard pointer to a PCCARD_HandleTypeDef structure that contains
  *                the configuration information for PCCARD module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCCARD_MspDeInit</name><parameter_list>(<parameter><decl><type><name>PCCARD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpccard</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCCARD_MspDeInit could be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup PCCARD_Exported_Functions_Group2 Input and Output functions 
  * @brief    Input Output and memory control functions 
  *
  @verbatim    
  ==============================================================================
                    ##### PCCARD Input and Output functions #####
  ==============================================================================
  [..]  
    This section provides functions allowing to use and control the PCCARD memory
  
@endverbatim
  * @{
  */</comment>
  
<comment type="block" format="doxygen">/**
  * @brief  Read Compact Flash's ID.
  * @param  hpccard pointer to a PCCARD_HandleTypeDef structure that contains
  *                the configuration information for PCCARD module.
  * @param  CompactFlash_ID Compact flash ID structure.  
  * @param  pStatus pointer to compact flash status         
  * @retval HAL status
  *   
  */</comment> 
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCCARD_Read_ID</name><parameter_list>(<parameter><decl><type><name>PCCARD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpccard</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>CompactFlash_ID</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pStatus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>timeout</name> <init>= <expr><name>PCCARD_TIMEOUT_READ_ID</name></expr></init></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  
  <comment type="block">/* Check the PCCARD controller state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCCARD_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content>
     <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Update the PCCARD controller state */</comment>
  <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_PCCARD_STATE_BUSY</name></expr>;</expr_stmt>
  
  <comment type="block">/* Initialize the PCCARD status */</comment>
  <expr_stmt><expr><operator>*</operator><name>pStatus</name> <operator>=</operator> <name>PCCARD_READY</name></expr>;</expr_stmt>  
  
  <comment type="block">/* Send the Identify Command */</comment>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_STATUS_CMD</name><operator>)</operator>  <operator>=</operator> <literal type="number">0xECEC</literal></expr>;</expr_stmt>
    
  <comment type="block">/* Read PCCARD IDs and timeout treatment */</comment>
  <do>do 
  <block>{<block_content>
     <comment type="block">/* Read the PCCARD status */</comment>
     <expr_stmt><expr><name>status</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_STATUS_CMD_ALTERNATE</name><operator>)</operator></expr>;</expr_stmt>
     
     <expr_stmt><expr><name>timeout</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block>while<condition>(<expr><operator>(</operator><name>status</name> <operator>!=</operator> <name>PCCARD_STATUS_OK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>timeout</name></expr>)</condition>;</do> 
  
  <if_stmt><if>if<condition>(<expr><name>timeout</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pStatus</name> <operator>=</operator> <name>PCCARD_TIMEOUT_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
     <comment type="block">/* Read PCCARD ID bytes */</comment>
    <for>for<control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <literal type="number">16U</literal></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name><name>CompactFlash_ID</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_DATA</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>    
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Update the PCCARD controller state */</comment>
  <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_PCCARD_STATE_READY</name></expr>;</expr_stmt>
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>
   
<comment type="block" format="doxygen">/**
  * @brief  Read sector from PCCARD memory
  * @param  hpccard pointer to a PCCARD_HandleTypeDef structure that contains
  *                the configuration information for PCCARD module.
  * @param  pBuffer pointer to destination read buffer
  * @param  SectorAddress Sector address to read
  * @param  pStatus pointer to PCCARD status
  * @retval HAL status
  */</comment>    
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCCARD_Read_Sector</name><parameter_list>(<parameter><decl><type><name>PCCARD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpccard</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>SectorAddress</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pStatus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>timeout</name> <init>= <expr><name>PCCARD_TIMEOUT_READ_WRITE_SECTOR</name></expr></init></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Check the PCCARD controller state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCCARD_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content>
     <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Update the PCCARD controller state */</comment>
  <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_PCCARD_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Initialize PCCARD status */</comment>
  <expr_stmt><expr><operator>*</operator><name>pStatus</name> <operator>=</operator> <name>PCCARD_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Set the parameters to write a sector */</comment>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_CYLINDER_HIGH</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0x00</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_SECTOR_COUNT</name><operator>)</operator>  <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0x0100</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name>SectorAddress</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_STATUS_CMD</name><operator>)</operator>    <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0xE4A0</literal></expr>;</expr_stmt>  

  <do>do
  <block>{<block_content>
    <comment type="block">/* wait till the Status = 0x80 */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_STATUS_CMD_ALTERNATE</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>timeout</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block>while<condition>(<expr><operator>(</operator><name>status</name> <operator>==</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>timeout</name></expr>)</condition>;</do>
  
  <if_stmt><if>if<condition>(<expr><name>timeout</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pStatus</name> <operator>=</operator> <name>PCCARD_TIMEOUT_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>PCCARD_TIMEOUT_READ_WRITE_SECTOR</name></expr>;</expr_stmt>

  <do>do
  <block>{<block_content>
    <comment type="block">/* wait till the Status = PCCARD_STATUS_OK */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_STATUS_CMD_ALTERNATE</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>timeout</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block>while<condition>(<expr><operator>(</operator><name>status</name> <operator>!=</operator> <name>PCCARD_STATUS_OK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>timeout</name></expr>)</condition>;</do>
  
  <if_stmt><if>if<condition>(<expr><name>timeout</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pStatus</name> <operator>=</operator> <name>PCCARD_TIMEOUT_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Read bytes */</comment>
  <for>for<control>(<init>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>PCCARD_SECTOR_SIZE</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>pBuffer</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for> 

  <comment type="block">/* Update the PCCARD controller state */</comment>
  <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_PCCARD_STATE_READY</name></expr>;</expr_stmt>
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  Write sector to PCCARD memory
  * @param  hpccard pointer to a PCCARD_HandleTypeDef structure that contains
  *                the configuration information for PCCARD module.
  * @param  pBuffer pointer to source write buffer
  * @param  SectorAddress Sector address to write
  * @param  pStatus pointer to PCCARD status
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCCARD_Write_Sector</name><parameter_list>(<parameter><decl><type><name>PCCARD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpccard</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>SectorAddress</name></decl></parameter>,  <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pStatus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>timeout</name> <init>= <expr><name>PCCARD_TIMEOUT_READ_WRITE_SECTOR</name></expr></init></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  
  <comment type="block">/* Check the PCCARD controller state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCCARD_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content>
     <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
   
  <comment type="block">/* Update the PCCARD controller state */</comment>
  <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_PCCARD_STATE_BUSY</name></expr>;</expr_stmt>
    
  <comment type="block">/* Initialize PCCARD status */</comment>
  <expr_stmt><expr><operator>*</operator><name>pStatus</name> <operator>=</operator> <name>PCCARD_READY</name></expr>;</expr_stmt>  
    
  <comment type="block">/* Set the parameters to write a sector */</comment>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_CYLINDER_HIGH</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0x00</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_SECTOR_COUNT</name><operator>)</operator>  <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0x0100</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name>SectorAddress</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_STATUS_CMD</name><operator>)</operator>    <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0x30A0</literal></expr>;</expr_stmt>
  
  <do>do
  <block>{<block_content>
    <comment type="block">/* Wait till the Status = PCCARD_STATUS_OK */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_STATUS_CMD_ALTERNATE</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>timeout</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block>while<condition>(<expr><operator>(</operator><name>status</name> <operator>!=</operator> <name>PCCARD_STATUS_OK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>timeout</name></expr>)</condition>;</do>
  
  <if_stmt><if>if<condition>(<expr><name>timeout</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pStatus</name> <operator>=</operator> <name>PCCARD_TIMEOUT_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Write bytes */</comment>
  <for>for<control>(<init>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>PCCARD_SECTOR_SIZE</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>pBuffer</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <do>do
  <block>{<block_content>
    <comment type="block">/* Wait till the Status = PCCARD_STATUS_WRITE_OK */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_STATUS_CMD_ALTERNATE</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>timeout</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block>while<condition>(<expr><operator>(</operator><name>status</name> <operator>!=</operator> <name>PCCARD_STATUS_WRITE_OK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>timeout</name></expr>)</condition>;</do>

  <if_stmt><if>if<condition>(<expr><name>timeout</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pStatus</name> <operator>=</operator> <name>PCCARD_TIMEOUT_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>  

  <comment type="block">/* Update the PCCARD controller state */</comment>
  <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_PCCARD_STATE_READY</name></expr>;</expr_stmt>
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  Erase sector from PCCARD memory 
  * @param  hpccard pointer to a PCCARD_HandleTypeDef structure that contains
  *                the configuration information for PCCARD module.
  * @param  SectorAddress Sector address to erase
  * @param  pStatus pointer to PCCARD status
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type>  <name>HAL_PCCARD_Erase_Sector</name><parameter_list>(<parameter><decl><type><name>PCCARD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpccard</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>SectorAddress</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pStatus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>timeout</name> <init>= <expr><name>PCCARD_TIMEOUT_ERASE_SECTOR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  
  <comment type="block">/* Check the PCCARD controller state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCCARD_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content>
     <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Update the PCCARD controller state */</comment>
  <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_PCCARD_STATE_BUSY</name></expr>;</expr_stmt>
  
  <comment type="block">/* Initialize PCCARD status */</comment> 
  <expr_stmt><expr><operator>*</operator><name>pStatus</name> <operator>=</operator> <name>PCCARD_READY</name></expr>;</expr_stmt>
    
  <comment type="block">/* Set the parameters to write a sector */</comment>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_CYLINDER_LOW</name><operator>)</operator>  <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_CYLINDER_HIGH</name><operator>)</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_SECTOR_NUMBER</name><operator>)</operator> <operator>=</operator> <name>SectorAddress</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_SECTOR_COUNT</name><operator>)</operator>  <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_CARD_HEAD</name><operator>)</operator>     <operator>=</operator> <literal type="number">0xA0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_STATUS_CMD</name><operator>)</operator>    <operator>=</operator> <name>ATA_ERASE_SECTOR_CMD</name></expr>;</expr_stmt>
  
  <comment type="block">/* wait till the PCCARD is ready */</comment>
  <expr_stmt><expr><name>status</name> <operator>=</operator>  <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_STATUS_CMD_ALTERNATE</name><operator>)</operator></expr>;</expr_stmt>
  
  <while>while<condition>(<expr><operator>(</operator><name>status</name> <operator>!=</operator> <name>PCCARD_STATUS_WRITE_OK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>timeout</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_STATUS_CMD_ALTERNATE</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>timeout</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></while> 
  
  <if_stmt><if>if<condition>(<expr><name>timeout</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pStatus</name> <operator>=</operator> <name>PCCARD_TIMEOUT_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Check the PCCARD controller state */</comment>
  <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_PCCARD_STATE_READY</name></expr>;</expr_stmt>
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Reset the PCCARD memory 
  * @param  hpccard pointer to a PCCARD_HandleTypeDef structure that contains
  *                the configuration information for PCCARD module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCCARD_Reset</name><parameter_list>(<parameter><decl><type><name>PCCARD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpccard</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  
  <comment type="block">/* Check the PCCARD controller state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCCARD_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content>
     <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Provide a SW reset and Read and verify the:
   - PCCard Configuration Option Register at address 0x98000200 --&gt; 0x80
   - Card Configuration and Status Register at address 0x98000202 --&gt; 0x00
   - Pin Replacement Register at address 0x98000204 --&gt; 0x0C
   - Socket and Copy Register at address 0x98000206 --&gt; 0x00
  */</comment>

  <comment type="block">/* Check the PCCARD controller state */</comment>
  <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_PCCARD_STATE_BUSY</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_ATTRIBUTE_SPACE_ADDRESS</name> <operator>|</operator> <name>ATA_CARD_CONFIGURATION</name> <operator>)</operator> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
    
  <comment type="block">/* Check the PCCARD controller state */</comment>
  <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_PCCARD_STATE_READY</name></expr>;</expr_stmt>
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles PCCARD device interrupt request.
  * @param  hpccard pointer to a PCCARD_HandleTypeDef structure that contains
  *                the configuration information for PCCARD module.
  * @retval HAL status
*/</comment>
<function><type><name>void</name></type> <name>HAL_PCCARD_IRQHandler</name><parameter_list>(<parameter><decl><type><name>PCCARD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpccard</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check PCCARD interrupt Rising edge flag */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>__FMC_PCCARD_GET_FLAG</name><argument_list>(<argument><expr><name><name>hpccard</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>FMC_FLAG_RISING_EDGE</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* PCCARD interrupt callback*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCCARD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hpccard</name><operator>-&gt;</operator><name>ItCallback</name></name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_PCCARD_ITCallback</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Clear PCCARD interrupt Rising edge pending bit */</comment>
    <expr_stmt><expr><call><name>__FMC_PCCARD_CLEAR_FLAG</name><argument_list>(<argument><expr><name><name>hpccard</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>FMC_FLAG_RISING_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Check PCCARD interrupt Level flag */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>__FMC_PCCARD_GET_FLAG</name><argument_list>(<argument><expr><name><name>hpccard</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>FMC_FLAG_LEVEL</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* PCCARD interrupt callback*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCCARD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hpccard</name><operator>-&gt;</operator><name>ItCallback</name></name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_PCCARD_ITCallback</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Clear PCCARD interrupt Level pending bit */</comment>
    <expr_stmt><expr><call><name>__FMC_PCCARD_CLEAR_FLAG</name><argument_list>(<argument><expr><name><name>hpccard</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>FMC_FLAG_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check PCCARD interrupt Falling edge flag */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>__FMC_PCCARD_GET_FLAG</name><argument_list>(<argument><expr><name><name>hpccard</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>FMC_FLAG_FALLING_EDGE</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* PCCARD interrupt callback*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCCARD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hpccard</name><operator>-&gt;</operator><name>ItCallback</name></name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_PCCARD_ITCallback</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Clear PCCARD interrupt Falling edge pending bit */</comment>
    <expr_stmt><expr><call><name>__FMC_PCCARD_CLEAR_FLAG</name><argument_list>(<argument><expr><name><name>hpccard</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>FMC_FLAG_FALLING_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Check PCCARD interrupt FIFO empty flag */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>__FMC_PCCARD_GET_FLAG</name><argument_list>(<argument><expr><name><name>hpccard</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>FMC_FLAG_FEMPT</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* PCCARD interrupt callback*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCCARD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hpccard</name><operator>-&gt;</operator><name>ItCallback</name></name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_PCCARD_ITCallback</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Clear PCCARD interrupt FIFO empty pending bit */</comment>
    <expr_stmt><expr><call><name>__FMC_PCCARD_CLEAR_FLAG</name><argument_list>(<argument><expr><name><name>hpccard</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>FMC_FLAG_FEMPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  PCCARD interrupt feature callback
  * @param  hpccard pointer to a PCCARD_HandleTypeDef structure that contains
  *                the configuration information for PCCARD module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCCARD_ITCallback</name><parameter_list>(<parameter><decl><type><name>PCCARD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpccard</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCCARD_ITCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCCARD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User PCCARD Callback
  *         To be used instead of the weak (surcharged) predefined callback
  * @param hpccard : PCCARD handle
  * @param CallbackId : ID of the callback to be registered
  *        This parameter can be one of the following values:
  *          @arg @ref HAL_PCCARD_MSP_INIT_CB_ID       PCCARD MspInit callback ID
  *          @arg @ref HAL_PCCARD_MSP_DEINIT_CB_ID     PCCARD MspDeInit callback ID
  *          @arg @ref HAL_PCCARD_IT_CB_ID             PCCARD IT callback ID
  * @param pCallback : pointer to the Callback function
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCCARD_RegisterCallback</name> <parameter_list>(<parameter><decl><type><name>PCCARD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpccard</name></decl></parameter>, <parameter><decl><type><name>HAL_PCCARD_CallbackIDTypeDef</name></type> <name>CallbackId</name></decl></parameter>, <parameter><decl><type><name>pPCCARD_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCCARD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackId</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_PCCARD_MSP_INIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_PCCARD_MSP_DEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_PCCARD_IT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>ItCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCCARD_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackId</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_PCCARD_MSP_INIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_PCCARD_MSP_DEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister a User PCCARD Callback
  *         PCCARD Callback is redirected to the weak (surcharged) predefined callback
  * @param hpccard : PCCARD handle
  * @param CallbackId : ID of the callback to be unregistered
  *        This parameter can be one of the following values:
  *          @arg @ref HAL_PCCARD_MSP_INIT_CB_ID       PCCARD MspInit callback ID
  *          @arg @ref HAL_PCCARD_MSP_DEINIT_CB_ID     PCCARD MspDeInit callback ID
  *          @arg @ref HAL_PCCARD_IT_CB_ID             PCCARD IT callback ID
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCCARD_UnRegisterCallback</name> <parameter_list>(<parameter><decl><type><name>PCCARD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpccard</name></decl></parameter>, <parameter><decl><type><name>HAL_PCCARD_CallbackIDTypeDef</name></type> <name>CallbackId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCCARD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackId</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_PCCARD_MSP_INIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_PCCARD_MspInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_PCCARD_MSP_DEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_PCCARD_MspDeInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_PCCARD_IT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>ItCallback</name></name> <operator>=</operator> <name>HAL_PCCARD_ITCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCCARD_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackId</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_PCCARD_MSP_INIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_PCCARD_MspInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_PCCARD_MSP_DEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hpccard</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_PCCARD_MspDeInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hpccard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup PCCARD_Exported_Functions_Group3 State functions 
 *  @brief   Peripheral State functions 
 *
@verbatim   
  ==============================================================================
                      ##### PCCARD State functions #####
  ==============================================================================  
  [..]
    This subsection permits to get in run-time the status of the PCCARD controller 
    and the data flow.

@endverbatim
  * @{
  */</comment> 
  
<comment type="block" format="doxygen">/**
  * @brief  return the PCCARD controller state
  * @param  hpccard pointer to a PCCARD_HandleTypeDef structure that contains
  *                the configuration information for PCCARD module.
  * @retval HAL state
  */</comment>
<function><type><name>HAL_PCCARD_StateTypeDef</name></type> <name>HAL_PCCARD_GetState</name><parameter_list>(<parameter><decl><type><name>PCCARD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpccard</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>  
 
<comment type="block" format="doxygen">/**
  * @brief  Get the compact flash memory status
  * @param  hpccard pointer to a PCCARD_HandleTypeDef structure that contains
  *                the configuration information for PCCARD module.       
  * @retval New status of the PCCARD operation. This parameter can be:
  *          - CompactFlash_TIMEOUT_ERROR: when the previous operation generate 
  *            a Timeout error
  *          - CompactFlash_READY: when memory is ready for the next operation          
  */</comment>
<function><type><name>HAL_PCCARD_StatusTypeDef</name></type> <name>HAL_PCCARD_GetStatus</name><parameter_list>(<parameter><decl><type><name>PCCARD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpccard</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>timeout</name> <init>= <expr><name>PCCARD_TIMEOUT_STATUS</name></expr></init></decl>, <decl><type ref="prev"/><name>status_pccard</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>  
  
  <comment type="block">/* Check the PCCARD controller state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCCARD_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content>
     <return>return <expr><name>HAL_PCCARD_STATUS_ONGOING</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>status_pccard</name> <operator>=</operator>  <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_STATUS_CMD_ALTERNATE</name><operator>)</operator></expr>;</expr_stmt>
  
  <while>while<condition>(<expr><operator>(</operator><name>status_pccard</name> <operator>==</operator> <name>PCCARD_BUSY</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>timeout</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status_pccard</name> <operator>=</operator>  <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_STATUS_CMD_ALTERNATE</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>timeout</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if<condition>(<expr><name>timeout</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>          
    <expr_stmt><expr><name>status_pccard</name> <operator>=</operator>  <name>PCCARD_TIMEOUT_ERROR</name></expr>;</expr_stmt>      
  </block_content>}</block></if></if_stmt>   

  <comment type="block">/* Return the operation status */</comment>
  <return>return <expr><operator>(</operator><name>HAL_PCCARD_StatusTypeDef</name><operator>)</operator> <name>status_pccard</name></expr>;</return>      
</block_content>}</block></function>
  
<comment type="block" format="doxygen">/**
  * @brief  Reads the Compact Flash memory status using the Read status command
  * @param  hpccard pointer to a PCCARD_HandleTypeDef structure that contains
  *                the configuration information for PCCARD module.      
  * @retval The status of the Compact Flash memory. This parameter can be:
  *          - CompactFlash_BUSY: when memory is busy
  *          - CompactFlash_READY: when memory is ready for the next operation    
  *          - CompactFlash_ERROR: when the previous operation generates error                
  */</comment>
<function><type><name>HAL_PCCARD_StatusTypeDef</name></type> <name>HAL_PCCARD_ReadStatus</name><parameter_list>(<parameter><decl><type><name>PCCARD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpccard</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>data</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>status_pccard</name> <init>= <expr><name>PCCARD_BUSY</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the PCCARD controller state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hpccard</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_PCCARD_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content>
     <return>return <expr><name>HAL_PCCARD_STATUS_ONGOING</name></expr>;</return>
  </block_content>}</block></if></if_stmt> 

  <comment type="block">/* Read status operation */</comment>
  <expr_stmt><expr><name>data</name> <operator>=</operator>  <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>PCCARD_IO_SPACE_PRIMARY_ADDR</name> <operator>|</operator> <name>ATA_STATUS_CMD_ALTERNATE</name><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>data</name> <operator>&amp;</operator> <name>PCCARD_TIMEOUT_ERROR</name><operator>)</operator> <operator>==</operator> <name>PCCARD_TIMEOUT_ERROR</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status_pccard</name> <operator>=</operator> <name>PCCARD_TIMEOUT_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if> 
  <if type="elseif">else if<condition>(<expr><operator>(</operator><name>data</name> <operator>&amp;</operator> <name>PCCARD_READY</name><operator>)</operator> <operator>==</operator> <name>PCCARD_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status_pccard</name> <operator>=</operator> <name>PCCARD_READY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <return>return <expr><operator>(</operator><name>HAL_PCCARD_StatusTypeDef</name><operator>)</operator> <name>status_pccard</name></expr>;</return>
</block_content>}</block></function>  
 
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
  
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx ||\
          STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_PCCARD_MODULE_ENABLED */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
