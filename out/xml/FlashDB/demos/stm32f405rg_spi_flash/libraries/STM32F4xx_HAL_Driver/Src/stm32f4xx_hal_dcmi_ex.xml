<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dcmi_ex.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_dcmi_ex.c
  * @author  MCD Application Team
  * @brief   DCMI Extension HAL module driver
  *          This file provides firmware functions to manage the following
  *          functionalities of DCMI extension peripheral:
  *           + Extension features functions
  *
  @verbatim
  ==============================================================================
               ##### DCMI peripheral extension features  #####
  ==============================================================================

  [..] Comparing to other previous devices, the DCMI interface for STM32F446xx 
       devices contains the following additional features :

       (+) Support of Black and White cameras 

                     ##### How to use this driver #####
  ==============================================================================
  [..] This driver provides functions to manage the Black and White feature

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>
<comment type="block" format="doxygen">/** @defgroup DCMIEx DCMIEx
  * @brief DCMI Extended HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_DCMI_MODULE_ENABLED</name></cpp:ifdef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F407xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F417xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator>\
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup DCMIEx_Exported_Functions DCMI Extended Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup DCMI_Exported_Functions_Group1 Initialization and Configuration functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the DCMI according to the specified
  *         parameters in the DCMI_InitTypeDef and create the associated handle.
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_DCMI_Init</name><parameter_list>(<parameter><decl><type><name>DCMI_HandleTypeDef</name> <modifier>*</modifier></type><name>hdcmi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the DCMI peripheral state */</comment>
  <if_stmt><if>if<condition>(<expr><name>hdcmi</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
     <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check function parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_PCKPOLARITY</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PCKPolarity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_VSPOLARITY</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>VSPolarity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_HSPOLARITY</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HSPolarity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_SYNCHRO</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SynchroMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_CAPTURE_RATE</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>CaptureRate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_EXTENDED_DATA</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ExtendedDataMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_MODE_JPEG</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>JPEGMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_BYTE_SELECT_MODE</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ByteSelectMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_BYTE_SELECT_START</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ByteSelectStart</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_LINE_SELECT_MODE</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>LineSelectMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_DCMI_LINE_SELECT_START</name><argument_list>(<argument><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>LineSelectStart</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F446xx || STM32F469xx || STM32F479xx */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_DCMI_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name>HAL_DCMI_MspInit</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Change the DCMI state */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_DCMI_STATE_BUSY</name></expr>;</expr_stmt>
                          <comment type="block">/* Configures the HS, VS, DE and PC polarity */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DCMI_CR_PCKPOL</name> <operator>|</operator> <name>DCMI_CR_HSPOL</name>  <operator>|</operator> <name>DCMI_CR_VSPOL</name>  <operator>|</operator> <name>DCMI_CR_EDM_0</name> <operator>|</operator>\
                           <name>DCMI_CR_EDM_1</name>  <operator>|</operator> <name>DCMI_CR_FCRC_0</name> <operator>|</operator> <name>DCMI_CR_FCRC_1</name> <operator>|</operator> <name>DCMI_CR_JPEG</name>  <operator>|</operator>\
                           <name>DCMI_CR_ESS</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
                           <operator>|</operator> <name>DCMI_CR_BSM_0</name> <operator>|</operator> <name>DCMI_CR_BSM_1</name> <operator>|</operator> <name>DCMI_CR_OEBS</name> <operator>|</operator>\
                           <name>DCMI_CR_LSM</name> <operator>|</operator> <name>DCMI_CR_OELS</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F446xx || STM32F469xx || STM32F479xx */</comment>
                           <operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator>  <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SynchroMode</name></name> <operator>|</operator> <name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>CaptureRate</name></name> <operator>|</operator>\
                                     <name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>VSPolarity</name></name>  <operator>|</operator> <name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HSPolarity</name></name>  <operator>|</operator>\
                                     <name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PCKPolarity</name></name> <operator>|</operator> <name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ExtendedDataMode</name></name> <operator>|</operator>\
                                     <name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>JPEGMode</name></name> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
                                     <operator>|</operator> <name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ByteSelectMode</name></name> <operator>|</operator>\
                                     <name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ByteSelectStart</name></name> <operator>|</operator> <name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>LineSelectMode</name></name> <operator>|</operator>\
                                     <name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>LineSelectStart</name></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F446xx || STM32F469xx || STM32F479xx */</comment>
                                     <operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SynchroMode</name></name> <operator>==</operator> <name>DCMI_SYNCHRO_EMBEDDED</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ESCR</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SyncroCode</name><operator>.</operator><name>FrameStartCode</name></name><operator>)</operator>    <operator>|</operator>
                             <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SyncroCode</name><operator>.</operator><name>LineStartCode</name></name> <operator>&lt;&lt;</operator> <name>DCMI_POSITION_ESCR_LSC</name><operator>)</operator><operator>|</operator>
                             <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SyncroCode</name><operator>.</operator><name>LineEndCode</name></name> <operator>&lt;&lt;</operator> <name>DCMI_POSITION_ESCR_LEC</name><operator>)</operator> <operator>|</operator>
                             <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hdcmi</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SyncroCode</name><operator>.</operator><name>FrameEndCode</name></name> <operator>&lt;&lt;</operator> <name>DCMI_POSITION_ESCR_FEC</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Enable the Line, Vsync, Error and Overrun interrupts */</comment>
  <expr_stmt><expr><call><name>__HAL_DCMI_ENABLE_IT</name><argument_list>(<argument><expr><name>hdcmi</name></expr></argument>, <argument><expr><name>DCMI_IT_LINE</name> <operator>|</operator> <name>DCMI_IT_VSYNC</name> <operator>|</operator> <name>DCMI_IT_ERR</name> <operator>|</operator> <name>DCMI_IT_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Update error code */</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DCMI_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Initialize the DCMI state*/</comment>
  <expr_stmt><expr><name><name>hdcmi</name><operator>-&gt;</operator><name>State</name></name>  <operator>=</operator> <name>HAL_DCMI_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>
  
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F407xx || STM32F417xx || STM32F427xx || STM32F437xx || STM32F429xx ||\
          STM32F439xx || STM32F446xx || STM32F469xx || STM32F479xx */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_DCMI_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
