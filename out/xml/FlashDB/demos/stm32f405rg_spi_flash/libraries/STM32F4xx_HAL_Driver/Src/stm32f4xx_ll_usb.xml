<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_ll_usb.c
  * @author  MCD Application Team
  * @brief   USB Low Layer HAL module driver.
  *
  *          This file provides firmware functions to manage the following
  *          functionalities of the USB Peripheral Controller:
  *           + Initialization/de-initialization functions
  *           + I/O operation functions
  *           + Peripheral Control functions
  *           + Peripheral State functions
  *
  @verbatim
  ==============================================================================
                    ##### How to use this driver #####
  ==============================================================================
    [..]
      (#) Fill parameters of Init structure in USB_OTG_CfgTypeDef structure.

      (#) Call USB_CoreInit() API to initialize the USB Core peripheral.

      (#) The upper HAL HCD/PCD driver will call the right routines for its internal processes.

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_LL_USB_DRIVER
  * @{
  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>HAL_PCD_MODULE_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>HAL_HCD_MODULE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_FS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_HS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_FS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_HS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>USB_CoreReset</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup USB_LL_Exported_Functions USB Low Layer Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup USB_LL_Exported_Functions_Group1 Initialization/de-initialization functions
 *  @brief    Initialization and Configuration functions
 *
@verbatim
 ===============================================================================
                      ##### Initialization/de-initialization functions #####
 ===============================================================================

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the USB Core
  * @param  USBx USB Instance
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_CoreInit</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>USB_OTG_CfgTypeDef</name></type> <name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>ret</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>.</operator><name>phy_itface</name></name> <operator>==</operator> <name>USB_OTG_ULPI_PHY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_GCCFG_PWRDWN</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Init The ULPI Interface */</comment>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GUSBCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_GUSBCFG_TSDPS</name> <operator>|</operator> <name>USB_OTG_GUSBCFG_ULPIFSLS</name> <operator>|</operator> <name>USB_OTG_GUSBCFG_PHYSEL</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Select vbus source */</comment>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GUSBCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_GUSBCFG_ULPIEVBUSD</name> <operator>|</operator> <name>USB_OTG_GUSBCFG_ULPIEVBUSI</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>.</operator><name>use_external_vbus</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GUSBCFG</name></name> <operator>|=</operator> <name>USB_OTG_GUSBCFG_ULPIEVBUSD</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Reset after a PHY select  */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>USB_CoreReset</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <comment type="block">/* FS interface (embedded Phy) */</comment>
  <block>{<block_content>
    <comment type="block">/* Select FS Embedded PHY */</comment>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GUSBCFG</name></name> <operator>|=</operator> <name>USB_OTG_GUSBCFG_PHYSEL</name></expr>;</expr_stmt>

    <comment type="block">/* Reset after a PHY select and set Host mode */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>USB_CoreReset</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>.</operator><name>battery_charging_enable</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Activate the USB Transceiver */</comment>
      <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>|=</operator> <name>USB_OTG_GCCFG_PWRDWN</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Deactivate the USB Transceiver */</comment>
      <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_GCCFG_PWRDWN</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>.</operator><name>dma_enable</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GAHBCFG</name></name> <operator>|=</operator> <name>USB_OTG_GAHBCFG_HBSTLEN_2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GAHBCFG</name></name> <operator>|=</operator> <name>USB_OTG_GAHBCFG_DMAEN</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  Set the USB turnaround time
  * @param  USBx USB Instance
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_SetTurnaroundTime</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>,
                                        <parameter><decl><type><name>uint32_t</name></type> <name>hclk</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>speed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>UsbTrd</name></decl>;</decl_stmt>

  <comment type="block">/* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */</comment>
  <if_stmt><if>if <condition>(<expr><name>speed</name> <operator>==</operator> <name>USBD_FS_SPEED</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hclk</name> <operator>&gt;=</operator> <literal type="number">14200000U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>hclk</name> <operator>&lt;</operator> <literal type="number">15000000U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* hclk Clock Range between 14.2-15 MHz */</comment>
      <expr_stmt><expr><name>UsbTrd</name> <operator>=</operator> <literal type="number">0xFU</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>hclk</name> <operator>&gt;=</operator> <literal type="number">15000000U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>hclk</name> <operator>&lt;</operator> <literal type="number">16000000U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* hclk Clock Range between 15-16 MHz */</comment>
      <expr_stmt><expr><name>UsbTrd</name> <operator>=</operator> <literal type="number">0xEU</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>hclk</name> <operator>&gt;=</operator> <literal type="number">16000000U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>hclk</name> <operator>&lt;</operator> <literal type="number">17200000U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* hclk Clock Range between 16-17.2 MHz */</comment>
      <expr_stmt><expr><name>UsbTrd</name> <operator>=</operator> <literal type="number">0xDU</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>hclk</name> <operator>&gt;=</operator> <literal type="number">17200000U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>hclk</name> <operator>&lt;</operator> <literal type="number">18500000U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* hclk Clock Range between 17.2-18.5 MHz */</comment>
      <expr_stmt><expr><name>UsbTrd</name> <operator>=</operator> <literal type="number">0xCU</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>hclk</name> <operator>&gt;=</operator> <literal type="number">18500000U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>hclk</name> <operator>&lt;</operator> <literal type="number">20000000U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* hclk Clock Range between 18.5-20 MHz */</comment>
      <expr_stmt><expr><name>UsbTrd</name> <operator>=</operator> <literal type="number">0xBU</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>hclk</name> <operator>&gt;=</operator> <literal type="number">20000000U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>hclk</name> <operator>&lt;</operator> <literal type="number">21800000U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* hclk Clock Range between 20-21.8 MHz */</comment>
      <expr_stmt><expr><name>UsbTrd</name> <operator>=</operator> <literal type="number">0xAU</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>hclk</name> <operator>&gt;=</operator> <literal type="number">21800000U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>hclk</name> <operator>&lt;</operator> <literal type="number">24000000U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* hclk Clock Range between 21.8-24 MHz */</comment>
      <expr_stmt><expr><name>UsbTrd</name> <operator>=</operator> <literal type="number">0x9U</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>hclk</name> <operator>&gt;=</operator> <literal type="number">24000000U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>hclk</name> <operator>&lt;</operator> <literal type="number">27700000U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* hclk Clock Range between 24-27.7 MHz */</comment>
      <expr_stmt><expr><name>UsbTrd</name> <operator>=</operator> <literal type="number">0x8U</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>hclk</name> <operator>&gt;=</operator> <literal type="number">27700000U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>hclk</name> <operator>&lt;</operator> <literal type="number">32000000U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* hclk Clock Range between 27.7-32 MHz */</comment>
      <expr_stmt><expr><name>UsbTrd</name> <operator>=</operator> <literal type="number">0x7U</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="block">/* if(hclk &gt;= 32000000) */</comment>
    <block>{<block_content>
      <comment type="block">/* hclk Clock Range between 32-200 MHz */</comment>
      <expr_stmt><expr><name>UsbTrd</name> <operator>=</operator> <literal type="number">0x6U</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>speed</name> <operator>==</operator> <name>USBD_HS_SPEED</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>UsbTrd</name> <operator>=</operator> <name>USBD_HS_TRDT_VALUE</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>UsbTrd</name> <operator>=</operator> <name>USBD_DEFAULT_TRDT_VALUE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GUSBCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_GUSBCFG_TRDT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GUSBCFG</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>UsbTrd</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <name>USB_OTG_GUSBCFG_TRDT</name><operator>)</operator></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_EnableGlobalInt
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_EnableGlobalInt</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GAHBCFG</name></name> <operator>|=</operator> <name>USB_OTG_GAHBCFG_GINT</name></expr>;</expr_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_DisableGlobalInt
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_DisableGlobalInt</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GAHBCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_GAHBCFG_GINT</name></expr>;</expr_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_SetCurrentMode : Set functional mode
  * @param  USBx  Selected device
  * @param  mode   current core mode
  *          This parameter can be one of these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_SetCurrentMode</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>USB_OTG_ModeTypeDef</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GUSBCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_GUSBCFG_FHMOD</name> <operator>|</operator> <name>USB_OTG_GUSBCFG_FDMOD</name><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>USB_HOST_MODE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GUSBCFG</name></name> <operator>|=</operator> <name>USB_OTG_GUSBCFG_FHMOD</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>USB_DEVICE_MODE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GUSBCFG</name></name> <operator>|=</operator> <name>USB_OTG_GUSBCFG_FDMOD</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>HAL_Delay</name><argument_list>(<argument><expr><literal type="number">50U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_DevInit : Initializes the USB_OTG controller registers
  *         for device mode
  * @param  USBx  Selected device
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_DevInit</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>USB_OTG_CfgTypeDef</name></type> <name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>ret</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15U</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>DIEPTXF</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Cx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* VBUS Sensing setup */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>.</operator><name>vbus_sensing_enable</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Deactivate VBUS Sensing B */</comment>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_GCCFG_VBDEN</name></expr>;</expr_stmt>

    <comment type="block">/* B-peripheral session valid override enable */</comment>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GOTGCTL</name></name> <operator>|=</operator> <name>USB_OTG_GOTGCTL_BVALOEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GOTGCTL</name></name> <operator>|=</operator> <name>USB_OTG_GOTGCTL_BVALOVAL</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Enable HW VBUS sensing */</comment>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>|=</operator> <name>USB_OTG_GCCFG_VBDEN</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* VBUS Sensing setup */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>.</operator><name>vbus_sensing_enable</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */</comment>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>|=</operator> <name>USB_OTG_GCCFG_NOVBUSSENS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_GCCFG_VBUSBSEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_GCCFG_VBUSASEN</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Enable HW VBUS sensing */</comment>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GOTGCTL</name></name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_GCCFG_NOVBUSSENS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>|=</operator> <name>USB_OTG_GCCFG_VBUSBSEN</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */</comment>

  <comment type="block">/* Restart the Phy Clock */</comment>
  <expr_stmt><expr><name>USBx_PCGCCTL</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

  <comment type="block">/* Device mode configuration */</comment>
  <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DCFG</name></name> <operator>|=</operator> <name>DCFG_FRAME_INTERVAL_80</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>.</operator><name>phy_itface</name></name> <operator>==</operator> <name>USB_OTG_ULPI_PHY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>.</operator><name>speed</name></name> <operator>==</operator> <name>USBD_HS_SPEED</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set Core speed to High speed mode */</comment>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_SetDevSpeed</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>, <argument><expr><name>USB_OTG_SPEED_HIGH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Set Core speed to Full speed mode */</comment>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_SetDevSpeed</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>, <argument><expr><name>USB_OTG_SPEED_HIGH_IN_FULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Set Core speed to Full speed mode */</comment>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_SetDevSpeed</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>, <argument><expr><name>USB_OTG_SPEED_FULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Flush the FIFOs */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>USB_FlushTxFifo</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>, <argument><expr><literal type="number">0x10U</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition> <comment type="block">/* all Tx FIFOs */</comment>
  <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>USB_FlushRxFifo</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Clear all pending Device Interrupts */</comment>
  <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DIEPMSK</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DOEPMSK</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DAINTMSK</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cfg</name><operator>.</operator><name>dev_endpoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>&amp;</operator> <name>USB_OTG_DIEPCTL_EPENA</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DIEPCTL_EPENA</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>=</operator> <name>USB_OTG_DIEPCTL_SNAK</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>=</operator> <name>USB_OTG_DIEPCTL_EPDIS</name> <operator>|</operator> <name>USB_OTG_DIEPCTL_SNAK</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPTSIZ</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPINT</name>  <operator>=</operator> <literal type="number">0xFB7FU</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cfg</name><operator>.</operator><name>dev_endpoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>&amp;</operator> <name>USB_OTG_DOEPCTL_EPENA</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DOEPCTL_EPENA</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>=</operator> <name>USB_OTG_DOEPCTL_SNAK</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>=</operator> <name>USB_OTG_DOEPCTL_EPDIS</name> <operator>|</operator> <name>USB_OTG_DOEPCTL_SNAK</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPTSIZ</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPINT</name>  <operator>=</operator> <literal type="number">0xFB7FU</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DIEPMSK</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DIEPMSK_TXFURM</name><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>.</operator><name>dma_enable</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/*Set threshold parameters */</comment>
    <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DTHRCTL</name></name> <operator>=</operator> <name>USB_OTG_DTHRCTL_TXTHRLEN_6</name> <operator>|</operator>
                           <name>USB_OTG_DTHRCTL_RXTHRLEN_6</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DTHRCTL</name></name> <operator>|=</operator> <name>USB_OTG_DTHRCTL_RXTHREN</name> <operator>|</operator>
                            <name>USB_OTG_DTHRCTL_ISOTHREN</name> <operator>|</operator>
                            <name>USB_OTG_DTHRCTL_NONISOTHREN</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Disable all interrupts. */</comment>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GINTMSK</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

  <comment type="block">/* Clear any pending interrupts */</comment>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GINTSTS</name></name> <operator>=</operator> <literal type="number">0xBFFFFFFFU</literal></expr>;</expr_stmt>

  <comment type="block">/* Enable the common interrupts */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>.</operator><name>dma_enable</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GINTMSK</name></name> <operator>|=</operator> <name>USB_OTG_GINTMSK_RXFLVLM</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Enable interrupts matching to the Device mode ONLY */</comment>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GINTMSK</name></name> <operator>|=</operator> <name>USB_OTG_GINTMSK_USBSUSPM</name> <operator>|</operator> <name>USB_OTG_GINTMSK_USBRST</name> <operator>|</operator>
                   <name>USB_OTG_GINTMSK_ENUMDNEM</name> <operator>|</operator> <name>USB_OTG_GINTMSK_IEPINT</name> <operator>|</operator>
                   <name>USB_OTG_GINTMSK_OEPINT</name>   <operator>|</operator> <name>USB_OTG_GINTMSK_IISOIXFRM</name> <operator>|</operator>
                   <name>USB_OTG_GINTMSK_PXFRM_IISOOXFRM</name> <operator>|</operator> <name>USB_OTG_GINTMSK_WUIM</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>.</operator><name>Sof_enable</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GINTMSK</name></name> <operator>|=</operator> <name>USB_OTG_GINTMSK_SOFM</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>.</operator><name>vbus_sensing_enable</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GINTMSK</name></name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_GINTMSK_SRQIM</name> <operator>|</operator> <name>USB_OTG_GINTMSK_OTGINT</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_OTG_FlushTxFifo : Flush a Tx FIFO
  * @param  USBx  Selected device
  * @param  num  FIFO number
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_FlushTxFifo</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GRSTCTL</name></name> <operator>=</operator> <operator>(</operator><name>USB_OTG_GRSTCTL_TXFFLSH</name> <operator>|</operator> <operator>(</operator><name>num</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <do>do
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>++</operator><name>count</name> <operator>&gt;</operator> <literal type="number">200000U</literal></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  while <condition>(<expr><operator>(</operator><name><name>USBx</name><operator>-&gt;</operator><name>GRSTCTL</name></name> <operator>&amp;</operator> <name>USB_OTG_GRSTCTL_TXFFLSH</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_GRSTCTL_TXFFLSH</name></expr>)</condition>;</do>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_FlushRxFifo</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GRSTCTL</name></name> <operator>=</operator> <name>USB_OTG_GRSTCTL_RXFFLSH</name></expr>;</expr_stmt>

  <do>do
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>++</operator><name>count</name> <operator>&gt;</operator> <literal type="number">200000U</literal></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  while <condition>(<expr><operator>(</operator><name><name>USBx</name><operator>-&gt;</operator><name>GRSTCTL</name></name> <operator>&amp;</operator> <name>USB_OTG_GRSTCTL_RXFFLSH</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_GRSTCTL_RXFFLSH</name></expr>)</condition>;</do>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_SetDevSpeed  Initializes the DevSpd field of DCFG register
  *         depending the PHY type and the enumeration speed of the device.
  * @param  USBx  Selected device
  * @param  speed  device speed
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_SetDevSpeed</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>speed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DCFG</name></name> <operator>|=</operator> <name>speed</name></expr>;</expr_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_GetDevSpeed  Return the Dev Speed
  * @param  USBx  Selected device
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */</comment>
<function><type><name>uint8_t</name></type> <name>USB_GetDevSpeed</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>speed</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>DevEnumSpeed</name> <init>= <expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DSTS</name></name> <operator>&amp;</operator> <name>USB_OTG_DSTS_ENUMSPD</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>DevEnumSpeed</name> <operator>==</operator> <name>DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>speed</name> <operator>=</operator> <name>USBD_HS_SPEED</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>DevEnumSpeed</name> <operator>==</operator> <name>DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ</name><operator>)</operator> <operator>||</operator>
           <operator>(</operator><name>DevEnumSpeed</name> <operator>==</operator> <name>DSTS_ENUMSPD_FS_PHY_48MHZ</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>speed</name> <operator>=</operator> <name>USBD_FS_SPEED</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">0xFU</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>speed</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Activate and configure an endpoint
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_ActivateEndpoint</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>USB_OTG_EPTypeDef</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>epnum</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>is_in</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DAINTMSK</name></name> <operator>|=</operator> <name>USB_OTG_DAINTMSK_IEPM</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>&amp;</operator> <name>USB_OTG_DIEPCTL_USBAEP</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>|=</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>maxpacket</name></name> <operator>&amp;</operator> <name>USB_OTG_DIEPCTL_MPSIZ</name><operator>)</operator> <operator>|</operator>
                                   <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ep</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>epnum</name> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>|</operator>
                                   <name>USB_OTG_DIEPCTL_SD0PID_SEVNFRM</name> <operator>|</operator>
                                   <name>USB_OTG_DIEPCTL_USBAEP</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DAINTMSK</name></name> <operator>|=</operator> <name>USB_OTG_DAINTMSK_OEPM</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name><operator>)</operator> <operator>&amp;</operator> <name>USB_OTG_DOEPCTL_USBAEP</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>|=</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>maxpacket</name></name> <operator>&amp;</operator> <name>USB_OTG_DOEPCTL_MPSIZ</name><operator>)</operator> <operator>|</operator>
                                    <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ep</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>|</operator>
                                    <name>USB_OTG_DIEPCTL_SD0PID_SEVNFRM</name> <operator>|</operator>
                                    <name>USB_OTG_DOEPCTL_USBAEP</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Activate and configure a dedicated endpoint
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_ActivateDedicatedEndpoint</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>USB_OTG_EPTypeDef</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>epnum</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Read DEPCTLn register */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>is_in</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name><operator>)</operator> <operator>&amp;</operator> <name>USB_OTG_DIEPCTL_USBAEP</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>|=</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>maxpacket</name></name> <operator>&amp;</operator> <name>USB_OTG_DIEPCTL_MPSIZ</name><operator>)</operator> <operator>|</operator>
                                   <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ep</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>epnum</name> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>|</operator>
                                   <name>USB_OTG_DIEPCTL_SD0PID_SEVNFRM</name> <operator>|</operator>
                                   <name>USB_OTG_DIEPCTL_USBAEP</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DEACHMSK</name></name> <operator>|=</operator> <name>USB_OTG_DAINTMSK_IEPM</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name><operator>)</operator> <operator>&amp;</operator> <name>USB_OTG_DOEPCTL_USBAEP</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>|=</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>maxpacket</name></name> <operator>&amp;</operator> <name>USB_OTG_DOEPCTL_MPSIZ</name><operator>)</operator> <operator>|</operator>
                                    <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ep</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>epnum</name> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>|</operator>
                                    <name>USB_OTG_DOEPCTL_USBAEP</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DEACHMSK</name></name> <operator>|=</operator> <name>USB_OTG_DAINTMSK_OEPM</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  De-activate and de-initialize an endpoint
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_DeactivateEndpoint</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>USB_OTG_EPTypeDef</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>epnum</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Read DEPCTLn register */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>is_in</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DEACHMSK</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DAINTMSK_IEPM</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DAINTMSK</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DAINTMSK_IEPM</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DIEPCTL_USBAEP</name> <operator>|</operator>
                                   <name>USB_OTG_DIEPCTL_MPSIZ</name> <operator>|</operator>
                                   <name>USB_OTG_DIEPCTL_TXFNUM</name> <operator>|</operator>
                                   <name>USB_OTG_DIEPCTL_SD0PID_SEVNFRM</name> <operator>|</operator>
                                   <name>USB_OTG_DIEPCTL_EPTYP</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DEACHMSK</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DAINTMSK_OEPM</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DAINTMSK</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DAINTMSK_OEPM</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DOEPCTL_USBAEP</name> <operator>|</operator>
                                    <name>USB_OTG_DOEPCTL_MPSIZ</name> <operator>|</operator>
                                    <name>USB_OTG_DOEPCTL_SD0PID_SEVNFRM</name> <operator>|</operator>
                                    <name>USB_OTG_DOEPCTL_EPTYP</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  De-activate and de-initialize a dedicated endpoint
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_DeactivateDedicatedEndpoint</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>USB_OTG_EPTypeDef</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>epnum</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Read DEPCTLn register */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>is_in</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>&amp;=</operator> <operator>~</operator> <name>USB_OTG_DIEPCTL_USBAEP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DAINTMSK</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DAINTMSK_IEPM</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_DOEPCTL_USBAEP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DAINTMSK</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DAINTMSK_OEPM</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_EPStartXfer : setup and starts a transfer over an EP
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @param  dma USB dma enabled or disabled
  *          This parameter can be one of these values:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_EPStartXfer</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>USB_OTG_EPTypeDef</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>dma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>epnum</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>pktcnt</name></decl>;</decl_stmt>

  <comment type="block">/* IN endpoint */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>is_in</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Zero Length Packet? */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPTSIZ</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DIEPTSIZ_PKTCNT</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPTSIZ</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_DIEPTSIZ_PKTCNT</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPTSIZ</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DIEPTSIZ_XFRSIZ</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */</comment>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPTSIZ</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DIEPTSIZ_XFRSIZ</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPTSIZ</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DIEPTSIZ_PKTCNT</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPTSIZ</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_DIEPTSIZ_PKTCNT</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>+</operator> <name><name>ep</name><operator>-&gt;</operator><name>maxpacket</name></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>/</operator> <name><name>ep</name><operator>-&gt;</operator><name>maxpacket</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPTSIZ</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_DIEPTSIZ_XFRSIZ</name> <operator>&amp;</operator> <name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name><operator>)</operator></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EP_TYPE_ISOC</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPTSIZ</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DIEPTSIZ_MULCNT</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPTSIZ</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_DIEPTSIZ_MULCNT</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dma</name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ep</name><operator>-&gt;</operator><name>dma_addr</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPDMA</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>dma_addr</name></name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EP_TYPE_ISOC</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DSTS</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>|=</operator> <name>USB_OTG_DIEPCTL_SODDFRM</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>|=</operator> <name>USB_OTG_DIEPCTL_SD0PID_SEVNFRM</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* EP enable, IN data in FIFO */</comment>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_DIEPCTL_CNAK</name> <operator>|</operator> <name>USB_OTG_DIEPCTL_EPENA</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* EP enable, IN data in FIFO */</comment>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_DIEPCTL_CNAK</name> <operator>|</operator> <name>USB_OTG_DIEPCTL_EPENA</name><operator>)</operator></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>EP_TYPE_ISOC</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Enable the Tx FIFO Empty Interrupt for this EP */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DIEPEMPMSK</name></name> <operator>|=</operator> <literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DSTS</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>|=</operator> <name>USB_OTG_DIEPCTL_SODDFRM</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>|=</operator> <name>USB_OTG_DIEPCTL_SD0PID_SEVNFRM</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_WritePacket</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_buff</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name></expr></argument>, <argument><expr><name>dma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else <comment type="block">/* OUT endpoint */</comment>
  <block>{<block_content>
    <comment type="block">/* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */</comment>
    <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPTSIZ</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DOEPTSIZ_XFRSIZ</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPTSIZ</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DOEPTSIZ_PKTCNT</name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPTSIZ</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_DOEPTSIZ_XFRSIZ</name> <operator>&amp;</operator> <name><name>ep</name><operator>-&gt;</operator><name>maxpacket</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPTSIZ</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_DOEPTSIZ_PKTCNT</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>pktcnt</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>+</operator> <name><name>ep</name><operator>-&gt;</operator><name>maxpacket</name></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>/</operator> <name><name>ep</name><operator>-&gt;</operator><name>maxpacket</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPTSIZ</name> <operator>|=</operator> <name>USB_OTG_DOEPTSIZ_PKTCNT</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pktcnt</name> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPTSIZ</name> <operator>|=</operator> <name>USB_OTG_DOEPTSIZ_XFRSIZ</name> <operator>&amp;</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>maxpacket</name></name> <operator>*</operator> <name>pktcnt</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dma</name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ep</name><operator>-&gt;</operator><name>xfer_buff</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPDMA</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>xfer_buff</name></name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EP_TYPE_ISOC</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DSTS</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>|=</operator> <name>USB_OTG_DOEPCTL_SODDFRM</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>|=</operator> <name>USB_OTG_DOEPCTL_SD0PID_SEVNFRM</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* EP enable */</comment>
    <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_DOEPCTL_CNAK</name> <operator>|</operator> <name>USB_OTG_DOEPCTL_EPENA</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_EP0StartXfer : setup and starts a transfer over the EP  0
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @param  dma USB dma enabled or disabled
  *          This parameter can be one of these values:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_EP0StartXfer</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>USB_OTG_EPTypeDef</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>dma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>epnum</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* IN endpoint */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>is_in</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Zero Length Packet? */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPTSIZ</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DIEPTSIZ_PKTCNT</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPTSIZ</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_DIEPTSIZ_PKTCNT</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPTSIZ</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DIEPTSIZ_XFRSIZ</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */</comment>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPTSIZ</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DIEPTSIZ_XFRSIZ</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPTSIZ</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DIEPTSIZ_PKTCNT</name><operator>)</operator></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>&gt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>maxpacket</name></name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>maxpacket</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPTSIZ</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_DIEPTSIZ_PKTCNT</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPTSIZ</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_DIEPTSIZ_XFRSIZ</name> <operator>&amp;</operator> <name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dma</name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ep</name><operator>-&gt;</operator><name>dma_addr</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPDMA</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>dma_addr</name></name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* EP enable, IN data in FIFO */</comment>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_DIEPCTL_CNAK</name> <operator>|</operator> <name>USB_OTG_DIEPCTL_EPENA</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* EP enable, IN data in FIFO */</comment>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_DIEPCTL_CNAK</name> <operator>|</operator> <name>USB_OTG_DIEPCTL_EPENA</name><operator>)</operator></expr>;</expr_stmt>

      <comment type="block">/* Enable the Tx FIFO Empty Interrupt for this EP */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DIEPEMPMSK</name></name> <operator>|=</operator> <literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else <comment type="block">/* OUT endpoint */</comment>
  <block>{<block_content>
    <comment type="block">/* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */</comment>
    <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPTSIZ</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DOEPTSIZ_XFRSIZ</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPTSIZ</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DOEPTSIZ_PKTCNT</name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>maxpacket</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPTSIZ</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_DOEPTSIZ_PKTCNT</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPTSIZ</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_DOEPTSIZ_XFRSIZ</name> <operator>&amp;</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>maxpacket</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>dma</name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ep</name><operator>-&gt;</operator><name>xfer_buff</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPDMA</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>xfer_buff</name></name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* EP enable */</comment>
    <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_DOEPCTL_CNAK</name> <operator>|</operator> <name>USB_OTG_DOEPCTL_EPENA</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_WritePacket : Writes a packet into the Tx FIFO associated
  *         with the EP/channel
  * @param  USBx  Selected device
  * @param  src   pointer to source buffer
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @param  dma USB dma enabled or disabled
  *          This parameter can be one of these values:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_WritePacket</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>ch_ep_num</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>dma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pSrc</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>count32b</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>dma</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>count32b</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>len</name> <operator>+</operator> <literal type="number">3U</literal><operator>)</operator> <operator>/</operator> <literal type="number">4U</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count32b</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_DFIFO</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ch_ep_num</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>__UNALIGNED_UINT32_READ</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pSrc</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_ReadPacket : read a packet from the RX FIFO
  * @param  USBx  Selected device
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>USB_ReadPacket</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pDest</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>dest</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>count32b</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>len</name> <operator>+</operator> <literal type="number">3U</literal><operator>)</operator> <operator>/</operator> <literal type="number">4U</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count32b</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__UNALIGNED_UINT32_WRITE</name><argument_list>(<argument><expr><name>pDest</name></expr></argument>, <argument><expr><call><name>USBx_DFIFO</name><argument_list>(<argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pDest</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pDest</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_EPSetStall : set a stall condition over an EP
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_EPSetStall</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>USB_OTG_EPTypeDef</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>epnum</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>is_in</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>&amp;</operator> <name>USB_OTG_DIEPCTL_EPENA</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>epnum</name> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DIEPCTL_EPDIS</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>|=</operator> <name>USB_OTG_DIEPCTL_STALL</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>&amp;</operator> <name>USB_OTG_DOEPCTL_EPENA</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>epnum</name> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DOEPCTL_EPDIS</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>|=</operator> <name>USB_OTG_DOEPCTL_STALL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_EPClearStall : Clear a stall condition over an EP
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_EPClearStall</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>USB_OTG_EPTypeDef</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>epnum</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ep</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>is_in</name></name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_DIEPCTL_STALL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EP_TYPE_INTR</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EP_TYPE_BULK</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>|=</operator> <name>USB_OTG_DIEPCTL_SD0PID_SEVNFRM</name></expr>;</expr_stmt> <comment type="block">/* DATA0 */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_DOEPCTL_STALL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EP_TYPE_INTR</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EP_TYPE_BULK</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>|=</operator> <name>USB_OTG_DOEPCTL_SD0PID_SEVNFRM</name></expr>;</expr_stmt> <comment type="block">/* DATA0 */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_StopDevice</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Clear Pending interrupt */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15U</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPINT</name> <operator>=</operator> <literal type="number">0xFB7FU</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPINT</name> <operator>=</operator> <literal type="number">0xFB7FU</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Clear interrupt masks */</comment>
  <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DIEPMSK</name></name>  <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DOEPMSK</name></name>  <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DAINTMSK</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

  <comment type="block">/* Flush the FIFO */</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>USB_FlushRxFifo</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>USB_FlushTxFifo</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>,  <argument><expr><literal type="number">0x10U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_SetDevAddress : Stop the usb device mode
  * @param  USBx  Selected device
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type>  <name>USB_SetDevAddress</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DCFG_DAD</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DCFG</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>address</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <name>USB_OTG_DCFG_DAD</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type>  <name>USB_DevConnect</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DCTL</name></name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_DCTL_SDIS</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>HAL_Delay</name><argument_list>(<argument><expr><literal type="number">3U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type>  <name>USB_DevDisconnect</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DCTL</name></name> <operator>|=</operator> <name>USB_OTG_DCTL_SDIS</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>HAL_Delay</name><argument_list>(<argument><expr><literal type="number">3U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */</comment>
<function><type><name>uint32_t</name></type>  <name>USB_ReadInterrupts</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>USBx</name><operator>-&gt;</operator><name>GINTSTS</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmpreg</name> <operator>&amp;=</operator> <name><name>USBx</name><operator>-&gt;</operator><name>GINTMSK</name></name></expr>;</expr_stmt>

  <return>return <expr><name>tmpreg</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */</comment>
<function><type><name>uint32_t</name></type> <name>USB_ReadDevAllOutEpInterrupt</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>tmpreg</name>  <operator>=</operator> <name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DAINT</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmpreg</name> <operator>&amp;=</operator> <name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DAINTMSK</name></name></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <literal type="number">0xffff0000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */</comment>
<function><type><name>uint32_t</name></type> <name>USB_ReadDevAllInEpInterrupt</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>tmpreg</name>  <operator>=</operator> <name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DAINT</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmpreg</name> <operator>&amp;=</operator> <name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DAINTMSK</name></name></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <literal type="number">0xFFFFU</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns Device OUT EP Interrupt register
  * @param  USBx  Selected device
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */</comment>
<function><type><name>uint32_t</name></type> <name>USB_ReadDevOutEPInterrupt</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>epnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>tmpreg</name>  <operator>=</operator> <call><name>USBx_OUTEP</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPINT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmpreg</name> <operator>&amp;=</operator> <name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DOEPMSK</name></name></expr>;</expr_stmt>

  <return>return <expr><name>tmpreg</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns Device IN EP Interrupt register
  * @param  USBx  Selected device
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */</comment>
<function><type><name>uint32_t</name></type> <name>USB_ReadDevInEPInterrupt</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>epnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name></decl>, <decl><type ref="prev"/><name>msk</name></decl>, <decl><type ref="prev"/><name>emp</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>msk</name> <operator>=</operator> <name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DIEPMSK</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>emp</name> <operator>=</operator> <name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DIEPEMPMSK</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>msk</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>emp</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>epnum</name> <operator>&amp;</operator> <name>EP_ADDR_MSK</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <call><name>USBx_INEP</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>epnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPINT</name> <operator>&amp;</operator> <name>msk</name></expr>;</expr_stmt>

  <return>return <expr><name>tmpreg</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_ClearInterrupts: clear a USB interrupt
  * @param  USBx  Selected device
  * @param  interrupt  interrupt flag
  * @retval None
  */</comment>
<function><type><name>void</name></type>  <name>USB_ClearInterrupts</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>interrupt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GINTSTS</name></name> <operator>|=</operator> <name>interrupt</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns USB core mode
  * @param  USBx  Selected device
  * @retval return core mode : Host or Device
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */</comment>
<function><type><name>uint32_t</name></type> <name>USB_GetMode</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>(</operator><operator>(</operator><name><name>USBx</name><operator>-&gt;</operator><name>GINTSTS</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1U</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type>  <name>USB_ActivateSetup</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Set the MPS of the IN EP based on the enumeration speed */</comment>
  <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_DIEPCTL_MPSIZ</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DSTS</name></name> <operator>&amp;</operator> <name>USB_OTG_DSTS_ENUMSPD</name><operator>)</operator> <operator>==</operator> <name>DSTS_ENUMSPD_LS_PHY_6MHZ</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>USBx_INEP</name><argument_list>(<argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DIEPCTL</name> <operator>|=</operator> <literal type="number">3U</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DCTL</name></name> <operator>|=</operator> <name>USB_OTG_DCTL_CGINAK</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Prepare the EP0 to start the first control setup
  * @param  USBx  Selected device
  * @param  dma USB dma enabled or disabled
  *          This parameter can be one of these values:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_EP0_OutStart</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>dma</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>psetup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>gSNPSiD</name> <init>= <expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>USBx</name><operator>-&gt;</operator><name>CID</name></name> <operator>+</operator> <literal type="number">0x1U</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>gSNPSiD</name> <operator>&gt;</operator> <name>USB_OTG_CORE_ID_300A</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>&amp;</operator> <name>USB_OTG_DOEPCTL_EPENA</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DOEPCTL_EPENA</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPTSIZ</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPTSIZ</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_DOEPTSIZ_PKTCNT</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPTSIZ</name> <operator>|=</operator> <operator>(</operator><literal type="number">3U</literal> <operator>*</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPTSIZ</name> <operator>|=</operator>  <name>USB_OTG_DOEPTSIZ_STUPCNT</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>dma</name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPDMA</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>psetup</name></expr>;</expr_stmt>
    <comment type="block">/* EP enable */</comment>
    <expr_stmt><expr><call><name>USBx_OUTEP</name><argument_list>(<argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DOEPCTL</name> <operator>|=</operator> <name>USB_OTG_DOEPCTL_EPENA</name> <operator>|</operator> <name>USB_OTG_DOEPCTL_USBAEP</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>USB_CoreReset</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Wait for AHB master IDLE state. */</comment>
  <do>do
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>++</operator><name>count</name> <operator>&gt;</operator> <literal type="number">200000U</literal></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  while <condition>(<expr><operator>(</operator><name><name>USBx</name><operator>-&gt;</operator><name>GRSTCTL</name></name> <operator>&amp;</operator> <name>USB_OTG_GRSTCTL_AHBIDL</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>;</do>

  <comment type="block">/* Core Soft Reset */</comment>
  <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GRSTCTL</name></name> <operator>|=</operator> <name>USB_OTG_GRSTCTL_CSRST</name></expr>;</expr_stmt>

  <do>do
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>++</operator><name>count</name> <operator>&gt;</operator> <literal type="number">200000U</literal></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  while <condition>(<expr><operator>(</operator><name><name>USBx</name><operator>-&gt;</operator><name>GRSTCTL</name></name> <operator>&amp;</operator> <name>USB_OTG_GRSTCTL_CSRST</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_GRSTCTL_CSRST</name></expr>)</condition>;</do>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_HostInit : Initializes the USB OTG controller registers
  *         for Host mode
  * @param  USBx  Selected device
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_HostInit</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>USB_OTG_CfgTypeDef</name></type> <name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Restart the Phy Clock */</comment>
  <expr_stmt><expr><name>USBx_PCGCCTL</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Cx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Disable HW VBUS sensing */</comment>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_GCCFG_VBDEN</name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */</comment>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>|=</operator> <name>USB_OTG_GCCFG_NOVBUSSENS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_GCCFG_VBUSBSEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_GCCFG_VBUSASEN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Cx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Disable Battery chargin detector */</comment>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_GCCFG_BCDEN</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */</comment>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>USBx</name><operator>-&gt;</operator><name>CID</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x1U</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>.</operator><name>speed</name></name> <operator>==</operator> <name>USB_OTG_SPEED_FULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Force Device Enumeration to FS/LS mode only */</comment>
      <expr_stmt><expr><name><name>USBx_HOST</name><operator>-&gt;</operator><name>HCFG</name></name> <operator>|=</operator> <name>USB_OTG_HCFG_FSLSS</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Set default Max speed support */</comment>
      <expr_stmt><expr><name><name>USBx_HOST</name><operator>-&gt;</operator><name>HCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_HCFG_FSLSS</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Set default Max speed support */</comment>
    <expr_stmt><expr><name><name>USBx_HOST</name><operator>-&gt;</operator><name>HCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_HCFG_FSLSS</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Make sure the FIFOs are flushed. */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_FlushTxFifo</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>, <argument><expr><literal type="number">0x10U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* all Tx FIFOs */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_FlushRxFifo</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Clear all pending HC Interrupts */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cfg</name><operator>.</operator><name>Host_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINTMSK</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Enable VBUS driving */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_DriveVbus</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>HAL_Delay</name><argument_list>(<argument><expr><literal type="number">200U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable all interrupts. */</comment>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GINTMSK</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

  <comment type="block">/* Clear any pending interrupts */</comment>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GINTSTS</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>USBx</name><operator>-&gt;</operator><name>CID</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x1U</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* set Rx FIFO size */</comment>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GRXFSIZ</name></name>  <operator>=</operator> <literal type="number">0x200U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>DIEPTXF0_HNPTXFSIZ</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">0x100U</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <name>USB_OTG_NPTXFD</name><operator>)</operator> <operator>|</operator> <literal type="number">0x200U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>HPTXFSIZ</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">0xE0U</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <name>USB_OTG_HPTXFSIZ_PTXFD</name><operator>)</operator> <operator>|</operator> <literal type="number">0x300U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* set Rx FIFO size */</comment>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GRXFSIZ</name></name>  <operator>=</operator> <literal type="number">0x80U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>DIEPTXF0_HNPTXFSIZ</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">0x60U</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <name>USB_OTG_NPTXFD</name><operator>)</operator> <operator>|</operator> <literal type="number">0x80U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>HPTXFSIZ</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">0x40U</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>&amp;</operator> <name>USB_OTG_HPTXFSIZ_PTXFD</name><operator>)</operator> <operator>|</operator> <literal type="number">0xE0U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Enable the common interrupts */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>.</operator><name>dma_enable</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GINTMSK</name></name> <operator>|=</operator> <name>USB_OTG_GINTMSK_RXFLVLM</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Enable interrupts matching to the Host mode ONLY */</comment>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GINTMSK</name></name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_GINTMSK_PRTIM</name>            <operator>|</operator> <name>USB_OTG_GINTMSK_HCIM</name> <operator>|</operator> \
                    <name>USB_OTG_GINTMSK_SOFM</name>             <operator>|</operator> <name>USB_OTG_GINTSTS_DISCINT</name> <operator>|</operator> \
                    <name>USB_OTG_GINTMSK_PXFRM_IISOOXFRM</name>  <operator>|</operator> <name>USB_OTG_GINTMSK_WUIM</name><operator>)</operator></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_InitFSLSPClkSel : Initializes the FSLSPClkSel field of the
  *         HCFG register on the PHY type and set the right frame interval
  * @param  USBx  Selected device
  * @param  freq  clock frequency
  *          This parameter can be one of these values:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_InitFSLSPClkSel</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>USBx_HOST</name><operator>-&gt;</operator><name>HCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_HCFG_FSLSPCS</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>USBx_HOST</name><operator>-&gt;</operator><name>HCFG</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>freq</name> <operator>&amp;</operator> <name>USB_OTG_HCFG_FSLSPCS</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>freq</name> <operator>==</operator> <name>HCFG_48_MHZ</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>USBx_HOST</name><operator>-&gt;</operator><name>HFIR</name></name> <operator>=</operator> <literal type="number">48000U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>freq</name> <operator>==</operator> <name>HCFG_6_MHZ</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>USBx_HOST</name><operator>-&gt;</operator><name>HFIR</name></name> <operator>=</operator> <literal type="number">6000U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* ... */</comment>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
* @brief  USB_OTG_ResetPort : Reset Host Port
  * @param  USBx  Selected device
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_ResetPort</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>hprt0</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>hprt0</name> <operator>=</operator> <name>USBx_HPRT0</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>hprt0</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_HPRT_PENA</name> <operator>|</operator> <name>USB_OTG_HPRT_PCDET</name> <operator>|</operator>
             <name>USB_OTG_HPRT_PENCHNG</name> <operator>|</operator> <name>USB_OTG_HPRT_POCCHNG</name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name>USBx_HPRT0</name> <operator>=</operator> <operator>(</operator><name>USB_OTG_HPRT_PRST</name> <operator>|</operator> <name>hprt0</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>HAL_Delay</name><argument_list>(<argument><expr><literal type="number">100U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                 <comment type="block">/* See Note #1 */</comment>
  <expr_stmt><expr><name>USBx_HPRT0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>USB_OTG_HPRT_PRST</name><operator>)</operator> <operator>&amp;</operator> <name>hprt0</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>HAL_Delay</name><argument_list>(<argument><expr><literal type="number">10U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_DriveVbus : activate or de-activate vbus
  * @param  state  VBUS state
  *          This parameter can be one of these values:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_DriveVbus</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>hprt0</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>hprt0</name> <operator>=</operator> <name>USBx_HPRT0</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>hprt0</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_HPRT_PENA</name> <operator>|</operator> <name>USB_OTG_HPRT_PCDET</name> <operator>|</operator>
             <name>USB_OTG_HPRT_PENCHNG</name> <operator>|</operator> <name>USB_OTG_HPRT_POCCHNG</name><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>hprt0</name> <operator>&amp;</operator> <name>USB_OTG_HPRT_PPWR</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>USBx_HPRT0</name> <operator>=</operator> <operator>(</operator><name>USB_OTG_HPRT_PPWR</name> <operator>|</operator> <name>hprt0</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>hprt0</name> <operator>&amp;</operator> <name>USB_OTG_HPRT_PPWR</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HPRT_PPWR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>USBx_HPRT0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>USB_OTG_HPRT_PPWR</name><operator>)</operator> <operator>&amp;</operator> <name>hprt0</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return Host Core speed
  * @param  USBx  Selected device
  * @retval speed : Host speed
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */</comment>
<function><type><name>uint32_t</name></type> <name>USB_GetHostSpeed</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>hprt0</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>hprt0</name> <operator>=</operator> <name>USBx_HPRT0</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><operator>(</operator><name>hprt0</name> <operator>&amp;</operator> <name>USB_OTG_HPRT_PSPD</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">17</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/</comment>
<function><type><name>uint32_t</name></type> <name>USB_GetCurrentFrame</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><operator>(</operator><name><name>USBx_HOST</name><operator>-&gt;</operator><name>HFNUM</name></name> <operator>&amp;</operator> <name>USB_OTG_HFNUM_FRNUM</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initialize a host channel
  * @param  USBx  Selected device
  * @param  ch_num  Channel number
  *         This parameter can be a value from 1 to 15
  * @param  epnum  Endpoint number
  *          This parameter can be a value from 1 to 15
  * @param  dev_address  Current device address
  *          This parameter can be a value from 0 to 255
  * @param  speed  Current device speed
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @param  ep_type  Endpoint Type
  *          This parameter can be one of these values:
  *            @arg EP_TYPE_CTRL: Control type
  *            @arg EP_TYPE_ISOC: Isochronous type
  *            @arg EP_TYPE_BULK: Bulk type
  *            @arg EP_TYPE_INTR: Interrupt type
  * @param  mps  Max Packet Size
  *          This parameter can be a value from 0 to32K
  * @retval HAL state
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_HC_Init</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>,
                              <parameter><decl><type><name>uint8_t</name></type> <name>ch_num</name></decl></parameter>,
                              <parameter><decl><type><name>uint8_t</name></type> <name>epnum</name></decl></parameter>,
                              <parameter><decl><type><name>uint8_t</name></type> <name>dev_address</name></decl></parameter>,
                              <parameter><decl><type><name>uint8_t</name></type> <name>speed</name></decl></parameter>,
                              <parameter><decl><type><name>uint8_t</name></type> <name>ep_type</name></decl></parameter>,
                              <parameter><decl><type><name>uint16_t</name></type> <name>mps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>ret</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>HCcharEpDir</name></decl>, <decl><type ref="prev"/><name>HCcharLowSpeed</name></decl>;</decl_stmt>

  <comment type="block">/* Clear old interrupt conditions for this host channel. */</comment>
  <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt>

  <comment type="block">/* Enable channel interrupts required for this transfer. */</comment>
  <switch>switch <condition>(<expr><name>ep_type</name></expr>)</condition>
  <block>{<block_content>
    <case>case <expr><name>EP_TYPE_CTRL</name></expr>:</case>
    <case>case <expr><name>EP_TYPE_BULK</name></expr>:</case>
      <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINTMSK</name> <operator>=</operator> <name>USB_OTG_HCINTMSK_XFRCM</name>  <operator>|</operator>
                                            <name>USB_OTG_HCINTMSK_STALLM</name> <operator>|</operator>
                                            <name>USB_OTG_HCINTMSK_TXERRM</name> <operator>|</operator>
                                            <name>USB_OTG_HCINTMSK_DTERRM</name> <operator>|</operator>
                                            <name>USB_OTG_HCINTMSK_AHBERR</name> <operator>|</operator>
                                            <name>USB_OTG_HCINTMSK_NAKM</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>epnum</name> <operator>&amp;</operator> <literal type="number">0x80U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINTMSK</name> <operator>|=</operator> <name>USB_OTG_HCINTMSK_BBERRM</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>USBx</name><operator>-&gt;</operator><name>CID</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x1U</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINTMSK</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_HCINTMSK_NYET</name> <operator>|</operator> <name>USB_OTG_HCINTMSK_ACKM</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><name>EP_TYPE_INTR</name></expr>:</case>
      <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINTMSK</name> <operator>=</operator> <name>USB_OTG_HCINTMSK_XFRCM</name>  <operator>|</operator>
                                            <name>USB_OTG_HCINTMSK_STALLM</name> <operator>|</operator>
                                            <name>USB_OTG_HCINTMSK_TXERRM</name> <operator>|</operator>
                                            <name>USB_OTG_HCINTMSK_DTERRM</name> <operator>|</operator>
                                            <name>USB_OTG_HCINTMSK_NAKM</name>   <operator>|</operator>
                                            <name>USB_OTG_HCINTMSK_AHBERR</name> <operator>|</operator>
                                            <name>USB_OTG_HCINTMSK_FRMORM</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>epnum</name> <operator>&amp;</operator> <literal type="number">0x80U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINTMSK</name> <operator>|=</operator> <name>USB_OTG_HCINTMSK_BBERRM</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>

    <case>case <expr><name>EP_TYPE_ISOC</name></expr>:</case>
      <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINTMSK</name> <operator>=</operator> <name>USB_OTG_HCINTMSK_XFRCM</name>  <operator>|</operator>
                                            <name>USB_OTG_HCINTMSK_ACKM</name>   <operator>|</operator>
                                            <name>USB_OTG_HCINTMSK_AHBERR</name> <operator>|</operator>
                                            <name>USB_OTG_HCINTMSK_FRMORM</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>epnum</name> <operator>&amp;</operator> <literal type="number">0x80U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINTMSK</name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_HCINTMSK_TXERRM</name> <operator>|</operator> <name>USB_OTG_HCINTMSK_BBERRM</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>

    <default>default:</default>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <comment type="block">/* Enable the top level host channel interrupt. */</comment>
  <expr_stmt><expr><name><name>USBx_HOST</name><operator>-&gt;</operator><name>HAINTMSK</name></name> <operator>|=</operator> <literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>ch_num</name> <operator>&amp;</operator> <literal type="number">0xFU</literal><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Make sure host channel interrupts are enabled. */</comment>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GINTMSK</name></name> <operator>|=</operator> <name>USB_OTG_GINTMSK_HCIM</name></expr>;</expr_stmt>

  <comment type="block">/* Program the HCCHAR register */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>epnum</name> <operator>&amp;</operator> <literal type="number">0x80U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>HCcharEpDir</name> <operator>=</operator> <operator>(</operator><literal type="number">0x1U</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <name>USB_OTG_HCCHAR_EPDIR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>HCcharEpDir</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>speed</name> <operator>==</operator> <name>HPRT0_PRTSPD_LOW_SPEED</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>HCcharLowSpeed</name> <operator>=</operator> <operator>(</operator><literal type="number">0x1U</literal> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>&amp;</operator> <name>USB_OTG_HCCHAR_LSDEV</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>HCcharLowSpeed</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>dev_address</name> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <name>USB_OTG_HCCHAR_DAD</name><operator>)</operator> <operator>|</operator>
                                      <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>epnum</name> <operator>&amp;</operator> <literal type="number">0x7FU</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <name>USB_OTG_HCCHAR_EPNUM</name><operator>)</operator> <operator>|</operator>
                                      <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ep_type</name> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <name>USB_OTG_HCCHAR_EPTYP</name><operator>)</operator> <operator>|</operator>
                                      <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>mps</name> <operator>&amp;</operator> <name>USB_OTG_HCCHAR_MPSIZ</name><operator>)</operator> <operator>|</operator> <name>HCcharEpDir</name> <operator>|</operator> <name>HCcharLowSpeed</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>ep_type</name> <operator>==</operator> <name>EP_TYPE_INTR</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>|=</operator> <name>USB_OTG_HCCHAR_ODDFRM</name></expr> ;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Start a transfer over a host channel
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @param  dma USB dma enabled or disabled
  *          This parameter can be one of these values:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_HC_StartXfer</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>USB_OTG_HCTypeDef</name> <modifier>*</modifier></type><name>hc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>dma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ch_num</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hc</name><operator>-&gt;</operator><name>ch_num</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>__IO</name> <name>uint32_t</name></type> <name>tmpreg</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>is_oddframe</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>len_words</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>num_packets</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>max_hc_pkt_count</name> <init>= <expr><literal type="number">256U</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>USBx</name><operator>-&gt;</operator><name>CID</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x1U</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hc</name><operator>-&gt;</operator><name>speed</name></name> <operator>==</operator> <name>USBH_HS_SPEED</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>dma</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hc</name><operator>-&gt;</operator><name>do_ping</name></name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_DoPing</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>, <argument><expr><name><name>hc</name><operator>-&gt;</operator><name>ch_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>HAL_OK</name></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>dma</name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINTMSK</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_HCINTMSK_NYET</name> <operator>|</operator> <name>USB_OTG_HCINTMSK_ACKM</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hc</name><operator>-&gt;</operator><name>do_ping</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* ... */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Compute the expected number of packets associated to the transfer */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hc</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>num_packets</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hc</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>+</operator> <name><name>hc</name><operator>-&gt;</operator><name>max_packet</name></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>/</operator> <name><name>hc</name><operator>-&gt;</operator><name>max_packet</name></name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>num_packets</name> <operator>&gt;</operator> <name>max_hc_pkt_count</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>num_packets</name> <operator>=</operator> <name>max_hc_pkt_count</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hc</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>num_packets</name> <operator>*</operator> <name><name>hc</name><operator>-&gt;</operator><name>max_packet</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>num_packets</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>hc</name><operator>-&gt;</operator><name>ep_is_in</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hc</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>num_packets</name> <operator>*</operator> <name><name>hc</name><operator>-&gt;</operator><name>max_packet</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Initialize the HCTSIZn register */</comment>
  <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCTSIZ</name> <operator>=</operator> <operator>(</operator><name><name>hc</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>&amp;</operator> <name>USB_OTG_HCTSIZ_XFRSIZ</name><operator>)</operator> <operator>|</operator>
                            <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>num_packets</name> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator> <operator>&amp;</operator> <name>USB_OTG_HCTSIZ_PKTCNT</name><operator>)</operator> <operator>|</operator>
                            <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hc</name><operator>-&gt;</operator><name>data_pid</name></name> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator> <operator>&amp;</operator> <name>USB_OTG_HCTSIZ_DPID</name><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>dma</name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* xfer_buff MUST be 32-bits aligned */</comment>
    <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCDMA</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hc</name><operator>-&gt;</operator><name>xfer_buff</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>is_oddframe</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>USBx_HOST</name><operator>-&gt;</operator><name>HFNUM</name></name> <operator>&amp;</operator> <literal type="number">0x01U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0U</literal></expr> </then><else>: <expr><literal type="number">1U</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_HCCHAR_ODDFRM</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>is_oddframe</name> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr>;</expr_stmt>

  <comment type="block">/* Set host channel enable */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmpreg</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_HCCHAR_CHDIS</name></expr>;</expr_stmt>

  <comment type="block">/* make sure to set the correct ep direction */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hc</name><operator>-&gt;</operator><name>ep_is_in</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmpreg</name> <operator>|=</operator> <name>USB_OTG_HCCHAR_EPDIR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>tmpreg</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_HCCHAR_EPDIR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>tmpreg</name> <operator>|=</operator> <name>USB_OTG_HCCHAR_CHENA</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>=</operator> <name>tmpreg</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>dma</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition> <comment type="block">/* Slave mode */</comment>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hc</name><operator>-&gt;</operator><name>ep_is_in</name></name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hc</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>&gt;</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <switch>switch <condition>(<expr><name><name>hc</name><operator>-&gt;</operator><name>ep_type</name></name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Non periodic transfer */</comment>
        <case>case <expr><name>EP_TYPE_CTRL</name></expr>:</case>
        <case>case <expr><name>EP_TYPE_BULK</name></expr>:</case>

          <expr_stmt><expr><name>len_words</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hc</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>+</operator> <literal type="number">3U</literal><operator>)</operator> <operator>/</operator> <literal type="number">4U</literal><operator>)</operator></expr>;</expr_stmt>

          <comment type="block">/* check if there is enough space in FIFO space */</comment>
          <if_stmt><if>if <condition>(<expr><name>len_words</name> <operator>&gt;</operator> <operator>(</operator><name><name>USBx</name><operator>-&gt;</operator><name>HNPTXSTS</name></name> <operator>&amp;</operator> <literal type="number">0xFFFFU</literal><operator>)</operator></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* need to process data in nptxfempty interrupt */</comment>
            <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GINTMSK</name></name> <operator>|=</operator> <name>USB_OTG_GINTMSK_NPTXFEM</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>

        <comment type="block">/* Periodic transfer */</comment>
        <case>case <expr><name>EP_TYPE_INTR</name></expr>:</case>
        <case>case <expr><name>EP_TYPE_ISOC</name></expr>:</case>
          <expr_stmt><expr><name>len_words</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hc</name><operator>-&gt;</operator><name>xfer_len</name></name> <operator>+</operator> <literal type="number">3U</literal><operator>)</operator> <operator>/</operator> <literal type="number">4U</literal><operator>)</operator></expr>;</expr_stmt>
          <comment type="block">/* check if there is enough space in FIFO space */</comment>
          <if_stmt><if>if <condition>(<expr><name>len_words</name> <operator>&gt;</operator> <operator>(</operator><name><name>USBx_HOST</name><operator>-&gt;</operator><name>HPTXSTS</name></name> <operator>&amp;</operator> <literal type="number">0xFFFFU</literal><operator>)</operator></expr>)</condition> <comment type="block">/* split the transfer */</comment>
          <block>{<block_content>
            <comment type="block">/* need to process data in ptxfempty interrupt */</comment>
            <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GINTMSK</name></name> <operator>|=</operator> <name>USB_OTG_GINTMSK_PTXFEM</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>

        <default>default:</default>
          <break>break;</break>
      </block_content>}</block></switch>

      <comment type="block">/* Write packet into the Tx FIFO. */</comment>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_WritePacket</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>, <argument><expr><name><name>hc</name><operator>-&gt;</operator><name>xfer_buff</name></name></expr></argument>, <argument><expr><name><name>hc</name><operator>-&gt;</operator><name>ch_num</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>hc</name><operator>-&gt;</operator><name>xfer_len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */</comment>
<function><type><name>uint32_t</name></type> <name>USB_HC_ReadInterrupt</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><operator>(</operator><operator>(</operator><name><name>USBx_HOST</name><operator>-&gt;</operator><name>HAINT</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFU</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Halt a host channel
  * @param  USBx  Selected device
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_HC_Halt</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>hc_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hcnum</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>hc_num</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>HcEpType</name> <init>= <expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>hcnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>&amp;</operator> <name>USB_OTG_HCCHAR_EPTYP</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check for space in the request queue to issue the halt. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>HcEpType</name> <operator>==</operator> <name>HCCHAR_CTRL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>HcEpType</name> <operator>==</operator> <name>HCCHAR_BULK</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>hcnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>|=</operator> <name>USB_OTG_HCCHAR_CHDIS</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>USBx</name><operator>-&gt;</operator><name>HNPTXSTS</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xFFU</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>hcnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_HCCHAR_CHENA</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>hcnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>|=</operator> <name>USB_OTG_HCCHAR_CHENA</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>hcnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_HCCHAR_EPDIR</name></expr>;</expr_stmt>
      <do>do
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>++</operator><name>count</name> <operator>&gt;</operator> <literal type="number">1000U</literal></expr>)</condition>
        <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block>
      while <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>hcnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>&amp;</operator> <name>USB_OTG_HCCHAR_CHENA</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCCHAR_CHENA</name></expr>)</condition>;</do>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>hcnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>|=</operator> <name>USB_OTG_HCCHAR_CHENA</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>hcnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>|=</operator> <name>USB_OTG_HCCHAR_CHDIS</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>USBx_HOST</name><operator>-&gt;</operator><name>HPTXSTS</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xFFU</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>hcnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_HCCHAR_CHENA</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>hcnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>|=</operator> <name>USB_OTG_HCCHAR_CHENA</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>hcnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_HCCHAR_EPDIR</name></expr>;</expr_stmt>
      <do>do
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>++</operator><name>count</name> <operator>&gt;</operator> <literal type="number">1000U</literal></expr>)</condition>
        <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block>
      while <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>hcnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>&amp;</operator> <name>USB_OTG_HCCHAR_CHENA</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCCHAR_CHENA</name></expr>)</condition>;</do>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>hcnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>|=</operator> <name>USB_OTG_HCCHAR_CHENA</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initiate Do Ping protocol
  * @param  USBx  Selected device
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_DoPing</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>ch_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>chnum</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ch_num</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>num_packets</name> <init>= <expr><literal type="number">1U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>chnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCTSIZ</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>num_packets</name> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator> <operator>&amp;</operator> <name>USB_OTG_HCTSIZ_PKTCNT</name><operator>)</operator> <operator>|</operator>
                           <name>USB_OTG_HCTSIZ_DOPING</name></expr>;</expr_stmt>

  <comment type="block">/* Set host channel enable */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <call><name>USBx_HC</name><argument_list>(<argument><expr><name>chnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmpreg</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_HCCHAR_CHDIS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmpreg</name> <operator>|=</operator> <name>USB_OTG_HCCHAR_CHENA</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>chnum</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>=</operator> <name>tmpreg</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_StopHost</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>


  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_DisableGlobalInt</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Flush FIFO */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_FlushTxFifo</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>, <argument><expr><literal type="number">0x10U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_FlushRxFifo</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Flush out any leftover queued requests. */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">15U</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>USBx_HC</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>value</name> <operator>|=</operator>  <name>USB_OTG_HCCHAR_CHDIS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>value</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_HCCHAR_CHENA</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>value</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_HCCHAR_EPDIR</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Halt all channels to put them into a known state. */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">15U</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>USBx_HC</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>value</name> <operator>|=</operator> <name>USB_OTG_HCCHAR_CHDIS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>value</name> <operator>|=</operator> <name>USB_OTG_HCCHAR_CHENA</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>value</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_HCCHAR_EPDIR</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

    <do>do
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>++</operator><name>count</name> <operator>&gt;</operator> <literal type="number">1000U</literal></expr>)</condition>
      <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    while <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>&amp;</operator> <name>USB_OTG_HCCHAR_CHENA</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCCHAR_CHENA</name></expr>)</condition>;</do>
  </block_content>}</block></for>

  <comment type="block">/* Clear any pending Host interrupts */</comment>
  <expr_stmt><expr><name><name>USBx_HOST</name><operator>-&gt;</operator><name>HAINT</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GINTSTS</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_EnableGlobalInt</name><argument_list>(<argument><expr><name>USBx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_ActivateRemoteWakeup active remote wakeup signalling
  * @param  USBx Selected device
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_ActivateRemoteWakeup</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DSTS</name></name> <operator>&amp;</operator> <name>USB_OTG_DSTS_SUSPSTS</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_DSTS_SUSPSTS</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* active Remote wakeup signalling */</comment>
    <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DCTL</name></name> <operator>|=</operator> <name>USB_OTG_DCTL_RWUSIG</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  USB_DeActivateRemoteWakeup de-active remote wakeup signalling
  * @param  USBx Selected device
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>USB_DeActivateRemoteWakeup</name><parameter_list>(<parameter><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* active Remote wakeup signalling */</comment>
  <expr_stmt><expr><name><name>USBx_DEVICE</name><operator>-&gt;</operator><name>DCTL</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_DCTL_RWUSIG</name><operator>)</operator></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined (USB_OTG_FS) || defined (USB_OTG_HS) */</comment>


<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined (USB_OTG_FS) || defined (USB_OTG_HS) */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined (HAL_PCD_MODULE_ENABLED) || defined (HAL_HCD_MODULE_ENABLED) */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
