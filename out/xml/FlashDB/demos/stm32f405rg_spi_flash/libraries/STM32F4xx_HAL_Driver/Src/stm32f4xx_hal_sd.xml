<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_sd.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_sd.c
  * @author  MCD Application Team
  * @brief   SD card HAL module driver.
  *          This file provides firmware functions to manage the following 
  *          functionalities of the Secure Digital (SD) peripheral:
  *           + Initialization and de-initialization functions
  *           + IO operation functions
  *           + Peripheral Control functions 
  *           + SD card Control functions
  *         
  @verbatim
  ==============================================================================
                        ##### How to use this driver #####
  ==============================================================================
  [..]
    This driver implements a high level communication layer for read and write from/to 
    this memory. The needed STM32 hardware resources (SDIO and GPIO) are performed by 
    the user in HAL_SD_MspInit() function (MSP layer).                             
    Basically, the MSP layer configuration should be the same as we provide in the 
    examples.
    You can easily tailor this configuration according to hardware resources.

  [..]
    This driver is a generic layered driver for SDIO memories which uses the HAL 
    SDIO driver functions to interface with SD and uSD cards devices. 
    It is used as follows:
 
    (#)Initialize the SDIO low level resources by implement the HAL_SD_MspInit() API:
        (##) Enable the SDIO interface clock using __HAL_RCC_SDIO_CLK_ENABLE(); 
        (##) SDIO pins configuration for SD card
            (+++) Enable the clock for the SDIO GPIOs using the functions __HAL_RCC_GPIOx_CLK_ENABLE();   
            (+++) Configure these SDIO pins as alternate function pull-up using HAL_GPIO_Init()
                  and according to your pin assignment;
        (##) DMA Configuration if you need to use DMA process (HAL_SD_ReadBlocks_DMA()
             and HAL_SD_WriteBlocks_DMA() APIs).
            (+++) Enable the DMAx interface clock using __HAL_RCC_DMAx_CLK_ENABLE(); 
            (+++) Configure the DMA using the function HAL_DMA_Init() with predeclared and filled. 
        (##) NVIC configuration if you need to use interrupt process when using DMA transfer.
            (+++) Configure the SDIO and DMA interrupt priorities using functions
                  HAL_NVIC_SetPriority(); DMA priority is superior to SDIO's priority
            (+++) Enable the NVIC DMA and SDIO IRQs using function HAL_NVIC_EnableIRQ()
            (+++) SDIO interrupts are managed using the macros __HAL_SD_ENABLE_IT() 
                  and __HAL_SD_DISABLE_IT() inside the communication process.
            (+++) SDIO interrupts pending bits are managed using the macros __HAL_SD_GET_IT()
                  and __HAL_SD_CLEAR_IT()
        (##) NVIC configuration if you need to use interrupt process (HAL_SD_ReadBlocks_IT()
             and HAL_SD_WriteBlocks_IT() APIs).
            (+++) Configure the SDIO interrupt priorities using function
                  HAL_NVIC_SetPriority();
            (+++) Enable the NVIC SDIO IRQs using function HAL_NVIC_EnableIRQ()
            (+++) SDIO interrupts are managed using the macros __HAL_SD_ENABLE_IT() 
                  and __HAL_SD_DISABLE_IT() inside the communication process.
            (+++) SDIO interrupts pending bits are managed using the macros __HAL_SD_GET_IT()
                  and __HAL_SD_CLEAR_IT()
    (#) At this stage, you can perform SD read/write/erase operations after SD card initialization  

         
  *** SD Card Initialization and configuration ***
  ================================================    
  [..]
    To initialize the SD Card, use the HAL_SD_Init() function. It Initializes 
    SDIO IP(STM32 side) and the SD Card, and put it into StandBy State (Ready for data transfer). 
    This function provide the following operations:

    (#) Initialize the SDIO peripheral interface with defaullt configuration.
        The initialization process is done at 400KHz. You can change or adapt 
        this frequency by adjusting the "ClockDiv" field. 
        The SD Card frequency (SDIO_CK) is computed as follows:
  
           SDIO_CK = SDIOCLK / (ClockDiv + 2)
  
        In initialization mode and according to the SD Card standard, 
        make sure that the SDIO_CK frequency doesn't exceed 400KHz.

        This phase of initialization is done through SDIO_Init() and 
        SDIO_PowerState_ON() SDIO low level APIs.

    (#) Initialize the SD card. The API used is HAL_SD_InitCard().
        This phase allows the card initialization and identification 
        and check the SD Card type (Standard Capacity or High Capacity)
        The initialization flow is compatible with SD standard.

        This API (HAL_SD_InitCard()) could be used also to reinitialize the card in case 
        of plug-off plug-in.
  
    (#) Configure the SD Card Data transfer frequency. By Default, the card transfer 
        frequency is set to 24MHz. You can change or adapt this frequency by adjusting 
        the "ClockDiv" field.
        In transfer mode and according to the SD Card standard, make sure that the 
        SDIO_CK frequency doesn't exceed 25MHz and 50MHz in High-speed mode switch.
        To be able to use a frequency higher than 24MHz, you should use the SDIO 
        peripheral in bypass mode. Refer to the corresponding reference manual 
        for more details.
  
    (#) Select the corresponding SD Card according to the address read with the step 2.
    
    (#) Configure the SD Card in wide bus mode: 4-bits data.
  
  *** SD Card Read operation ***
  ==============================
  [..] 
    (+) You can read from SD card in polling mode by using function HAL_SD_ReadBlocks(). 
        This function allows the read of 512 bytes blocks.
        You can choose either one block read operation or multiple block read operation 
        by adjusting the "NumberOfBlocks" parameter.
        After this, you have to ensure that the transfer is done correctly. The check is done
        through HAL_SD_GetCardState() function for SD card state.

    (+) You can read from SD card in DMA mode by using function HAL_SD_ReadBlocks_DMA().
        This function allows the read of 512 bytes blocks.
        You can choose either one block read operation or multiple block read operation 
        by adjusting the "NumberOfBlocks" parameter.
        After this, you have to ensure that the transfer is done correctly. The check is done
        through HAL_SD_GetCardState() function for SD card state.
        You could also check the DMA transfer process through the SD Rx interrupt event.

    (+) You can read from SD card in Interrupt mode by using function HAL_SD_ReadBlocks_IT().
        This function allows the read of 512 bytes blocks.
        You can choose either one block read operation or multiple block read operation 
        by adjusting the "NumberOfBlocks" parameter.
        After this, you have to ensure that the transfer is done correctly. The check is done
        through HAL_SD_GetCardState() function for SD card state.
        You could also check the IT transfer process through the SD Rx interrupt event.
  
  *** SD Card Write operation ***
  =============================== 
  [..] 
    (+) You can write to SD card in polling mode by using function HAL_SD_WriteBlocks(). 
        This function allows the read of 512 bytes blocks.
        You can choose either one block read operation or multiple block read operation 
        by adjusting the "NumberOfBlocks" parameter.
        After this, you have to ensure that the transfer is done correctly. The check is done
        through HAL_SD_GetCardState() function for SD card state.

    (+) You can write to SD card in DMA mode by using function HAL_SD_WriteBlocks_DMA().
        This function allows the read of 512 bytes blocks.
        You can choose either one block read operation or multiple block read operation 
        by adjusting the "NumberOfBlocks" parameter.
        After this, you have to ensure that the transfer is done correctly. The check is done
        through HAL_SD_GetCardState() function for SD card state.
        You could also check the DMA transfer process through the SD Tx interrupt event.  

    (+) You can write to SD card in Interrupt mode by using function HAL_SD_WriteBlocks_IT().
        This function allows the read of 512 bytes blocks.
        You can choose either one block read operation or multiple block read operation 
        by adjusting the "NumberOfBlocks" parameter.
        After this, you have to ensure that the transfer is done correctly. The check is done
        through HAL_SD_GetCardState() function for SD card state.
        You could also check the IT transfer process through the SD Tx interrupt event.
  
  *** SD card status ***
  ====================== 
  [..]
    (+) The SD Status contains status bits that are related to the SD Memory 
        Card proprietary features. To get SD card status use the HAL_SD_GetCardStatus().

  *** SD card information ***
  =========================== 
  [..]
    (+) To get SD card information, you can use the function HAL_SD_GetCardInfo().
        It returns useful information about the SD card such as block size, card type,
        block number ...

  *** SD card CSD register ***
  ============================
  [..]
    (+) The HAL_SD_GetCardCSD() API allows to get the parameters of the CSD register.
        Some of the CSD parameters are useful for card initialization and identification.

  *** SD card CID register ***
  ============================
  [..]
    (+) The HAL_SD_GetCardCID() API allows to get the parameters of the CID register.
        Some of the CSD parameters are useful for card initialization and identification.

  *** SD HAL driver macros list ***
  ==================================
  [..]
    Below the list of most used macros in SD HAL driver.
       
    (+) __HAL_SD_ENABLE : Enable the SD device
    (+) __HAL_SD_DISABLE : Disable the SD device
    (+) __HAL_SD_DMA_ENABLE: Enable the SDIO DMA transfer
    (+) __HAL_SD_DMA_DISABLE: Disable the SDIO DMA transfer
    (+) __HAL_SD_ENABLE_IT: Enable the SD device interrupt
    (+) __HAL_SD_DISABLE_IT: Disable the SD device interrupt
    (+) __HAL_SD_GET_FLAG:Check whether the specified SD flag is set or not
    (+) __HAL_SD_CLEAR_FLAG: Clear the SD's pending flags

   [..]
    (@) You can refer to the SD HAL driver header file for more useful macros 
      
  *** Callback registration ***
  =============================================
  [..]
    The compilation define USE_HAL_SD_REGISTER_CALLBACKS when set to 1
    allows the user to configure dynamically the driver callbacks.

    Use Functions @ref HAL_SD_RegisterCallback() to register a user callback,
    it allows to register following callbacks:
      (+) TxCpltCallback : callback when a transmission transfer is completed.
      (+) RxCpltCallback : callback when a reception transfer is completed.
      (+) ErrorCallback : callback when error occurs.
      (+) AbortCpltCallback : callback when abort is completed.
      (+) MspInitCallback    : SD MspInit.
      (+) MspDeInitCallback  : SD MspDeInit.
    This function takes as parameters the HAL peripheral handle, the Callback ID
    and a pointer to the user callback function.

    Use function @ref HAL_SD_UnRegisterCallback() to reset a callback to the default
    weak (surcharged) function. It allows to reset following callbacks:
      (+) TxCpltCallback : callback when a transmission transfer is completed.
      (+) RxCpltCallback : callback when a reception transfer is completed.
      (+) ErrorCallback : callback when error occurs.
      (+) AbortCpltCallback : callback when abort is completed.
      (+) MspInitCallback    : SD MspInit.
      (+) MspDeInitCallback  : SD MspDeInit.
    This function) takes as parameters the HAL peripheral handle and the Callback ID.

    By default, after the @ref HAL_SD_Init and if the state is HAL_SD_STATE_RESET
    all callbacks are reset to the corresponding legacy weak (surcharged) functions.
    Exception done for MspInit and MspDeInit callbacks that are respectively
    reset to the legacy weak (surcharged) functions in the @ref HAL_SD_Init 
    and @ref  HAL_SD_DeInit only when these callbacks are null (not registered beforehand).
    If not, MspInit or MspDeInit are not null, the @ref HAL_SD_Init and @ref HAL_SD_DeInit
    keep and use the user MspInit/MspDeInit callbacks (registered beforehand)

    Callbacks can be registered/unregistered in READY state only.
    Exception done for MspInit/MspDeInit callbacks that can be registered/unregistered
    in READY or RESET state, thus registered (user) MspInit/DeInit callbacks can be used
    during the Init/DeInit.
    In that case first register the MspInit/MspDeInit user callbacks
    using @ref HAL_SD_RegisterCallback before calling @ref HAL_SD_DeInit 
    or @ref HAL_SD_Init function.

    When The compilation define USE_HAL_SD_REGISTER_CALLBACKS is set to 0 or
    not defined, the callback registering feature is not available 
    and weak (surcharged) callbacks are used.

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment> 

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup SD 
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_SD_MODULE_ENABLED</name></cpp:ifdef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F405xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F415xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F407xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F417xx</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F401xC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F401xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F411xE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Cx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup SD_Private_Defines
  * @{
  */</comment>
    
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
  
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup SD_Private_Functions SD Private Functions
  * @{
  */</comment>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>SD_InitCard</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>SD_PowerON</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>;</function_decl>                      
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>SD_SendSDStatus</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pSDstatus</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>SD_SendStatus</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pCardStatus</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>SD_WideBus_Enable</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>SD_WideBus_Disable</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>SD_FindSCR</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pSCR</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>SD_PowerOFF</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>SD_Write_IT</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>SD_Read_IT</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SD_DMATransmitCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SD_DMAReceiveCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SD_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SD_DMATxAbort</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SD_DMARxAbort</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup SD_Exported_Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup SD_Exported_Functions_Group1
 *  @brief   Initialization and de-initialization functions 
 *
@verbatim    
  ==============================================================================
          ##### Initialization and de-initialization functions #####
  ==============================================================================
  [..]  
    This section provides functions allowing to initialize/de-initialize the SD
    card device to be ready for use.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the SD according to the specified parameters in the 
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SD_Init</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the SD handle allocation */</comment>
  <if_stmt><if>if<condition>(<expr><name>hsd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SDIO_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SDIO_CLOCK_EDGE</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockEdge</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SDIO_CLOCK_BYPASS</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockBypass</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SDIO_CLOCK_POWER_SAVE</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockPowerSave</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SDIO_BUS_WIDE</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BusWide</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SDIO_HARDWARE_FLOW_CONTROL</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HardwareFlowControl</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SDIO_CLKDIV</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockDiv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SD_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/* Reset Callback pointers in HAL_SD_STATE_RESET only */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>TxCpltCallback</name></name>    <operator>=</operator> <name>HAL_SD_TxCpltCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>RxCpltCallback</name></name>    <operator>=</operator> <name>HAL_SD_RxCpltCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCallback</name></name>     <operator>=</operator> <name>HAL_SD_ErrorCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name> <operator>=</operator> <name>HAL_SD_AbortCallback</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_SD_MspInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>hsd</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */</comment>
    <expr_stmt><expr><call><name>HAL_SD_MspInit</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Initialize the Card parameters */</comment>
  <expr_stmt><expr><call><name>HAL_SD_InitCard</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize the error code */</comment>
  <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_NONE</name></expr>;</expr_stmt>
  
  <comment type="block">/* Initialize the SD operation */</comment>
  <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>=</operator> <name>SD_CONTEXT_NONE</name></expr>;</expr_stmt>
                                                                                     
  <comment type="block">/* Initialize the SD state */</comment>
  <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the SD Card.
  * @param  hsd Pointer to SD handle
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SD_InitCard</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SD_InitTypeDef</name></type> <name>Init</name></decl>;</decl_stmt>
  
  <comment type="block">/* Default SDIO peripheral configuration for SD card initialization */</comment>
  <expr_stmt><expr><name><name>Init</name><operator>.</operator><name>ClockEdge</name></name>           <operator>=</operator> <name>SDIO_CLOCK_EDGE_RISING</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>Init</name><operator>.</operator><name>ClockBypass</name></name>         <operator>=</operator> <name>SDIO_CLOCK_BYPASS_DISABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>Init</name><operator>.</operator><name>ClockPowerSave</name></name>      <operator>=</operator> <name>SDIO_CLOCK_POWER_SAVE_DISABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>Init</name><operator>.</operator><name>BusWide</name></name>             <operator>=</operator> <name>SDIO_BUS_WIDE_1B</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>Init</name><operator>.</operator><name>HardwareFlowControl</name></name> <operator>=</operator> <name>SDIO_HARDWARE_FLOW_CONTROL_DISABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>Init</name><operator>.</operator><name>ClockDiv</name></name>            <operator>=</operator> <name>SDIO_INIT_CLK_DIV</name></expr>;</expr_stmt>

  <comment type="block">/* Initialize SDIO peripheral interface with default configuration */</comment>
  <expr_stmt><expr><call><name>SDIO_Init</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable SDIO Clock */</comment>
  <expr_stmt><expr><call><name>__HAL_SD_DISABLE</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <comment type="block">/* Set Power State to ON */</comment>
  <expr_stmt><expr><call><name>SDIO_PowerState_ON</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Enable SDIO Clock */</comment>
  <expr_stmt><expr><call><name>__HAL_SD_ENABLE</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Required power up waiting time before starting the SD initialization 
  sequence */</comment>
  <expr_stmt><expr><call><name>HAL_Delay</name><argument_list>(<argument><expr><literal type="number">2U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Identify card operating voltage */</comment>
  <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SD_PowerON</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Card initialization */</comment>
  <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SD_InitCard</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  De-Initializes the SD card.
  * @param  hsd Pointer to SD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SD_DeInit</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the SD handle allocation */</comment>
  <if_stmt><if>if<condition>(<expr><name>hsd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SDIO_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_BUSY</name></expr>;</expr_stmt>
  
  <comment type="block">/* Set SD power state to off */</comment> 
  <expr_stmt><expr><call><name>SD_PowerOFF</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_SD_MspDeInit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name><name>hsd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* De-Initialize the MSP layer */</comment>
  <expr_stmt><expr><call><name>HAL_SD_MspDeInit</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SD_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_RESET</name></expr>;</expr_stmt>
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  Initializes the SD MSP.
  * @param  hsd Pointer to SD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SD_MspInit</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  De-Initialize SD MSP.
  * @param  hsd Pointer to SD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SD_MspDeInit</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_MspDeInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup SD_Exported_Functions_Group2
 *  @brief   Data transfer functions 
 *
@verbatim   
  ==============================================================================
                        ##### IO operation functions #####
  ==============================================================================  
  [..]
    This subsection provides a set of functions allowing to manage the data 
    transfer from/to SD card.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Reads block(s) from a specified address in a card. The Data transfer 
  *         is managed by polling mode.
  * @note   This API should be followed by a check on the card state through
  *         HAL_SD_GetCardState().
  * @param  hsd Pointer to SD handle
  * @param  pData pointer to the buffer that will contain the received data
  * @param  BlockAdd Block Address from where data is to be read 
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SD_ReadBlocks</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BlockAdd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>NumberOfBlocks</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SDIO_DataInitTypeDef</name></type> <name>config</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tempbuff</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>pData</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>pData</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_PARAM</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
 
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_NONE</name></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>BlockAdd</name> <operator>+</operator> <name>NumberOfBlocks</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>LogBlockNbr</name></name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_ADDR_OUT_OF_RANGE</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_BUSY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Initialize data control register */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DCTRL</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name> <operator>!=</operator> <name>CARD_SDHC_SDXC</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>BlockAdd</name> <operator>*=</operator> <literal type="number">512U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
      
    <comment type="block">/* Set Block Size for Card */</comment>
    <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdBlockLength</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Configure the SD DPSM (Data Path State Machine) */</comment>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataTimeOut</name></name>   <operator>=</operator> <name>SDMMC_DATATIMEOUT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataLength</name></name>    <operator>=</operator> <name>NumberOfBlocks</name> <operator>*</operator> <name>BLOCKSIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataBlockSize</name></name> <operator>=</operator> <name>SDIO_DATABLOCK_SIZE_512B</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>TransferDir</name></name>   <operator>=</operator> <name>SDIO_TRANSFER_DIR_TO_SDIO</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>TransferMode</name></name>  <operator>=</operator> <name>SDIO_TRANSFER_MODE_BLOCK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DPSM</name></name>          <operator>=</operator> <name>SDIO_DPSM_ENABLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SDIO_ConfigData</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Read block(s) in polling mode */</comment>
    <if_stmt><if>if<condition>(<expr><name>NumberOfBlocks</name> <operator>&gt;</operator> <literal type="number">1U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>=</operator> <name>SD_CONTEXT_READ_MULTIPLE_BLOCK</name></expr>;</expr_stmt>
      
      <comment type="block">/* Read Multi Block command */</comment> 
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdReadMultiBlock</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BlockAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>=</operator> <name>SD_CONTEXT_READ_SINGLE_BLOCK</name></expr>;</expr_stmt>
      
      <comment type="block">/* Read Single Block command */</comment>
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdReadSingleBlock</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BlockAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
      
    <comment type="block">/* Poll on SDIO flags */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SDIO_STA_STBITERR</name></cpp:ifdef>
    <while>while<condition>(<expr><operator>!</operator><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_RXOVERR</name> <operator>|</operator> <name>SDIO_FLAG_DCRCFAIL</name> <operator>|</operator> <name>SDIO_FLAG_DTIMEOUT</name> <operator>|</operator> <name>SDIO_FLAG_DATAEND</name> <operator>|</operator> <name>SDIO_STA_STBITERR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SDIO_STA_STBITERR not defined */</comment>
    <while>while<condition>(<expr><operator>!</operator><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_RXOVERR</name> <operator>|</operator> <name>SDIO_FLAG_DCRCFAIL</name> <operator>|</operator> <name>SDIO_FLAG_DTIMEOUT</name> <operator>|</operator> <name>SDIO_FLAG_DATAEND</name></expr></argument>)</argument_list></call></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SDIO_STA_STBITERR */</comment>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_RXFIFOHF</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Read data from SDIO Rx FIFO */</comment>
        <for>for<control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <literal type="number">8U</literal></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name>tempbuff</name> <operator>+</operator> <name>count</name><operator>)</operator> <operator>=</operator> <call><name>SDIO_ReadFIFO</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>tempbuff</name> <operator>+=</operator> <literal type="number">8U</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator><operator>||</operator><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call><operator>-</operator><name>tickstart</name><operator>)</operator> <operator>&gt;=</operator>  <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Clear all the static flags */</comment>
        <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while></block_content></block></while>
    
    <comment type="block">/* Send stop transmission command in case of multiblock read */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_DATAEND</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>NumberOfBlocks</name> <operator>&gt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>    
      <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name> <operator>!=</operator> <name>CARD_SECURED</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Send stop transmission command */</comment>
        <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdStopTransfer</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Clear all the static flags */</comment>
          <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Get error state */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_DTIMEOUT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_DATA_TIMEOUT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_DCRCFAIL</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_DATA_CRC_FAIL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_RXOVERR</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_RX_OVERRUN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Empty FIFO if there is still any data */</comment>
    <while>while <condition>(<expr><operator>(</operator><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_RXDAVL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tempbuff</name> <operator>=</operator> <call><name>SDIO_ReadFIFO</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tempbuff</name><operator>++</operator></expr>;</expr_stmt>
      
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator><operator>||</operator><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call><operator>-</operator><name>tickstart</name><operator>)</operator> <operator>&gt;=</operator>  <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Clear all the static flags */</comment>
        <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    
    <comment type="block">/* Clear all the static flags */</comment>
    <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
    
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_BUSY</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Allows to write block(s) to a specified address in a card. The Data
  *         transfer is managed by polling mode.
  * @note   This API should be followed by a check on the card state through
  *         HAL_SD_GetCardState().
  * @param  hsd Pointer to SD handle
  * @param  pData pointer to the buffer that will contain the data to transmit
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SD_WriteBlocks</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BlockAdd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>NumberOfBlocks</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SDIO_DataInitTypeDef</name></type> <name>config</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tempbuff</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>pData</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>pData</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_PARAM</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_NONE</name></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>BlockAdd</name> <operator>+</operator> <name>NumberOfBlocks</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>LogBlockNbr</name></name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_ADDR_OUT_OF_RANGE</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_BUSY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Initialize data control register */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DCTRL</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
     
    <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name> <operator>!=</operator> <name>CARD_SDHC_SDXC</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>BlockAdd</name> <operator>*=</operator> <literal type="number">512U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Set Block Size for Card */</comment> 
    <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdBlockLength</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Write Blocks in Polling mode */</comment>
    <if_stmt><if>if<condition>(<expr><name>NumberOfBlocks</name> <operator>&gt;</operator> <literal type="number">1U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>=</operator> <name>SD_CONTEXT_WRITE_MULTIPLE_BLOCK</name></expr>;</expr_stmt>
      
      <comment type="block">/* Write Multi Block command */</comment> 
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdWriteMultiBlock</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BlockAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>=</operator> <name>SD_CONTEXT_WRITE_SINGLE_BLOCK</name></expr>;</expr_stmt>
      
      <comment type="block">/* Write Single Block command */</comment>
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdWriteSingleBlock</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BlockAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Configure the SD DPSM (Data Path State Machine) */</comment> 
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataTimeOut</name></name>   <operator>=</operator> <name>SDMMC_DATATIMEOUT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataLength</name></name>    <operator>=</operator> <name>NumberOfBlocks</name> <operator>*</operator> <name>BLOCKSIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataBlockSize</name></name> <operator>=</operator> <name>SDIO_DATABLOCK_SIZE_512B</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>TransferDir</name></name>   <operator>=</operator> <name>SDIO_TRANSFER_DIR_TO_CARD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>TransferMode</name></name>  <operator>=</operator> <name>SDIO_TRANSFER_MODE_BLOCK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DPSM</name></name>          <operator>=</operator> <name>SDIO_DPSM_ENABLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SDIO_ConfigData</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Write block(s) in polling mode */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SDIO_STA_STBITERR</name></cpp:ifdef>
    <while>while<condition>(<expr><operator>!</operator><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_TXUNDERR</name> <operator>|</operator> <name>SDIO_FLAG_DCRCFAIL</name> <operator>|</operator> <name>SDIO_FLAG_DTIMEOUT</name> <operator>|</operator> <name>SDIO_FLAG_DATAEND</name> <operator>|</operator> <name>SDIO_FLAG_STBITERR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SDIO_STA_STBITERR not defined */</comment>
    <while>while<condition>(<expr><operator>!</operator><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_TXUNDERR</name> <operator>|</operator> <name>SDIO_FLAG_DCRCFAIL</name> <operator>|</operator> <name>SDIO_FLAG_DTIMEOUT</name> <operator>|</operator> <name>SDIO_FLAG_DATAEND</name></expr></argument>)</argument_list></call></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SDIO_STA_STBITERR */</comment>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_TXFIFOHE</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Write data to SDIO Tx FIFO */</comment>
        <for>for<control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <literal type="number">8U</literal></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
          <expr_stmt><expr><call><name>SDIO_WriteFIFO</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>tempbuff</name> <operator>+</operator> <name>count</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>tempbuff</name> <operator>+=</operator> <literal type="number">8U</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator><operator>||</operator><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call><operator>-</operator><name>tickstart</name><operator>)</operator> <operator>&gt;=</operator>  <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Clear all the static flags */</comment>
        <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while></block_content></block></while>
    
    <comment type="block">/* Send stop transmission command in case of multiblock write */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_DATAEND</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>NumberOfBlocks</name> <operator>&gt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
      <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name> <operator>!=</operator> <name>CARD_SECURED</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Send stop transmission command */</comment>
        <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdStopTransfer</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Clear all the static flags */</comment>
          <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
          <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Get error state */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_DTIMEOUT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_DATA_TIMEOUT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_DCRCFAIL</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_DATA_CRC_FAIL</name></expr>;</expr_stmt>      
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_TXUNDERR</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_TX_UNDERRUN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Clear all the static flags */</comment>
    <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
    
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_BUSY</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Reads block(s) from a specified address in a card. The Data transfer 
  *         is managed in interrupt mode. 
  * @note   This API should be followed by a check on the card state through
  *         HAL_SD_GetCardState().
  * @note   You could also check the IT transfer process through the SD Rx 
  *         interrupt event.
  * @param  hsd Pointer to SD handle                 
  * @param  pData Pointer to the buffer that will contain the received data
  * @param  BlockAdd Block Address from where data is to be read 
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SD_ReadBlocks_IT</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BlockAdd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>NumberOfBlocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SDIO_DataInitTypeDef</name></type> <name>config</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>pData</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_PARAM</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_NONE</name></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>BlockAdd</name> <operator>+</operator> <name>NumberOfBlocks</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>LogBlockNbr</name></name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_ADDR_OUT_OF_RANGE</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_BUSY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Initialize data control register */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DCTRL</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <name>BLOCKSIZE</name> <operator>*</operator> <name>NumberOfBlocks</name></expr>;</expr_stmt>
    
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SDIO_STA_STBITERR</name></cpp:ifdef>
    <expr_stmt><expr><call><name>__HAL_SD_ENABLE_IT</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><operator>(</operator><name>SDIO_IT_DCRCFAIL</name> <operator>|</operator> <name>SDIO_IT_DTIMEOUT</name> <operator>|</operator> <name>SDIO_IT_RXOVERR</name> <operator>|</operator> <name>SDIO_IT_DATAEND</name> <operator>|</operator> <name>SDIO_FLAG_RXFIFOHF</name> <operator>|</operator> <name>SDIO_IT_STBITERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SDIO_STA_STBITERR not defined */</comment>
    <expr_stmt><expr><call><name>__HAL_SD_ENABLE_IT</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><operator>(</operator><name>SDIO_IT_DCRCFAIL</name> <operator>|</operator> <name>SDIO_IT_DTIMEOUT</name> <operator>|</operator> <name>SDIO_IT_RXOVERR</name> <operator>|</operator> <name>SDIO_IT_DATAEND</name> <operator>|</operator> <name>SDIO_FLAG_RXFIFOHF</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SDIO_STA_STBITERR */</comment>
    
    <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name> <operator>!=</operator> <name>CARD_SDHC_SDXC</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>BlockAdd</name> <operator>*=</operator> <literal type="number">512U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Configure the SD DPSM (Data Path State Machine) */</comment> 
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataTimeOut</name></name>   <operator>=</operator> <name>SDMMC_DATATIMEOUT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataLength</name></name>    <operator>=</operator> <name>BLOCKSIZE</name> <operator>*</operator> <name>NumberOfBlocks</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataBlockSize</name></name> <operator>=</operator> <name>SDIO_DATABLOCK_SIZE_512B</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>TransferDir</name></name>   <operator>=</operator> <name>SDIO_TRANSFER_DIR_TO_SDIO</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>TransferMode</name></name>  <operator>=</operator> <name>SDIO_TRANSFER_MODE_BLOCK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DPSM</name></name>          <operator>=</operator> <name>SDIO_DPSM_ENABLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SDIO_ConfigData</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Set Block Size for Card */</comment> 
    <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdBlockLength</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Read Blocks in IT mode */</comment>
    <if_stmt><if>if<condition>(<expr><name>NumberOfBlocks</name> <operator>&gt;</operator> <literal type="number">1U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>=</operator> <operator>(</operator><name>SD_CONTEXT_READ_MULTIPLE_BLOCK</name> <operator>|</operator> <name>SD_CONTEXT_IT</name><operator>)</operator></expr>;</expr_stmt>
      
      <comment type="block">/* Read Multi Block command */</comment>
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdReadMultiBlock</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BlockAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>=</operator> <operator>(</operator><name>SD_CONTEXT_READ_SINGLE_BLOCK</name> <operator>|</operator> <name>SD_CONTEXT_IT</name><operator>)</operator></expr>;</expr_stmt>
      
      <comment type="block">/* Read Single Block command */</comment>
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdReadSingleBlock</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BlockAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Writes block(s) to a specified address in a card. The Data transfer 
  *         is managed in interrupt mode. 
  * @note   This API should be followed by a check on the card state through
  *         HAL_SD_GetCardState().
  * @note   You could also check the IT transfer process through the SD Tx 
  *         interrupt event. 
  * @param  hsd Pointer to SD handle
  * @param  pData Pointer to the buffer that will contain the data to transmit
  * @param  BlockAdd Block Address where data will be written    
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SD_WriteBlocks_IT</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BlockAdd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>NumberOfBlocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SDIO_DataInitTypeDef</name></type> <name>config</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>pData</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_PARAM</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_NONE</name></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>BlockAdd</name> <operator>+</operator> <name>NumberOfBlocks</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>LogBlockNbr</name></name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_ADDR_OUT_OF_RANGE</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_BUSY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Initialize data control register */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DCTRL</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>TxXferSize</name></name> <operator>=</operator> <name>BLOCKSIZE</name> <operator>*</operator> <name>NumberOfBlocks</name></expr>;</expr_stmt>
    
    <comment type="block">/* Enable transfer interrupts */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SDIO_STA_STBITERR</name></cpp:ifdef>
    <expr_stmt><expr><call><name>__HAL_SD_ENABLE_IT</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><operator>(</operator><name>SDIO_IT_DCRCFAIL</name> <operator>|</operator> <name>SDIO_IT_DTIMEOUT</name> <operator>|</operator> <name>SDIO_IT_TXUNDERR</name> <operator>|</operator> <name>SDIO_IT_DATAEND</name> <operator>|</operator> <name>SDIO_FLAG_TXFIFOHE</name> <operator>|</operator> <name>SDIO_IT_STBITERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SDIO_STA_STBITERR not defined */</comment>
    <expr_stmt><expr><call><name>__HAL_SD_ENABLE_IT</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><operator>(</operator><name>SDIO_IT_DCRCFAIL</name> <operator>|</operator> <name>SDIO_IT_DTIMEOUT</name> <operator>|</operator> <name>SDIO_IT_TXUNDERR</name> <operator>|</operator> <name>SDIO_IT_DATAEND</name> <operator>|</operator> <name>SDIO_FLAG_TXFIFOHE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SDIO_STA_STBITERR */</comment>
    
    <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name> <operator>!=</operator> <name>CARD_SDHC_SDXC</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>BlockAdd</name> <operator>*=</operator> <literal type="number">512U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Set Block Size for Card */</comment> 
    <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdBlockLength</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Write Blocks in Polling mode */</comment>
    <if_stmt><if>if<condition>(<expr><name>NumberOfBlocks</name> <operator>&gt;</operator> <literal type="number">1U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>=</operator> <operator>(</operator><name>SD_CONTEXT_WRITE_MULTIPLE_BLOCK</name><operator>|</operator> <name>SD_CONTEXT_IT</name><operator>)</operator></expr>;</expr_stmt>
      
      <comment type="block">/* Write Multi Block command */</comment> 
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdWriteMultiBlock</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BlockAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>=</operator> <operator>(</operator><name>SD_CONTEXT_WRITE_SINGLE_BLOCK</name> <operator>|</operator> <name>SD_CONTEXT_IT</name><operator>)</operator></expr>;</expr_stmt>
      
      <comment type="block">/* Write Single Block command */</comment> 
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdWriteSingleBlock</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BlockAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Configure the SD DPSM (Data Path State Machine) */</comment> 
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataTimeOut</name></name>   <operator>=</operator> <name>SDMMC_DATATIMEOUT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataLength</name></name>    <operator>=</operator> <name>BLOCKSIZE</name> <operator>*</operator> <name>NumberOfBlocks</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataBlockSize</name></name> <operator>=</operator> <name>SDIO_DATABLOCK_SIZE_512B</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>TransferDir</name></name>   <operator>=</operator> <name>SDIO_TRANSFER_DIR_TO_CARD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>TransferMode</name></name>  <operator>=</operator> <name>SDIO_TRANSFER_MODE_BLOCK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DPSM</name></name>          <operator>=</operator> <name>SDIO_DPSM_ENABLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SDIO_ConfigData</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Reads block(s) from a specified address in a card. The Data transfer 
  *         is managed by DMA mode. 
  * @note   This API should be followed by a check on the card state through
  *         HAL_SD_GetCardState().
  * @note   You could also check the DMA transfer process through the SD Rx 
  *         interrupt event.
  * @param  hsd Pointer SD handle                 
  * @param  pData Pointer to the buffer that will contain the received data
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SD_ReadBlocks_DMA</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BlockAdd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>NumberOfBlocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SDIO_DataInitTypeDef</name></type> <name>config</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>pData</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_PARAM</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_NONE</name></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>BlockAdd</name> <operator>+</operator> <name>NumberOfBlocks</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>LogBlockNbr</name></name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_ADDR_OUT_OF_RANGE</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_BUSY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Initialize data control register */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DCTRL</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SDIO_STA_STBITERR</name></cpp:ifdef>
    <expr_stmt><expr><call><name>__HAL_SD_ENABLE_IT</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><operator>(</operator><name>SDIO_IT_DCRCFAIL</name> <operator>|</operator> <name>SDIO_IT_DTIMEOUT</name> <operator>|</operator> <name>SDIO_IT_RXOVERR</name> <operator>|</operator> <name>SDIO_IT_DATAEND</name> <operator>|</operator> <name>SDIO_IT_STBITERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SDIO_STA_STBITERR not defined */</comment>
    <expr_stmt><expr><call><name>__HAL_SD_ENABLE_IT</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><operator>(</operator><name>SDIO_IT_DCRCFAIL</name> <operator>|</operator> <name>SDIO_IT_DTIMEOUT</name> <operator>|</operator> <name>SDIO_IT_RXOVERR</name> <operator>|</operator> <name>SDIO_IT_DATAEND</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SDIO_STA_STBITERR */</comment>
    
    <comment type="block">/* Set the DMA transfer complete callback */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>SD_DMAReceiveCplt</name></expr>;</expr_stmt>
    
    <comment type="block">/* Set the DMA error callback */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>SD_DMAError</name></expr>;</expr_stmt>
    
    <comment type="block">/* Set the DMA Abort callback */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    
    <comment type="block">/* Enable the DMA Channel */</comment>
    <expr_stmt><expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FIFO</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>BLOCKSIZE</name> <operator>*</operator> <name>NumberOfBlocks</name><operator>)</operator><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Enable SD DMA transfer */</comment>
    <expr_stmt><expr><call><name>__HAL_SD_DMA_ENABLE</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name> <operator>!=</operator> <name>CARD_SDHC_SDXC</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>BlockAdd</name> <operator>*=</operator> <literal type="number">512U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Configure the SD DPSM (Data Path State Machine) */</comment> 
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataTimeOut</name></name>   <operator>=</operator> <name>SDMMC_DATATIMEOUT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataLength</name></name>    <operator>=</operator> <name>BLOCKSIZE</name> <operator>*</operator> <name>NumberOfBlocks</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataBlockSize</name></name> <operator>=</operator> <name>SDIO_DATABLOCK_SIZE_512B</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>TransferDir</name></name>   <operator>=</operator> <name>SDIO_TRANSFER_DIR_TO_SDIO</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>TransferMode</name></name>  <operator>=</operator> <name>SDIO_TRANSFER_MODE_BLOCK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DPSM</name></name>          <operator>=</operator> <name>SDIO_DPSM_ENABLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SDIO_ConfigData</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set Block Size for Card */</comment> 
    <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdBlockLength</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
        
    <comment type="block">/* Read Blocks in DMA mode */</comment>
    <if_stmt><if>if<condition>(<expr><name>NumberOfBlocks</name> <operator>&gt;</operator> <literal type="number">1U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>=</operator> <operator>(</operator><name>SD_CONTEXT_READ_MULTIPLE_BLOCK</name> <operator>|</operator> <name>SD_CONTEXT_DMA</name><operator>)</operator></expr>;</expr_stmt>
      
      <comment type="block">/* Read Multi Block command */</comment> 
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdReadMultiBlock</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BlockAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>=</operator> <operator>(</operator><name>SD_CONTEXT_READ_SINGLE_BLOCK</name> <operator>|</operator> <name>SD_CONTEXT_DMA</name><operator>)</operator></expr>;</expr_stmt>
      
      <comment type="block">/* Read Single Block command */</comment> 
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdReadSingleBlock</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BlockAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Writes block(s) to a specified address in a card. The Data transfer 
  *         is managed by DMA mode. 
  * @note   This API should be followed by a check on the card state through
  *         HAL_SD_GetCardState().
  * @note   You could also check the DMA transfer process through the SD Tx 
  *         interrupt event.
  * @param  hsd Pointer to SD handle
  * @param  pData Pointer to the buffer that will contain the data to transmit
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SD_WriteBlocks_DMA</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BlockAdd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>NumberOfBlocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SDIO_DataInitTypeDef</name></type> <name>config</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>pData</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_PARAM</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_NONE</name></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>BlockAdd</name> <operator>+</operator> <name>NumberOfBlocks</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>LogBlockNbr</name></name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_ADDR_OUT_OF_RANGE</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_BUSY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Initialize data control register */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DCTRL</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    
    <comment type="block">/* Enable SD Error interrupts */</comment>  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SDIO_STA_STBITERR</name></cpp:ifdef>
    <expr_stmt><expr><call><name>__HAL_SD_ENABLE_IT</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><operator>(</operator><name>SDIO_IT_DCRCFAIL</name> <operator>|</operator> <name>SDIO_IT_DTIMEOUT</name> <operator>|</operator> <name>SDIO_IT_TXUNDERR</name> <operator>|</operator> <name>SDIO_IT_STBITERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SDIO_STA_STBITERR not defined */</comment>
    <expr_stmt><expr><call><name>__HAL_SD_ENABLE_IT</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><operator>(</operator><name>SDIO_IT_DCRCFAIL</name> <operator>|</operator> <name>SDIO_IT_DTIMEOUT</name> <operator>|</operator> <name>SDIO_IT_TXUNDERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SDIO_STA_STBITERR */</comment>
    
    <comment type="block">/* Set the DMA transfer complete callback */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>SD_DMATransmitCplt</name></expr>;</expr_stmt>
    
    <comment type="block">/* Set the DMA error callback */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>SD_DMAError</name></expr>;</expr_stmt>
    
    <comment type="block">/* Set the DMA Abort callback */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name> <operator>!=</operator> <name>CARD_SDHC_SDXC</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>BlockAdd</name> <operator>*=</operator> <literal type="number">512U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Set Block Size for Card */</comment> 
    <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdBlockLength</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Write Blocks in Polling mode */</comment>
    <if_stmt><if>if<condition>(<expr><name>NumberOfBlocks</name> <operator>&gt;</operator> <literal type="number">1U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>=</operator> <operator>(</operator><name>SD_CONTEXT_WRITE_MULTIPLE_BLOCK</name> <operator>|</operator> <name>SD_CONTEXT_DMA</name><operator>)</operator></expr>;</expr_stmt>
      
      <comment type="block">/* Write Multi Block command */</comment> 
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdWriteMultiBlock</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BlockAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>=</operator> <operator>(</operator><name>SD_CONTEXT_WRITE_SINGLE_BLOCK</name> <operator>|</operator> <name>SD_CONTEXT_DMA</name><operator>)</operator></expr>;</expr_stmt>
      
      <comment type="block">/* Write Single Block command */</comment>
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdWriteSingleBlock</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BlockAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Enable SDIO DMA transfer */</comment>
    <expr_stmt><expr><call><name>__HAL_SD_DMA_ENABLE</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Enable the DMA Channel */</comment>
    <expr_stmt><expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FIFO</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>BLOCKSIZE</name> <operator>*</operator> <name>NumberOfBlocks</name><operator>)</operator><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Configure the SD DPSM (Data Path State Machine) */</comment> 
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataTimeOut</name></name>   <operator>=</operator> <name>SDMMC_DATATIMEOUT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataLength</name></name>    <operator>=</operator> <name>BLOCKSIZE</name> <operator>*</operator> <name>NumberOfBlocks</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataBlockSize</name></name> <operator>=</operator> <name>SDIO_DATABLOCK_SIZE_512B</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>TransferDir</name></name>   <operator>=</operator> <name>SDIO_TRANSFER_DIR_TO_CARD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>TransferMode</name></name>  <operator>=</operator> <name>SDIO_TRANSFER_MODE_BLOCK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DPSM</name></name>          <operator>=</operator> <name>SDIO_DPSM_ENABLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SDIO_ConfigData</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Erases the specified memory area of the given SD card.
  * @note   This API should be followed by a check on the card state through
  *         HAL_SD_GetCardState().
  * @param  hsd Pointer to SD handle 
  * @param  BlockStartAdd Start Block address
  * @param  BlockEndAdd End Block address
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SD_Erase</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BlockStartAdd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BlockEndAdd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_DMA_ERROR_NONE</name></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><name>BlockEndAdd</name> <operator>&lt;</operator> <name>BlockStartAdd</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_PARAM</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if<condition>(<expr><name>BlockEndAdd</name> <operator>&gt;</operator> <operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>LogBlockNbr</name></name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_ADDR_OUT_OF_RANGE</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_BUSY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Check if the card command class supports erase command */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>Class</name></name><operator>)</operator> <operator>&amp;</operator> <name>SDIO_CCCC_ERASE</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_REQUEST_NOT_APPLICABLE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>SDIO_GetResponse</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>SDIO_RESP1</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>SDMMC_CARD_LOCKED</name><operator>)</operator> <operator>==</operator> <name>SDMMC_CARD_LOCKED</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_LOCK_UNLOCK_FAILED</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Get start and end block for high capacity cards */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name> <operator>!=</operator> <name>CARD_SDHC_SDXC</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>BlockStartAdd</name> <operator>*=</operator> <literal type="number">512U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>BlockEndAdd</name>   <operator>*=</operator> <literal type="number">512U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* According to sd-card spec 1.0 ERASE_GROUP_START (CMD32) and erase_group_end(CMD33) */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name> <operator>!=</operator> <name>CARD_SECURED</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Send CMD32 SD_ERASE_GRP_START with argument as addr  */</comment>
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdSDEraseStartAdd</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BlockStartAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Clear all the static flags */</comment>
        <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Send CMD33 SD_ERASE_GRP_END with argument as addr  */</comment>
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdSDEraseEndAdd</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>BlockEndAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Clear all the static flags */</comment>
        <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Send CMD38 ERASE */</comment>
    <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdErase</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
    
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_SD_IRQHandler</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check for SDIO interrupt flags */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_DATAEND</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_DATAEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SDIO_STA_STBITERR</name></cpp:ifdef>
    <expr_stmt><expr><call><name>__HAL_SD_DISABLE_IT</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_DATAEND</name> <operator>|</operator> <name>SDIO_IT_DCRCFAIL</name> <operator>|</operator> <name>SDIO_IT_DTIMEOUT</name><operator>|</operator>\
                             <name>SDIO_IT_TXUNDERR</name><operator>|</operator> <name>SDIO_IT_RXOVERR</name> <operator>|</operator> <name>SDIO_IT_STBITERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SDIO_STA_STBITERR not defined */</comment>
    <expr_stmt><expr><call><name>__HAL_SD_DISABLE_IT</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_DATAEND</name> <operator>|</operator> <name>SDIO_IT_DCRCFAIL</name> <operator>|</operator> <name>SDIO_IT_DTIMEOUT</name><operator>|</operator>\
                             <name>SDIO_IT_TXUNDERR</name><operator>|</operator> <name>SDIO_IT_RXOVERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>&amp;</operator> <name>SD_CONTEXT_IT</name><operator>)</operator> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>&amp;</operator> <name>SD_CONTEXT_READ_MULTIPLE_BLOCK</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>&amp;</operator> <name>SD_CONTEXT_WRITE_MULTIPLE_BLOCK</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdStopTransfer</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
          <expr_stmt><expr><call><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <expr_stmt><expr><call><name>HAL_SD_ErrorCallback</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Clear all the static flags */</comment>
      <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>&amp;</operator> <name>SD_CONTEXT_READ_SINGLE_BLOCK</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>&amp;</operator> <name>SD_CONTEXT_READ_MULTIPLE_BLOCK</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hsd</name><operator>-&gt;</operator><name>RxCpltCallback</name></name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_SD_RxCpltCallback</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hsd</name><operator>-&gt;</operator><name>TxCpltCallback</name></name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>      
        <expr_stmt><expr><call><name>HAL_SD_TxCpltCallback</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>&amp;</operator> <name>SD_CONTEXT_DMA</name><operator>)</operator> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>&amp;</operator> <name>SD_CONTEXT_WRITE_MULTIPLE_BLOCK</name><operator>)</operator> <operator>!=</operator> <name>RESET</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdStopTransfer</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
          <expr_stmt><expr><call><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <expr_stmt><expr><call><name>HAL_SD_ErrorCallback</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>&amp;</operator> <name>SD_CONTEXT_READ_SINGLE_BLOCK</name><operator>)</operator> <operator>==</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>&amp;</operator> <name>SD_CONTEXT_READ_MULTIPLE_BLOCK</name><operator>)</operator> <operator>==</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Disable the DMA transfer for transmit request by setting the DMAEN bit
        in the SD DCTRL register */</comment>
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DCTRL</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>SDIO_DCTRL_DMAEN</name><operator>)</operator></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
        
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hsd</name><operator>-&gt;</operator><name>TxCpltCallback</name></name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>      
        <expr_stmt><expr><call><name>HAL_SD_TxCpltCallback</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  
  <if type="elseif">else if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_TXFIFOHE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_TXFIFOHE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>SD_Write_IT</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  
  <if type="elseif">else if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_RXFIFOHF</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_RXFIFOHF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>SD_Read_IT</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SDIO_STA_STBITERR</name></cpp:ifdef>
  <if type="elseif">else if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_DCRCFAIL</name> <operator>|</operator> <name>SDIO_IT_DTIMEOUT</name> <operator>|</operator> <name>SDIO_IT_RXOVERR</name> <operator>|</operator> <name>SDIO_IT_TXUNDERR</name> <operator>|</operator> <name>SDIO_IT_STBITERR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set Error code */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_DCRCFAIL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_DATA_CRC_FAIL</name></expr>;</expr_stmt> 
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_DTIMEOUT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_DATA_TIMEOUT</name></expr>;</expr_stmt> 
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_RXOVERR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_RX_OVERRUN</name></expr>;</expr_stmt> 
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_TXUNDERR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_TX_UNDERRUN</name></expr>;</expr_stmt> 
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_STBITERR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_DATA_TIMEOUT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Clear All flags */</comment>
    <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name> <operator>|</operator> <name>SDIO_FLAG_STBITERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Disable all interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_SD_DISABLE_IT</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_DATAEND</name> <operator>|</operator> <name>SDIO_IT_DCRCFAIL</name> <operator>|</operator> <name>SDIO_IT_DTIMEOUT</name><operator>|</operator>\
                             <name>SDIO_IT_TXUNDERR</name><operator>|</operator> <name>SDIO_IT_RXOVERR</name> <operator>|</operator><name>SDIO_IT_STBITERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>&amp;</operator> <name>SD_CONTEXT_DMA</name><operator>)</operator> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Abort the SD DMA Streams */</comment>
      <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Set the DMA Tx abort callback */</comment>
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>SD_DMATxAbort</name></expr>;</expr_stmt>
        <comment type="block">/* Abort DMA in IT mode */</comment>
        <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>SD_DMATxAbort</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
      <if type="elseif">else if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Set the DMA Rx abort callback */</comment>
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>SD_DMARxAbort</name></expr>;</expr_stmt>
        <comment type="block">/* Abort DMA in IT mode */</comment>
        <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>SD_DMARxAbort</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SD_ERROR_NONE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hsd</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_SD_AbortCallback</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>&amp;</operator> <name>SD_CONTEXT_IT</name><operator>)</operator> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the SD state to ready to be able to start again the process */</comment>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_SD_ErrorCallback</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SDIO_STA_STBITERR not defined */</comment>
  <if type="elseif">else if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_DCRCFAIL</name> <operator>|</operator> <name>SDIO_IT_DTIMEOUT</name> <operator>|</operator> <name>SDIO_IT_RXOVERR</name> <operator>|</operator> <name>SDIO_IT_TXUNDERR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set Error code */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_DCRCFAIL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_DATA_CRC_FAIL</name></expr>;</expr_stmt> 
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_DTIMEOUT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_DATA_TIMEOUT</name></expr>;</expr_stmt> 
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_RXOVERR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_RX_OVERRUN</name></expr>;</expr_stmt> 
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_TXUNDERR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_TX_UNDERRUN</name></expr>;</expr_stmt> 
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Clear All flags */</comment>
    <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Disable all interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_SD_DISABLE_IT</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_DATAEND</name> <operator>|</operator> <name>SDIO_IT_DCRCFAIL</name> <operator>|</operator> <name>SDIO_IT_DTIMEOUT</name><operator>|</operator>\
                             <name>SDIO_IT_TXUNDERR</name><operator>|</operator> <name>SDIO_IT_RXOVERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>&amp;</operator> <name>SD_CONTEXT_DMA</name><operator>)</operator> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Abort the SD DMA Streams */</comment>
      <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Set the DMA Tx abort callback */</comment>
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>SD_DMATxAbort</name></expr>;</expr_stmt>
        <comment type="block">/* Abort DMA in IT mode */</comment>
        <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>SD_DMATxAbort</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
      <if type="elseif">else if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Set the DMA Rx abort callback */</comment>
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>SD_DMARxAbort</name></expr>;</expr_stmt>
        <comment type="block">/* Abort DMA in IT mode */</comment>
        <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>SD_DMARxAbort</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SD_ERROR_NONE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HAL_SD_AbortCallback</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>&amp;</operator> <name>SD_CONTEXT_IT</name><operator>)</operator> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the SD state to ready to be able to start again the process */</comment>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>HAL_SD_ErrorCallback</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief return the SD state
  * @param hsd Pointer to sd handle
  * @retval HAL state
  */</comment>
<function><type><name>HAL_SD_StateTypeDef</name></type> <name>HAL_SD_GetState</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
* @brief  Return the SD error code
* @param  hsd  Pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
* @retval SD Error Code
*/</comment>
<function><type><name>uint32_t</name></type> <name>HAL_SD_GetError</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Tx Transfer completed callbacks
  * @param hsd Pointer to SD handle
  * @retval None
  */</comment>
 <function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SD_TxCpltCallback</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Rx Transfer completed callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SD_RxCpltCallback</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SD_ErrorCallback</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief SD Abort callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SD_AbortCallback</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User SD Callback
  *         To be used instead of the weak (surcharged) predefined callback 
  * @param hsd : SD handle
  * @param CallbackId : Id of the callback to be registered
  *        This parameter can be one of the following values:
  *          @arg @ref HAL_SD_TX_CPLT_CB_ID    SD Tx Complete Callback ID
  *          @arg @ref HAL_SD_RX_CPLT_CB_ID    SD Rx Complete Callback ID
  *          @arg @ref HAL_SD_ERROR_CB_ID      SD Error Callback ID
  *          @arg @ref HAL_SD_ABORT_CB_ID      SD Abort Callback ID
  *          @arg @ref HAL_SD_MSP_INIT_CB_ID   SD MspInit Callback ID 
  *          @arg @ref HAL_SD_MSP_DEINIT_CB_ID SD MspDeInit Callback ID  
  * @param pCallback : pointer to the Callback function
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SD_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>HAL_SD_CallbackIDTypeDef</name></type> <name>CallbackId</name></decl></parameter>, <parameter><decl><type><name>pSD_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackId</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_SD_TX_CPLT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>TxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_SD_RX_CPLT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>RxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_SD_ERROR_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_SD_ABORT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_SD_MSP_INIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_SD_MSP_DEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* Update the error code */</comment>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt> 
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SD_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackId</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_SD_MSP_INIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_SD_MSP_DEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* Update the error code */</comment>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt> 
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt> 
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister a User SD Callback
  *         SD Callback is redirected to the weak (surcharged) predefined callback 
  * @param hsd : SD handle
  * @param CallbackId : Id of the callback to be unregistered
  *        This parameter can be one of the following values:
  *          @arg @ref HAL_SD_TX_CPLT_CB_ID    SD Tx Complete Callback ID
  *          @arg @ref HAL_SD_RX_CPLT_CB_ID    SD Rx Complete Callback ID
  *          @arg @ref HAL_SD_ERROR_CB_ID      SD Error Callback ID
  *          @arg @ref HAL_SD_ABORT_CB_ID      SD Abort Callback ID
  *          @arg @ref HAL_SD_MSP_INIT_CB_ID   SD MspInit Callback ID 
  *          @arg @ref HAL_SD_MSP_DEINIT_CB_ID SD MspDeInit Callback ID  
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SD_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>HAL_SD_CallbackIDTypeDef</name></type> <name>CallbackId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackId</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_SD_TX_CPLT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>TxCpltCallback</name></name> <operator>=</operator> <name>HAL_SD_TxCpltCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_SD_RX_CPLT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>RxCpltCallback</name></name> <operator>=</operator> <name>HAL_SD_RxCpltCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_SD_ERROR_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>HAL_SD_ErrorCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_SD_ABORT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name> <operator>=</operator> <name>HAL_SD_AbortCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_SD_MSP_INIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_SD_MspInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_SD_MSP_DEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_SD_MspDeInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* Update the error code */</comment>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt> 
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SD_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackId</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_SD_MSP_INIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_SD_MspInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_SD_MSP_DEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_SD_MspDeInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* Update the error code */</comment>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt> 
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt> 
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup SD_Exported_Functions_Group3
 *  @brief   management functions 
 *
@verbatim   
  ==============================================================================
                      ##### Peripheral Control functions #####
  ==============================================================================  
  [..]
    This subsection provides a set of functions allowing to control the SD card 
    operations and get the related information

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Returns information the information of the card which are stored on
  *         the CID register.
  * @param  hsd Pointer to SD handle
  * @param  pCID Pointer to a HAL_SD_CIDTypeDef structure that  
  *         contains all CID register parameters 
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SD_GetCardCID</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>HAL_SD_CardCIDTypeDef</name> <modifier>*</modifier></type><name>pCID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Byte 0 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF000000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCID</name><operator>-&gt;</operator><name>ManufacturerID</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 1 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00FF0000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCID</name><operator>-&gt;</operator><name>OEM_AppliID</name></name> <operator>=</operator> <name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">8U</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 2 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000000FF00U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCID</name><operator>-&gt;</operator><name>OEM_AppliID</name></name> <operator>|=</operator> <name>tmp</name></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 3 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000000FFU</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCID</name><operator>-&gt;</operator><name>ProdName1</name></name> <operator>=</operator> <name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">24U</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 4 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF000000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCID</name><operator>-&gt;</operator><name>ProdName1</name></name> <operator>|=</operator> <name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 5 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00FF0000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCID</name><operator>-&gt;</operator><name>ProdName1</name></name> <operator>|=</operator> <name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">8U</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 6 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000FF00U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCID</name><operator>-&gt;</operator><name>ProdName1</name></name> <operator>|=</operator> <name>tmp</name></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 7 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000000FFU</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCID</name><operator>-&gt;</operator><name>ProdName2</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 8 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF000000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCID</name><operator>-&gt;</operator><name>ProdRev</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 9 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00FF0000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCID</name><operator>-&gt;</operator><name>ProdSN</name></name> <operator>=</operator> <name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">24U</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 10 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000FF00U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCID</name><operator>-&gt;</operator><name>ProdSN</name></name> <operator>|=</operator> <name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 11 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000000FFU</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCID</name><operator>-&gt;</operator><name>ProdSN</name></name> <operator>|=</operator> <name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">8U</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 12 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">3U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF000000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCID</name><operator>-&gt;</operator><name>ProdSN</name></name> <operator>|=</operator> <name>tmp</name></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 13 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">3U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00FF0000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCID</name><operator>-&gt;</operator><name>Reserved1</name></name>   <operator>|=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0xF0U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCID</name><operator>-&gt;</operator><name>ManufactDate</name></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x0FU</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8U</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 14 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">3U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000FF00U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCID</name><operator>-&gt;</operator><name>ManufactDate</name></name> <operator>|=</operator> <name>tmp</name></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 15 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">3U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000000FFU</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCID</name><operator>-&gt;</operator><name>CID_CRC</name></name>   <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0xFEU</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCID</name><operator>-&gt;</operator><name>Reserved2</name></name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns information the information of the card which are stored on
  *         the CSD register.
  * @param  hsd Pointer to SD handle
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SD_GetCardCSD</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>HAL_SD_CardCSDTypeDef</name> <modifier>*</modifier></type><name>pCSD</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Byte 0 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF000000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>CSDStruct</name></name>      <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0xC0U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>SysSpecVersion</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x3CU</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>Reserved1</name></name>      <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0x03U</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 1 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00FF0000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>TAAC</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 2 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000FF00U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>NSAC</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 3 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000000FFU</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>MaxBusClkFrec</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 4 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF000000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>CardComdClasses</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">4U</literal><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 5 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00FF0000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>CardComdClasses</name></name> <operator>|=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0xF0U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>RdBlockLen</name></name>       <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x0FU</literal><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 6 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000FF00U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>PartBlockRead</name></name>   <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x80U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>WrBlockMisalign</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x40U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>RdBlockMisalign</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x20U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>DSRImpl</name></name>         <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x10U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>Reserved2</name></name>       <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt> <comment type="block" format="doxygen">/*!&lt; Reserved */</comment>
       
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name> <operator>==</operator> <name>CARD_SDSC</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>DeviceSize</name></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x03U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10U</literal></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 7 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000000FFU</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>DeviceSize</name></name> <operator>|=</operator> <operator>(</operator><name>tmp</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 8 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF000000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>DeviceSize</name></name> <operator>|=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0xC0U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>MaxRdCurrentVDDMin</name></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x38U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>MaxRdCurrentVDDMax</name></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x07U</literal><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 9 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00FF0000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>MaxWrCurrentVDDMin</name></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0xE0U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>MaxWrCurrentVDDMax</name></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x1CU</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>DeviceSizeMul</name></name>      <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x03U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    <comment type="block">/* Byte 10 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000FF00U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>DeviceSizeMul</name></name> <operator>|=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x80U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7U</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>BlockNbr</name></name>  <operator>=</operator> <operator>(</operator><name><name>pCSD</name><operator>-&gt;</operator><name>DeviceSize</name></name> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>BlockNbr</name></name> <operator>*=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>pCSD</name><operator>-&gt;</operator><name>DeviceSizeMul</name></name> <operator>+</operator> <literal type="number">2U</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>BlockSize</name></name> <operator>=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>pCSD</name><operator>-&gt;</operator><name>RdBlockLen</name></name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>LogBlockNbr</name></name> <operator>=</operator>  <operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>BlockNbr</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>BlockSize</name></name><operator>)</operator> <operator>/</operator> <literal type="number">512U</literal><operator>)</operator></expr>;</expr_stmt> 
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>LogBlockSize</name></name> <operator>=</operator> <literal type="number">512U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name> <operator>==</operator> <name>CARD_SDHC_SDXC</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Byte 7 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000000FFU</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>DeviceSize</name></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x3FU</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 8 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF000000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>DeviceSize</name></name> <operator>|=</operator> <operator>(</operator><name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 9 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00FF0000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>DeviceSize</name></name> <operator>|=</operator> <operator>(</operator><name>tmp</name><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 10 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000FF00U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>LogBlockNbr</name></name> <operator>=</operator> <name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>BlockNbr</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>pCSD</name><operator>-&gt;</operator><name>DeviceSize</name></name> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator> <operator>*</operator> <literal type="number">1024U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>LogBlockSize</name></name> <operator>=</operator> <name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>BlockSize</name></name> <operator>=</operator> <literal type="number">512U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Clear all the static flags */</comment>
    <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_UNSUPPORTED_FEATURE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
  
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>EraseGrSize</name></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x40U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>EraseGrMul</name></name>  <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x3FU</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 11 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000000FFU</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>EraseGrMul</name></name>     <operator>|=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x80U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>WrProtectGrSize</name></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x7FU</literal><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 12 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">3U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF000000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>WrProtectGrEnable</name></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x80U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>ManDeflECC</name></name>        <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x60U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>WrSpeedFact</name></name>       <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x1CU</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>MaxWrBlockLen</name></name>     <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x03U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 13 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">3U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00FF0000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>MaxWrBlockLen</name></name>      <operator>|=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0xC0U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>WriteBlockPaPartial</name></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x20U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>Reserved3</name></name>           <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>ContentProtectAppli</name></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x01U</literal><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 14 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">3U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000FF00U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>FileFormatGrouop</name></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x80U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>CopyFlag</name></name>         <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x40U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>PermWrProtect</name></name>    <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x20U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>TempWrProtect</name></name>    <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x10U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>FileFormat</name></name>       <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x0CU</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>ECC</name></name>              <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x03U</literal><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Byte 15 */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">3U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000000FFU</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>CSD_CRC</name></name>   <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0xFEU</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCSD</name><operator>-&gt;</operator><name>Reserved4</name></name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Gets the SD status info.
  * @param  hsd Pointer to SD handle      
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SD_GetCardStatus</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>HAL_SD_CardStatusTypeDef</name> <modifier>*</modifier></type><name>pStatus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>sd_status</name><index>[<expr><literal type="number">16U</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SD_SendSDStatus</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>sd_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear all the static flags */</comment>
    <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Byte 0 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>sd_status</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>DataBusWidth</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 0 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>sd_status</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>SecuredMode</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 2 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>sd_status</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00FF0000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>CardType</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 3 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>sd_status</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF000000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>CardType</name></name> <operator>|=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 4 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>sd_status</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFFU</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>ProtectedAreaSize</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 5 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>sd_status</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF00U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>ProtectedAreaSize</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 6 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>sd_status</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF0000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>ProtectedAreaSize</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 7 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>sd_status</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF000000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>ProtectedAreaSize</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 8 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>sd_status</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFFU</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>SpeedClass</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 9 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>sd_status</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF00U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>PerformanceMove</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 10 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>sd_status</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF00000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>AllocationUnitSize</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 11 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>sd_status</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF000000U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>EraseSize</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 12 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>sd_status</name><index>[<expr><literal type="number">3U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFFU</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>EraseSize</name></name> <operator>|=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 13 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>sd_status</name><index>[<expr><literal type="number">3U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFC00U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>EraseTimeout</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
    
    <comment type="block">/* Byte 13 */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>sd_status</name><index>[<expr><literal type="number">3U</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0300U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>EraseOffset</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Gets the SD card info.
  * @param  hsd Pointer to SD handle      
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SD_GetCardInfo</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>HAL_SD_CardInfoTypeDef</name> <modifier>*</modifier></type><name>pCardInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>pCardInfo</name><operator>-&gt;</operator><name>CardType</name></name>     <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCardInfo</name><operator>-&gt;</operator><name>CardVersion</name></name>  <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardVersion</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCardInfo</name><operator>-&gt;</operator><name>Class</name></name>        <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>Class</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCardInfo</name><operator>-&gt;</operator><name>RelCardAdd</name></name>   <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>RelCardAdd</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCardInfo</name><operator>-&gt;</operator><name>BlockNbr</name></name>     <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>BlockNbr</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCardInfo</name><operator>-&gt;</operator><name>BlockSize</name></name>    <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>BlockSize</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCardInfo</name><operator>-&gt;</operator><name>LogBlockNbr</name></name>  <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>LogBlockNbr</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCardInfo</name><operator>-&gt;</operator><name>LogBlockSize</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>LogBlockSize</name></name><operator>)</operator></expr>;</expr_stmt>
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enables wide bus operation for the requested card if supported by 
  *         card.
  * @param  hsd Pointer to SD handle       
  * @param  WideMode Specifies the SD card wide bus mode 
  *          This parameter can be one of the following values:
  *            @arg SDIO_BUS_WIDE_8B: 8-bit data transfer
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SD_ConfigWideBusOperation</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>WideMode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SDIO_InitTypeDef</name></type> <name>Init</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SDIO_BUS_WIDE</name><argument_list>(<argument><expr><name>WideMode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Chnage Satte */</comment>
  <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_BUSY</name></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name> <operator>!=</operator> <name>CARD_SECURED</name></expr>)</condition> 
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>WideMode</name> <operator>==</operator> <name>SDIO_BUS_WIDE_8B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_UNSUPPORTED_FEATURE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>WideMode</name> <operator>==</operator> <name>SDIO_BUS_WIDE_4B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SD_WideBus_Enable</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>WideMode</name> <operator>==</operator> <name>SDIO_BUS_WIDE_1B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SD_WideBus_Disable</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* WideMode is not a valid argument*/</comment>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_PARAM</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>  
  <else>else
  <block>{<block_content>
    <comment type="block">/* MMC Card does not support this feature */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_UNSUPPORTED_FEATURE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear all the static flags */</comment>
    <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Configure the SDIO peripheral */</comment>
    <expr_stmt><expr><name><name>Init</name><operator>.</operator><name>ClockEdge</name></name>           <operator>=</operator> <name><name>hsd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockEdge</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>Init</name><operator>.</operator><name>ClockBypass</name></name>         <operator>=</operator> <name><name>hsd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockBypass</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>Init</name><operator>.</operator><name>ClockPowerSave</name></name>      <operator>=</operator> <name><name>hsd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockPowerSave</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>Init</name><operator>.</operator><name>BusWide</name></name>             <operator>=</operator> <name>WideMode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>Init</name><operator>.</operator><name>HardwareFlowControl</name></name> <operator>=</operator> <name><name>hsd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HardwareFlowControl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>Init</name><operator>.</operator><name>ClockDiv</name></name>            <operator>=</operator> <name><name>hsd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockDiv</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SDIO_Init</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Change State */</comment>
  <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */</comment>
<function><type><name>HAL_SD_CardStateTypeDef</name></type> <name>HAL_SD_GetCardState</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_SD_CardStateTypeDef</name></type> <name>cardstate</name> <init>=  <expr><name>HAL_SD_CARD_TRANSFER</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>resp1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SD_SendStatus</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>cardstate</name> <operator>=</operator> <operator>(</operator><name>HAL_SD_CardStateTypeDef</name><operator>)</operator><operator>(</operator><operator>(</operator><name>resp1</name> <operator>&gt;&gt;</operator> <literal type="number">9U</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0FU</literal><operator>)</operator></expr>;</expr_stmt>
  
  <return>return <expr><name>cardstate</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Abort the current transfer and disable the SD.
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *                the configuration information for SD module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SD_Abort</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_SD_CardStateTypeDef</name></type> <name>CardState</name></decl>;</decl_stmt>
  
  <comment type="block">/* DIsable All interrupts */</comment>
  <expr_stmt><expr><call><name>__HAL_SD_DISABLE_IT</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_DATAEND</name> <operator>|</operator> <name>SDIO_IT_DCRCFAIL</name> <operator>|</operator> <name>SDIO_IT_DTIMEOUT</name><operator>|</operator>\
                           <name>SDIO_IT_TXUNDERR</name><operator>|</operator> <name>SDIO_IT_RXOVERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Clear All flags */</comment>
  <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the SD DMA request */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DCTRL</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>SDIO_DCTRL_DMAEN</name><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Abort the SD DMA Tx Stream */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Abort the SD DMA Rx Stream */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>CardState</name> <operator>=</operator> <call><name>HAL_SD_GetCardState</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>CardState</name> <operator>==</operator> <name>HAL_SD_CARD_RECEIVING</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>CardState</name> <operator>==</operator> <name>HAL_SD_CARD_SENDING</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <call><name>SDMMC_CmdStopTransfer</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Abort the current transfer and disable the SD (IT mode).
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *                the configuration information for SD module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SD_Abort_IT</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_SD_CardStateTypeDef</name></type> <name>CardState</name></decl>;</decl_stmt>
    
  <comment type="block">/* DIsable All interrupts */</comment>
  <expr_stmt><expr><call><name>__HAL_SD_DISABLE_IT</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_DATAEND</name> <operator>|</operator> <name>SDIO_IT_DCRCFAIL</name> <operator>|</operator> <name>SDIO_IT_DTIMEOUT</name><operator>|</operator>\
                           <name>SDIO_IT_TXUNDERR</name><operator>|</operator> <name>SDIO_IT_RXOVERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Clear All flags */</comment>
  <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the SD DMA request */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DCTRL</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>SDIO_DCTRL_DMAEN</name><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Abort the SD DMA Tx Stream */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator>  <name>SD_DMATxAbort</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Abort the SD DMA Rx Stream */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator>  <name>SD_DMARxAbort</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* No transfer ongoing on both DMA channels*/</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>CardState</name> <operator>=</operator> <call><name>HAL_SD_GetCardState</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>CardState</name> <operator>==</operator> <name>HAL_SD_CARD_RECEIVING</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>CardState</name> <operator>==</operator> <name>HAL_SD_CARD_SENDING</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <call><name>SDMMC_CmdStopTransfer</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hsd</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_SD_AbortCallback</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
  
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
  
<comment type="block">/* Private function ----------------------------------------------------------*/</comment>  
<comment type="block" format="doxygen">/** @addtogroup SD_Private_Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SD_DMATransmitCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>     
<block>{<block_content>
  <decl_stmt><decl><type><name>SD_HandleTypeDef</name><modifier>*</modifier></type> <name>hsd</name> <init>= <expr><operator>(</operator><name>SD_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>Parent</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Enable DATAEND Interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_SD_ENABLE_IT</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><operator>(</operator><name>SDIO_IT_DATAEND</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SD_DMAReceiveCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>  
<block>{<block_content>
  <decl_stmt><decl><type><name>SD_HandleTypeDef</name><modifier>*</modifier></type> <name>hsd</name> <init>= <expr><operator>(</operator><name>SD_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>Parent</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Send stop command in multiblock write */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>Context</name></name> <operator>==</operator> <operator>(</operator><name>SD_CONTEXT_READ_MULTIPLE_BLOCK</name> <operator>|</operator> <name>SD_CONTEXT_DMA</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdStopTransfer</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>errorstate</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_SD_ErrorCallback</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */</comment>
  <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DCTRL</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>SDIO_DCTRL_DMAEN</name><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Clear all the static flags */</comment>
  <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hsd</name><operator>-&gt;</operator><name>RxCpltCallback</name></name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_SD_RxCpltCallback</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SD_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>   
<block>{<block_content>
  <decl_stmt><decl><type><name>SD_HandleTypeDef</name><modifier>*</modifier></type> <name>hsd</name> <init>= <expr><operator>(</operator><name>SD_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>Parent</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_SD_CardStateTypeDef</name></type> <name>CardState</name></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>==</operator> <name>HAL_DMA_ERROR_TE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>==</operator> <name>HAL_DMA_ERROR_TE</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear All flags */</comment>
    <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Disable All interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_SD_DISABLE_IT</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_IT_DATAEND</name> <operator>|</operator> <name>SDIO_IT_DCRCFAIL</name> <operator>|</operator> <name>SDIO_IT_DTIMEOUT</name><operator>|</operator>\
      <name>SDIO_IT_TXUNDERR</name><operator>|</operator> <name>SDIO_IT_RXOVERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_DMA</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>CardState</name> <operator>=</operator> <call><name>HAL_SD_GetCardState</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>CardState</name> <operator>==</operator> <name>HAL_SD_CARD_RECEIVING</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>CardState</name> <operator>==</operator> <name>HAL_SD_CARD_SENDING</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <call><name>SDMMC_CmdStopTransfer</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_SD_ErrorCallback</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SD_DMATxAbort</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>   
<block>{<block_content>
  <decl_stmt><decl><type><name>SD_HandleTypeDef</name><modifier>*</modifier></type> <name>hsd</name> <init>= <expr><operator>(</operator><name>SD_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>Parent</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_SD_CardStateTypeDef</name></type> <name>CardState</name></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* All DMA channels are aborted */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>CardState</name> <operator>=</operator> <call><name>HAL_SD_GetCardState</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SD_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>CardState</name> <operator>==</operator> <name>HAL_SD_CARD_RECEIVING</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>CardState</name> <operator>==</operator> <name>HAL_SD_CARD_SENDING</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <call><name>SDMMC_CmdStopTransfer</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
      <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hsd</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_SD_AbortCallback</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_SD_ErrorCallback</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SD_DMARxAbort</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>   
<block>{<block_content>
  <decl_stmt><decl><type><name>SD_HandleTypeDef</name><modifier>*</modifier></type> <name>hsd</name> <init>= <expr><operator>(</operator><name>SD_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>Parent</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_SD_CardStateTypeDef</name></type> <name>CardState</name></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* All DMA channels are aborted */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>CardState</name> <operator>=</operator> <call><name>HAL_SD_GetCardState</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SD_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SD_STATE_READY</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>CardState</name> <operator>==</operator> <name>HAL_SD_CARD_RECEIVING</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>CardState</name> <operator>==</operator> <name>HAL_SD_CARD_SENDING</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <call><name>SDMMC_CmdStopTransfer</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
      <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hsd</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_SD_AbortCallback</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_SD_ErrorCallback</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>SD_InitCard</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_SD_CardCSDTypeDef</name></type> <name>CSD</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>sd_rca</name> <init>= <expr><literal type="number">1U</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the power State */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>SDIO_GetPowerState</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition> 
  <block>{<block_content>
    <comment type="block">/* Power off */</comment>
    <return>return <expr><name>HAL_SD_ERROR_REQUEST_NOT_APPLICABLE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name> <operator>!=</operator> <name>CARD_SECURED</name></expr>)</condition> 
  <block>{<block_content>
    <comment type="block">/* Send CMD2 ALL_SEND_CID */</comment>
    <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdSendCID</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>errorstate</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Get Card identification number data */</comment>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name> <operator>=</operator> <call><name>SDIO_GetResponse</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>SDIO_RESP1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>=</operator> <call><name>SDIO_GetResponse</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>SDIO_RESP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <operator>=</operator> <call><name>SDIO_GetResponse</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>SDIO_RESP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>CID</name><index>[<expr><literal type="number">3U</literal></expr>]</index></name> <operator>=</operator> <call><name>SDIO_GetResponse</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>SDIO_RESP4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name> <operator>!=</operator> <name>CARD_SECURED</name></expr>)</condition> 
  <block>{<block_content>
    <comment type="block">/* Send CMD3 SET_REL_ADDR with argument 0 */</comment>
    <comment type="block">/* SD Card publishes its RCA. */</comment>
    <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdSetRelAdd</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sd_rca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>errorstate</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>(<expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name> <operator>!=</operator> <name>CARD_SECURED</name></expr>)</condition> 
  <block>{<block_content>
    <comment type="block">/* Get the SD card RCA */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>RelCardAdd</name></name> <operator>=</operator> <name>sd_rca</name></expr>;</expr_stmt>
    
    <comment type="block">/* Send CMD9 SEND_CSD with argument as card's RCA */</comment>
    <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdSendCSD</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>RelCardAdd</name></name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>errorstate</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Get Card Specific Data */</comment>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name> <operator>=</operator> <call><name>SDIO_GetResponse</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>SDIO_RESP1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>=</operator> <call><name>SDIO_GetResponse</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>SDIO_RESP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <operator>=</operator> <call><name>SDIO_GetResponse</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>SDIO_RESP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>CSD</name><index>[<expr><literal type="number">3U</literal></expr>]</index></name> <operator>=</operator> <call><name>SDIO_GetResponse</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>SDIO_RESP4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Get the Card Class */</comment>
  <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>Class</name></name> <operator>=</operator> <operator>(</operator><call><name>SDIO_GetResponse</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>SDIO_RESP2</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">20U</literal><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Get CSD parameters */</comment>
  <expr_stmt><expr><call><name>HAL_SD_GetCardCSD</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CSD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Select the Card */</comment>
  <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdSelDesel</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>RelCardAdd</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>errorstate</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Configure SDIO peripheral interface */</comment>     
  <expr_stmt><expr><call><name>SDIO_Init</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Init</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* All cards are initialized */</comment>
  <return>return <expr><name>HAL_SD_ERROR_NONE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enquires cards about their operating voltage and configures clock
  *         controls and stores SD information that will be needed in future
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>SD_PowerON</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>response</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>, <decl><type ref="prev"/><name>validvoltage</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* CMD0: GO_IDLE_STATE */</comment>
  <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdGoIdleState</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>errorstate</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* CMD8: SEND_IF_COND: Command available only on V2.0 cards */</comment>
  <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdOperCond</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardVersion</name></name> <operator>=</operator> <name>CARD_V1_X</name></expr>;</expr_stmt>
      
    <comment type="block">/* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */</comment>
    <while>while<condition>(<expr><name>validvoltage</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><name>count</name><operator>++</operator> <operator>==</operator> <name>SDMMC_MAX_VOLT_TRIAL</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_SD_ERROR_INVALID_VOLTRANGE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* SEND CMD55 APP_CMD with RCA as 0 */</comment>
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdAppCommand</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_SD_ERROR_UNSUPPORTED_FEATURE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Send CMD41 */</comment>
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdAppOperCommand</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>SDMMC_STD_CAPACITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_SD_ERROR_UNSUPPORTED_FEATURE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Get command response */</comment>
      <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>SDIO_GetResponse</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>SDIO_RESP1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Get operating voltage*/</comment>
      <expr_stmt><expr><name>validvoltage</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>response</name> <operator>&gt;&gt;</operator> <literal type="number">31U</literal><operator>)</operator> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1U</literal></expr> </then><else>: <expr><literal type="number">0U</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <comment type="block">/* Card type is SDSC */</comment>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name> <operator>=</operator> <name>CARD_SDSC</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardVersion</name></name> <operator>=</operator> <name>CARD_V2_X</name></expr>;</expr_stmt>
        
    <comment type="block">/* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */</comment>
    <while>while<condition>(<expr><name>validvoltage</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><name>count</name><operator>++</operator> <operator>==</operator> <name>SDMMC_MAX_VOLT_TRIAL</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_SD_ERROR_INVALID_VOLTRANGE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* SEND CMD55 APP_CMD with RCA as 0 */</comment>
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdAppCommand</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>errorstate</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Send CMD41 */</comment>
      <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdAppOperCommand</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>SDMMC_HIGH_CAPACITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>errorstate</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Get command response */</comment>
      <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>SDIO_GetResponse</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>SDIO_RESP1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Get operating voltage*/</comment>
      <expr_stmt><expr><name>validvoltage</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>response</name> <operator>&gt;&gt;</operator> <literal type="number">31U</literal><operator>)</operator> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1U</literal></expr> </then><else>: <expr><literal type="number">0U</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>response</name> <operator>&amp;</operator> <name>SDMMC_HIGH_CAPACITY</name><operator>)</operator> <operator>==</operator> <name>SDMMC_HIGH_CAPACITY</name></expr>)</condition> <comment type="block">/* (response &amp;= SD_HIGH_CAPACITY) */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name> <operator>=</operator> <name>CARD_SDHC_SDXC</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>CardType</name></name> <operator>=</operator> <name>CARD_SDSC</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  
  <return>return <expr><name>HAL_SD_ERROR_NONE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Turns the SDIO output signals off.
  * @param  hsd Pointer to SD handle
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>SD_PowerOFF</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Set Power State to OFF */</comment>
  <expr_stmt><expr><call><name>SDIO_PowerState_OFF</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Send Status info command.
  * @param  hsd pointer to SD handle
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status 
  *         SD Status register)
  * @retval error state
  */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>SD_SendSDStatus</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pSDstatus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SDIO_DataInitTypeDef</name></type> <name>config</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check SD response */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>SDIO_GetResponse</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>SDIO_RESP1</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>SDMMC_CARD_LOCKED</name><operator>)</operator> <operator>==</operator> <name>SDMMC_CARD_LOCKED</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_SD_ERROR_LOCK_UNLOCK_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Set block size for card if it is not equal to current block size for card */</comment>
  <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdBlockLength</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><literal type="number">64U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_NONE</name></expr>;</expr_stmt>
    <return>return <expr><name>errorstate</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Send CMD55 */</comment>
  <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdAppCommand</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>RelCardAdd</name></name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_NONE</name></expr>;</expr_stmt>
    <return>return <expr><name>errorstate</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Configure the SD DPSM (Data Path State Machine) */</comment> 
  <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataTimeOut</name></name>   <operator>=</operator> <name>SDMMC_DATATIMEOUT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataLength</name></name>    <operator>=</operator> <literal type="number">64U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataBlockSize</name></name> <operator>=</operator> <name>SDIO_DATABLOCK_SIZE_64B</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>config</name><operator>.</operator><name>TransferDir</name></name>   <operator>=</operator> <name>SDIO_TRANSFER_DIR_TO_SDIO</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>config</name><operator>.</operator><name>TransferMode</name></name>  <operator>=</operator> <name>SDIO_TRANSFER_MODE_BLOCK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DPSM</name></name>          <operator>=</operator> <name>SDIO_DPSM_ENABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDIO_ConfigData</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */</comment>
  <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdStatusRegister</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_SD_ERROR_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SD_ERROR_NONE</name></expr>;</expr_stmt>
    <return>return <expr><name>errorstate</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Get status data */</comment>
  <while>while<condition>(<expr><operator>!</operator><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_RXOVERR</name> <operator>|</operator> <name>SDIO_FLAG_DCRCFAIL</name> <operator>|</operator> <name>SDIO_FLAG_DTIMEOUT</name> <operator>|</operator> <name>SDIO_FLAG_DBCKEND</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_RXFIFOHF</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <for>for<control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <literal type="number">8U</literal></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control>
      <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>pSDstatus</name> <operator>+</operator> <name>count</name><operator>)</operator> <operator>=</operator> <call><name>SDIO_ReadFIFO</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      
      <expr_stmt><expr><name>pSDstatus</name> <operator>+=</operator> <literal type="number">8U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;=</operator>  <name>SDMMC_DATATIMEOUT</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_SD_ERROR_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_DTIMEOUT</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_SD_ERROR_DATA_TIMEOUT</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_DCRCFAIL</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_SD_ERROR_DATA_CRC_FAIL</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_RXOVERR</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_SD_ERROR_RX_OVERRUN</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><operator>(</operator><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_RXDAVL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pSDstatus</name> <operator>=</operator> <call><name>SDIO_ReadFIFO</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pSDstatus</name><operator>++</operator></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;=</operator>  <name>SDMMC_DATATIMEOUT</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_SD_ERROR_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  
  <comment type="block">/* Clear all the static status flags*/</comment>
  <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><name>HAL_SD_ERROR_NONE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns the current card's status.
  * @param  hsd Pointer to SD handle
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>SD_SendStatus</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pCardStatus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name>pCardStatus</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_SD_ERROR_PARAM</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Send Status command */</comment>
  <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdSendStatus</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>RelCardAdd</name></name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>errorstate</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Get SD card status */</comment>
  <expr_stmt><expr><operator>*</operator><name>pCardStatus</name> <operator>=</operator> <call><name>SDIO_GetResponse</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>SDIO_RESP1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><name>HAL_SD_ERROR_NONE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>SD_WideBus_Enable</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>scr</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0U</literal></expr>, <expr><literal type="number">0U</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>SDIO_GetResponse</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>SDIO_RESP1</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>SDMMC_CARD_LOCKED</name><operator>)</operator> <operator>==</operator> <name>SDMMC_CARD_LOCKED</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_SD_ERROR_LOCK_UNLOCK_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Get SCR Register */</comment>
  <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SD_FindSCR</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>errorstate</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* If requested card supports wide bus operation */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>scr</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;</operator> <name>SDMMC_WIDE_BUS_SUPPORT</name><operator>)</operator> <operator>!=</operator> <name>SDMMC_ALLZERO</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Send CMD55 APP_CMD with argument as card's RCA.*/</comment>
    <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdAppCommand</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>RelCardAdd</name></name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>errorstate</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */</comment>
    <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdBusWidth</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><literal type="number">2U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>errorstate</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>HAL_SD_ERROR_NONE</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_SD_ERROR_REQUEST_NOT_APPLICABLE</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>SD_WideBus_Disable</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>scr</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0U</literal></expr>, <expr><literal type="number">0U</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>SDIO_GetResponse</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>SDIO_RESP1</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>SDMMC_CARD_LOCKED</name><operator>)</operator> <operator>==</operator> <name>SDMMC_CARD_LOCKED</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_SD_ERROR_LOCK_UNLOCK_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Get SCR Register */</comment>
  <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SD_FindSCR</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>errorstate</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* If requested card supports 1 bit mode operation */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>scr</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;</operator> <name>SDMMC_SINGLE_BUS_SUPPORT</name><operator>)</operator> <operator>!=</operator> <name>SDMMC_ALLZERO</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Send CMD55 APP_CMD with argument as card's RCA */</comment>
    <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdAppCommand</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>RelCardAdd</name></name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>errorstate</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Send ACMD6 APP_CMD with argument as 0 for single bus mode */</comment>
    <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdBusWidth</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>errorstate</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <return>return <expr><name>HAL_SD_ERROR_NONE</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_SD_ERROR_REQUEST_NOT_APPLICABLE</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
  
  
<comment type="block" format="doxygen">/**
  * @brief  Finds the SD card SCR register value.
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>SD_FindSCR</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pSCR</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SDIO_DataInitTypeDef</name></type> <name>config</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorstate</name> <init>= <expr><name>HAL_SD_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tempscr</name><index>[<expr><literal type="number">2U</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0U</literal></expr>, <expr><literal type="number">0U</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Set Block Size To 8 Bytes */</comment>
  <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdBlockLength</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><literal type="number">8U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>errorstate</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Send CMD55 APP_CMD with argument as card's RCA */</comment>
  <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdAppCommand</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>hsd</name><operator>-&gt;</operator><name>SdCard</name><operator>.</operator><name>RelCardAdd</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>errorstate</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataTimeOut</name></name>   <operator>=</operator> <name>SDMMC_DATATIMEOUT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataLength</name></name>    <operator>=</operator> <literal type="number">8U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DataBlockSize</name></name> <operator>=</operator> <name>SDIO_DATABLOCK_SIZE_8B</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>config</name><operator>.</operator><name>TransferDir</name></name>   <operator>=</operator> <name>SDIO_TRANSFER_DIR_TO_SDIO</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>config</name><operator>.</operator><name>TransferMode</name></name>  <operator>=</operator> <name>SDIO_TRANSFER_MODE_BLOCK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>config</name><operator>.</operator><name>DPSM</name></name>          <operator>=</operator> <name>SDIO_DPSM_ENABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDIO_ConfigData</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */</comment>
  <expr_stmt><expr><name>errorstate</name> <operator>=</operator> <call><name>SDMMC_CmdSendSCR</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>errorstate</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>errorstate</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <while>while<condition>(<expr><operator>!</operator><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_RXOVERR</name> <operator>|</operator> <name>SDIO_FLAG_DCRCFAIL</name> <operator>|</operator> <name>SDIO_FLAG_DTIMEOUT</name> <operator>|</operator> <name>SDIO_FLAG_DBCKEND</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_RXDAVL</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>tempscr</name> <operator>+</operator> <name>index</name><operator>)</operator> <operator>=</operator> <call><name>SDIO_ReadFIFO</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;=</operator>  <name>SDMMC_DATATIMEOUT</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_SD_ERROR_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  
  <if_stmt><if>if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_DTIMEOUT</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_DTIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>HAL_SD_ERROR_DATA_TIMEOUT</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_DCRCFAIL</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_DCRCFAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>HAL_SD_ERROR_DATA_CRC_FAIL</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><call><name>__HAL_SD_GET_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_RXOVERR</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_FLAG_RXOVERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>HAL_SD_ERROR_RX_OVERRUN</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* No error flag set */</comment>
    <comment type="block">/* Clear all the static flags */</comment>
    <expr_stmt><expr><call><name>__HAL_SD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsd</name></expr></argument>, <argument><expr><name>SDIO_STATIC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>pSCR</name> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>tempscr</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name> <operator>&amp;</operator> <name>SDMMC_0TO7BITS</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24U</literal><operator>)</operator>  <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>tempscr</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name> <operator>&amp;</operator> <name>SDMMC_8TO15BITS</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>|</operator>\
      <operator>(</operator><operator>(</operator><name><name>tempscr</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name> <operator>&amp;</operator> <name>SDMMC_16TO23BITS</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>tempscr</name><index>[<expr><literal type="number">0U</literal></expr>]</index></name> <operator>&amp;</operator> <name>SDMMC_24TO31BITS</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt>
    
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>pSCR</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>tempscr</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;</operator> <name>SDMMC_0TO7BITS</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24U</literal><operator>)</operator>  <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>tempscr</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;</operator> <name>SDMMC_8TO15BITS</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>|</operator>\
      <operator>(</operator><operator>(</operator><name><name>tempscr</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;</operator> <name>SDMMC_16TO23BITS</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8U</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>tempscr</name><index>[<expr><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;</operator> <name>SDMMC_24TO31BITS</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_SD_ERROR_NONE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Wrap up reading in non-blocking mode.
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>SD_Read_IT</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>tmp</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>hsd</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* Read data from SDIO Rx FIFO */</comment>
  <for>for<control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <literal type="number">8U</literal></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <name>count</name><operator>)</operator> <operator>=</operator> <call><name>SDIO_ReadFIFO</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  
  <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>+=</operator> <literal type="number">8U</literal></expr>;</expr_stmt>
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Wrap up writing in non-blocking mode.
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>SD_Write_IT</name><parameter_list>(<parameter><decl><type><name>SD_HandleTypeDef</name> <modifier>*</modifier></type><name>hsd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>tmp</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>hsd</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* Write data to SDIO Tx FIFO */</comment>
  <for>for<control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <literal type="number">8U</literal></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><call><name>SDIO_WriteFIFO</name><argument_list>(<argument><expr><name><name>hsd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>tmp</name> <operator>+</operator> <name>count</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  
  <expr_stmt><expr><name><name>hsd</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name> <operator>+=</operator> <literal type="number">8U</literal></expr>;</expr_stmt>
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx || STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx ||
          STM32F401xC || STM32F401xE || STM32F411xE || STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Vx || 
          STM32F412Rx || STM32F412Cx || STM32F413xx || STM32F423xx */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_SD_MODULE_ENABLED */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
