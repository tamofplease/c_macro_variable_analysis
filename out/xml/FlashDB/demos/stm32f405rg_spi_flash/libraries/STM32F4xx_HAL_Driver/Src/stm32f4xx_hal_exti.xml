<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_exti.c
  * @author  MCD Application Team
  * @brief   EXTI HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the Extended Interrupts and events controller (EXTI) peripheral:
  *           + Initialization and de-initialization functions
  *           + IO operation functions
  *
  @verbatim
  ==============================================================================
                    ##### EXTI Peripheral features #####
  ==============================================================================
  [..]
    (+) Each Exti line can be configured within this driver.

    (+) Exti line can be configured in 3 different modes
        (++) Interrupt
        (++) Event
        (++) Both of them

    (+) Configurable Exti lines can be configured with 3 different triggers
        (++) Rising
        (++) Falling
        (++) Both of them

    (+) When set in interrupt mode, configurable Exti lines have two different
        interrupts pending registers which allow to distinguish which transition
        occurs:
        (++) Rising edge pending interrupt
        (++) Falling

    (+) Exti lines 0 to 15 are linked to gpio pin number 0 to 15. Gpio port can
        be selected through multiplexer.

                     ##### How to use this driver #####
  ==============================================================================
  [..]

    (#) Configure the EXTI line using HAL_EXTI_SetConfigLine().
        (++) Choose the interrupt line number by setting "Line" member from
             EXTI_ConfigTypeDef structure.
        (++) Configure the interrupt and/or event mode using "Mode" member from
             EXTI_ConfigTypeDef structure.
        (++) For configurable lines, configure rising and/or falling trigger
             "Trigger" member from EXTI_ConfigTypeDef structure.

    (#) Get current Exti configuration of a dedicated line using
        HAL_EXTI_GetConfigLine().
        (++) Provide exiting handle as parameter.
        (++) Provide pointer on EXTI_ConfigTypeDef structure as second parameter.

    (#) Clear Exti configuration of a dedicated line using HAL_EXTI_GetConfigLine().
        (++) Provide exiting handle as parameter.

    (#) Register callback to treat Exti interrupts using HAL_EXTI_RegisterCallback().
        (++) Provide exiting handle as first parameter.
        (++) Provide which callback will be registered using one value from
             EXTI_CallbackIDTypeDef.
        (++) Provide callback function pointer.

    (#) Get interrupt pending bit using HAL_EXTI_GetPending().

    (#) Clear interrupt pending bit using HAL_EXTI_GetPending().

    (#) Generate software interrupt using HAL_EXTI_GenerateSWI().

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2018 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup EXTI
  * @{
  */</comment>
<comment type="block" format="doxygen">/** MISRA C:2012 deviation rule has been granted for following rule:
  * Rule-18.1_b - Medium: Array `EXTICR' 1st subscript interval [0,7] may be out
  * of bounds [0,3] in following API :
  * HAL_EXTI_SetConfigLine
  * HAL_EXTI_GetConfigLine
  * HAL_EXTI_ClearConfigLine
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_EXTI_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private defines -----------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup EXTI_Private_Constants EXTI Private Constants
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private macros ------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @addtogroup EXTI_Exported_Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup EXTI_Exported_Functions_Group1
  *  @brief    Configuration functions
  *
@verbatim
 ===============================================================================
              ##### Configuration functions #####
 ===============================================================================

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Set configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_EXTI_SetConfigLine</name><parameter_list>(<parameter><decl><type><name>EXTI_HandleTypeDef</name> <modifier>*</modifier></type><name>hexti</name></decl></parameter>, <parameter><decl><type><name>EXTI_ConfigTypeDef</name> <modifier>*</modifier></type><name>pExtiConfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>regval</name></decl>;</decl_stmt>

  <comment type="block">/* Check null pointer */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hexti</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>pExtiConfig</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_EXTI_LINE</name><argument_list>(<argument><expr><name><name>pExtiConfig</name><operator>-&gt;</operator><name>Line</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_EXTI_MODE</name><argument_list>(<argument><expr><name><name>pExtiConfig</name><operator>-&gt;</operator><name>Mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_EXTI_TRIGGER</name><argument_list>(<argument><expr><name><name>pExtiConfig</name><operator>-&gt;</operator><name>Trigger</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Assign line number to handle */</comment>
  <expr_stmt><expr><name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name> <operator>=</operator> <name><name>pExtiConfig</name><operator>-&gt;</operator><name>Line</name></name></expr>;</expr_stmt>

  <comment type="block">/* Clear EXTI line configuration */</comment>
  <expr_stmt><expr><name><name>EXTI</name><operator>-&gt;</operator><name>IMR</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>pExtiConfig</name><operator>-&gt;</operator><name>Line</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>EXTI</name><operator>-&gt;</operator><name>EMR</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>pExtiConfig</name><operator>-&gt;</operator><name>Line</name></name></expr>;</expr_stmt>

  <comment type="block">/* Select the Mode for the selected external interrupts */</comment>
  <expr_stmt><expr><name>regval</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>EXTI_BASE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>regval</name> <operator>+=</operator> <name><name>pExtiConfig</name><operator>-&gt;</operator><name>Mode</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>regval</name> <operator>|=</operator> <name><name>pExtiConfig</name><operator>-&gt;</operator><name>Line</name></name></expr>;</expr_stmt>

  <comment type="block">/* Clear Rising Falling edge configuration */</comment>
  <expr_stmt><expr><name><name>EXTI</name><operator>-&gt;</operator><name>RTSR</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>pExtiConfig</name><operator>-&gt;</operator><name>Line</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>EXTI</name><operator>-&gt;</operator><name>FTSR</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>pExtiConfig</name><operator>-&gt;</operator><name>Line</name></name></expr>;</expr_stmt>

  <comment type="block">/* Select the trigger for the selected external interrupts */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pExtiConfig</name><operator>-&gt;</operator><name>Trigger</name></name> <operator>==</operator> <name>EXTI_TRIGGER_RISING_FALLING</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Rising Falling edge */</comment>
    <expr_stmt><expr><name><name>EXTI</name><operator>-&gt;</operator><name>RTSR</name></name> <operator>|=</operator> <name><name>pExtiConfig</name><operator>-&gt;</operator><name>Line</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>EXTI</name><operator>-&gt;</operator><name>FTSR</name></name> <operator>|=</operator> <name><name>pExtiConfig</name><operator>-&gt;</operator><name>Line</name></name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>regval</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>EXTI_BASE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>regval</name> <operator>+=</operator> <name><name>pExtiConfig</name><operator>-&gt;</operator><name>Trigger</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>regval</name> <operator>|=</operator> <name><name>pExtiConfig</name><operator>-&gt;</operator><name>Line</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Get configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_EXTI_GetConfigLine</name><parameter_list>(<parameter><decl><type><name>EXTI_HandleTypeDef</name> <modifier>*</modifier></type><name>hexti</name></decl></parameter>, <parameter><decl><type><name>EXTI_ConfigTypeDef</name> <modifier>*</modifier></type><name>pExtiConfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check null pointer */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hexti</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>pExtiConfig</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameter */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_EXTI_LINE</name><argument_list>(<argument><expr><name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Store handle line number to configuration structure */</comment>
  <expr_stmt><expr><name><name>pExtiConfig</name><operator>-&gt;</operator><name>Line</name></name> <operator>=</operator> <name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name></expr>;</expr_stmt>

  <comment type="block">/* Get EXTI mode to configiguration structure */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>EXTI</name><operator>-&gt;</operator><name>IMR</name></name> <operator>&amp;</operator> <name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name><operator>)</operator> <operator>==</operator> <name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>pExtiConfig</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <name>EXTI_MODE_INTERRUPT</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>EXTI</name><operator>-&gt;</operator><name>EMR</name></name> <operator>&amp;</operator> <name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name><operator>)</operator> <operator>==</operator> <name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>pExtiConfig</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <name>EXTI_MODE_EVENT</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* No MODE selected */</comment>
    <expr_stmt><expr><name><name>pExtiConfig</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <literal type="number">0x0Bu</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Get EXTI Trigger to configiguration structure */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>EXTI</name><operator>-&gt;</operator><name>RTSR</name></name> <operator>&amp;</operator> <name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name><operator>)</operator> <operator>==</operator> <name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>EXTI</name><operator>-&gt;</operator><name>FTSR</name></name> <operator>&amp;</operator> <name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name><operator>)</operator> <operator>==</operator> <name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>pExtiConfig</name><operator>-&gt;</operator><name>Trigger</name></name> <operator>=</operator> <name>EXTI_TRIGGER_RISING_FALLING</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>pExtiConfig</name><operator>-&gt;</operator><name>Trigger</name></name> <operator>=</operator> <name>EXTI_TRIGGER_RISING</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>EXTI</name><operator>-&gt;</operator><name>FTSR</name></name> <operator>&amp;</operator> <name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name><operator>)</operator> <operator>==</operator> <name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>pExtiConfig</name><operator>-&gt;</operator><name>Trigger</name></name> <operator>=</operator> <name>EXTI_TRIGGER_FALLING</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* No Trigger selected */</comment>
    <expr_stmt><expr><name><name>pExtiConfig</name><operator>-&gt;</operator><name>Trigger</name></name> <operator>=</operator> <literal type="number">0x00u</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_EXTI_ClearConfigLine</name><parameter_list>(<parameter><decl><type><name>EXTI_HandleTypeDef</name> <modifier>*</modifier></type><name>hexti</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check null pointer */</comment>
  <if_stmt><if>if <condition>(<expr><name>hexti</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameter */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_EXTI_LINE</name><argument_list>(<argument><expr><name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* 1] Clear interrupt mode */</comment>
  <expr_stmt><expr><name><name>EXTI</name><operator>-&gt;</operator><name>IMR</name></name> <operator>=</operator> <operator>(</operator><name><name>EXTI</name><operator>-&gt;</operator><name>IMR</name></name> <operator>&amp;</operator> <operator>~</operator><name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* 2] Clear event mode */</comment>
  <expr_stmt><expr><name><name>EXTI</name><operator>-&gt;</operator><name>EMR</name></name> <operator>=</operator> <operator>(</operator><name><name>EXTI</name><operator>-&gt;</operator><name>EMR</name></name> <operator>&amp;</operator> <operator>~</operator><name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* 3] Clear triggers */</comment>
  <expr_stmt><expr><name><name>EXTI</name><operator>-&gt;</operator><name>RTSR</name></name> <operator>=</operator> <operator>(</operator><name><name>EXTI</name><operator>-&gt;</operator><name>RTSR</name></name> <operator>&amp;</operator> <operator>~</operator><name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>EXTI</name><operator>-&gt;</operator><name>FTSR</name></name> <operator>=</operator> <operator>(</operator><name><name>EXTI</name><operator>-&gt;</operator><name>FTSR</name></name> <operator>&amp;</operator> <operator>~</operator><name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name><operator>)</operator></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Register callback for a dedicated Exti line.
  * @param  hexti Exti handle.
  * @param  CallbackID User callback identifier.
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_EXTI_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>EXTI_HandleTypeDef</name> <modifier>*</modifier></type><name>hexti</name></decl></parameter>, <parameter><decl><type><name>EXTI_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pPendingCbfn</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
  <block>{<block_content>
    <case>case  <expr><name>HAL_EXTI_COMMON_CB_ID</name></expr>:</case>
      <expr_stmt><expr><name><name>hexti</name><operator>-&gt;</operator><name>RisingCallback</name></name> <operator>=</operator> <name>pPendingCbfn</name></expr>;</expr_stmt>
      <break>break;</break>

    <default>default:</default>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Store line number as handle private field.
  * @param  hexti Exti handle.
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_EXTI_GetHandle</name><parameter_list>(<parameter><decl><type><name>EXTI_HandleTypeDef</name> <modifier>*</modifier></type><name>hexti</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ExtiLine</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_EXTI_LINE</name><argument_list>(<argument><expr><name>ExtiLine</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check null pointer */</comment>
  <if_stmt><if>if <condition>(<expr><name>hexti</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Store line number as handle private field */</comment>
    <expr_stmt><expr><name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name> <operator>=</operator> <name>ExtiLine</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup EXTI_Exported_Functions_Group2
  *  @brief EXTI IO functions.
  *
@verbatim
 ===============================================================================
                       ##### IO operation functions #####
 ===============================================================================

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */</comment>
<function><type><name>void</name></type> <name>HAL_EXTI_IRQHandler</name><parameter_list>(<parameter><decl><type><name>EXTI_HandleTypeDef</name> <modifier>*</modifier></type><name>hexti</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>EXTI</name><operator>-&gt;</operator><name>PR</name></name> <operator>!=</operator> <literal type="number">0x00u</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear pending bit */</comment>
    <expr_stmt><expr><name><name>EXTI</name><operator>-&gt;</operator><name>PR</name></name> <operator>=</operator> <name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name></expr>;</expr_stmt>

    <comment type="block">/* Call callback */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hexti</name><operator>-&gt;</operator><name>RisingCallback</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name><name>hexti</name><operator>-&gt;</operator><name>RisingCallback</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Get interrupt pending bit of a dedicated line.
  * @param  hexti Exti handle.
  * @param  Edge Specify which pending edge as to be checked.
  *         This parameter can be one of the following values:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_EXTI_GetPending</name><parameter_list>(<parameter><decl><type><name>EXTI_HandleTypeDef</name> <modifier>*</modifier></type><name>hexti</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Edge</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name> <modifier>*</modifier></type><name>regaddr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>regval</name></decl>;</decl_stmt>

  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_EXTI_LINE</name><argument_list>(<argument><expr><name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_EXTI_PENDING_EDGE</name><argument_list>(<argument><expr><name>Edge</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get pending bit */</comment>
  <expr_stmt><expr><name>regaddr</name> <operator>=</operator> <operator>&amp;</operator><name><name>EXTI</name><operator>-&gt;</operator><name>PR</name></name></expr>;</expr_stmt>

  <comment type="block">/* return 1 if bit is set else 0 */</comment>
  <expr_stmt><expr><name>regval</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>regaddr</name> <operator>&amp;</operator> <name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <call><name>POSITION_VAL</name><argument_list>(<argument><expr><name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

  <return>return <expr><name>regval</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Clear interrupt pending bit of a dedicated line.
  * @param  hexti Exti handle.
  * @param  Edge Specify which pending edge as to be clear.
  *         This parameter can be one of the following values:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */</comment>
<function><type><name>void</name></type> <name>HAL_EXTI_ClearPending</name><parameter_list>(<parameter><decl><type><name>EXTI_HandleTypeDef</name> <modifier>*</modifier></type><name>hexti</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Edge</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_EXTI_LINE</name><argument_list>(<argument><expr><name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_EXTI_PENDING_EDGE</name><argument_list>(<argument><expr><name>Edge</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>EXTI</name><operator>-&gt;</operator><name>PR</name></name> <operator>=</operator>  <name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */</comment>
<function><type><name>void</name></type> <name>HAL_EXTI_GenerateSWI</name><parameter_list>(<parameter><decl><type><name>EXTI_HandleTypeDef</name> <modifier>*</modifier></type><name>hexti</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_EXTI_LINE</name><argument_list>(<argument><expr><name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>EXTI</name><operator>-&gt;</operator><name>SWIER</name></name> <operator>=</operator> <name><name>hexti</name><operator>-&gt;</operator><name>Line</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_EXTI_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
