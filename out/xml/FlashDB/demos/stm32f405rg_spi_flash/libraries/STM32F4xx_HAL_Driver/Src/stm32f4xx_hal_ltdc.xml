<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_ltdc.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_ltdc.c
  * @author  MCD Application Team
  * @brief   LTDC HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the LTDC peripheral:
  *           + Initialization and de-initialization functions
  *           + IO operation functions
  *           + Peripheral Control functions
  *           + Peripheral State and Errors functions
  *
  @verbatim
  ==============================================================================
                        ##### How to use this driver #####
  ==============================================================================
    [..]
     (#) Program the required configuration through the following parameters:
         the LTDC timing, the horizontal and vertical polarity,
         the pixel clock polarity, Data Enable polarity and the LTDC background color value
         using HAL_LTDC_Init() function

     (#) Program the required configuration through the following parameters:
         the pixel format, the blending factors, input alpha value, the window size
         and the image size using HAL_LTDC_ConfigLayer() function for foreground
         or/and background layer.

     (#) Optionally, configure and enable the CLUT using HAL_LTDC_ConfigCLUT() and
         HAL_LTDC_EnableCLUT functions.

     (#) Optionally, enable the Dither using HAL_LTDC_EnableDither().

     (#) Optionally, configure and enable the Color keying using HAL_LTDC_ConfigColorKeying()
         and HAL_LTDC_EnableColorKeying functions.

     (#) Optionally, configure LineInterrupt using HAL_LTDC_ProgramLineEvent()
         function

     (#) If needed, reconfigure and change the pixel format value, the alpha value
         value, the window size, the window position and the layer start address
         for foreground or/and background layer using respectively the following
         functions: HAL_LTDC_SetPixelFormat(), HAL_LTDC_SetAlpha(), HAL_LTDC_SetWindowSize(),
         HAL_LTDC_SetWindowPosition() and HAL_LTDC_SetAddress().

     (#) Variant functions with _NoReload suffix allows to set the LTDC configuration/settings without immediate reload.
         This is useful in case when the program requires to modify serval LTDC settings (on one or both layers)
         then applying(reload) these settings in one shot by calling the function HAL_LTDC_Reload().

         After calling the _NoReload functions to set different color/format/layer settings,
         the program shall call the function HAL_LTDC_Reload() to apply(reload) these settings.
         Function HAL_LTDC_Reload() can be called with the parameter ReloadType set to LTDC_RELOAD_IMMEDIATE if
         an immediate reload is required.
         Function HAL_LTDC_Reload() can be called with the parameter ReloadType set to LTDC_RELOAD_VERTICAL_BLANKING if
         the reload should be done in the next vertical blanking period,
         this option allows to avoid display flicker by applying the new settings during the vertical blanking period.


     (#) To control LTDC state you can use the following function: HAL_LTDC_GetState()

     *** LTDC HAL driver macros list ***
     =============================================
     [..]
       Below the list of most used macros in LTDC HAL driver.

      (+) __HAL_LTDC_ENABLE: Enable the LTDC.
      (+) __HAL_LTDC_DISABLE: Disable the LTDC.
      (+) __HAL_LTDC_LAYER_ENABLE: Enable an LTDC Layer.
      (+) __HAL_LTDC_LAYER_DISABLE: Disable an LTDC Layer.
      (+) __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG: Reload  Layer Configuration.
      (+) __HAL_LTDC_GET_FLAG: Get the LTDC pending flags.
      (+) __HAL_LTDC_CLEAR_FLAG: Clear the LTDC pending flags.
      (+) __HAL_LTDC_ENABLE_IT: Enable the specified LTDC interrupts.
      (+) __HAL_LTDC_DISABLE_IT: Disable the specified LTDC interrupts.
      (+) __HAL_LTDC_GET_IT_SOURCE: Check whether the specified LTDC interrupt has occurred or not.


  *** Callback registration ***
  =============================================

  The compilation define  USE_HAL_LTDC_REGISTER_CALLBACKS when set to 1
  allows the user to configure dynamically the driver callbacks.
  Use Function @ref HAL_LTDC_RegisterCallback() to register a callback.

  Function @ref HAL_LTDC_RegisterCallback() allows to register following callbacks:
    (+) LineEventCallback   : LTDC Line Event Callback.
    (+) ReloadEventCallback : LTDC Reload Event Callback.
    (+) ErrorCallback       : LTDC Error Callback
    (+) MspInitCallback     : LTDC MspInit.
    (+) MspDeInitCallback   : LTDC MspDeInit.
  This function takes as parameters the HAL peripheral handle, the Callback ID
  and a pointer to the user callback function.

  Use function @ref HAL_LTDC_UnRegisterCallback() to reset a callback to the default
  weak function.
  @ref HAL_LTDC_UnRegisterCallback takes as parameters the HAL peripheral handle,
  and the Callback ID.
  This function allows to reset following callbacks:
    (+) LineEventCallback   : LTDC Line Event Callback.
    (+) ReloadEventCallback : LTDC Reload Event Callback.
    (+) ErrorCallback       : LTDC Error Callback
    (+) MspInitCallback     : LTDC MspInit.
    (+) MspDeInitCallback   : LTDC MspDeInit.

  By default, after the HAL_LTDC_Init and when the state is HAL_LTDC_STATE_RESET
  all callbacks are set to the corresponding weak functions:
  examples @ref HAL_LTDC_LineEventCallback(), @ref HAL_LTDC_ErrorCallback().
  Exception done for MspInit and MspDeInit functions that are
  reset to the legacy weak function in the HAL_LTDC_Init/ @ref HAL_LTDC_DeInit only when
  these callbacks are null (not registered beforehand).
  if not, MspInit or MspDeInit are not null, the @ref HAL_LTDC_Init/ @ref HAL_LTDC_DeInit
  keep and use the user MspInit/MspDeInit callbacks (registered beforehand)

  Callbacks can be registered/unregistered in HAL_LTDC_STATE_READY state only.
  Exception done MspInit/MspDeInit that can be registered/unregistered
  in HAL_LTDC_STATE_READY or HAL_LTDC_STATE_RESET state,
  thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
  In that case first register the MspInit/MspDeInit user callbacks
  using @ref HAL_LTDC_RegisterCallback() before calling @ref HAL_LTDC_DeInit
  or HAL_LTDC_Init function.

  When The compilation define USE_HAL_LTDC_REGISTER_CALLBACKS is set to 0 or
  not defined, the callback registration feature is not available and all callbacks
  are set to the corresponding weak functions.

     [..]
       (@) You can refer to the LTDC HAL driver header file for more useful macros

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_LTDC_MODULE_ENABLED</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>LTDC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup LTDC LTDC
  * @brief LTDC HAL module driver
  * @{
  */</comment>


<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>LTDC_SetConfig</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>LTDC_LayerCfgTypeDef</name> <modifier>*</modifier></type><name>pLayerCfg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup LTDC_Exported_Functions LTDC Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup LTDC_Exported_Functions_Group1 Initialization and Configuration functions
  *  @brief   Initialization and Configuration functions
  *
@verbatim
 ===============================================================================
                ##### Initialization and Configuration functions #####
 ===============================================================================
    [..]  This section provides functions allowing to:
      (+) Initialize and configure the LTDC
      (+) De-initialize the LTDC

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initialize the LTDC according to the specified parameters in the LTDC_InitTypeDef.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_Init</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>;</decl_stmt>

  <comment type="block">/* Check the LTDC peripheral state */</comment>
  <if_stmt><if>if <condition>(<expr><name>hltdc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check function parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_HSYNC</name><argument_list>(<argument><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HorizontalSync</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_VSYNC</name><argument_list>(<argument><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>VerticalSync</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_AHBP</name><argument_list>(<argument><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AccumulatedHBP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_AVBP</name><argument_list>(<argument><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AccumulatedVBP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_AAH</name><argument_list>(<argument><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AccumulatedActiveH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_AAW</name><argument_list>(<argument><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AccumulatedActiveW</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_TOTALH</name><argument_list>(<argument><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>TotalHeigh</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_TOTALW</name><argument_list>(<argument><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>TotalWidth</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_HSPOL</name><argument_list>(<argument><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HSPolarity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_VSPOL</name><argument_list>(<argument><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>VSPolarity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_DEPOL</name><argument_list>(<argument><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DEPolarity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_PCPOL</name><argument_list>(<argument><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PCPolarity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_LTDC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_LTDC_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

    <comment type="block">/* Reset the LTDC callback to the legacy weak callbacks */</comment>
    <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>LineEventCallback</name></name>   <operator>=</operator> <name>HAL_LTDC_LineEventCallback</name></expr>;</expr_stmt>    <comment type="block">/* Legacy weak LineEventCallback    */</comment>
    <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>ReloadEventCallback</name></name> <operator>=</operator> <name>HAL_LTDC_ReloadEventCallback</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak ReloadEventCallback  */</comment>
    <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>ErrorCallback</name></name>       <operator>=</operator> <name>HAL_LTDC_ErrorCallback</name></expr>;</expr_stmt>        <comment type="block">/* Legacy weak ErrorCallback        */</comment>

    <if_stmt><if>if <condition>(<expr><name><name>hltdc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_LTDC_MspInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>hltdc</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_LTDC_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>
    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name>HAL_LTDC_MspInit</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_LTDC_REGISTER_CALLBACKS */</comment>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Configure the HS, VS, DE and PC polarity */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>GCR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>LTDC_GCR_HSPOL</name> <operator>|</operator> <name>LTDC_GCR_VSPOL</name> <operator>|</operator> <name>LTDC_GCR_DEPOL</name> <operator>|</operator> <name>LTDC_GCR_PCPOL</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>GCR</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HSPolarity</name></name> <operator>|</operator> <name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>VSPolarity</name></name> <operator>|</operator> \
                                     <name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DEPolarity</name></name> <operator>|</operator> <name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PCPolarity</name></name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Set Synchronization size */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SSCR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>LTDC_SSCR_VSH</name> <operator>|</operator> <name>LTDC_SSCR_HSW</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HorizontalSync</name></name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SSCR</name></name> <operator>|=</operator> <operator>(</operator><name>tmp</name> <operator>|</operator> <name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>VerticalSync</name></name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Set Accumulated Back porch */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BPCR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>LTDC_BPCR_AVBP</name> <operator>|</operator> <name>LTDC_BPCR_AHBP</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AccumulatedHBP</name></name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BPCR</name></name> <operator>|=</operator> <operator>(</operator><name>tmp</name> <operator>|</operator> <name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AccumulatedVBP</name></name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Set Accumulated Active Width */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>AWCR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>LTDC_AWCR_AAH</name> <operator>|</operator> <name>LTDC_AWCR_AAW</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AccumulatedActiveW</name></name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>AWCR</name></name> <operator>|=</operator> <operator>(</operator><name>tmp</name> <operator>|</operator> <name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AccumulatedActiveH</name></name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Set Total Width */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TWCR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>LTDC_TWCR_TOTALH</name> <operator>|</operator> <name>LTDC_TWCR_TOTALW</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>TotalWidth</name></name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TWCR</name></name> <operator>|=</operator> <operator>(</operator><name>tmp</name> <operator>|</operator> <name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>TotalHeigh</name></name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Set the background color value */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Backcolor</name><operator>.</operator><name>Green</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Backcolor</name><operator>.</operator><name>Red</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BCCR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>LTDC_BCCR_BCBLUE</name> <operator>|</operator> <name>LTDC_BCCR_BCGREEN</name> <operator>|</operator> <name>LTDC_BCCR_BCRED</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BCCR</name></name> <operator>|=</operator> <operator>(</operator><name>tmp1</name> <operator>|</operator> <name>tmp</name> <operator>|</operator> <name><name>hltdc</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Backcolor</name><operator>.</operator><name>Blue</name></name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Enable the Transfer Error and FIFO underrun interrupts */</comment>
  <expr_stmt><expr><call><name>__HAL_LTDC_ENABLE_IT</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LTDC_IT_TE</name> <operator>|</operator> <name>LTDC_IT_FU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable LTDC by setting LTDCEN bit */</comment>
  <expr_stmt><expr><call><name>__HAL_LTDC_ENABLE</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize the error code */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_LTDC_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Initialize the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  De-initialize the LTDC peripheral.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */</comment>

<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_DeInit</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_LTDC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>hltdc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_LTDC_MspDeInit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name><name>hltdc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name>HAL_LTDC_MspDeInit</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_LTDC_REGISTER_CALLBACKS */</comment>

  <comment type="block">/* Initialize the error code */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_LTDC_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Initialize the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initialize the LTDC MSP.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_LTDC_MspInit</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  De-initialize the LTDC MSP.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_LTDC_MspDeInit</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspDeInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_LTDC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User LTDC Callback
  *         To be used instead of the weak predefined callback
  * @param hltdc ltdc handle
  * @param CallbackID ID of the callback to be registered
  *        This parameter can be one of the following values:
  *          @arg @ref HAL_LTDC_LINE_EVENT_CB_ID Line Event Callback ID
  *          @arg @ref HAL_LTDC_RELOAD_EVENT_CB_ID Reload Event Callback ID
  *          @arg @ref HAL_LTDC_ERROR_CB_ID Error Callback ID
  *          @arg @ref HAL_LTDC_MSPINIT_CB_ID MspInit callback ID
  *          @arg @ref HAL_LTDC_MSPDEINIT_CB_ID MspDeInit callback ID
  * @param pCallback pointer to the Callback function
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>HAL_LTDC_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>, <parameter><decl><type><name>pLTDC_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_LTDC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_LTDC_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_LTDC_LINE_EVENT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>LineEventCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_LTDC_RELOAD_EVENT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>ReloadEventCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_LTDC_ERROR_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_LTDC_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_LTDC_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_LTDC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_LTDC_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_LTDC_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_LTDC_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_LTDC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_LTDC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister an LTDC Callback
  *         LTDC callabck is redirected to the weak predefined callback
  * @param hltdc ltdc handle
  * @param CallbackID ID of the callback to be unregistered
  *        This parameter can be one of the following values:
  *          @arg @ref HAL_LTDC_LINE_EVENT_CB_ID Line Event Callback ID
  *          @arg @ref HAL_LTDC_RELOAD_EVENT_CB_ID Reload Event Callback ID
  *          @arg @ref HAL_LTDC_ERROR_CB_ID Error Callback ID
  *          @arg @ref HAL_LTDC_MSPINIT_CB_ID MspInit callback ID
  *          @arg @ref HAL_LTDC_MSPDEINIT_CB_ID MspDeInit callback ID
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>HAL_LTDC_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_LTDC_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_LTDC_LINE_EVENT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>LineEventCallback</name></name> <operator>=</operator> <name>HAL_LTDC_LineEventCallback</name></expr>;</expr_stmt>      <comment type="block">/* Legacy weak LineEventCallback    */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_LTDC_RELOAD_EVENT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>ReloadEventCallback</name></name> <operator>=</operator> <name>HAL_LTDC_ReloadEventCallback</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak ReloadEventCallback  */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_LTDC_ERROR_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>ErrorCallback</name></name>       <operator>=</operator> <name>HAL_LTDC_ErrorCallback</name></expr>;</expr_stmt>        <comment type="block">/* Legacy weak ErrorCallback        */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_LTDC_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_LTDC_MspInit</name></expr>;</expr_stmt>                  <comment type="block">/* Legcay weak MspInit Callback     */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_LTDC_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_LTDC_MspDeInit</name></expr>;</expr_stmt>              <comment type="block">/* Legcay weak MspDeInit Callback     */</comment>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_LTDC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_LTDC_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_LTDC_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_LTDC_MspInit</name></expr>;</expr_stmt>                  <comment type="block">/* Legcay weak MspInit Callback     */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_LTDC_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_LTDC_MspDeInit</name></expr>;</expr_stmt>              <comment type="block">/* Legcay weak MspDeInit Callback     */</comment>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_LTDC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_LTDC_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_LTDC_REGISTER_CALLBACKS */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup LTDC_Exported_Functions_Group2 IO operation functions
  *  @brief   IO operation functions
  *
@verbatim
 ===============================================================================
                      #####  IO operation functions  #####
 ===============================================================================
    [..]  This section provides function allowing to:
      (+) Handle LTDC interrupt request

@endverbatim
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @brief  Handle LTDC interrupt request.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */</comment>
<function><type><name>void</name></type> <name>HAL_LTDC_IRQHandler</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>isrflags</name>  <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>itsources</name> <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Transfer Error Interrupt management ***************************************/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>LTDC_ISR_TERRIF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itsources</name> <operator>&amp;</operator> <name>LTDC_IER_TERRIE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the transfer Error interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_LTDC_DISABLE_IT</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LTDC_IT_TE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear the transfer error flag */</comment>
    <expr_stmt><expr><call><name>__HAL_LTDC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LTDC_FLAG_TE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update error code */</comment>
    <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_LTDC_ERROR_TE</name></expr>;</expr_stmt>

    <comment type="block">/* Change LTDC state */</comment>
    <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_ERROR</name></expr>;</expr_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Transfer error Callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_LTDC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/*Call registered error callback*/</comment>
    <expr_stmt><expr><call><name><name>hltdc</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Call legacy error callback*/</comment>
    <expr_stmt><expr><call><name>HAL_LTDC_ErrorCallback</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_LTDC_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* FIFO underrun Interrupt management ***************************************/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>LTDC_ISR_FUIF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itsources</name> <operator>&amp;</operator> <name>LTDC_IER_FUIE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the FIFO underrun interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_LTDC_DISABLE_IT</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LTDC_IT_FU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear the FIFO underrun flag */</comment>
    <expr_stmt><expr><call><name>__HAL_LTDC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LTDC_FLAG_FU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update error code */</comment>
    <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_LTDC_ERROR_FU</name></expr>;</expr_stmt>

    <comment type="block">/* Change LTDC state */</comment>
    <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_ERROR</name></expr>;</expr_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Transfer error Callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_LTDC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/*Call registered error callback*/</comment>
    <expr_stmt><expr><call><name><name>hltdc</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Call legacy error callback*/</comment>
    <expr_stmt><expr><call><name>HAL_LTDC_ErrorCallback</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_LTDC_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Line Interrupt management ************************************************/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>LTDC_ISR_LIF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itsources</name> <operator>&amp;</operator> <name>LTDC_IER_LIE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the Line interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_LTDC_DISABLE_IT</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LTDC_IT_LI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear the Line interrupt flag */</comment>
    <expr_stmt><expr><call><name>__HAL_LTDC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LTDC_FLAG_LI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Change LTDC state */</comment>
    <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Line interrupt Callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_LTDC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/*Call registered Line Event callback */</comment>
    <expr_stmt><expr><call><name><name>hltdc</name><operator>-&gt;</operator><name>LineEventCallback</name></name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/*Call Legacy Line Event callback */</comment>
    <expr_stmt><expr><call><name>HAL_LTDC_LineEventCallback</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_LTDC_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Register reload Interrupt management ***************************************/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>LTDC_ISR_RRIF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itsources</name> <operator>&amp;</operator> <name>LTDC_IER_RRIE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the register reload interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_LTDC_DISABLE_IT</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LTDC_IT_RR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear the register reload flag */</comment>
    <expr_stmt><expr><call><name>__HAL_LTDC_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LTDC_FLAG_RR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Change LTDC state */</comment>
    <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Reload interrupt Callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_LTDC_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/*Call registered reload Event callback */</comment>
    <expr_stmt><expr><call><name><name>hltdc</name><operator>-&gt;</operator><name>ReloadEventCallback</name></name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/*Call Legacy Reload Event callback */</comment>
    <expr_stmt><expr><call><name>HAL_LTDC_ReloadEventCallback</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_LTDC_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Error LTDC callback.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_LTDC_ErrorCallback</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Line Event callback.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_LTDC_LineEventCallback</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Reload Event callback.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_LTDC_ReloadEventCallback</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup LTDC_Exported_Functions_Group3 Peripheral Control functions
  *  @brief    Peripheral Control functions
  *
@verbatim
 ===============================================================================
                    ##### Peripheral Control functions #####
 ===============================================================================
    [..]  This section provides functions allowing to:
      (+) Configure the LTDC foreground or/and background parameters.
      (+) Set the active layer.
      (+) Configure the color keying.
      (+) Configure the C-LUT.
      (+) Enable / Disable the color keying.
      (+) Enable / Disable the C-LUT.
      (+) Update the layer position.
      (+) Update the layer size.
      (+) Update pixel format on the fly.
      (+) Update transparency on the fly.
      (+) Update address on the fly.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Configure the LTDC Layer according to the specified
  *         parameters in the LTDC_InitTypeDef and create the associated handle.
  * @param  hltdc      pointer to a LTDC_HandleTypeDef structure that contains
  *                    the configuration information for the LTDC.
  * @param  pLayerCfg  pointer to a LTDC_LayerCfgTypeDef structure that contains
  *                    the configuration information for the Layer.
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_ConfigLayer</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>LTDC_LayerCfgTypeDef</name> <modifier>*</modifier></type><name>pLayerCfg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_HCONFIGST</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowX0</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_HCONFIGSP</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowX1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_VCONFIGST</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowY0</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_VCONFIGSP</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowY1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_PIXEL_FORMAT</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>PixelFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_ALPHA</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>Alpha</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_ALPHA</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>Alpha0</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_BLENDING_FACTOR1</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>BlendingFactor1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_BLENDING_FACTOR2</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>BlendingFactor2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_CFBLL</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>ImageWidth</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_CFBLNBR</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>ImageHeight</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Copy new layer configuration into handle structure */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>LayerCfg</name><index>[<expr><name>LayerIdx</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>pLayerCfg</name></expr>;</expr_stmt>

  <comment type="block">/* Configure the LTDC Layer */</comment>
  <expr_stmt><expr><call><name>LTDC_SetConfig</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>pLayerCfg</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the Immediate Reload type */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SRCR</name></name> <operator>=</operator> <name>LTDC_SRCR_IMR</name></expr>;</expr_stmt>

  <comment type="block">/* Initialize the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name>  <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configure the color keying.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  RGBValue  the color key value
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_ConfigColorKeying</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>RGBValue</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Configure the default color values */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CKCR</name> <operator>&amp;=</operator>  <operator>~</operator><operator>(</operator><name>LTDC_LxCKCR_CKBLUE</name> <operator>|</operator> <name>LTDC_LxCKCR_CKGREEN</name> <operator>|</operator> <name>LTDC_LxCKCR_CKRED</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CKCR</name>  <operator>=</operator> <name>RGBValue</name></expr>;</expr_stmt>

  <comment type="block">/* Set the Immediate Reload type */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SRCR</name></name> <operator>=</operator> <name>LTDC_SRCR_IMR</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Load the color lookup table.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  pCLUT     pointer to the color lookup table address.
  * @param  CLUTSize  the color lookup table size.
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_ConfigCLUT</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pCLUT</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>CLUTSize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>counter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pcolorlut</name> <init>= <expr><name>pCLUT</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>counter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><operator>(</operator><name>counter</name> <operator>&lt;</operator> <name>CLUTSize</name><operator>)</operator></expr>;</condition> <incr><expr><name>counter</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>hltdc</name><operator>-&gt;</operator><name>LayerCfg</name><index>[<expr><name>LayerIdx</name></expr>]</index></name><operator>.</operator><name>PixelFormat</name> <operator>==</operator> <name>LTDC_PIXEL_FORMAT_AL44</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name>  <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>counter</name> <operator>+</operator> <operator>(</operator><literal type="number">16U</literal><operator>*</operator><name>counter</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24U</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>pcolorlut</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFU</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>pcolorlut</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF00U</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>pcolorlut</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF0000U</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name>  <operator>=</operator> <operator>(</operator><operator>(</operator><name>counter</name> <operator>&lt;&lt;</operator> <literal type="number">24U</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>pcolorlut</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFU</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>pcolorlut</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF00U</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>pcolorlut</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF0000U</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>pcolorlut</name><operator>++</operator></expr>;</expr_stmt>

    <comment type="block">/* Specifies the C-LUT address and RGB value */</comment>
    <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CLUTWR</name>  <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enable the color keying.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_EnableColorKeying</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Enable LTDC color keying by setting COLKEN bit */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CR</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>LTDC_LxCR_COLKEN</name></expr>;</expr_stmt>

  <comment type="block">/* Set the Immediate Reload type */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SRCR</name></name> <operator>=</operator> <name>LTDC_SRCR_IMR</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable the color keying.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_DisableColorKeying</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable LTDC color keying by setting COLKEN bit */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CR</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>LTDC_LxCR_COLKEN</name></expr>;</expr_stmt>

  <comment type="block">/* Set the Immediate Reload type */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SRCR</name></name> <operator>=</operator> <name>LTDC_SRCR_IMR</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enable the color lookup table.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_EnableCLUT</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Enable LTDC color lookup table by setting CLUTEN bit */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CR</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>LTDC_LxCR_CLUTEN</name></expr>;</expr_stmt>

  <comment type="block">/* Set the Immediate Reload type */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SRCR</name></name> <operator>=</operator> <name>LTDC_SRCR_IMR</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable the color lookup table.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_DisableCLUT</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable LTDC color lookup table by setting CLUTEN bit */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CR</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>LTDC_LxCR_CLUTEN</name></expr>;</expr_stmt>

  <comment type="block">/* Set the Immediate Reload type */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SRCR</name></name> <operator>=</operator> <name>LTDC_SRCR_IMR</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enable Dither.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */</comment>

<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_EnableDither</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Enable Dither by setting DTEN bit */</comment>
  <expr_stmt><expr><name><name>LTDC</name><operator>-&gt;</operator><name>GCR</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>LTDC_GCR_DEN</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable Dither.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */</comment>

<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_DisableDither</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable Dither by setting DTEN bit */</comment>
  <expr_stmt><expr><name><name>LTDC</name><operator>-&gt;</operator><name>GCR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>LTDC_GCR_DEN</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Set the LTDC window size.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  XSize     LTDC Pixel per line
  * @param  YSize     LTDC Line number
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_SetWindowSize</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>XSize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>YSize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>LTDC_LayerCfgTypeDef</name> <modifier>*</modifier></type><name>pLayerCfg</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters (Layers parameters)*/</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_CFBLL</name><argument_list>(<argument><expr><name>XSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_CFBLNBR</name><argument_list>(<argument><expr><name>YSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Get layer configuration from handle structure */</comment>
  <expr_stmt><expr><name>pLayerCfg</name> <operator>=</operator> <operator>&amp;</operator><name><name>hltdc</name><operator>-&gt;</operator><name>LayerCfg</name><index>[<expr><name>LayerIdx</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* update horizontal stop */</comment>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowX1</name></name> <operator>=</operator> <name>XSize</name> <operator>+</operator> <name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowX0</name></name></expr>;</expr_stmt>

  <comment type="block">/* update vertical stop */</comment>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowY1</name></name> <operator>=</operator> <name>YSize</name> <operator>+</operator> <name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowY0</name></name></expr>;</expr_stmt>

  <comment type="block">/* Reconfigures the color frame buffer pitch in byte */</comment>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>ImageWidth</name></name> <operator>=</operator> <name>XSize</name></expr>;</expr_stmt>

  <comment type="block">/* Reconfigures the frame buffer line number */</comment>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>ImageHeight</name></name> <operator>=</operator> <name>YSize</name></expr>;</expr_stmt>

  <comment type="block">/* Set LTDC parameters */</comment>
  <expr_stmt><expr><call><name>LTDC_SetConfig</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>pLayerCfg</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the Immediate Reload type */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SRCR</name></name> <operator>=</operator> <name>LTDC_SRCR_IMR</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Set the LTDC window position.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  X0        LTDC window X offset
  * @param  Y0        LTDC window Y offset
  * @param  LayerIdx  LTDC Layer index.
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_SetWindowPosition</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>X0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Y0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>LTDC_LayerCfgTypeDef</name> <modifier>*</modifier></type><name>pLayerCfg</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_CFBLL</name><argument_list>(<argument><expr><name>X0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_CFBLNBR</name><argument_list>(<argument><expr><name>Y0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Get layer configuration from handle structure */</comment>
  <expr_stmt><expr><name>pLayerCfg</name> <operator>=</operator> <operator>&amp;</operator><name><name>hltdc</name><operator>-&gt;</operator><name>LayerCfg</name><index>[<expr><name>LayerIdx</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* update horizontal start/stop */</comment>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowX0</name></name> <operator>=</operator> <name>X0</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowX1</name></name> <operator>=</operator> <name>X0</name> <operator>+</operator> <name><name>pLayerCfg</name><operator>-&gt;</operator><name>ImageWidth</name></name></expr>;</expr_stmt>

  <comment type="block">/* update vertical start/stop */</comment>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowY0</name></name> <operator>=</operator> <name>Y0</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowY1</name></name> <operator>=</operator> <name>Y0</name> <operator>+</operator> <name><name>pLayerCfg</name><operator>-&gt;</operator><name>ImageHeight</name></name></expr>;</expr_stmt>

  <comment type="block">/* Set LTDC parameters */</comment>
  <expr_stmt><expr><call><name>LTDC_SetConfig</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>pLayerCfg</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the Immediate Reload type */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SRCR</name></name> <operator>=</operator> <name>LTDC_SRCR_IMR</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Reconfigure the pixel format.
  * @param  hltdc        pointer to a LTDC_HandleTypeDef structure that contains
  *                      the configuration information for the LTDC.
  * @param  Pixelformat  new pixel format value.
  * @param  LayerIdx     LTDC Layer index.
  *                      This parameter can be one of the following values:
  *                      LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_SetPixelFormat</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Pixelformat</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>LTDC_LayerCfgTypeDef</name> <modifier>*</modifier></type><name>pLayerCfg</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_PIXEL_FORMAT</name><argument_list>(<argument><expr><name>Pixelformat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Get layer configuration from handle structure */</comment>
  <expr_stmt><expr><name>pLayerCfg</name> <operator>=</operator> <operator>&amp;</operator><name><name>hltdc</name><operator>-&gt;</operator><name>LayerCfg</name><index>[<expr><name>LayerIdx</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* Reconfigure the pixel format */</comment>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>PixelFormat</name></name> <operator>=</operator> <name>Pixelformat</name></expr>;</expr_stmt>

  <comment type="block">/* Set LTDC parameters */</comment>
  <expr_stmt><expr><call><name>LTDC_SetConfig</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>pLayerCfg</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the Immediate Reload type */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SRCR</name></name> <operator>=</operator> <name>LTDC_SRCR_IMR</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Reconfigure the layer alpha value.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  Alpha     new alpha value.
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_SetAlpha</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Alpha</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>LTDC_LayerCfgTypeDef</name> <modifier>*</modifier></type><name>pLayerCfg</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_ALPHA</name><argument_list>(<argument><expr><name>Alpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Get layer configuration from handle structure */</comment>
  <expr_stmt><expr><name>pLayerCfg</name> <operator>=</operator> <operator>&amp;</operator><name><name>hltdc</name><operator>-&gt;</operator><name>LayerCfg</name><index>[<expr><name>LayerIdx</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* Reconfigure the Alpha value */</comment>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>Alpha</name></name> <operator>=</operator> <name>Alpha</name></expr>;</expr_stmt>

  <comment type="block">/* Set LTDC parameters */</comment>
  <expr_stmt><expr><call><name>LTDC_SetConfig</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>pLayerCfg</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the Immediate Reload type */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SRCR</name></name> <operator>=</operator> <name>LTDC_SRCR_IMR</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @brief  Reconfigure the frame buffer Address.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  Address   new address value.
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_SetAddress</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Address</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>LTDC_LayerCfgTypeDef</name> <modifier>*</modifier></type><name>pLayerCfg</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Get layer configuration from handle structure */</comment>
  <expr_stmt><expr><name>pLayerCfg</name> <operator>=</operator> <operator>&amp;</operator><name><name>hltdc</name><operator>-&gt;</operator><name>LayerCfg</name><index>[<expr><name>LayerIdx</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* Reconfigure the Address */</comment>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>FBStartAdress</name></name> <operator>=</operator> <name>Address</name></expr>;</expr_stmt>

  <comment type="block">/* Set LTDC parameters */</comment>
  <expr_stmt><expr><call><name>LTDC_SetConfig</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>pLayerCfg</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the Immediate Reload type */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SRCR</name></name> <operator>=</operator> <name>LTDC_SRCR_IMR</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Function used to reconfigure the pitch for specific cases where the attached LayerIdx buffer have a width that is
  *         larger than the one intended to be displayed on screen. Example of a buffer 800x480 attached to layer for which we
  *         want to read and display on screen only a portion 320x240 taken in the center of the buffer. The pitch in pixels
  *         will be in that case 800 pixels and not 320 pixels as initially configured by previous call to HAL_LTDC_ConfigLayer().
  * @note   This function should be called only after a previous call to HAL_LTDC_ConfigLayer() to modify the default pitch
  *         configured by HAL_LTDC_ConfigLayer() when required (refer to example described just above).
  * @param  hltdc              pointer to a LTDC_HandleTypeDef structure that contains
  *                            the configuration information for the LTDC.
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_SetPitch</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LinePitchInPixels</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pitchUpdate</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pixelFormat</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* get LayerIdx used pixel format */</comment>
  <expr_stmt><expr><name>pixelFormat</name> <operator>=</operator> <name><name>hltdc</name><operator>-&gt;</operator><name>LayerCfg</name><index>[<expr><name>LayerIdx</name></expr>]</index></name><operator>.</operator><name>PixelFormat</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pixelFormat</name> <operator>==</operator> <name>LTDC_PIXEL_FORMAT_ARGB8888</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">4U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>pixelFormat</name> <operator>==</operator> <name>LTDC_PIXEL_FORMAT_RGB888</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">3U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>pixelFormat</name> <operator>==</operator> <name>LTDC_PIXEL_FORMAT_ARGB4444</name><operator>)</operator> <operator>||</operator> \
           <operator>(</operator><name>pixelFormat</name> <operator>==</operator> <name>LTDC_PIXEL_FORMAT_RGB565</name><operator>)</operator>   <operator>||</operator> \
           <operator>(</operator><name>pixelFormat</name> <operator>==</operator> <name>LTDC_PIXEL_FORMAT_ARGB1555</name><operator>)</operator> <operator>||</operator> \
           <operator>(</operator><name>pixelFormat</name> <operator>==</operator> <name>LTDC_PIXEL_FORMAT_AL88</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>pitchUpdate</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>LinePitchInPixels</name> <operator>*</operator> <name>tmp</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Clear previously set standard pitch */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CFBLR</name> <operator>&amp;=</operator> <operator>~</operator><name>LTDC_LxCFBLR_CFBP</name></expr>;</expr_stmt>

  <comment type="block">/* Set the Reload type as immediate update of LTDC pitch configured above */</comment>
  <expr_stmt><expr><name><name>LTDC</name><operator>-&gt;</operator><name>SRCR</name></name> <operator>|=</operator> <name>LTDC_SRCR_IMR</name></expr>;</expr_stmt>

  <comment type="block">/* Set new line pitch value */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CFBLR</name> <operator>|=</operator> <name>pitchUpdate</name></expr>;</expr_stmt>

  <comment type="block">/* Set the Reload type as immediate update of LTDC pitch configured above */</comment>
  <expr_stmt><expr><name><name>LTDC</name><operator>-&gt;</operator><name>SRCR</name></name> <operator>|=</operator> <name>LTDC_SRCR_IMR</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Define the position of the line interrupt.
  * @param  hltdc   pointer to a LTDC_HandleTypeDef structure that contains
  *                 the configuration information for the LTDC.
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_ProgramLineEvent</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LIPOS</name><argument_list>(<argument><expr><name>Line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the Line interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_LTDC_DISABLE_IT</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LTDC_IT_LI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the Line Interrupt position */</comment>
  <expr_stmt><expr><name><name>LTDC</name><operator>-&gt;</operator><name>LIPCR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>Line</name></expr>;</expr_stmt>

  <comment type="block">/* Enable the Line interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_LTDC_ENABLE_IT</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LTDC_IT_LI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Reload LTDC Layers configuration.
  * @param  hltdc      pointer to a LTDC_HandleTypeDef structure that contains
  *                    the configuration information for the LTDC.
  * @param  ReloadType This parameter can be one of the following values :
  *                      LTDC_RELOAD_IMMEDIATE : Immediate Reload
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type>  <name>HAL_LTDC_Reload</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ReloadType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_RELOAD</name><argument_list>(<argument><expr><name>ReloadType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Enable the Reload interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_LTDC_ENABLE_IT</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LTDC_IT_RR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Apply Reload type */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SRCR</name></name> <operator>=</operator> <name>ReloadType</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configure the LTDC Layer according to the specified without reloading
  *         parameters in the LTDC_InitTypeDef and create the associated handle.
  *         Variant of the function HAL_LTDC_ConfigLayer without immediate reload.
  * @param  hltdc      pointer to a LTDC_HandleTypeDef structure that contains
  *                    the configuration information for the LTDC.
  * @param  pLayerCfg  pointer to a LTDC_LayerCfgTypeDef structure that contains
  *                    the configuration information for the Layer.
  * @param  LayerIdx   LTDC Layer index.
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_ConfigLayer_NoReload</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>LTDC_LayerCfgTypeDef</name> <modifier>*</modifier></type><name>pLayerCfg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_HCONFIGST</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowX0</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_HCONFIGSP</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowX1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_VCONFIGST</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowY0</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_VCONFIGSP</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowY1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_PIXEL_FORMAT</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>PixelFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_ALPHA</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>Alpha</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_ALPHA</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>Alpha0</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_BLENDING_FACTOR1</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>BlendingFactor1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_BLENDING_FACTOR2</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>BlendingFactor2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_CFBLL</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>ImageWidth</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_CFBLNBR</name><argument_list>(<argument><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>ImageHeight</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Copy new layer configuration into handle structure */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>LayerCfg</name><index>[<expr><name>LayerIdx</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>pLayerCfg</name></expr>;</expr_stmt>

  <comment type="block">/* Configure the LTDC Layer */</comment>
  <expr_stmt><expr><call><name>LTDC_SetConfig</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>pLayerCfg</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name>  <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Set the LTDC window size without reloading.
  *         Variant of the function HAL_LTDC_SetWindowSize without immediate reload.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  XSize     LTDC Pixel per line
  * @param  YSize     LTDC Line number
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_SetWindowSize_NoReload</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>XSize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>YSize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>LTDC_LayerCfgTypeDef</name> <modifier>*</modifier></type><name>pLayerCfg</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters (Layers parameters)*/</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_CFBLL</name><argument_list>(<argument><expr><name>XSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_CFBLNBR</name><argument_list>(<argument><expr><name>YSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Get layer configuration from handle structure */</comment>
  <expr_stmt><expr><name>pLayerCfg</name> <operator>=</operator> <operator>&amp;</operator><name><name>hltdc</name><operator>-&gt;</operator><name>LayerCfg</name><index>[<expr><name>LayerIdx</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* update horizontal stop */</comment>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowX1</name></name> <operator>=</operator> <name>XSize</name> <operator>+</operator> <name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowX0</name></name></expr>;</expr_stmt>

  <comment type="block">/* update vertical stop */</comment>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowY1</name></name> <operator>=</operator> <name>YSize</name> <operator>+</operator> <name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowY0</name></name></expr>;</expr_stmt>

  <comment type="block">/* Reconfigures the color frame buffer pitch in byte */</comment>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>ImageWidth</name></name> <operator>=</operator> <name>XSize</name></expr>;</expr_stmt>

  <comment type="block">/* Reconfigures the frame buffer line number */</comment>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>ImageHeight</name></name> <operator>=</operator> <name>YSize</name></expr>;</expr_stmt>

  <comment type="block">/* Set LTDC parameters */</comment>
  <expr_stmt><expr><call><name>LTDC_SetConfig</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>pLayerCfg</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Set the LTDC window position without reloading.
  *         Variant of the function HAL_LTDC_SetWindowPosition without immediate reload.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  X0        LTDC window X offset
  * @param  Y0        LTDC window Y offset
  * @param  LayerIdx  LTDC Layer index.
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_SetWindowPosition_NoReload</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>X0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Y0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>LTDC_LayerCfgTypeDef</name> <modifier>*</modifier></type><name>pLayerCfg</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_CFBLL</name><argument_list>(<argument><expr><name>X0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_CFBLNBR</name><argument_list>(<argument><expr><name>Y0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Get layer configuration from handle structure */</comment>
  <expr_stmt><expr><name>pLayerCfg</name> <operator>=</operator> <operator>&amp;</operator><name><name>hltdc</name><operator>-&gt;</operator><name>LayerCfg</name><index>[<expr><name>LayerIdx</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* update horizontal start/stop */</comment>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowX0</name></name> <operator>=</operator> <name>X0</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowX1</name></name> <operator>=</operator> <name>X0</name> <operator>+</operator> <name><name>pLayerCfg</name><operator>-&gt;</operator><name>ImageWidth</name></name></expr>;</expr_stmt>

  <comment type="block">/* update vertical start/stop */</comment>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowY0</name></name> <operator>=</operator> <name>Y0</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowY1</name></name> <operator>=</operator> <name>Y0</name> <operator>+</operator> <name><name>pLayerCfg</name><operator>-&gt;</operator><name>ImageHeight</name></name></expr>;</expr_stmt>

  <comment type="block">/* Set LTDC parameters */</comment>
  <expr_stmt><expr><call><name>LTDC_SetConfig</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>pLayerCfg</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Reconfigure the pixel format without reloading.
  *         Variant of the function HAL_LTDC_SetPixelFormat without immediate reload.
  * @param  hltdc        pointer to a LTDC_HandleTypeDfef structure that contains
  *                      the configuration information for the LTDC.
  * @param  Pixelformat  new pixel format value.
  * @param  LayerIdx     LTDC Layer index.
  *                      This parameter can be one of the following values:
  *                      LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_SetPixelFormat_NoReload</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Pixelformat</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>LTDC_LayerCfgTypeDef</name> <modifier>*</modifier></type><name>pLayerCfg</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_PIXEL_FORMAT</name><argument_list>(<argument><expr><name>Pixelformat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Get layer configuration from handle structure */</comment>
  <expr_stmt><expr><name>pLayerCfg</name> <operator>=</operator> <operator>&amp;</operator><name><name>hltdc</name><operator>-&gt;</operator><name>LayerCfg</name><index>[<expr><name>LayerIdx</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* Reconfigure the pixel format */</comment>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>PixelFormat</name></name> <operator>=</operator> <name>Pixelformat</name></expr>;</expr_stmt>

  <comment type="block">/* Set LTDC parameters */</comment>
  <expr_stmt><expr><call><name>LTDC_SetConfig</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>pLayerCfg</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Reconfigure the layer alpha value without reloading.
  *         Variant of the function HAL_LTDC_SetAlpha without immediate reload.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  Alpha     new alpha value.
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_SetAlpha_NoReload</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Alpha</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>LTDC_LayerCfgTypeDef</name> <modifier>*</modifier></type><name>pLayerCfg</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_ALPHA</name><argument_list>(<argument><expr><name>Alpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Get layer configuration from handle structure */</comment>
  <expr_stmt><expr><name>pLayerCfg</name> <operator>=</operator> <operator>&amp;</operator><name><name>hltdc</name><operator>-&gt;</operator><name>LayerCfg</name><index>[<expr><name>LayerIdx</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* Reconfigure the Alpha value */</comment>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>Alpha</name></name> <operator>=</operator> <name>Alpha</name></expr>;</expr_stmt>

  <comment type="block">/* Set LTDC parameters */</comment>
  <expr_stmt><expr><call><name>LTDC_SetConfig</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>pLayerCfg</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Reconfigure the frame buffer Address without reloading.
  *         Variant of the function HAL_LTDC_SetAddress without immediate reload.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  Address   new address value.
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_SetAddress_NoReload</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Address</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>LTDC_LayerCfgTypeDef</name> <modifier>*</modifier></type><name>pLayerCfg</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Get layer configuration from handle structure */</comment>
  <expr_stmt><expr><name>pLayerCfg</name> <operator>=</operator> <operator>&amp;</operator><name><name>hltdc</name><operator>-&gt;</operator><name>LayerCfg</name><index>[<expr><name>LayerIdx</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* Reconfigure the Address */</comment>
  <expr_stmt><expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>FBStartAdress</name></name> <operator>=</operator> <name>Address</name></expr>;</expr_stmt>

  <comment type="block">/* Set LTDC parameters */</comment>
  <expr_stmt><expr><call><name>LTDC_SetConfig</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>pLayerCfg</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Function used to reconfigure the pitch for specific cases where the attached LayerIdx buffer have a width that is
  *         larger than the one intended to be displayed on screen. Example of a buffer 800x480 attached to layer for which we
  *         want to read and display on screen only a portion 320x240 taken in the center of the buffer. The pitch in pixels
  *         will be in that case 800 pixels and not 320 pixels as initially configured by previous call to HAL_LTDC_ConfigLayer().
  * @note   This function should be called only after a previous call to HAL_LTDC_ConfigLayer() to modify the default pitch
  *         configured by HAL_LTDC_ConfigLayer() when required (refer to example described just above).
  *         Variant of the function HAL_LTDC_SetPitch without immediate reload.
  * @param  hltdc              pointer to a LTDC_HandleTypeDef structure that contains
  *                            the configuration information for the LTDC.
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_SetPitch_NoReload</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LinePitchInPixels</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pitchUpdate</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pixelFormat</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* get LayerIdx used pixel format */</comment>
  <expr_stmt><expr><name>pixelFormat</name> <operator>=</operator> <name><name>hltdc</name><operator>-&gt;</operator><name>LayerCfg</name><index>[<expr><name>LayerIdx</name></expr>]</index></name><operator>.</operator><name>PixelFormat</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pixelFormat</name> <operator>==</operator> <name>LTDC_PIXEL_FORMAT_ARGB8888</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">4U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>pixelFormat</name> <operator>==</operator> <name>LTDC_PIXEL_FORMAT_RGB888</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">3U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>pixelFormat</name> <operator>==</operator> <name>LTDC_PIXEL_FORMAT_ARGB4444</name><operator>)</operator> <operator>||</operator> \
           <operator>(</operator><name>pixelFormat</name> <operator>==</operator> <name>LTDC_PIXEL_FORMAT_RGB565</name><operator>)</operator>   <operator>||</operator> \
           <operator>(</operator><name>pixelFormat</name> <operator>==</operator> <name>LTDC_PIXEL_FORMAT_ARGB1555</name><operator>)</operator> <operator>||</operator> \
           <operator>(</operator><name>pixelFormat</name> <operator>==</operator> <name>LTDC_PIXEL_FORMAT_AL88</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>pitchUpdate</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>LinePitchInPixels</name> <operator>*</operator> <name>tmp</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Clear previously set standard pitch */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CFBLR</name> <operator>&amp;=</operator> <operator>~</operator><name>LTDC_LxCFBLR_CFBP</name></expr>;</expr_stmt>

  <comment type="block">/* Set new line pitch value */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CFBLR</name> <operator>|=</operator> <name>pitchUpdate</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  Configure the color keying without reloading.
  *         Variant of the function HAL_LTDC_ConfigColorKeying without immediate reload.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  RGBValue the color key value
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_ConfigColorKeying_NoReload</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>RGBValue</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Configure the default color values */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CKCR</name> <operator>&amp;=</operator>  <operator>~</operator><operator>(</operator><name>LTDC_LxCKCR_CKBLUE</name> <operator>|</operator> <name>LTDC_LxCKCR_CKGREEN</name> <operator>|</operator> <name>LTDC_LxCKCR_CKRED</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CKCR</name>  <operator>=</operator> <name>RGBValue</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enable the color keying without reloading.
  *         Variant of the function HAL_LTDC_EnableColorKeying without immediate reload.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_EnableColorKeying_NoReload</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Enable LTDC color keying by setting COLKEN bit */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CR</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>LTDC_LxCR_COLKEN</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable the color keying without reloading.
  *         Variant of the function HAL_LTDC_DisableColorKeying without immediate reload.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_DisableColorKeying_NoReload</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable LTDC color keying by setting COLKEN bit */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CR</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>LTDC_LxCR_COLKEN</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enable the color lookup table without reloading.
  *         Variant of the function HAL_LTDC_EnableCLUT without immediate reload.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_EnableCLUT_NoReload</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable LTDC color lookup table by setting CLUTEN bit */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CR</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>LTDC_LxCR_CLUTEN</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable the color lookup table without reloading.
  *         Variant of the function HAL_LTDC_DisableCLUT without immediate reload.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_LTDC_DisableCLUT_NoReload</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_LTDC_LAYER</name><argument_list>(<argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change LTDC peripheral state */</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable LTDC color lookup table by setting CLUTEN bit */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CR</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>LTDC_LxCR_CLUTEN</name></expr>;</expr_stmt>

  <comment type="block">/* Change the LTDC state*/</comment>
  <expr_stmt><expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_LTDC_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup LTDC_Exported_Functions_Group4 Peripheral State and Errors functions
  *  @brief    Peripheral State and Errors functions
  *
@verbatim
 ===============================================================================
                  ##### Peripheral State and Errors functions #####
 ===============================================================================
    [..]
    This subsection provides functions allowing to
      (+) Check the LTDC handle state.
      (+) Get the LTDC handle error code.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Return the LTDC handle state.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */</comment>
<function><type><name>HAL_LTDC_StateTypeDef</name></type> <name>HAL_LTDC_GetState</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hltdc</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the LTDC handle error code.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *               the configuration information for the LTDC.
  * @retval LTDC Error Code
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_LTDC_GetError</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hltdc</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup LTDC_Private_Functions LTDC Private Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Configure the LTDC peripheral
  * @param  hltdc     Pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  pLayerCfg Pointer LTDC Layer Configuration structure
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>LTDC_SetConfig</name><parameter_list>(<parameter><decl><type><name>LTDC_HandleTypeDef</name> <modifier>*</modifier></type><name>hltdc</name></decl></parameter>, <parameter><decl><type><name>LTDC_LayerCfgTypeDef</name> <modifier>*</modifier></type><name>pLayerCfg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>LayerIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp2</name></decl>;</decl_stmt>

  <comment type="block">/* Configure the horizontal start and stop position */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowX1</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BPCR</name></name> <operator>&amp;</operator> <name>LTDC_BPCR_AHBP</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>WHPCR</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>LTDC_LxWHPCR_WHSTPOS</name> <operator>|</operator> <name>LTDC_LxWHPCR_WHSPPOS</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>WHPCR</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowX0</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BPCR</name></name> <operator>&amp;</operator> <name>LTDC_BPCR_AHBP</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator> <operator>|</operator> <name>tmp</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Configure the vertical start and stop position */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowY1</name></name> <operator>+</operator> <operator>(</operator><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BPCR</name></name> <operator>&amp;</operator> <name>LTDC_BPCR_AVBP</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>WVPCR</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>LTDC_LxWVPCR_WVSTPOS</name> <operator>|</operator> <name>LTDC_LxWVPCR_WVSPPOS</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>WVPCR</name>  <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowY0</name></name> <operator>+</operator> <operator>(</operator><name><name>hltdc</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BPCR</name></name> <operator>&amp;</operator> <name>LTDC_BPCR_AVBP</name><operator>)</operator> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator> <operator>|</operator> <name>tmp</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Specifies the pixel format */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>PFCR</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>LTDC_LxPFCR_PF</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>PFCR</name> <operator>=</operator> <operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>PixelFormat</name></name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Configure the default color values */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>Backcolor</name><operator>.</operator><name>Green</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>Backcolor</name><operator>.</operator><name>Red</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>Alpha0</name></name> <operator>&lt;&lt;</operator> <literal type="number">24U</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DCCR</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>LTDC_LxDCCR_DCBLUE</name> <operator>|</operator> <name>LTDC_LxDCCR_DCGREEN</name> <operator>|</operator> <name>LTDC_LxDCCR_DCRED</name> <operator>|</operator> <name>LTDC_LxDCCR_DCALPHA</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>DCCR</name> <operator>=</operator> <operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>Backcolor</name><operator>.</operator><name>Blue</name></name> <operator>|</operator> <name>tmp</name> <operator>|</operator> <name>tmp1</name> <operator>|</operator> <name>tmp2</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Specifies the constant alpha value */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CACR</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>LTDC_LxCACR_CONSTA</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CACR</name> <operator>=</operator> <operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>Alpha</name></name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Specifies the blending factors */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>BFCR</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>LTDC_LxBFCR_BF2</name> <operator>|</operator> <name>LTDC_LxBFCR_BF1</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>BFCR</name> <operator>=</operator> <operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>BlendingFactor1</name></name> <operator>|</operator> <name><name>pLayerCfg</name><operator>-&gt;</operator><name>BlendingFactor2</name></name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Configure the color frame buffer start address */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CFBAR</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>LTDC_LxCFBAR_CFBADD</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CFBAR</name> <operator>=</operator> <operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>FBStartAdress</name></name><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>PixelFormat</name></name> <operator>==</operator> <name>LTDC_PIXEL_FORMAT_ARGB8888</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">4U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>pLayerCfg</name><operator>-&gt;</operator><name>PixelFormat</name></name> <operator>==</operator> <name>LTDC_PIXEL_FORMAT_RGB888</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">3U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>PixelFormat</name></name> <operator>==</operator> <name>LTDC_PIXEL_FORMAT_ARGB4444</name><operator>)</operator> <operator>||</operator> \
           <operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>PixelFormat</name></name> <operator>==</operator> <name>LTDC_PIXEL_FORMAT_RGB565</name><operator>)</operator>   <operator>||</operator> \
           <operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>PixelFormat</name></name> <operator>==</operator> <name>LTDC_PIXEL_FORMAT_ARGB1555</name><operator>)</operator> <operator>||</operator> \
           <operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>PixelFormat</name></name> <operator>==</operator> <name>LTDC_PIXEL_FORMAT_AL88</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Configure the color frame buffer pitch in byte */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CFBLR</name>  <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>LTDC_LxCFBLR_CFBLL</name> <operator>|</operator> <name>LTDC_LxCFBLR_CFBP</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CFBLR</name>  <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>ImageWidth</name></name> <operator>*</operator> <name>tmp</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowX1</name></name> <operator>-</operator> <name><name>pLayerCfg</name><operator>-&gt;</operator><name>WindowX0</name></name><operator>)</operator> <operator>*</operator> <name>tmp</name><operator>)</operator>  <operator>+</operator> <literal type="number">3U</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <comment type="block">/* Configure the frame buffer line number */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CFBLNR</name>  <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>LTDC_LxCFBLNR_CFBLNBR</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CFBLNR</name>  <operator>=</operator> <operator>(</operator><name><name>pLayerCfg</name><operator>-&gt;</operator><name>ImageHeight</name></name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Enable LTDC_Layer by setting LEN bit */</comment>
  <expr_stmt><expr><call><name>LTDC_LAYER</name><argument_list>(<argument><expr><name>hltdc</name></expr></argument>, <argument><expr><name>LayerIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CR</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>LTDC_LxCR_LEN</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>


<comment type="block" format="doxygen">/**
  * @}
  */</comment>


<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* LTDC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_LTDC_MODULE_ENABLED */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
