<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_i2s.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_i2s.c
  * @author  MCD Application Team
  * @brief   I2S HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the Integrated Interchip Sound (I2S) peripheral:
  *           + Initialization and de-initialization functions
  *           + IO operation functions
  *           + Peripheral State and Errors functions
  @verbatim
 ===============================================================================
                  ##### How to use this driver #####
 ===============================================================================
 [..]
    The I2S HAL driver can be used as follow:

    (#) Declare a I2S_HandleTypeDef handle structure.
    (#) Initialize the I2S low level resources by implement the HAL_I2S_MspInit() API:
        (##) Enable the SPIx interface clock.
        (##) I2S pins configuration:
            (+++) Enable the clock for the I2S GPIOs.
            (+++) Configure these I2S pins as alternate function pull-up.
        (##) NVIC configuration if you need to use interrupt process (HAL_I2S_Transmit_IT()
             and HAL_I2S_Receive_IT() APIs).
            (+++) Configure the I2Sx interrupt priority.
            (+++) Enable the NVIC I2S IRQ handle.
        (##) DMA Configuration if you need to use DMA process (HAL_I2S_Transmit_DMA()
             and HAL_I2S_Receive_DMA() APIs:
            (+++) Declare a DMA handle structure for the Tx/Rx Stream/Channel.
            (+++) Enable the DMAx interface clock.
            (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
            (+++) Configure the DMA Tx/Rx Stream/Channel.
            (+++) Associate the initialized DMA handle to the I2S DMA Tx/Rx handle.
            (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on the
                  DMA Tx/Rx Stream/Channel.

   (#) Program the Mode, Standard, Data Format, MCLK Output, Audio frequency and Polarity
       using HAL_I2S_Init() function.

   -@- The specific I2S interrupts (Transmission complete interrupt,
       RXNE interrupt and Error Interrupts) will be managed using the macros
       __HAL_I2S_ENABLE_IT() and __HAL_I2S_DISABLE_IT() inside the transmit and receive process.
   -@- Make sure that either:
        (+@) I2S PLL clock is configured or
        (+@) External clock source is configured after setting correctly
             the define constant EXTERNAL_CLOCK_VALUE in the stm32f4xx_hal_conf.h file.

    (#) Three mode of operations are available within this driver :

   *** Polling mode IO operation ***
   =================================
   [..]
     (+) Send an amount of data in blocking mode using HAL_I2S_Transmit()
     (+) Receive an amount of data in blocking mode using HAL_I2S_Receive()

   *** Interrupt mode IO operation ***
   ===================================
   [..]
     (+) Send an amount of data in non blocking mode using HAL_I2S_Transmit_IT()
     (+) At transmission end of half transfer HAL_I2S_TxHalfCpltCallback is executed and user can
         add his own code by customization of function pointer HAL_I2S_TxHalfCpltCallback
     (+) At transmission end of transfer HAL_I2S_TxCpltCallback is executed and user can
         add his own code by customization of function pointer HAL_I2S_TxCpltCallback
     (+) Receive an amount of data in non blocking mode using HAL_I2S_Receive_IT()
     (+) At reception end of half transfer HAL_I2S_RxHalfCpltCallback is executed and user can
         add his own code by customization of function pointer HAL_I2S_RxHalfCpltCallback
     (+) At reception end of transfer HAL_I2S_RxCpltCallback is executed and user can
         add his own code by customization of function pointer HAL_I2S_RxCpltCallback
     (+) In case of transfer Error, HAL_I2S_ErrorCallback() function is executed and user can
         add his own code by customization of function pointer HAL_I2S_ErrorCallback

   *** DMA mode IO operation ***
   ==============================
   [..]
     (+) Send an amount of data in non blocking mode (DMA) using HAL_I2S_Transmit_DMA()
     (+) At transmission end of half transfer HAL_I2S_TxHalfCpltCallback is executed and user can
         add his own code by customization of function pointer HAL_I2S_TxHalfCpltCallback
     (+) At transmission end of transfer HAL_I2S_TxCpltCallback is executed and user can
         add his own code by customization of function pointer HAL_I2S_TxCpltCallback
     (+) Receive an amount of data in non blocking mode (DMA) using HAL_I2S_Receive_DMA()
     (+) At reception end of half transfer HAL_I2S_RxHalfCpltCallback is executed and user can
         add his own code by customization of function pointer HAL_I2S_RxHalfCpltCallback
     (+) At reception end of transfer HAL_I2S_RxCpltCallback is executed and user can
         add his own code by customization of function pointer HAL_I2S_RxCpltCallback
     (+) In case of transfer Error, HAL_I2S_ErrorCallback() function is executed and user can
         add his own code by customization of function pointer HAL_I2S_ErrorCallback
     (+) Pause the DMA Transfer using HAL_I2S_DMAPause()
     (+) Resume the DMA Transfer using HAL_I2S_DMAResume()
     (+) Stop the DMA Transfer using HAL_I2S_DMAStop()

   *** I2S HAL driver macros list ***
   ===================================
   [..]
     Below the list of most used macros in I2S HAL driver.

      (+) __HAL_I2S_ENABLE: Enable the specified SPI peripheral (in I2S mode)
      (+) __HAL_I2S_DISABLE: Disable the specified SPI peripheral (in I2S mode)
      (+) __HAL_I2S_ENABLE_IT : Enable the specified I2S interrupts
      (+) __HAL_I2S_DISABLE_IT : Disable the specified I2S interrupts
      (+) __HAL_I2S_GET_FLAG: Check whether the specified I2S flag is set or not

    [..]
      (@) You can refer to the I2S HAL driver header file for more useful macros

   *** I2S HAL driver macros list ***
   ===================================
   [..]
       Callback registration:

      (#) The compilation flag USE_HAL_I2S_REGISTER_CALLBACKS when set to 1U
          allows the user to configure dynamically the driver callbacks.
          Use Functions HAL_I2S_RegisterCallback() to register an interrupt callback.

          Function HAL_I2S_RegisterCallback() allows to register following callbacks:
            (+) TxCpltCallback        : I2S Tx Completed callback
            (+) RxCpltCallback        : I2S Rx Completed callback
            (+) TxRxCpltCallback      : I2S TxRx Completed callback
            (+) TxHalfCpltCallback    : I2S Tx Half Completed callback
            (+) RxHalfCpltCallback    : I2S Rx Half Completed callback
            (+) ErrorCallback         : I2S Error callback
            (+) MspInitCallback       : I2S Msp Init callback
            (+) MspDeInitCallback     : I2S Msp DeInit callback
          This function takes as parameters the HAL peripheral handle, the Callback ID
          and a pointer to the user callback function.


      (#) Use function HAL_I2S_UnRegisterCallback to reset a callback to the default
          weak function.
          HAL_I2S_UnRegisterCallback takes as parameters the HAL peripheral handle,
          and the Callback ID.
          This function allows to reset following callbacks:
            (+) TxCpltCallback        : I2S Tx Completed callback
            (+) RxCpltCallback        : I2S Rx Completed callback
            (+) TxRxCpltCallback      : I2S TxRx Completed callback
            (+) TxHalfCpltCallback    : I2S Tx Half Completed callback
            (+) RxHalfCpltCallback    : I2S Rx Half Completed callback
            (+) ErrorCallback         : I2S Error callback
            (+) MspInitCallback       : I2S Msp Init callback
            (+) MspDeInitCallback     : I2S Msp DeInit callback

       By default, after the HAL_I2S_Init() and when the state is HAL_I2S_STATE_RESET
       all callbacks are set to the corresponding weak functions:
       examples HAL_I2S_MasterTxCpltCallback(), HAL_I2S_MasterRxCpltCallback().
       Exception done for MspInit and MspDeInit functions that are
       reset to the legacy weak functions in the HAL_I2S_Init()/ HAL_I2S_DeInit() only when
       these callbacks are null (not registered beforehand).
       If MspInit or MspDeInit are not null, the HAL_I2S_Init()/ HAL_I2S_DeInit()
       keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state.

       Callbacks can be registered/unregistered in HAL_I2S_STATE_READY state only.
       Exception done MspInit/MspDeInit functions that can be registered/unregistered
       in HAL_I2S_STATE_READY or HAL_I2S_STATE_RESET state,
       thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
       Then, the user first registers the MspInit/MspDeInit user callbacks
       using HAL_I2S_RegisterCallback() before calling HAL_I2S_DeInit()
       or HAL_I2S_Init() function.

       When The compilation define USE_HAL_I2S_REGISTER_CALLBACKS is set to 0 or
       not defined, the callback registering feature is not available
       and weak (surcharged) callbacks are used.

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_I2S_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup I2S I2S
  * @brief I2S HAL module driver
  * @{
  */</comment>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup I2S_Private_Functions I2S Private Functions
  * @{
  */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type>               <name>I2S_DMATxCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>               <name>I2S_DMATxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>               <name>I2S_DMARxCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>               <name>I2S_DMARxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>               <name>I2S_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>               <name>I2S_Transmit_IT</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>               <name>I2S_Receive_IT</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>               <name>I2S_IRQHandler</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type>  <name>I2S_WaitFlagStateUntilTimeout</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Flag</name></decl></parameter>, <parameter><decl><type><name>FlagStatus</name></type> <name>State</name></decl></parameter>,
                                                        <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Exported functions ---------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup I2S_Exported_Functions I2S Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup  I2S_Exported_Functions_Group1 Initialization and de-initialization functions
  *  @brief    Initialization and Configuration functions
  *
@verbatim
 ===============================================================================
              ##### Initialization and de-initialization functions #####
 ===============================================================================
    [..]  This subsection provides a set of functions allowing to initialize and
          de-initialize the I2Sx peripheral in simplex mode:

      (+) User must Implement HAL_I2S_MspInit() function in which he configures
          all related peripherals resources (CLOCK, GPIO, DMA, IT and NVIC ).

      (+) Call the function HAL_I2S_Init() to configure the selected device with
          the selected configuration:
        (++) Mode
        (++) Standard
        (++) Data Format
        (++) MCLK Output
        (++) Audio frequency
        (++) Polarity
        (++) Full duplex mode

     (+) Call the function HAL_I2S_DeInit() to restore the default configuration
          of the selected I2Sx peripheral.
  @endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the I2S according to the specified parameters
  *         in the I2S_InitTypeDef and create the associated handle.
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_I2S_Init</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i2sdiv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i2sodd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>packetlength</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i2sclk</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>SPI_I2S_FULLDUPLEX_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>tmpreg</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Check the I2S handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>hi2s</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the I2S parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_I2S_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_I2S_MODE</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_I2S_STANDARD</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Standard</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_I2S_DATA_FORMAT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_I2S_MCLK_OUTPUT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>MCLKOutput</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_I2S_AUDIO_FREQ</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioFreq</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_I2S_CPOL</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>CPOL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_I2S_CLOCKSOURCE</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockSource</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_I2S_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

    <comment type="block">/* Initialize Default I2S IrqHandler ISR */</comment>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>IrqHandlerISR</name></name> <operator>=</operator> <name>I2S_IRQHandler</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/* Init the I2S Callback settings */</comment>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxCpltCallback</name></name>       <operator>=</operator> <name>HAL_I2S_TxCpltCallback</name></expr>;</expr_stmt>          <comment type="block">/* Legacy weak TxCpltCallback       */</comment>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxCpltCallback</name></name>       <operator>=</operator> <name>HAL_I2S_RxCpltCallback</name></expr>;</expr_stmt>          <comment type="block">/* Legacy weak RxCpltCallback       */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>SPI_I2S_FULLDUPLEX_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxRxCpltCallback</name></name>     <operator>=</operator> <name>HAL_I2SEx_TxRxCpltCallback</name></expr>;</expr_stmt>      <comment type="block">/* Legacy weak TxRxCpltCallback     */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name>   <operator>=</operator> <name>HAL_I2S_TxHalfCpltCallback</name></expr>;</expr_stmt>      <comment type="block">/* Legacy weak TxHalfCpltCallback   */</comment>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name>   <operator>=</operator> <name>HAL_I2S_RxHalfCpltCallback</name></expr>;</expr_stmt>      <comment type="block">/* Legacy weak RxHalfCpltCallback   */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>SPI_I2S_FULLDUPLEX_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxRxHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_I2SEx_TxRxHalfCpltCallback</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak TxRxHalfCpltCallback */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCallback</name></name>        <operator>=</operator> <name>HAL_I2S_ErrorCallback</name></expr>;</expr_stmt>           <comment type="block">/* Legacy weak ErrorCallback        */</comment>

    <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_I2S_MspInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MspInit  */</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Init the low level hardware : GPIO, CLOCK, NVIC... */</comment>
    <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */</comment>
    <expr_stmt><expr><call><name>HAL_I2S_MspInit</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/*----------------------- SPIx I2SCFGR &amp; I2SPR Configuration ----------------*/</comment>
  <comment type="block">/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SPI_I2SCFGR_CHLEN</name> <operator>|</operator> <name>SPI_I2SCFGR_DATLEN</name> <operator>|</operator> <name>SPI_I2SCFGR_CKPOL</name> <operator>|</operator> \
                                      <name>SPI_I2SCFGR_I2SSTD</name> <operator>|</operator> <name>SPI_I2SCFGR_PCMSYNC</name> <operator>|</operator> <name>SPI_I2SCFGR_I2SCFG</name> <operator>|</operator> \
                                      <name>SPI_I2SCFGR_I2SE</name> <operator>|</operator> <name>SPI_I2SCFGR_I2SMOD</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SPR</name></name> <operator>=</operator> <literal type="number">0x0002U</literal></expr>;</expr_stmt>

  <comment type="block">/*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/</comment>
  <comment type="block">/* If the requested audio frequency is not the default, compute the prescaler */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioFreq</name></name> <operator>!=</operator> <name>I2S_AUDIOFREQ_DEFAULT</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check the frame length (For the Prescaler computing) ********************/</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataFormat</name></name> <operator>==</operator> <name>I2S_DATAFORMAT_16B</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Packet length is 16 bits */</comment>
      <expr_stmt><expr><name>packetlength</name> <operator>=</operator> <literal type="number">16U</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Packet length is 32 bits */</comment>
      <expr_stmt><expr><name>packetlength</name> <operator>=</operator> <literal type="number">32U</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* I2S standard */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Standard</name></name> <operator>&lt;=</operator> <name>I2S_STANDARD_LSB</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* In I2S standard packet lenght is multiplied by 2 */</comment>
      <expr_stmt><expr><name>packetlength</name> <operator>=</operator> <name>packetlength</name> <operator>*</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Get the source clock value **********************************************/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>I2S_APB1_APB2_FEATURE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><call><name>IS_I2S_APB1_INSTANCE</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>i2sclk</name> <operator>=</operator> <call><name>HAL_RCCEx_GetPeriphCLKFreq</name><argument_list>(<argument><expr><name>RCC_PERIPHCLK_I2S_APB1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>i2sclk</name> <operator>=</operator> <call><name>HAL_RCCEx_GetPeriphCLKFreq</name><argument_list>(<argument><expr><name>RCC_PERIPHCLK_I2S_APB2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>i2sclk</name> <operator>=</operator> <call><name>HAL_RCCEx_GetPeriphCLKFreq</name><argument_list>(<argument><expr><name>RCC_PERIPHCLK_I2S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Compute the Real divider depending on the MCLK output state, with a floating point */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>MCLKOutput</name></name> <operator>==</operator> <name>I2S_MCLKOUTPUT_ENABLE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* MCLK output is enabled */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataFormat</name></name> <operator>!=</operator> <name>I2S_DATAFORMAT_16B</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>i2sclk</name> <operator>/</operator> <operator>(</operator><name>packetlength</name> <operator>*</operator> <literal type="number">4U</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">10U</literal><operator>)</operator> <operator>/</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioFreq</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">5U</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>i2sclk</name> <operator>/</operator> <operator>(</operator><name>packetlength</name> <operator>*</operator> <literal type="number">8U</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">10U</literal><operator>)</operator> <operator>/</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioFreq</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">5U</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* MCLK output is disabled */</comment>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>i2sclk</name> <operator>/</operator> <name>packetlength</name><operator>)</operator> <operator>*</operator> <literal type="number">10U</literal><operator>)</operator> <operator>/</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioFreq</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">5U</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Remove the flatting point */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp</name> <operator>/</operator> <literal type="number">10U</literal></expr>;</expr_stmt>

    <comment type="block">/* Check the parity of the divider */</comment>
    <expr_stmt><expr><name>i2sodd</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Compute the i2sdiv prescaler */</comment>
    <expr_stmt><expr><name>i2sdiv</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmp</name> <operator>-</operator> <name>i2sodd</name><operator>)</operator> <operator>/</operator> <literal type="number">2U</literal><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */</comment>
    <expr_stmt><expr><name>i2sodd</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>i2sodd</name> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Set the default values */</comment>
    <expr_stmt><expr><name>i2sdiv</name> <operator>=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>i2sodd</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Test if the divider is 1 or 0 or greater than 0xFF */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i2sdiv</name> <operator>&lt;</operator> <literal type="number">2U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i2sdiv</name> <operator>&gt;</operator> <literal type="number">0xFFU</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set the error code and execute error callback*/</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_PRESCALER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*----------------------- SPIx I2SCFGR &amp; I2SPR Configuration ----------------*/</comment>

  <comment type="block">/* Write to SPIx I2SPR register the computed value */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SPR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>i2sdiv</name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>i2sodd</name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>MCLKOutput</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */</comment>
  <comment type="block">/* And configure the I2S with the I2S_InitStruct values                      */</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SPI_I2SCFGR_CHLEN</name> <operator>|</operator> <name>SPI_I2SCFGR_DATLEN</name> <operator>|</operator> \
                                       <name>SPI_I2SCFGR_CKPOL</name> <operator>|</operator> <name>SPI_I2SCFGR_I2SSTD</name> <operator>|</operator> \
                                       <name>SPI_I2SCFGR_PCMSYNC</name> <operator>|</operator> <name>SPI_I2SCFGR_I2SCFG</name> <operator>|</operator> \
                                       <name>SPI_I2SCFGR_I2SE</name>  <operator>|</operator> <name>SPI_I2SCFGR_I2SMOD</name><operator>)</operator></expr></argument>, \
             <argument><expr><operator>(</operator><name>SPI_I2SCFGR_I2SMOD</name> <operator>|</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>|</operator> \
              <name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Standard</name></name> <operator>|</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataFormat</name></name> <operator>|</operator> \
              <name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>CPOL</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SPI_I2SCFGR_ASTRTEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Standard</name></name> <operator>==</operator> <name>I2S_STANDARD_PCM_SHORT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Standard</name></name> <operator>==</operator> <name>I2S_STANDARD_PCM_LONG</name><operator>)</operator><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Write to SPIx I2SCFGR */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name></expr></argument>, <argument><expr><name>SPI_I2SCFGR_ASTRTEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>SPI_I2S_FULLDUPLEX_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

  <comment type="block">/* Configure the I2S extended if the full duplex mode is enabled */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_I2S_FULLDUPLEX_MODE</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FullDuplexMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FullDuplexMode</name></name> <operator>==</operator> <name>I2S_FULLDUPLEXMODE_ENABLE</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */</comment>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>IrqHandlerISR</name></name> <operator>=</operator> <name>HAL_I2SEx_FullDuplex_IRQHandler</name></expr>;</expr_stmt>

    <comment type="block">/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>I2SCFGR</name></expr></argument>, <argument><expr><operator>(</operator><name>SPI_I2SCFGR_CHLEN</name> <operator>|</operator> <name>SPI_I2SCFGR_DATLEN</name> <operator>|</operator> <name>SPI_I2SCFGR_CKPOL</name> <operator>|</operator> \
                                                 <name>SPI_I2SCFGR_I2SSTD</name> <operator>|</operator> <name>SPI_I2SCFGR_PCMSYNC</name> <operator>|</operator> <name>SPI_I2SCFGR_I2SCFG</name> <operator>|</operator> \
                                                 <name>SPI_I2SCFGR_I2SE</name> <operator>|</operator> <name>SPI_I2SCFGR_I2SMOD</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>I2SPR</name> <operator>=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>

    <comment type="block">/* Get the I2SCFGR register value */</comment>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>I2SCFGR</name></expr>;</expr_stmt>

    <comment type="block">/* Get the mode to be configured for the extended I2S */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>I2S_MODE_MASTER_TX</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>I2S_MODE_SLAVE_TX</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>I2S_MODE_SLAVE_RX</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="block">/* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>I2S_MODE_SLAVE_TX</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Configure the I2S Slave with the I2S Master parameter values */</comment>
    <expr_stmt><expr><name>tmpreg</name> <operator>|=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name>SPI_I2SCFGR_I2SMOD</name> <operator>|</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>tmp</name> <operator>|</operator> \
                         <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Standard</name></name> <operator>|</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataFormat</name></name> <operator>|</operator> \
                                    <operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>CPOL</name></name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Write to SPIx I2SCFGR */</comment>
    <expr_stmt><expr><call><name>WRITE_REG</name><argument_list>(<argument><expr><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>I2SCFGR</name></expr></argument>, <argument><expr><name>tmpreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SPI_I2S_FULLDUPLEX_SUPPORT */</comment>

  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_I2S_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DeInitializes the I2S peripheral
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_I2S_DeInit</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the I2S handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>hi2s</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_I2S_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the I2S Peripheral Clock */</comment>
  <expr_stmt><expr><call><name>__HAL_I2S_DISABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_I2S_MspDeInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MspDeInit  */</comment>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* DeInit the low level hardware: GPIO, CLOCK, NVIC... */</comment>
  <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* DeInit the low level hardware: GPIO, CLOCK, NVIC... */</comment>
  <expr_stmt><expr><call><name>HAL_I2S_MspDeInit</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>

  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_I2S_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_I2S_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief I2S MSP Init
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_I2S_MspInit</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_MspInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief I2S MSP DeInit
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_I2S_MspDeInit</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_MspDeInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User I2S Callback
  *         To be used instead of the weak predefined callback
  * @param  hi2s Pointer to a I2S_HandleTypeDef structure that contains
  *                the configuration information for the specified I2S.
  * @param  CallbackID ID of the callback to be registered
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_I2S_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>, <parameter><decl><type><name>HAL_I2S_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>, <parameter><decl><type><name>pI2S_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_I2S_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>HAL_I2S_STATE_READY</name> <operator>==</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_I2S_TX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_I2S_RX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>SPI_I2S_FULLDUPLEX_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <case>case <expr><name>HAL_I2S_TX_RX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxRxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <case>case <expr><name>HAL_I2S_TX_HALF_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_I2S_RX_HALF_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>SPI_I2S_FULLDUPLEX_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <case>case <expr><name>HAL_I2S_TX_RX_HALF_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxRxHalfCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <case>case <expr><name>HAL_I2S_ERROR_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_I2S_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_I2S_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_INVALID_CALLBACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>HAL_I2S_STATE_RESET</name> <operator>==</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_I2S_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_I2S_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_INVALID_CALLBACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_INVALID_CALLBACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister an I2S Callback
  *         I2S callback is redirected to the weak predefined callback
  * @param  hi2s Pointer to a I2S_HandleTypeDef structure that contains
  *                the configuration information for the specified I2S.
  * @param  CallbackID ID of the callback to be unregistered
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_I2S_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>, <parameter><decl><type><name>HAL_I2S_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>HAL_I2S_STATE_READY</name> <operator>==</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_I2S_TX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxCpltCallback</name></name> <operator>=</operator> <name>HAL_I2S_TxCpltCallback</name></expr>;</expr_stmt>                <comment type="block">/* Legacy weak TxCpltCallback       */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_I2S_RX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxCpltCallback</name></name> <operator>=</operator> <name>HAL_I2S_RxCpltCallback</name></expr>;</expr_stmt>                <comment type="block">/* Legacy weak RxCpltCallback       */</comment>
        <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>SPI_I2S_FULLDUPLEX_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <case>case <expr><name>HAL_I2S_TX_RX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxRxCpltCallback</name></name> <operator>=</operator> <name>HAL_I2SEx_TxRxCpltCallback</name></expr>;</expr_stmt>          <comment type="block">/* Legacy weak TxRxCpltCallback     */</comment>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <case>case <expr><name>HAL_I2S_TX_HALF_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_I2S_TxHalfCpltCallback</name></expr>;</expr_stmt>        <comment type="block">/* Legacy weak TxHalfCpltCallback   */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_I2S_RX_HALF_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_I2S_RxHalfCpltCallback</name></expr>;</expr_stmt>        <comment type="block">/* Legacy weak RxHalfCpltCallback   */</comment>
        <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>SPI_I2S_FULLDUPLEX_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <case>case <expr><name>HAL_I2S_TX_RX_HALF_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxRxHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_I2SEx_TxRxHalfCpltCallback</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak TxRxHalfCpltCallback */</comment>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <case>case <expr><name>HAL_I2S_ERROR_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>HAL_I2S_ErrorCallback</name></expr>;</expr_stmt>                  <comment type="block">/* Legacy weak ErrorCallback        */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_I2S_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_I2S_MspInit</name></expr>;</expr_stmt>                      <comment type="block">/* Legacy weak MspInit              */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_I2S_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_I2S_MspDeInit</name></expr>;</expr_stmt>                  <comment type="block">/* Legacy weak MspDeInit            */</comment>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_INVALID_CALLBACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>HAL_I2S_STATE_RESET</name> <operator>==</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_I2S_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_I2S_MspInit</name></expr>;</expr_stmt>                      <comment type="block">/* Legacy weak MspInit              */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_I2S_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_I2S_MspDeInit</name></expr>;</expr_stmt>                  <comment type="block">/* Legacy weak MspDeInit            */</comment>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_INVALID_CALLBACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_INVALID_CALLBACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup I2S_Exported_Functions_Group2 IO operation functions
  *  @brief Data transfers functions
  *
@verbatim
 ===============================================================================
                      ##### IO operation functions #####
 ===============================================================================
    [..]
    This subsection provides a set of functions allowing to manage the I2S data
    transfers.

    (#) There are two modes of transfer:
       (++) Blocking mode : The communication is performed in the polling mode.
            The status of all data processing is returned by the same function
            after finishing transfer.
       (++) No-Blocking mode : The communication is performed using Interrupts
            or DMA. These functions return the status of the transfer startup.
            The end of the data processing will be indicated through the
            dedicated I2S IRQ when using Interrupt mode or the DMA IRQ when
            using DMA mode.

    (#) Blocking mode functions are :
        (++) HAL_I2S_Transmit()
        (++) HAL_I2S_Receive()

    (#) No-Blocking mode functions with Interrupt are :
        (++) HAL_I2S_Transmit_IT()
        (++) HAL_I2S_Receive_IT()

    (#) No-Blocking mode functions with DMA are :
        (++) HAL_I2S_Transmit_DMA()
        (++) HAL_I2S_Receive_DMA()

    (#) A set of Transfer Complete Callbacks are provided in non Blocking mode:
        (++) HAL_I2S_TxCpltCallback()
        (++) HAL_I2S_RxCpltCallback()
        (++) HAL_I2S_ErrorCallback()

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Transmit an amount of data in blocking mode
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @param  pData a 16-bit pointer to data buffer.
  * @param  Size number of data sample to be sent:
  * @note   When a 16-bit data frame or a 16-bit data frame extended is selected during the I2S
  *         configuration phase, the Size parameter means the number of 16-bit data length
  *         in the transaction and when a 24-bit data frame or a 32-bit data frame is selected
  *         the Size parameter means the number of 16-bit data length.
  * @param  Timeout Timeout duration
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_I2S_Transmit</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg_cfgr</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_I2S_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Set state and reset error code */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_BUSY_TX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_I2S_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmpreg_cfgr</name> <operator>=</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <operator>(</operator><name>SPI_I2SCFGR_DATLEN</name> <operator>|</operator> <name>SPI_I2SCFGR_CHLEN</name><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpreg_cfgr</name> <operator>==</operator> <name>I2S_DATAFORMAT_24B</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tmpreg_cfgr</name> <operator>==</operator> <name>I2S_DATAFORMAT_32B</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferSize</name></name> <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>tmpreg_cfgr</name> <operator>=</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name></expr>;</expr_stmt>

  <comment type="block">/* Check if the I2S is already enabled */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SE</name><operator>)</operator> <operator>!=</operator> <name>SPI_I2SCFGR_I2SE</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable I2S peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_I2S_ENABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Wait until TXE flag is set */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>I2S_WaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>I2S_FLAG_TXE</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set the error code */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name><name>hi2s</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>

    <comment type="block">/* Wait until TXE flag is set */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>I2S_WaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>I2S_FLAG_TXE</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the error code */</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check if an underrun occurs */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_I2S_GET_FLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>I2S_FLAG_UDR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear underrun flag */</comment>
      <expr_stmt><expr><call><name>__HAL_I2S_CLEAR_UDRFLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Set the error code */</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_UDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Check if Slave mode is selected */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>tmpreg_cfgr</name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SCFG</name><operator>)</operator> <operator>==</operator> <name>I2S_MODE_SLAVE_TX</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>tmpreg_cfgr</name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SCFG</name><operator>)</operator> <operator>==</operator> <name>I2S_MODE_SLAVE_RX</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Wait until Busy flag is reset */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>I2S_WaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>I2S_FLAG_BSY</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the error code */</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receive an amount of data in blocking mode
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @param  pData a 16-bit pointer to data buffer.
  * @param  Size number of data sample to be sent:
  * @note   When a 16-bit data frame or a 16-bit data frame extended is selected during the I2S
  *         configuration phase, the Size parameter means the number of 16-bit data length
  *         in the transaction and when a 24-bit data frame or a 32-bit data frame is selected
  *         the Size parameter means the number of 16-bit data length.
  * @param  Timeout Timeout duration
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @note   In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *         in continuous way and as the I2S is not disabled at the end of the I2S transaction.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_I2S_Receive</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg_cfgr</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_I2S_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Set state and reset error code */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_BUSY_RX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_I2S_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmpreg_cfgr</name> <operator>=</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <operator>(</operator><name>SPI_I2SCFGR_DATLEN</name> <operator>|</operator> <name>SPI_I2SCFGR_CHLEN</name><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpreg_cfgr</name> <operator>==</operator> <name>I2S_DATAFORMAT_24B</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tmpreg_cfgr</name> <operator>==</operator> <name>I2S_DATAFORMAT_32B</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Check if the I2S is already enabled */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SE</name><operator>)</operator> <operator>!=</operator> <name>SPI_I2SCFGR_I2SE</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable I2S peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_I2S_ENABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check if Master Receiver mode is selected */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SCFG</name><operator>)</operator> <operator>==</operator> <name>I2S_MODE_MASTER_RX</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
    access to the SPI_SR register. */</comment>
    <expr_stmt><expr><call><name>__HAL_I2S_CLEAR_OVRFLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Receive data */</comment>
  <while>while <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Wait until RXNE flag is set */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>I2S_WaitFlagStateUntilTimeout</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>I2S_FLAG_RXNE</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the error code */</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>hi2s</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>

    <comment type="block">/* Check if an overrun occurs */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_I2S_GET_FLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>I2S_FLAG_OVR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear overrun flag */</comment>
      <expr_stmt><expr><call><name>__HAL_I2S_CLEAR_OVRFLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Set the error code */</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Transmit an amount of data in non-blocking mode with Interrupt
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @param  pData a 16-bit pointer to data buffer.
  * @param  Size number of data sample to be sent:
  * @note   When a 16-bit data frame or a 16-bit data frame extended is selected during the I2S
  *         configuration phase, the Size parameter means the number of 16-bit data length
  *         in the transaction and when a 24-bit data frame or a 32-bit data frame is selected
  *         the Size parameter means the number of 16-bit data length.
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_I2S_Transmit_IT</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg_cfgr</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_I2S_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Set state and reset error code */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_BUSY_TX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_I2S_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmpreg_cfgr</name> <operator>=</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <operator>(</operator><name>SPI_I2SCFGR_DATLEN</name> <operator>|</operator> <name>SPI_I2SCFGR_CHLEN</name><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpreg_cfgr</name> <operator>==</operator> <name>I2S_DATAFORMAT_24B</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tmpreg_cfgr</name> <operator>==</operator> <name>I2S_DATAFORMAT_32B</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferSize</name></name> <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Enable TXE and ERR interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_I2S_ENABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_TXE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check if the I2S is already enabled */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SE</name><operator>)</operator> <operator>!=</operator> <name>SPI_I2SCFGR_I2SE</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable I2S peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_I2S_ENABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receive an amount of data in non-blocking mode with Interrupt
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @param  pData a 16-bit pointer to the Receive data buffer.
  * @param  Size number of data sample to be sent:
  * @note   When a 16-bit data frame or a 16-bit data frame extended is selected during the I2S
  *         configuration phase, the Size parameter means the number of 16-bit data length
  *         in the transaction and when a 24-bit data frame or a 32-bit data frame is selected
  *         the Size parameter means the number of 16-bit data length.
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @note   It is recommended to use DMA for the I2S receiver to avoid de-synchronization
  * between Master and Slave otherwise the I2S interrupt should be optimized.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_I2S_Receive_IT</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg_cfgr</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_I2S_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Set state and reset error code */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_BUSY_RX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_I2S_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmpreg_cfgr</name> <operator>=</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <operator>(</operator><name>SPI_I2SCFGR_DATLEN</name> <operator>|</operator> <name>SPI_I2SCFGR_CHLEN</name><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpreg_cfgr</name> <operator>==</operator> <name>I2S_DATAFORMAT_24B</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tmpreg_cfgr</name> <operator>==</operator> <name>I2S_DATAFORMAT_32B</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Enable RXNE and ERR interrupt */</comment>
  <expr_stmt><expr><call><name>__HAL_I2S_ENABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_RXNE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check if the I2S is already enabled */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SE</name><operator>)</operator> <operator>!=</operator> <name>SPI_I2SCFGR_I2SE</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable I2S peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_I2S_ENABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Transmit an amount of data in non-blocking mode with DMA
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @param  pData a 16-bit pointer to the Transmit data buffer.
  * @param  Size number of data sample to be sent:
  * @note   When a 16-bit data frame or a 16-bit data frame extended is selected during the I2S
  *         configuration phase, the Size parameter means the number of 16-bit data length
  *         in the transaction and when a 24-bit data frame or a 32-bit data frame is selected
  *         the Size parameter means the number of 16-bit data length.
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_I2S_Transmit_DMA</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg_cfgr</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_I2S_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Set state and reset error code */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_BUSY_TX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_I2S_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmpreg_cfgr</name> <operator>=</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <operator>(</operator><name>SPI_I2SCFGR_DATLEN</name> <operator>|</operator> <name>SPI_I2SCFGR_CHLEN</name><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpreg_cfgr</name> <operator>==</operator> <name>I2S_DATAFORMAT_24B</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tmpreg_cfgr</name> <operator>==</operator> <name>I2S_DATAFORMAT_32B</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferSize</name></name> <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Set the I2S Tx DMA Half transfer complete callback */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>I2S_DMATxHalfCplt</name></expr>;</expr_stmt>

  <comment type="block">/* Set the I2S Tx DMA transfer complete callback */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>I2S_DMATxCplt</name></expr>;</expr_stmt>

  <comment type="block">/* Set the DMA error callback */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>I2S_DMAError</name></expr>;</expr_stmt>

  <comment type="block">/* Enable the Tx DMA Stream/Channel */</comment>
  <if_stmt><if>if <condition>(<expr><name>HAL_OK</name> <operator>!=</operator> <call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hi2s</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></argument>, <argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferSize</name></name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update SPI error code */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_DMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check if the I2S is already enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name></expr></argument>, <argument><expr><name>SPI_I2SCFGR_I2SE</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable I2S peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_I2S_ENABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check if the I2S Tx request is already enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SPI_CR2_TXDMAEN</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable Tx DMA Request */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SPI_CR2_TXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receive an amount of data in non-blocking mode with DMA
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @param  pData a 16-bit pointer to the Receive data buffer.
  * @param  Size number of data sample to be sent:
  * @note   When a 16-bit data frame or a 16-bit data frame extended is selected during the I2S
  *         configuration phase, the Size parameter means the number of 16-bit data length
  *         in the transaction and when a 24-bit data frame or a 32-bit data frame is selected
  *         the Size parameter means the number of 16-bit data length.
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_I2S_Receive_DMA</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg_cfgr</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_I2S_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Set state and reset error code */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_BUSY_RX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_I2S_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmpreg_cfgr</name> <operator>=</operator> <name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <operator>(</operator><name>SPI_I2SCFGR_DATLEN</name> <operator>|</operator> <name>SPI_I2SCFGR_CHLEN</name><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpreg_cfgr</name> <operator>==</operator> <name>I2S_DATAFORMAT_24B</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tmpreg_cfgr</name> <operator>==</operator> <name>I2S_DATAFORMAT_32B</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <operator>(</operator><name>Size</name> <operator>&lt;&lt;</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Set the I2S Rx DMA Half transfer complete callback */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>I2S_DMARxHalfCplt</name></expr>;</expr_stmt>

  <comment type="block">/* Set the I2S Rx DMA transfer complete callback */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>I2S_DMARxCplt</name></expr>;</expr_stmt>

  <comment type="block">/* Set the DMA error callback */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>I2S_DMAError</name></expr>;</expr_stmt>

  <comment type="block">/* Check if Master Receiver mode is selected */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SCFG</name><operator>)</operator> <operator>==</operator> <name>I2S_MODE_MASTER_RX</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */</comment>
    <expr_stmt><expr><call><name>__HAL_I2S_CLEAR_OVRFLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Enable the Rx DMA Stream/Channel */</comment>
  <if_stmt><if>if <condition>(<expr><name>HAL_OK</name> <operator>!=</operator> <call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hi2s</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name></expr></argument>, <argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferSize</name></name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update SPI error code */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_DMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check if the I2S is already enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name></expr></argument>, <argument><expr><name>SPI_I2SCFGR_I2SE</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable I2S peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_I2S_ENABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check if the I2S Rx request is already enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SPI_CR2_RXDMAEN</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable Rx DMA Request */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SPI_CR2_RXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Pauses the audio DMA Stream/Channel playing from the Media.
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_I2S_DMAPause</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_I2S_STATE_BUSY_TX</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the I2S DMA Tx request */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SPI_CR2_TXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_I2S_STATE_BUSY_RX</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the I2S DMA Rx request */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SPI_CR2_RXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>SPI_I2S_FULLDUPLEX_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if type="elseif">else if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_I2S_STATE_BUSY_TX_RX</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Pause the audio file playing by disabling the I2S DMA request */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SPI_CR2_TXDMAEN</name> <operator>|</operator> <name>SPI_CR2_RXDMAEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CR2</name></expr></argument>, <argument><expr><operator>(</operator><name>SPI_CR2_TXDMAEN</name> <operator>|</operator> <name>SPI_CR2_RXDMAEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SPI_I2S_FULLDUPLEX_SUPPORT */</comment>
  <else>else
  <block>{<block_content>
    <comment type="block">/* nothing to do */</comment>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Resumes the audio DMA Stream/Channel playing from the Media.
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_I2S_DMAResume</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_I2S_STATE_BUSY_TX</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable the I2S DMA Tx request */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SPI_CR2_TXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_I2S_STATE_BUSY_RX</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable the I2S DMA Rx request */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SPI_CR2_RXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>SPI_I2S_FULLDUPLEX_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if type="elseif">else if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_I2S_STATE_BUSY_TX_RX</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Pause the audio file playing by disabling the I2S DMA request */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SPI_CR2_RXDMAEN</name> <operator>|</operator> <name>SPI_CR2_TXDMAEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CR2</name></expr></argument>, <argument><expr><operator>(</operator><name>SPI_CR2_RXDMAEN</name> <operator>|</operator> <name>SPI_CR2_TXDMAEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If the I2Sext peripheral is still not enabled, enable it */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>I2SCFGR</name> <operator>&amp;</operator> <name>SPI_I2SCFGR_I2SE</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable I2Sext peripheral */</comment>
      <expr_stmt><expr><call><name>__HAL_I2SEXT_ENABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SPI_I2S_FULLDUPLEX_SUPPORT */</comment>
  <else>else
  <block>{<block_content>
    <comment type="block">/* nothing to do */</comment>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* If the I2S peripheral is still not enabled, enable it */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>I2SCFGR</name></name></expr></argument>, <argument><expr><name>SPI_I2SCFGR_I2SE</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable I2S peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_I2S_ENABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Stops the audio DMA Stream/Channel playing from the Media.
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_I2S_DMAStop</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>errorcode</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* The Lock is not implemented on this API to allow the user application
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */</comment>

  <comment type="block">/* Disable the I2S Tx/Rx DMA requests */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SPI_CR2_TXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SPI_CR2_RXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Abort the I2S DMA tx Stream/Channel */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the I2S DMA tx Stream/Channel */</comment>
    <if_stmt><if>if <condition>(<expr><name>HAL_OK</name> <operator>!=</operator> <call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_DMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errorcode</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Abort the I2S DMA rx Stream/Channel */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the I2S DMA rx Stream/Channel */</comment>
    <if_stmt><if>if <condition>(<expr><name>HAL_OK</name> <operator>!=</operator> <call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_DMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errorcode</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>SPI_I2S_FULLDUPLEX_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* In case of Full-Duplex, disable the I2SxEXT Tx/Rx DMA requests*/</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_I2S_STATE_BUSY_TX_RX</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the I2SxEXT DMA requests */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CR2</name></expr></argument>, <argument><expr><name>SPI_CR2_TXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><call><name>I2SxEXT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>CR2</name></expr></argument>, <argument><expr><name>SPI_CR2_RXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Disable I2Sext peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_I2SEXT_DISABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SPI_I2S_FULLDUPLEX_SUPPORT */</comment>

  <comment type="block">/* Disable I2S peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_I2S_DISABLE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>errorcode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles I2S interrupt request.
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_I2S_IRQHandler</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Call the IrqHandler ISR set during HAL_I2S_INIT */</comment>
  <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>IrqHandlerISR</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Tx Transfer Half completed callbacks
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_I2S_TxHalfCpltCallback</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Tx Transfer completed callbacks
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_I2S_TxCpltCallback</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Rx Transfer half completed callbacks
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_I2S_RxHalfCpltCallback</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_I2S_RxCpltCallback</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  I2S error callbacks
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_I2S_ErrorCallback</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup I2S_Exported_Functions_Group3 Peripheral State and Errors functions
  *  @brief   Peripheral State functions
  *
@verbatim
 ===============================================================================
                      ##### Peripheral State and Errors functions #####
 ===============================================================================
    [..]
    This subsection permits to get in run-time the status of the peripheral
    and the data flow.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Return the I2S state
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */</comment>
<function><type><name>HAL_I2S_StateTypeDef</name></type> <name>HAL_I2S_GetState</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the I2S error code
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval I2S Error Code
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_I2S_GetError</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup I2S_Private_Functions I2S Private Functions
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @brief  DMA I2S transmit process complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>I2S_DMATxCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name> <init>= <expr><operator>(</operator><name>I2S_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Derogation MISRAC2012-Rule-11.5 */</comment>

  <comment type="block">/* if DMA is configured in DMA_NORMAL Mode */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>DMA_NORMAL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable Tx DMA Request */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SPI_CR2_TXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Call user Tx complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>TxCpltCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_I2S_TxCpltCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA I2S transmit process half complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>I2S_DMATxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name> <init>= <expr><operator>(</operator><name>I2S_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Derogation MISRAC2012-Rule-11.5 */</comment>

  <comment type="block">/* Call user Tx half complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_I2S_TxHalfCpltCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA I2S receive process complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>I2S_DMARxCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name> <init>= <expr><operator>(</operator><name>I2S_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Derogation MISRAC2012-Rule-11.5 */</comment>

  <comment type="block">/* if DMA is configured in DMA_NORMAL Mode */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>==</operator> <name>DMA_NORMAL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable Rx DMA Request */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SPI_CR2_RXDMAEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Call user Rx complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>RxCpltCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_I2S_RxCpltCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA I2S receive process half complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>I2S_DMARxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name> <init>= <expr><operator>(</operator><name>I2S_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Derogation MISRAC2012-Rule-11.5 */</comment>

  <comment type="block">/* Call user Rx half complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_I2S_RxHalfCpltCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA I2S communication error callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>I2S_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name> <init>= <expr><operator>(</operator><name>I2S_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Derogation MISRAC2012-Rule-11.5 */</comment>

  <comment type="block">/* Disable Rx and Tx DMA Request */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SPI_CR2_RXDMAEN</name> <operator>|</operator> <name>SPI_CR2_TXDMAEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Set the error code and execute error callback*/</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_DMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Call user error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_I2S_ErrorCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Transmit an amount of data in non-blocking mode with Interrupt
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>I2S_Transmit_IT</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Transmit data */</comment>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name><name>hi2s</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable TXE and ERR interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_I2S_DISABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_TXE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>
    <comment type="block">/* Call user Tx complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>TxCpltCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_I2S_TxCpltCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receive an amount of data in non-blocking mode with Interrupt
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>I2S_Receive_IT</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Receive data */</comment>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>hi2s</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable RXNE and ERR interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_I2S_DISABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_RXNE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>
    <comment type="block">/* Call user Rx complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>RxCpltCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_I2S_RxCpltCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles I2S interrupt request.
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>I2S_IRQHandler</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>i2ssr</name> <init>= <expr><name><name>hi2s</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_I2S_STATE_BUSY_RX</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* I2S in mode Receiver ------------------------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>i2ssr</name> <operator>&amp;</operator> <name>I2S_FLAG_RXNE</name><operator>)</operator> <operator>==</operator> <name>I2S_FLAG_RXNE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>__HAL_I2S_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>I2S_IT_RXNE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>I2S_Receive_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* I2S Overrun error interrupt occurred -------------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>i2ssr</name> <operator>&amp;</operator> <name>I2S_FLAG_OVR</name><operator>)</operator> <operator>==</operator> <name>I2S_FLAG_OVR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>__HAL_I2S_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>I2S_IT_ERR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable RXNE and ERR interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_I2S_DISABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_RXNE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Clear Overrun flag */</comment>
      <expr_stmt><expr><call><name>__HAL_I2S_CLEAR_OVRFLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Set the I2S State ready */</comment>
      <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>


      <comment type="block">/* Set the error code and execute error callback*/</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Call user error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_I2S_ErrorCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_I2S_STATE_BUSY_TX</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* I2S in mode Transmitter -----------------------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>i2ssr</name> <operator>&amp;</operator> <name>I2S_FLAG_TXE</name><operator>)</operator> <operator>==</operator> <name>I2S_FLAG_TXE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>__HAL_I2S_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>I2S_IT_TXE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>I2S_Transmit_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* I2S Underrun error interrupt occurred --------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>i2ssr</name> <operator>&amp;</operator> <name>I2S_FLAG_UDR</name><operator>)</operator> <operator>==</operator> <name>I2S_FLAG_UDR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>__HAL_I2S_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>I2S_IT_ERR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable TXE and ERR interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_I2S_DISABLE_IT</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><operator>(</operator><name>I2S_IT_TXE</name> <operator>|</operator> <name>I2S_IT_ERR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Clear Underrun flag */</comment>
      <expr_stmt><expr><call><name>__HAL_I2S_CLEAR_UDRFLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Set the I2S State ready */</comment>
      <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>

      <comment type="block">/* Set the error code and execute error callback*/</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>, <argument><expr><name>HAL_I2S_ERROR_UDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Call user error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_I2S_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hi2s</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_I2S_ErrorCallback</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_I2S_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles I2S Communication Timeout.
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @param  Flag Flag checked
  * @param  State Value of the flag expected
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>I2S_WaitFlagStateUntilTimeout</name><parameter_list>(<parameter><decl><type><name>I2S_HandleTypeDef</name> <modifier>*</modifier></type><name>hi2s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Flag</name></decl></parameter>, <parameter><decl><type><name>FlagStatus</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait until flag is set to status*/</comment>
  <while>while <condition>(<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>__HAL_I2S_GET_FLAG</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>, <argument><expr><name>Flag</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>SET</name></expr> </then><else>: <expr><name>RESET</name></expr></else></ternary><operator>)</operator> <operator>!=</operator> <name>State</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;=</operator> <name>Timeout</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Set the I2S State ready */</comment>
        <expr_stmt><expr><name><name>hi2s</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_I2S_STATE_READY</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hi2s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_I2S_MODULE_ENABLED */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
