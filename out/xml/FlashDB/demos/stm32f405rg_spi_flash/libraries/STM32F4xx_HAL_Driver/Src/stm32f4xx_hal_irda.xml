<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_irda.c
  * @author  MCD Application Team
  * @brief   IRDA HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the IrDA SIR ENDEC block (IrDA):
  *           + Initialization and de-initialization functions
  *           + IO operation functions
  *           + Peripheral Control functions
  *           + Peripheral State and Errors functions
  @verbatim
  ==============================================================================
                        ##### How to use this driver #####
  ==============================================================================
  [..]
    The IRDA HAL driver can be used as follows:

    (#) Declare a IRDA_HandleTypeDef handle structure (eg. IRDA_HandleTypeDef hirda).
    (#) Initialize the IRDA low level resources by implementing the HAL_IRDA_MspInit() API:
        (##) Enable the USARTx interface clock.
        (##) IRDA pins configuration:
            (+++) Enable the clock for the IRDA GPIOs.
            (+++) Configure IRDA pins as alternate function pull-up.
        (##) NVIC configuration if you need to use interrupt process (HAL_IRDA_Transmit_IT()
             and HAL_IRDA_Receive_IT() APIs):
            (+++) Configure the USARTx interrupt priority.
            (+++) Enable the NVIC USART IRQ handle.
        (##) DMA Configuration if you need to use DMA process (HAL_IRDA_Transmit_DMA()
             and HAL_IRDA_Receive_DMA() APIs):
            (+++) Declare a DMA handle structure for the Tx/Rx stream.
            (+++) Enable the DMAx interface clock.
            (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
            (+++) Configure the DMA Tx/Rx stream.
            (+++) Associate the initialized DMA handle to the IRDA DMA Tx/Rx handle.
            (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on the DMA Tx/Rx stream.
            (+++) Configure the IRDAx interrupt priority and enable the NVIC USART IRQ handle
                  (used for last byte sending completion detection in DMA non circular mode)

    (#) Program the Baud Rate, Word Length, Parity, IrDA Mode, Prescaler
        and Mode(Receiver/Transmitter) in the hirda Init structure.

    (#) Initialize the IRDA registers by calling the HAL_IRDA_Init() API:
        (++) This API configures also the low level Hardware GPIO, CLOCK, CORTEX...etc)
             by calling the customized HAL_IRDA_MspInit() API.

         -@@- The specific IRDA interrupts (Transmission complete interrupt,
             RXNE interrupt and Error Interrupts) will be managed using the macros
             __HAL_IRDA_ENABLE_IT() and __HAL_IRDA_DISABLE_IT() inside the transmit and receive process.

    (#) Three operation modes are available within this driver :

    *** Polling mode IO operation ***
    =================================
    [..]
      (+) Send an amount of data in blocking mode using HAL_IRDA_Transmit()
      (+) Receive an amount of data in blocking mode using HAL_IRDA_Receive()

    *** Interrupt mode IO operation ***
    ===================================
    [..]
      (+) Send an amount of data in non blocking mode using HAL_IRDA_Transmit_IT()
      (+) At transmission end of transfer HAL_IRDA_TxCpltCallback is executed and user can
           add his own code by customization of function pointer HAL_IRDA_TxCpltCallback
      (+) Receive an amount of data in non blocking mode using HAL_IRDA_Receive_IT()
      (+) At reception end of transfer HAL_IRDA_RxCpltCallback is executed and user can
           add his own code by customization of function pointer HAL_IRDA_RxCpltCallback
      (+) In case of transfer Error, HAL_IRDA_ErrorCallback() function is executed and user can
           add his own code by customization of function pointer HAL_IRDA_ErrorCallback

    *** DMA mode IO operation ***
    =============================
    [..]
      (+) Send an amount of data in non blocking mode (DMA) using HAL_IRDA_Transmit_DMA()
      (+) At transmission end of half transfer HAL_IRDA_TxHalfCpltCallback is executed and user can
            add his own code by customization of function pointer HAL_IRDA_TxHalfCpltCallback
      (+) At transmission end of transfer HAL_IRDA_TxCpltCallback is executed and user can
           add his own code by customization of function pointer HAL_IRDA_TxCpltCallback
      (+) Receive an amount of data in non blocking mode (DMA) using HAL_IRDA_Receive_DMA()
      (+) At reception end of half transfer HAL_IRDA_RxHalfCpltCallback is executed and user can
            add his own code by customization of function pointer HAL_IRDA_RxHalfCpltCallback
      (+) At reception end of transfer HAL_IRDA_RxCpltCallback is executed and user can
           add his own code by customization of function pointer HAL_IRDA_RxCpltCallback
      (+) In case of transfer Error, HAL_IRDA_ErrorCallback() function is executed and user can
           add his own code by customization of function pointer HAL_IRDA_ErrorCallback
      (+) Pause the DMA Transfer using HAL_IRDA_DMAPause()
      (+) Resume the DMA Transfer using HAL_IRDA_DMAResume()
      (+) Stop the DMA Transfer using HAL_IRDA_DMAStop()

    *** IRDA HAL driver macros list ***
    ===================================
    [..]
      Below the list of most used macros in IRDA HAL driver.

       (+) __HAL_IRDA_ENABLE: Enable the IRDA peripheral
       (+) __HAL_IRDA_DISABLE: Disable the IRDA peripheral
       (+) __HAL_IRDA_GET_FLAG : Check whether the specified IRDA flag is set or not
       (+) __HAL_IRDA_CLEAR_FLAG : Clear the specified IRDA pending flag
       (+) __HAL_IRDA_ENABLE_IT: Enable the specified IRDA interrupt
       (+) __HAL_IRDA_DISABLE_IT: Disable the specified IRDA interrupt
       (+) __HAL_IRDA_GET_IT_SOURCE: Check whether the specified IRDA interrupt has occurred or not

    [..]
     (@) You can refer to the IRDA HAL driver header file for more useful macros

    ##### Callback registration #####
    ==================================

    [..]
      The compilation define USE_HAL_IRDA_REGISTER_CALLBACKS when set to 1
      allows the user to configure dynamically the driver callbacks.

    [..]
      Use Function @ref HAL_IRDA_RegisterCallback() to register a user callback.
      Function @ref HAL_IRDA_RegisterCallback() allows to register following callbacks:
       (+) TxHalfCpltCallback        : Tx Half Complete Callback.
       (+) TxCpltCallback            : Tx Complete Callback.
       (+) RxHalfCpltCallback        : Rx Half Complete Callback.
       (+) RxCpltCallback            : Rx Complete Callback.
       (+) ErrorCallback             : Error Callback.
       (+) AbortCpltCallback         : Abort Complete Callback.
       (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
       (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
       (+) MspInitCallback           : IRDA MspInit.
       (+) MspDeInitCallback         : IRDA MspDeInit.
      This function takes as parameters the HAL peripheral handle, the Callback ID
      and a pointer to the user callback function.

    [..]
      Use function @ref HAL_IRDA_UnRegisterCallback() to reset a callback to the default
      weak (surcharged) function.
      @ref HAL_IRDA_UnRegisterCallback() takes as parameters the HAL peripheral handle,
      and the Callback ID.
      This function allows to reset following callbacks:
       (+) TxHalfCpltCallback        : Tx Half Complete Callback.
       (+) TxCpltCallback            : Tx Complete Callback.
       (+) RxHalfCpltCallback        : Rx Half Complete Callback.
       (+) RxCpltCallback            : Rx Complete Callback.
       (+) ErrorCallback             : Error Callback.
       (+) AbortCpltCallback         : Abort Complete Callback.
       (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
       (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
       (+) MspInitCallback           : IRDA MspInit.
       (+) MspDeInitCallback         : IRDA MspDeInit.

    [..]
      By default, after the @ref HAL_IRDA_Init() and when the state is HAL_IRDA_STATE_RESET
      all callbacks are set to the corresponding weak (surcharged) functions:
      examples @ref HAL_IRDA_TxCpltCallback(), @ref HAL_IRDA_RxHalfCpltCallback().
      Exception done for MspInit and MspDeInit functions that are respectively
      reset to the legacy weak (surcharged) functions in the @ref HAL_IRDA_Init()
      and @ref HAL_IRDA_DeInit() only when these callbacks are null (not registered beforehand).
      If not, MspInit or MspDeInit are not null, the @ref HAL_IRDA_Init() and @ref HAL_IRDA_DeInit()
      keep and use the user MspInit/MspDeInit callbacks (registered beforehand).

    [..]
      Callbacks can be registered/unregistered in HAL_IRDA_STATE_READY state only.
      Exception done MspInit/MspDeInit that can be registered/unregistered
      in HAL_IRDA_STATE_READY or HAL_IRDA_STATE_RESET state, thus registered (user)
      MspInit/DeInit callbacks can be used during the Init/DeInit.
      In that case first register the MspInit/MspDeInit user callbacks
      using @ref HAL_IRDA_RegisterCallback() before calling @ref HAL_IRDA_DeInit()
      or @ref HAL_IRDA_Init() function.

    [..]
      When The compilation define USE_HAL_IRDA_REGISTER_CALLBACKS is set to 0 or
      not defined, the callback registration feature is not available
      and weak (surcharged) callbacks are used.

  @endverbatim
     [..]
       (@) Additionnal remark: If the parity is enabled, then the MSB bit of the data written
           in the data register is transmitted but is changed by the parity bit.
           Depending on the frame length defined by the M bit (8-bits or 9-bits),
           the possible IRDA frame formats are as listed in the following table:
    +-------------------------------------------------------------+
    |   M bit |  PCE bit  |            IRDA frame                 |
    |---------------------|---------------------------------------|
    |    0    |    0      |    | SB | 8 bit data | 1 STB |        |
    |---------|-----------|---------------------------------------|
    |    0    |    1      |    | SB | 7 bit data | PB | 1 STB |   |
    |---------|-----------|---------------------------------------|
    |    1    |    0      |    | SB | 9 bit data | 1 STB |        |
    |---------|-----------|---------------------------------------|
    |    1    |    1      |    | SB | 8 bit data | PB | 1 STB |   |
    +-------------------------------------------------------------+
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup IRDA IRDA
  * @brief HAL IRDA module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_IRDA_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block">/* Private constants ---------------------------------------------------------*/</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup IRDA_Private_Functions
  * @{
  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>IRDA_InitCallbacksToDefault</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACKS */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_SetConfig</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>IRDA_Transmit_IT</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>IRDA_EndTransmit_IT</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>IRDA_Receive_IT</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMATransmitCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMATransmitHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMAReceiveCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMAReceiveHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMAAbortOnError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMATxAbortCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMARxAbortCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMATxOnlyAbortCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMARxOnlyAbortCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>IRDA_WaitOnFlagUntilTimeout</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Flag</name></decl></parameter>, <parameter><decl><type><name>FlagStatus</name></type> <name>Status</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tickstart</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_EndTxTransfer</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_EndRxTransfer</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup IRDA_Exported_Functions IrDA Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup IRDA_Exported_Functions_Group1 IrDA Initialization and de-initialization functions
  *  @brief    Initialization and Configuration functions
  *
@verbatim

  ==============================================================================
            ##### Initialization and Configuration functions #####
  ==============================================================================
    [..]
    This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
    in asynchronous IrDA mode.
      (+) For the asynchronous mode only these parameters can be configured:
        (++) BaudRate
        (++) WordLength
        (++) Parity: If the parity is enabled, then the MSB bit of the data written
             in the data register is transmitted but is changed by the parity bit.
             Depending on the frame length defined by the M bit (8-bits or 9-bits),
             please refer to Reference manual for possible IRDA frame formats.
        (++) Prescaler: A pulse of width less than two and greater than one PSC period(s) may or may
             not be rejected. The receiver set up time should be managed by software. The IrDA physical layer
             specification specifies a minimum of 10 ms delay between transmission and
             reception (IrDA is a half duplex protocol).
        (++) Mode: Receiver/transmitter modes
        (++) IrDAMode: the IrDA can operate in the Normal mode or in the Low power mode.
    [..]
    The HAL_IRDA_Init() API follows IRDA configuration procedures (details for the procedures
    are available in reference manual).

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the IRDA mode according to the specified
  *         parameters in the IRDA_InitTypeDef and create the associated handle.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_IRDA_Init</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the IRDA handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>hirda</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the IRDA instance parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_IRDA_INSTANCE</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Check the IRDA mode parameter in the IRDA handle */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_IRDA_POWERMODE</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>IrDAMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_IRDA_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>
    <expr_stmt><expr><call><name>IRDA_InitCallbacksToDefault</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_IRDA_MspInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Init the low level hardware : GPIO, CLOCK */</comment>
    <expr_stmt><expr><call><name>HAL_IRDA_MspInit</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the IRDA peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_IRDA_DISABLE</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the IRDA communication parameters */</comment>
  <expr_stmt><expr><call><name>IRDA_SetConfig</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* In IrDA mode, the following bits must be kept cleared:
  - LINEN, STOP and CLKEN bits in the USART_CR2 register,
  - SCEN and HDSEL bits in the USART_CR3 register.*/</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR2_LINEN</name> <operator>|</operator> <name>USART_CR2_STOP</name> <operator>|</operator> <name>USART_CR2_CLKEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR3_SCEN</name> <operator>|</operator> <name>USART_CR3_HDSEL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the IRDA peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_IRDA_ENABLE</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the prescaler */</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>GTPR</name></name></expr></argument>, <argument><expr><name>USART_GTPR_PSC</name></expr></argument>, <argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Prescaler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Configure the IrDA mode */</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_IRLP</name></expr></argument>, <argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>IrDAMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the IrDA mode by setting the IREN bit in the CR3 register */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_IREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize the IRDA state*/</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_IRDA_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitializes the IRDA peripheral
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_IRDA_DeInit</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the IRDA handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>hirda</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_IRDA_INSTANCE</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_IRDA_DISABLE</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* DeInit the low level hardware */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_IRDA_MspDeInit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_IRDA_MspDeInit</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACKS */</comment>

  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_IRDA_ERROR_NONE</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_RESET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  IRDA MSP Init.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_IRDA_MspInit</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_IRDA_MspInit can be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  IRDA MSP DeInit.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_IRDA_MspDeInit</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_IRDA_MspDeInit can be implemented in the user file
   */</comment>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User IRDA Callback
  *         To be used instead of the weak predefined callback
  * @param  hirda irda handle
  * @param  CallbackID ID of the callback to be registered
  *         This parameter can be one of the following values:
  *           @arg @ref HAL_IRDA_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
  *           @arg @ref HAL_IRDA_TX_COMPLETE_CB_ID Tx Complete Callback ID
  *           @arg @ref HAL_IRDA_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
  *           @arg @ref HAL_IRDA_RX_COMPLETE_CB_ID Rx Complete Callback ID
  *           @arg @ref HAL_IRDA_ERROR_CB_ID Error Callback ID
  *           @arg @ref HAL_IRDA_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
  *           @arg @ref HAL_IRDA_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
  *           @arg @ref HAL_IRDA_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
  *           @arg @ref HAL_IRDA_MSPINIT_CB_ID MspInit Callback ID
  *           @arg @ref HAL_IRDA_MSPDEINIT_CB_ID MspDeInit Callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_IRDA_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>, <parameter><decl><type><name>HAL_IRDA_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>, <parameter><decl><type><name>pIRDA_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_IRDA_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_IRDA_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_IRDA_TX_HALFCOMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_TX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_RX_HALFCOMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_RX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_ERROR_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_ABORT_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_ABORT_TRANSMIT_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>AbortTransmitCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_ABORT_RECEIVE_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>AbortReceiveCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_IRDA_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_IRDA_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_IRDA_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_IRDA_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_IRDA_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister an IRDA callback
  *         IRDA callback is redirected to the weak predefined callback
  * @param  hirda irda handle
  * @param  CallbackID ID of the callback to be unregistered
  *         This parameter can be one of the following values:
  *           @arg @ref HAL_IRDA_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
  *           @arg @ref HAL_IRDA_TX_COMPLETE_CB_ID Tx Complete Callback ID
  *           @arg @ref HAL_IRDA_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
  *           @arg @ref HAL_IRDA_RX_COMPLETE_CB_ID Rx Complete Callback ID
  *           @arg @ref HAL_IRDA_ERROR_CB_ID Error Callback ID
  *           @arg @ref HAL_IRDA_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
  *           @arg @ref HAL_IRDA_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
  *           @arg @ref HAL_IRDA_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
  *           @arg @ref HAL_IRDA_MSPINIT_CB_ID MspInit Callback ID
  *           @arg @ref HAL_IRDA_MSPDEINIT_CB_ID MspDeInit Callback ID
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_IRDA_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>, <parameter><decl><type><name>HAL_IRDA_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>HAL_IRDA_STATE_READY</name> <operator>==</operator> <name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_IRDA_TX_HALFCOMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_IRDA_TxHalfCpltCallback</name></expr>;</expr_stmt>               <comment type="block">/* Legacy weak  TxHalfCpltCallback       */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_TX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxCpltCallback</name></name> <operator>=</operator> <name>HAL_IRDA_TxCpltCallback</name></expr>;</expr_stmt>                       <comment type="block">/* Legacy weak TxCpltCallback            */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_RX_HALFCOMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_IRDA_RxHalfCpltCallback</name></expr>;</expr_stmt>               <comment type="block">/* Legacy weak RxHalfCpltCallback        */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_RX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxCpltCallback</name></name> <operator>=</operator> <name>HAL_IRDA_RxCpltCallback</name></expr>;</expr_stmt>                       <comment type="block">/* Legacy weak RxCpltCallback            */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_ERROR_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>HAL_IRDA_ErrorCallback</name></expr>;</expr_stmt>                         <comment type="block">/* Legacy weak ErrorCallback             */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_ABORT_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name> <operator>=</operator> <name>HAL_IRDA_AbortCpltCallback</name></expr>;</expr_stmt>                 <comment type="block">/* Legacy weak AbortCpltCallback         */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_ABORT_TRANSMIT_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>AbortTransmitCpltCallback</name></name> <operator>=</operator> <name>HAL_IRDA_AbortTransmitCpltCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak AbortTransmitCpltCallback */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_ABORT_RECEIVE_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>AbortReceiveCpltCallback</name></name> <operator>=</operator> <name>HAL_IRDA_AbortReceiveCpltCallback</name></expr>;</expr_stmt>   <comment type="block">/* Legacy weak AbortReceiveCpltCallback  */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_IRDA_MspInit</name></expr>;</expr_stmt>                             <comment type="block">/* Legacy weak MspInitCallback           */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_IRDA_MspDeInit</name></expr>;</expr_stmt>                         <comment type="block">/* Legacy weak MspDeInitCallback         */</comment>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_IRDA_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>HAL_IRDA_STATE_RESET</name> <operator>==</operator> <name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_IRDA_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_IRDA_MspInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_IRDA_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_IRDA_MspDeInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_IRDA_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_IRDA_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACKS */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup IRDA_Exported_Functions_Group2 IO operation functions
  *  @brief   IRDA Transmit and Receive functions
  *
@verbatim
  ==============================================================================
                      ##### IO operation functions #####
  ==============================================================================
    [..]
    This subsection provides a set of functions allowing to manage the IRDA data transfers.
    IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
    on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver
    is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
    While receiving data, transmission should be avoided as the data to be transmitted
    could be corrupted.

    (#) There are two modes of transfer:
       (++) Blocking mode: The communication is performed in polling mode.
            The HAL status of all data processing is returned by the same function
            after finishing transfer.
       (++) Non-Blocking mode: The communication is performed using Interrupts
           or DMA, these API's return the HAL status.
           The end of the data processing will be indicated through the
           dedicated IRDA IRQ when using Interrupt mode or the DMA IRQ when
           using DMA mode.
           The HAL_IRDA_TxCpltCallback(), HAL_IRDA_RxCpltCallback() user callbacks
           will be executed respectively at the end of the Transmit or Receive process
           The HAL_IRDA_ErrorCallback() user callback will be executed when a communication error is detected

    (#) Blocking mode APIs are :
        (++) HAL_IRDA_Transmit()
        (++) HAL_IRDA_Receive()

    (#) Non Blocking mode APIs with Interrupt are :
        (++) HAL_IRDA_Transmit_IT()
        (++) HAL_IRDA_Receive_IT()
        (++) HAL_IRDA_IRQHandler()

    (#) Non Blocking mode functions with DMA are :
        (++) HAL_IRDA_Transmit_DMA()
        (++) HAL_IRDA_Receive_DMA()
        (++) HAL_IRDA_DMAPause()
        (++) HAL_IRDA_DMAResume()
        (++) HAL_IRDA_DMAStop()

    (#) A set of Transfer Complete Callbacks are provided in Non Blocking mode:
        (++) HAL_IRDA_TxHalfCpltCallback()
        (++) HAL_IRDA_TxCpltCallback()
        (++) HAL_IRDA_RxHalfCpltCallback()
        (++) HAL_IRDA_RxCpltCallback()
        (++) HAL_IRDA_ErrorCallback()

    (#) Non-Blocking mode transfers could be aborted using Abort API's :
        (+) HAL_IRDA_Abort()
        (+) HAL_IRDA_AbortTransmit()
        (+) HAL_IRDA_AbortReceive()
        (+) HAL_IRDA_Abort_IT()
        (+) HAL_IRDA_AbortTransmit_IT()
        (+) HAL_IRDA_AbortReceive_IT()

    (#) For Abort services based on interrupts (HAL_IRDA_Abortxxx_IT), a set of Abort Complete Callbacks are provided:
        (+) HAL_IRDA_AbortCpltCallback()
        (+) HAL_IRDA_AbortTransmitCpltCallback()
        (+) HAL_IRDA_AbortReceiveCpltCallback()

    (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
        Errors are handled as follows :
        (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but error severity is
            to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in Interrupt mode reception .
            Received character is then retrieved and stored in Rx buffer, Error code is set to allow user to identify error type,
            and HAL_IRDA_ErrorCallback() user callback is executed. Transfer is kept ongoing on IRDA side.
            If user wants to abort it, Abort services should be called by user.
        (+) Error is considered as Blocking : Transfer could not be completed properly and is aborted.
            This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
            Error code is set to allow user to identify error type, and HAL_IRDA_ErrorCallback() user callback is executed.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Sends an amount of data in blocking mode.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_IRDA_Transmit</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check that a Tx process is not already ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_IRDA_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_IRDA_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_BUSY_TX</name></expr>;</expr_stmt>

    <comment type="block">/* Init tickstart for timeout managment*/</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>WordLength</name></name> <operator>==</operator> <name>IRDA_WORDLENGTH_9B</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>IRDA_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>, <argument><expr><name>IRDA_FLAG_TXE</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>pData</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>tmp</name> <operator>&amp;</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0x01FF</literal><operator>)</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Parity</name></name> <operator>==</operator> <name>IRDA_PARITY_NONE</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name>pData</name> <operator>+=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><name>pData</name> <operator>+=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>IRDA_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>, <argument><expr><name>IRDA_FLAG_TXE</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>pData</name><operator>++</operator> <operator>&amp;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><call><name>IRDA_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>, <argument><expr><name>IRDA_FLAG_TC</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* At end of Tx process, restore hirda-&gt;gState to Ready */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receive an amount of data in blocking mode.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_IRDA_Receive</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check that a Rx process is not already ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>==</operator> <name>HAL_IRDA_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_IRDA_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_BUSY_RX</name></expr>;</expr_stmt>

    <comment type="block">/* Init tickstart for timeout managment*/</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>

    <comment type="block">/* Check the remain data to be received */</comment>
    <while>while <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>WordLength</name></name> <operator>==</operator> <name>IRDA_WORDLENGTH_9B</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>IRDA_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>, <argument><expr><name>IRDA_FLAG_RXNE</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>pData</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Parity</name></name> <operator>==</operator> <name>IRDA_PARITY_NONE</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0x01FF</literal><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>pData</name> <operator>+=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0x00FF</literal><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>pData</name> <operator>+=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>IRDA_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>, <argument><expr><name>IRDA_FLAG_RXNE</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Parity</name></name> <operator>==</operator> <name>IRDA_PARITY_NONE</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pData</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x00FF</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pData</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x007F</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* At end of Rx process, restore hirda-&gt;RxState to Ready */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Send an amount of data in non blocking mode.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_IRDA_Transmit_IT</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check that a Tx process is not already ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_IRDA_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_IRDA_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_BUSY_TX</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the IRDA Transmit Data Register Empty Interrupt */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_TXEIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receive an amount of data in non blocking mode.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_IRDA_Receive_IT</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check that a Rx process is not already ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>==</operator> <name>HAL_IRDA_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_IRDA_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_BUSY_RX</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the IRDA Parity Error and Data Register Not Empty Interrupts */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_PEIE</name> <operator>|</operator> <name>USART_CR1_RXNEIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the IRDA Error Interrupt: (Frame error, Noise error, Overrun error) */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Send an amount of data in non blocking mode.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_IRDA_Transmit_DMA</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

  <comment type="block">/* Check that a Tx process is not already ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_IRDA_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_IRDA_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_BUSY_TX</name></expr>;</expr_stmt>

    <comment type="block">/* Set the IRDA DMA transfer complete callback */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>IRDA_DMATransmitCplt</name></expr>;</expr_stmt>

    <comment type="block">/* Set the IRDA DMA half transfer complete callback */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>IRDA_DMATransmitHalfCplt</name></expr>;</expr_stmt>

    <comment type="block">/* Set the DMA error callback */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>IRDA_DMAError</name></expr>;</expr_stmt>

    <comment type="block">/* Set the DMA abort callback */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Enable the IRDA transmit DMA stream */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear the TC flag in the SR register by writing 0 to it */</comment>
    <expr_stmt><expr><call><name>__HAL_IRDA_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>, <argument><expr><name>IRDA_FLAG_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the USART CR3 register */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receives an amount of data in non blocking mode.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @note   When the IRDA parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_IRDA_Receive_DMA</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

  <comment type="block">/* Check that a Rx process is not already ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>==</operator> <name>HAL_IRDA_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_IRDA_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_BUSY_RX</name></expr>;</expr_stmt>

    <comment type="block">/* Set the IRDA DMA transfer complete callback */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>IRDA_DMAReceiveCplt</name></expr>;</expr_stmt>

    <comment type="block">/* Set the IRDA DMA half transfer complete callback */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>IRDA_DMAReceiveHalfCplt</name></expr>;</expr_stmt>

    <comment type="block">/* Set the DMA error callback */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>IRDA_DMAError</name></expr>;</expr_stmt>

    <comment type="block">/* Set the DMA abort callback */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Enable the DMA stream */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */</comment>
    <expr_stmt><expr><call><name>__HAL_IRDA_CLEAR_OREFLAG</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the IRDA Parity Error Interrupt */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_PEIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the IRDA Error Interrupt: (Frame error, Noise error, Overrun error) */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the USART CR3 register */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Pauses the DMA Transfer.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_IRDA_DMAPause</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>dmarequest</name> <init>= <expr><literal type="number">0x00U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>dmarequest</name> <operator>=</operator> <call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_IRDA_STATE_BUSY_TX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dmarequest</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the IRDA DMA Tx request */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>dmarequest</name> <operator>=</operator> <call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>==</operator> <name>HAL_IRDA_STATE_BUSY_RX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dmarequest</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_PEIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Disable the IRDA DMA Rx request */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Resumes the DMA Transfer.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_IRDA_DMAResume</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_IRDA_STATE_BUSY_TX</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable the IRDA DMA Tx request */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>==</operator> <name>HAL_IRDA_STATE_BUSY_RX</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear the Overrun flag before resuming the Rx transfer */</comment>
    <expr_stmt><expr><call><name>__HAL_IRDA_CLEAR_OREFLAG</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_PEIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the IRDA DMA Rx request */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Stops the DMA Transfer.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_IRDA_DMAStop</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>dmarequest</name> <init>= <expr><literal type="number">0x00U</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* The Lock is not implemented on this API to allow the user application
     to call the HAL IRDA API under callbacks HAL_IRDA_TxCpltCallback() / HAL_IRDA_RxCpltCallback():
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_IRDA_TxCpltCallback() / HAL_IRDA_RxCpltCallback()
  */</comment>

  <comment type="block">/* Stop IRDA DMA Tx request if ongoing */</comment>
  <expr_stmt><expr><name>dmarequest</name> <operator>=</operator> <call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_IRDA_STATE_BUSY_TX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dmarequest</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the IRDA DMA Tx channel */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>IRDA_EndTxTransfer</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Stop IRDA DMA Rx request if ongoing */</comment>
  <expr_stmt><expr><name>dmarequest</name> <operator>=</operator> <call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>==</operator> <name>HAL_IRDA_STATE_BUSY_RX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dmarequest</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the IRDA DMA Rx channel */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>IRDA_EndRxTransfer</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Abort ongoing transfers (blocking mode).
  * @param  hirda IRDA handle.
  * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or DMA mode.
  *         This procedure performs following operations :
  *           - Disable PPP Interrupts
  *           - Disable the DMA transfer in the peripheral register (if enabled)
  *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_IRDA_Abort</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR1_RXNEIE</name> <operator>|</operator> <name>USART_CR1_PEIE</name> <operator>|</operator> <name>USART_CR1_TXEIE</name> <operator>|</operator> <name>USART_CR1_TCIE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the IRDA DMA Tx request if enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the IRDA DMA Tx channel : use blocking DMA Abort API (no callback) */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the IRDA DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */</comment>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Disable the IRDA DMA Rx request if enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the IRDA DMA Rx channel : use blocking DMA Abort API (no callback) */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the IRDA DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */</comment>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Reset Tx and Rx transfer counters */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

  <comment type="block">/* Reset ErrorCode */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_IRDA_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Restore hirda-&gt;RxState and hirda-&gt;gState to Ready */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Abort ongoing Transmit transfer (blocking mode).
  * @param  hirda IRDA handle.
  * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or DMA mode.
  *         This procedure performs following operations :
  *           - Disable PPP Interrupts
  *           - Disable the DMA transfer in the peripheral register (if enabled)
  *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_IRDA_AbortTransmit</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable TXEIE and TCIE interrupts */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR1_TXEIE</name> <operator>|</operator> <name>USART_CR1_TCIE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the IRDA DMA Tx request if enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the IRDA DMA Tx channel : use blocking DMA Abort API (no callback) */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the IRDA DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */</comment>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Reset Tx transfer counter */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

  <comment type="block">/* Restore hirda-&gt;gState to Ready */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Abort ongoing Receive transfer (blocking mode).
  * @param  hirda IRDA handle.
  * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or DMA mode.
  *         This procedure performs following operations :
  *           - Disable PPP Interrupts
  *           - Disable the DMA transfer in the peripheral register (if enabled)
  *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_IRDA_AbortReceive</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR1_RXNEIE</name> <operator>|</operator> <name>USART_CR1_PEIE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the IRDA DMA Rx request if enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the IRDA DMA Rx channel : use blocking DMA Abort API (no callback) */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the IRDA DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */</comment>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Reset Rx transfer counter */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

  <comment type="block">/* Restore hirda-&gt;RxState to Ready */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Abort ongoing transfers (Interrupt mode).
  * @param  hirda IRDA handle.
  * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or DMA mode.
  *         This procedure performs following operations :
  *           - Disable PPP Interrupts
  *           - Disable the DMA transfer in the peripheral register (if enabled)
  *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
  *           - Set handle State to READY
  *           - At abort completion, call user abort complete callback
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_IRDA_Abort_IT</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>AbortCplt</name> <init>= <expr><literal type="number">0x01U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR1_RXNEIE</name> <operator>|</operator> <name>USART_CR1_PEIE</name> <operator>|</operator> <name>USART_CR1_TXEIE</name> <operator>|</operator> <name>USART_CR1_TCIE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If DMA Tx and/or DMA Rx Handles are associated to IRDA Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */</comment>
  <comment type="block">/* DMA Tx Handle is valid */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set DMA Abort Complete callback if IRDA DMA Tx request if enabled.
       Otherwise, set it to NULL */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>IRDA_DMATxAbortCallback</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* DMA Rx Handle is valid */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set DMA Abort Complete callback if IRDA DMA Rx request if enabled.
       Otherwise, set it to NULL */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>IRDA_DMARxAbortCallback</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Disable the IRDA DMA Tx request if enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable DMA Tx at IRDA level */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the IRDA DMA Tx channel : use non blocking DMA Abort API (callback) */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* IRDA Tx DMA Abort callback has already been initialised :
         will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */</comment>

      <comment type="block">/* Abort DMA TX */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><name>AbortCplt</name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Disable the IRDA DMA Rx request if enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the IRDA DMA Rx channel : use non blocking DMA Abort API (callback) */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* IRDA Rx DMA Abort callback has already been initialised :
         will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */</comment>

      <comment type="block">/* Abort DMA RX */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>AbortCplt</name> <operator>=</operator> <literal type="number">0x01U</literal></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><name>AbortCplt</name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* if no DMA abort complete callback execution is required =&gt; call user Abort Complete callback */</comment>
  <if_stmt><if>if <condition>(<expr><name>AbortCplt</name> <operator>==</operator> <literal type="number">0x01U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Reset Tx and Rx transfer counters */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

    <comment type="block">/* Reset ErrorCode */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_IRDA_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Restore hirda-&gt;gState and hirda-&gt;RxState to Ready */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name>  <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* As no DMA to be aborted, call directly user Abort complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/* Call registered Abort complete callback */</comment>
    <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Call legacy weak Abort complete callback */</comment>
    <expr_stmt><expr><call><name>HAL_IRDA_AbortCpltCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACK */</comment>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Abort ongoing Transmit transfer (Interrupt mode).
  * @param  hirda IRDA handle.
  * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or DMA mode.
  *         This procedure performs following operations :
  *           - Disable IRDA Interrupts (Tx)
  *           - Disable the DMA transfer in the peripheral register (if enabled)
  *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
  *           - Set handle State to READY
  *           - At abort completion, call user abort complete callback
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_IRDA_AbortTransmit_IT</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable TXEIE and TCIE interrupts */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR1_TXEIE</name> <operator>|</operator> <name>USART_CR1_TCIE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the IRDA DMA Tx request if enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the IRDA DMA Tx channel : use non blocking DMA Abort API (callback) */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the IRDA DMA Abort callback :
         will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */</comment>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>IRDA_DMATxOnlyAbortCallback</name></expr>;</expr_stmt>

      <comment type="block">/* Abort DMA TX */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Call Directly hirda-&gt;hdmatx-&gt;XferAbortCallback function in case of error */</comment>
        <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Reset Tx transfer counter */</comment>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

      <comment type="block">/* Restore hirda-&gt;gState to Ready */</comment>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>

      <comment type="block">/* As no DMA to be aborted, call directly user Abort complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <comment type="block">/* Call registered Abort Transmit Complete Callback */</comment>
      <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>AbortTransmitCpltCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/* Call legacy weak Abort Transmit Complete Callback */</comment>
      <expr_stmt><expr><call><name>HAL_IRDA_AbortTransmitCpltCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACK */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Reset Tx transfer counter */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

    <comment type="block">/* Restore hirda-&gt;gState to Ready */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* As no DMA to be aborted, call directly user Abort complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/* Call registered Abort Transmit Complete Callback */</comment>
    <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>AbortTransmitCpltCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Call legacy weak Abort Transmit Complete Callback */</comment>
    <expr_stmt><expr><call><name>HAL_IRDA_AbortTransmitCpltCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACK */</comment>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Abort ongoing Receive transfer (Interrupt mode).
  * @param  hirda IRDA handle.
  * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or DMA mode.
  *         This procedure performs following operations :
  *           - Disable PPP Interrupts
  *           - Disable the DMA transfer in the peripheral register (if enabled)
  *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
  *           - Set handle State to READY
  *           - At abort completion, call user abort complete callback
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_IRDA_AbortReceive_IT</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR1_RXNEIE</name> <operator>|</operator> <name>USART_CR1_PEIE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the IRDA DMA Rx request if enabled */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Abort the IRDA DMA Rx channel : use non blocking DMA Abort API (callback) */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the IRDA DMA Abort callback :
         will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */</comment>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>IRDA_DMARxOnlyAbortCallback</name></expr>;</expr_stmt>

      <comment type="block">/* Abort DMA RX */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Call Directly hirda-&gt;hdmarx-&gt;XferAbortCallback function in case of error */</comment>
        <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Reset Rx transfer counter */</comment>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

      <comment type="block">/* Restore hirda-&gt;RxState to Ready */</comment>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>

      <comment type="block">/* As no DMA to be aborted, call directly user Abort complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <comment type="block">/* Call registered Abort Receive Complete Callback */</comment>
      <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>AbortReceiveCpltCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/* Call legacy weak Abort Receive Complete Callback */</comment>
      <expr_stmt><expr><call><name>HAL_IRDA_AbortReceiveCpltCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACK */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Reset Rx transfer counter */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

    <comment type="block">/* Restore hirda-&gt;RxState to Ready */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* As no DMA to be aborted, call directly user Abort complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/* Call registered Abort Receive Complete Callback */</comment>
    <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>AbortReceiveCpltCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Call legacy weak Abort Receive Complete Callback */</comment>
    <expr_stmt><expr><call><name>HAL_IRDA_AbortReceiveCpltCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACK */</comment>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles IRDA interrupt request.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_IRDA_IRQHandler</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>isrflags</name>   <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>cr1its</name>     <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>cr3its</name>     <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>errorflags</name> <init>= <expr><literal type="number">0x00U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>dmarequest</name> <init>= <expr><literal type="number">0x00U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* If no error occurs */</comment>
  <expr_stmt><expr><name>errorflags</name> <operator>=</operator> <operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>USART_SR_PE</name> <operator>|</operator> <name>USART_SR_FE</name> <operator>|</operator> <name>USART_SR_ORE</name> <operator>|</operator> <name>USART_SR_NE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>errorflags</name> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* IRDA in mode Receiver -----------------------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>USART_SR_RXNE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cr1its</name> <operator>&amp;</operator> <name>USART_CR1_RXNEIE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>IRDA_Receive_IT</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* If some errors occur */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>errorflags</name> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>cr3its</name> <operator>&amp;</operator> <name>USART_CR3_EIE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>cr1its</name> <operator>&amp;</operator> <operator>(</operator><name>USART_CR1_RXNEIE</name> <operator>|</operator> <name>USART_CR1_PEIE</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* IRDA parity error interrupt occurred -------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>USART_SR_PE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cr1its</name> <operator>&amp;</operator> <name>USART_CR1_PEIE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_IRDA_ERROR_PE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* IRDA noise error interrupt occurred --------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>USART_SR_NE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cr3its</name> <operator>&amp;</operator> <name>USART_CR3_EIE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_IRDA_ERROR_NE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* IRDA frame error interrupt occurred --------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>USART_SR_FE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cr3its</name> <operator>&amp;</operator> <name>USART_CR3_EIE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_IRDA_ERROR_FE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* IRDA Over-Run interrupt occurred -----------------------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>USART_SR_ORE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cr3its</name> <operator>&amp;</operator> <name>USART_CR3_EIE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_IRDA_ERROR_ORE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Call IRDA Error Call back function if need be -----------------------*/</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>!=</operator> <name>HAL_IRDA_ERROR_NONE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* IRDA in mode Receiver ---------------------------------------------*/</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>USART_SR_RXNE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cr1its</name> <operator>&amp;</operator> <name>USART_CR1_RXNEIE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>IRDA_Receive_IT</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */</comment>
      <expr_stmt><expr><name>dmarequest</name> <operator>=</operator> <call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>&amp;</operator> <name>HAL_IRDA_ERROR_ORE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>||</operator> <name>dmarequest</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Blocking error : transfer is aborted
           Set the IRDA state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */</comment>
        <expr_stmt><expr><call><name>IRDA_EndRxTransfer</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Disable the IRDA DMA Rx request if enabled */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Abort the IRDA DMA Rx channel */</comment>
          <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Set the IRDA DMA Abort callback :
            will lead to call HAL_IRDA_ErrorCallback() at end of DMA abort procedure */</comment>
            <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>IRDA_DMAAbortOnError</name></expr>;</expr_stmt>

            <comment type="block">/* Abort DMA RX */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
            <block>{<block_content>
              <comment type="block">/* Call Directly XferAbortCallback function in case of error */</comment>
              <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
            <comment type="block">/* Call registered user error callback */</comment>
            <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <comment type="block">/* Call legacy weak user error callback */</comment>
            <expr_stmt><expr><call><name>HAL_IRDA_ErrorCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACK */</comment>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
          <comment type="block">/* Call registered user error callback */</comment>
          <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <comment type="block">/* Call legacy weak user error callback */</comment>
          <expr_stmt><expr><call><name>HAL_IRDA_ErrorCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACK */</comment>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <comment type="block">/* Call registered user error callback */</comment>
        <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <comment type="block">/* Call legacy weak user error callback */</comment>
        <expr_stmt><expr><call><name>HAL_IRDA_ErrorCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACK */</comment>

        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_IRDA_ERROR_NONE</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt> <comment type="block">/* End if some error occurs */</comment>

  <comment type="block">/* IRDA in mode Transmitter ------------------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>USART_SR_TXE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cr1its</name> <operator>&amp;</operator> <name>USART_CR1_TXEIE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>IRDA_Transmit_IT</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* IRDA in mode Transmitter end --------------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>isrflags</name> <operator>&amp;</operator> <name>USART_SR_TC</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cr1its</name> <operator>&amp;</operator> <name>USART_CR1_TCIE</name><operator>)</operator> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>IRDA_EndTransmit_IT</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Tx Transfer complete callback.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_IRDA_TxCpltCallback</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_TxCpltCallback can be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Tx Half Transfer completed callback.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_IRDA_TxHalfCpltCallback</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_TxHalfCpltCallback can be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Rx Transfer complete callback.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_IRDA_RxCpltCallback</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_RxCpltCallback can be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Rx Half Transfer complete callback.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_IRDA_RxHalfCpltCallback</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_RxHalfCpltCallback can be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  IRDA error callback.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_IRDA_ErrorCallback</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_ErrorCallback can be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  IRDA Abort Complete callback.
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_IRDA_AbortCpltCallback</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_AbortCpltCallback can be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  IRDA Abort Transmit Complete callback.
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_IRDA_AbortTransmitCpltCallback</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_AbortTransmitCpltCallback can be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  IRDA Abort Receive Complete callback.
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_IRDA_AbortReceiveCpltCallback</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_AbortReceiveCpltCallback can be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup IRDA_Exported_Functions_Group3 Peripheral State and Errors functions
  *  @brief   IRDA State and Errors functions
  *
@verbatim
  ==============================================================================
                  ##### Peripheral State and Errors functions #####
  ==============================================================================
  [..]
    This subsection provides a set of functions allowing to return the State of IrDA
    communication process and also return Peripheral Errors occurred during communication process
     (+) HAL_IRDA_GetState() API can be helpful to check in run-time the state of the IrDA peripheral.
     (+) HAL_IRDA_GetError() check in run-time errors that could be occurred during communication.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Return the IRDA state.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA.
  * @retval HAL state
  */</comment>
<function><type><name>HAL_IRDA_StateTypeDef</name></type> <name>HAL_IRDA_GetState</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>temp1</name> <init>= <expr><literal type="number">0x00U</literal></expr></init></decl>, <decl><type ref="prev"/><name>temp2</name> <init>= <expr><literal type="number">0x00U</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>temp1</name> <operator>=</operator> <name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>temp2</name> <operator>=</operator> <name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><name>HAL_IRDA_StateTypeDef</name><operator>)</operator><operator>(</operator><name>temp1</name> <operator>|</operator> <name>temp2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the IRDA error code
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *              the configuration information for the specified IRDA.
  * @retval IRDA Error Code
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_IRDA_GetError</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup IRDA_Private_Functions IRDA Private Functions
  * @{
  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Initialize the callbacks to their default values.
  * @param  hirda IRDA handle.
  * @retval none
  */</comment>
<function><type><name>void</name></type> <name>IRDA_InitCallbacksToDefault</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Init the IRDA Callback settings */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name>        <operator>=</operator> <name>HAL_IRDA_TxHalfCpltCallback</name></expr>;</expr_stmt>        <comment type="block">/* Legacy weak TxHalfCpltCallback        */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxCpltCallback</name></name>            <operator>=</operator> <name>HAL_IRDA_TxCpltCallback</name></expr>;</expr_stmt>            <comment type="block">/* Legacy weak TxCpltCallback            */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name>        <operator>=</operator> <name>HAL_IRDA_RxHalfCpltCallback</name></expr>;</expr_stmt>        <comment type="block">/* Legacy weak RxHalfCpltCallback        */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxCpltCallback</name></name>            <operator>=</operator> <name>HAL_IRDA_RxCpltCallback</name></expr>;</expr_stmt>            <comment type="block">/* Legacy weak RxCpltCallback            */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCallback</name></name>             <operator>=</operator> <name>HAL_IRDA_ErrorCallback</name></expr>;</expr_stmt>             <comment type="block">/* Legacy weak ErrorCallback             */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name>         <operator>=</operator> <name>HAL_IRDA_AbortCpltCallback</name></expr>;</expr_stmt>         <comment type="block">/* Legacy weak AbortCpltCallback         */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>AbortTransmitCpltCallback</name></name> <operator>=</operator> <name>HAL_IRDA_AbortTransmitCpltCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak AbortTransmitCpltCallback */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>AbortReceiveCpltCallback</name></name>  <operator>=</operator> <name>HAL_IRDA_AbortReceiveCpltCallback</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak AbortReceiveCpltCallback  */</comment>

</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACKS */</comment>

<comment type="block" format="doxygen">/**
  * @brief  DMA IRDA transmit process complete callback.
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMATransmitCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name> <init>= <expr><operator>(</operator><name>IRDA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* DMA Normal mode */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DMA_SxCR_CIRC</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

    <comment type="block">/* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the IRDA CR3 register */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the IRDA Transmit Complete Interrupt */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_TCIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* DMA Circular mode */</comment>
  <else>else
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/* Call registered Tx complete callback */</comment>
    <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>TxCpltCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Call legacy weak Tx complete callback */</comment>
    <expr_stmt><expr><call><name>HAL_IRDA_TxCpltCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACK */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DMA IRDA receive process half complete callback
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMATransmitHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name> <init>= <expr><operator>(</operator><name>IRDA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/* Call registered Tx Half complete callback */</comment>
  <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Call legacy weak Tx complete callback */</comment>
  <expr_stmt><expr><call><name>HAL_IRDA_TxHalfCpltCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACK */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA IRDA receive process complete callback.
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMAReceiveCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name> <init>= <expr><operator>(</operator><name>IRDA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* DMA Normal mode */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DMA_SxCR_CIRC</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

    <comment type="block">/* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_PEIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the IRDA CR3 register */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* At end of Rx process, restore hirda-&gt;RxState to Ready */</comment>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/* Call registered Rx complete callback */</comment>
  <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>RxCpltCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Call legacy weak Rx complete callback */</comment>
  <expr_stmt><expr><call><name>HAL_IRDA_RxCpltCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DMA IRDA receive process half complete callback.
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMAReceiveHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name> <init>= <expr><operator>(</operator><name>IRDA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/*Call registered Rx Half complete callback*/</comment>
  <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Call legacy weak Rx Half complete callback */</comment>
  <expr_stmt><expr><call><name>HAL_IRDA_RxHalfCpltCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACK */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA IRDA communication error callback.
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>dmarequest</name> <init>= <expr><literal type="number">0x00U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name> <init>= <expr><operator>(</operator><name>IRDA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Stop IRDA DMA Tx request if ongoing */</comment>
  <expr_stmt><expr><name>dmarequest</name> <operator>=</operator> <call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_IRDA_STATE_BUSY_TX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dmarequest</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IRDA_EndTxTransfer</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Stop IRDA DMA Rx request if ongoing */</comment>
  <expr_stmt><expr><name>dmarequest</name> <operator>=</operator> <call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_DMAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>==</operator> <name>HAL_IRDA_STATE_BUSY_RX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dmarequest</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IRDA_EndRxTransfer</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_IRDA_ERROR_DMA</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/* Call registered user error callback */</comment>
  <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Call legacy weak user error callback */</comment>
  <expr_stmt><expr><call><name>HAL_IRDA_ErrorCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACK */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles IRDA Communication Timeout.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA.
  * @param  Flag specifies the IRDA flag to check.
  * @param  Status The new Flag status (SET or RESET).
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>IRDA_WaitOnFlagUntilTimeout</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Flag</name></decl></parameter>, <parameter><decl><type><name>FlagStatus</name></type> <name>Status</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tickstart</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Wait until flag is set */</comment>
  <while>while <condition>(<expr><operator>(</operator><ternary><condition><expr><call><name>__HAL_IRDA_GET_FLAG</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>, <argument><expr><name>Flag</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SET</name></expr> </then><else>: <expr><name>RESET</name></expr></else></ternary><operator>)</operator> <operator>==</operator> <name>Status</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if <condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>Tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */</comment>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR1_RXNEIE</name> <operator>|</operator> <name>USART_CR1_PEIE</name> <operator>|</operator> <name>USART_CR1_TXEIE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name>  <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  End ongoing Tx transfer on IRDA peripheral (following error detection or Transmit completion).
  * @param  hirda IRDA handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_EndTxTransfer</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable TXEIE and TCIE interrupts */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR1_TXEIE</name> <operator>|</operator> <name>USART_CR1_TCIE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* At end of Tx process, restore hirda-&gt;gState to Ready */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  End ongoing Rx transfer on IRDA peripheral (following error detection or Reception completion).
  * @param  hirda IRDA handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_EndRxTransfer</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR1_RXNEIE</name> <operator>|</operator> <name>USART_CR1_PEIE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* At end of Rx process, restore hirda-&gt;RxState to Ready */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA IRDA communication abort callback, when initiated by HAL services on Error
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMAAbortOnError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name> <init>= <expr><operator>(</operator><name>IRDA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/* Call registered user error callback */</comment>
  <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Call legacy weak user error callback */</comment>
  <expr_stmt><expr><call><name>HAL_IRDA_ErrorCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACK */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA IRDA Tx communication abort callback, when initiated by user
  *         (To be called at end of DMA Tx Abort procedure following user abort request).
  * @note   When this callback is executed, User Abort complete call back is called only if no
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMATxAbortCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name> <init>= <expr><operator>(</operator><name>IRDA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/* Check if an Abort process is still ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

  <comment type="block">/* Reset ErrorCode */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_IRDA_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Restore hirda-&gt;gState and hirda-&gt;RxState to Ready */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name>  <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Call user Abort complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/* Call registered Abort complete callback */</comment>
  <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Call legacy weak Abort complete callback */</comment>
  <expr_stmt><expr><call><name>HAL_IRDA_AbortCpltCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACK */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA IRDA Rx communication abort callback, when initiated by user
  *         (To be called at end of DMA Rx Abort procedure following user abort request).
  * @note   When this callback is executed, User Abort complete call back is called only if no
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMARxAbortCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name> <init>= <expr><operator>(</operator><name>IRDA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/* Check if an Abort process is still ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

  <comment type="block">/* Reset ErrorCode */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_IRDA_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Restore hirda-&gt;gState and hirda-&gt;RxState to Ready */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name>  <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Call user Abort complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/* Call registered Abort complete callback */</comment>
  <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Call legacy weak Abort complete callback */</comment>
  <expr_stmt><expr><call><name>HAL_IRDA_AbortCpltCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACK */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA IRDA Tx communication abort callback, when initiated by user by a call to
  *         HAL_IRDA_AbortTransmit_IT API (Abort only Tx transfer)
  *         (This callback is executed at end of DMA Tx Abort procedure following user abort request,
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMATxOnlyAbortCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name> <init>= <expr><operator>(</operator><name>IRDA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

  <comment type="block">/* Restore hirda-&gt;gState to Ready */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Call user Abort complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/* Call registered Abort Transmit Complete Callback */</comment>
  <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>AbortTransmitCpltCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Call legacy weak Abort Transmit Complete Callback */</comment>
  <expr_stmt><expr><call><name>HAL_IRDA_AbortTransmitCpltCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACK */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA IRDA Rx communication abort callback, when initiated by user by a call to
  *         HAL_IRDA_AbortReceive_IT API (Abort only Rx transfer)
  *         (This callback is executed at end of DMA Rx Abort procedure following user abort request,
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_DMARxOnlyAbortCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name> <init>= <expr><operator>(</operator><name>IRDA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>

  <comment type="block">/* Restore hirda-&gt;RxState to Ready */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Call user Abort complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/* Call registered Abort Receive Complete Callback */</comment>
  <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>AbortReceiveCpltCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Call legacy weak Abort Receive Complete Callback */</comment>
  <expr_stmt><expr><call><name>HAL_IRDA_AbortReceiveCpltCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACK */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief  Send an amount of data in non blocking mode.
 * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
 *                the configuration information for the specified IRDA module.
 * @retval HAL status
 */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>IRDA_Transmit_IT</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

  <comment type="block">/* Check that a Tx process is ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>==</operator> <name>HAL_IRDA_STATE_BUSY_TX</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>WordLength</name></name> <operator>==</operator> <name>IRDA_WORDLENGTH_9B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>hirda</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>tmp</name> <operator>&amp;</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0x01FF</literal><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Parity</name></name> <operator>==</operator> <name>IRDA_PARITY_NONE</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name> <operator>+=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name> <operator>+=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name><name>hirda</name><operator>-&gt;</operator><name>pTxBuffPtr</name></name><operator>++</operator> <operator>&amp;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x00FF</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>hirda</name><operator>-&gt;</operator><name>TxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the IRDA Transmit Data Register Empty Interrupt */</comment>
      <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_TXEIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Enable the IRDA Transmit Complete Interrupt */</comment>
      <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_TCIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Wraps up transmission in non blocking mode.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>IRDA_EndTransmit_IT</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Disable the IRDA Transmit Complete Interrupt */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_TCIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Tx process is ended, restore hirda-&gt;gState to Ready */</comment>
  <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>gState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/* Call registered Tx complete callback */</comment>
  <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>TxCpltCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Call legacy weak Tx complete callback */</comment>
  <expr_stmt><expr><call><name>HAL_IRDA_TxCpltCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACK */</comment>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receives an amount of data in non blocking mode.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>IRDA_Receive_IT</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type>  <name>uhdata</name></decl>;</decl_stmt>

  <comment type="block">/* Check that a Rx process is ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>==</operator> <name>HAL_IRDA_STATE_BUSY_RX</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>uhdata</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator> <call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>WordLength</name></name> <operator>==</operator> <name>IRDA_WORDLENGTH_9B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>hirda</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Parity</name></name> <operator>==</operator> <name>IRDA_PARITY_NONE</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>uhdata</name> <operator>&amp;</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0x01FF</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>+=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>uhdata</name> <operator>&amp;</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0x00FF</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>+=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Parity</name></name> <operator>==</operator> <name>IRDA_PARITY_NONE</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name><name>hirda</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>uhdata</name> <operator>&amp;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x00FF</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name><name>hirda</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>uhdata</name> <operator>&amp;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x007F</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>hirda</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the IRDA Data Register not empty Interrupt */</comment>
      <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_RXNEIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Disable the IRDA Parity Error Interrupt */</comment>
      <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><name>USART_CR1_PEIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Disable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */</comment>
      <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><name>USART_CR3_EIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Rx process is completed, restore hirda-&gt;RxState to Ready */</comment>
      <expr_stmt><expr><name><name>hirda</name><operator>-&gt;</operator><name>RxState</name></name> <operator>=</operator> <name>HAL_IRDA_STATE_READY</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_IRDA_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <comment type="block">/* Call registered Rx complete callback */</comment>
      <expr_stmt><expr><call><name><name>hirda</name><operator>-&gt;</operator><name>RxCpltCallback</name></name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/* Call legacy weak Rx complete callback */</comment>
      <expr_stmt><expr><call><name>HAL_IRDA_RxCpltCallback</name><argument_list>(<argument><expr><name>hirda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_IRDA_REGISTER_CALLBACKS */</comment>

      <return>return <expr><name>HAL_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configures the IRDA peripheral.
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>IRDA_SetConfig</name><parameter_list>(<parameter><decl><type><name>IRDA_HandleTypeDef</name> <modifier>*</modifier></type><name>hirda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_IRDA_INSTANCE</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_IRDA_BAUDRATE</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BaudRate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_IRDA_WORD_LENGTH</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>WordLength</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_IRDA_PARITY</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Parity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_IRDA_MODE</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_IRDA_POWERMODE</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>IrDAMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*-------------------------- USART CR2 Configuration ------------------------*/</comment>
  <comment type="block">/* Clear STOP[13:12] bits */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>USART_CR2_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*-------------------------- USART CR1 Configuration -----------------------*/</comment>
  <comment type="block">/* Clear M, PCE, PS, TE and RE bits */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR1_M</name> <operator>|</operator> <name>USART_CR1_PCE</name> <operator>|</operator> <name>USART_CR1_PS</name> <operator>|</operator> <name>USART_CR1_TE</name> <operator>|</operator> <name>USART_CR1_RE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Configure the USART Word Length, Parity and mode:
     Set the M bits according to hirda-&gt;Init.WordLength value
     Set PCE and PS bits according to hirda-&gt;Init.Parity value
     Set TE and RE bits according to hirda-&gt;Init.Mode value */</comment>
  <comment type="block">/* Write to USART CR1 */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>WordLength</name></name> <operator>|</operator> <name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Parity</name></name> <operator>|</operator> <name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*-------------------------- USART CR3 Configuration -----------------------*/</comment>
  <comment type="block">/* Clear CTSE and RTSE bits */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR3</name></name></expr></argument>, <argument><expr><operator>(</operator><name>USART_CR3_RTSE</name> <operator>|</operator> <name>USART_CR3_CTSE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*-------------------------- USART BRR Configuration -----------------------*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USART6</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>USART1</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>USART6</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BRR</name></name></expr></argument>, <argument><expr><call><name>IRDA_BRR</name><argument_list>(<argument><expr><call><name>HAL_RCC_GetPCLK2Freq</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BaudRate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if<condition>(<expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name></name> <operator>==</operator> <name>USART1</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BRR</name></name></expr></argument>, <argument><expr><call><name>IRDA_BRR</name><argument_list>(<argument><expr><call><name>HAL_RCC_GetPCLK2Freq</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BaudRate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USART6 */</comment>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>BRR</name></name></expr></argument>, <argument><expr><call><name>IRDA_BRR</name><argument_list>(<argument><expr><call><name>HAL_RCC_GetPCLK1Freq</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>hirda</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>BaudRate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_IRDA_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
