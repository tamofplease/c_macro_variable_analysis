<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd_ex.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_pcd_ex.c
  * @author  MCD Application Team
  * @brief   PCD Extended HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the USB Peripheral Controller:
  *           + Extended features functions
  *
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup PCDEx PCDEx
  * @brief PCD Extended HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_PCD_MODULE_ENABLED</name></cpp:ifdef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_FS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_HS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Private types -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private constants ---------------------------------------------------------*/</comment>
<comment type="block">/* Private macros ------------------------------------------------------------*/</comment>
<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>
<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup PCDEx_Exported_Functions PCDEx Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup PCDEx_Exported_Functions_Group1 Peripheral Control functions
  * @brief    PCDEx control functions
 *
@verbatim
 ===============================================================================
                 ##### Extended features functions #####
 ===============================================================================
    [..]  This section provides functions allowing to:
      (+) Update FIFO configuration

@endverbatim
  * @{
  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_FS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_HS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Set Tx FIFO
  * @param  hpcd PCD handle
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCDEx_SetTxFiFo</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>fifo</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>Tx_Offset</name></decl>;</decl_stmt>

  <comment type="block">/*  TXn min size = 16 words. (n  : Transmit FIFO index)
      When a TxFIFO is not used, the Configuration should be as follows:
          case 1 :  n &gt; m    and Txn is not used    (n,m  : Transmit FIFO indexes)
         --&gt; Txm can use the space allocated for Txn.
         case2  :  n &lt; m    and Txn is not used    (n,m  : Transmit FIFO indexes)
         --&gt; Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */</comment>

  <expr_stmt><expr><name>Tx_Offset</name> <operator>=</operator> <name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>GRXFSIZ</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>fifo</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIEPTXF0_HNPTXFSIZ</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>size</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <name>Tx_Offset</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>Tx_Offset</name> <operator>+=</operator> <operator>(</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIEPTXF0_HNPTXFSIZ</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>fifo</name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>Tx_Offset</name> <operator>+=</operator> <operator>(</operator><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIEPTXF</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Multiply Tx_Size by 2 to get higher performance */</comment>
    <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIEPTXF</name><index>[<expr><name>fifo</name> <operator>-</operator> <literal type="number">1U</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>size</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <name>Tx_Offset</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Set Rx FIFO
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCDEx_SetRxFiFo</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>GRXFSIZ</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Cx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCDEx_ActivateLPM</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name> <init>= <expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>lpm_active</name></name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>LPM_State</name></name> <operator>=</operator> <name>LPM_L0</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GINTMSK</name></name> <operator>|=</operator> <name>USB_OTG_GINTMSK_LPMINTM</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GLPMCFG</name></name> <operator>|=</operator> <operator>(</operator><name>USB_OTG_GLPMCFG_LPMEN</name> <operator>|</operator> <name>USB_OTG_GLPMCFG_LPMACK</name> <operator>|</operator> <name>USB_OTG_GLPMCFG_ENBESL</name><operator>)</operator></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Deactivate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCDEx_DeActivateLPM</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name> <init>= <expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>lpm_active</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GINTMSK</name></name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_GINTMSK_LPMINTM</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GLPMCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_GLPMCFG_LPMEN</name> <operator>|</operator> <name>USB_OTG_GLPMCFG_LPMACK</name> <operator>|</operator> <name>USB_OTG_GLPMCFG_ENBESL</name><operator>)</operator></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Cx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Handle BatteryCharging Process.
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>void</name></type> <name>HAL_PCDEx_BCD_VBUSDetect</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name> <init>= <expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Enable DCD : Data Contact Detect */</comment>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>|=</operator> <name>USB_OTG_GCCFG_DCDEN</name></expr>;</expr_stmt>

  <comment type="block">/* Wait Detect flag or a timeout is happen*/</comment>
  <while>while <condition>(<expr><operator>(</operator><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;</operator> <name>USB_OTG_GCCFG_DCDET</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">1000U</literal></expr>)</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>BCDCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>PCD_BCD_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_PCDEx_BCD_Callback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>PCD_BCD_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>

      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Right response got */</comment>
  <expr_stmt><expr><call><name>HAL_Delay</name><argument_list>(<argument><expr><literal type="number">200U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check Detect flag*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;</operator> <name>USB_OTG_GCCFG_DCDET</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_GCCFG_DCDET</name></expr>)</condition>
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>BCDCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>PCD_BCD_CONTACT_DETECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_PCDEx_BCD_Callback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>PCD_BCD_CONTACT_DETECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*Primary detection: checks if connected to Standard Downstream Port
  (without charging capability) */</comment>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;=</operator> <operator>~</operator> <name>USB_OTG_GCCFG_DCDEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>HAL_Delay</name><argument_list>(<argument><expr><literal type="number">50U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>|=</operator>  <name>USB_OTG_GCCFG_PDEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>HAL_Delay</name><argument_list>(<argument><expr><literal type="number">50U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;</operator> <name>USB_OTG_GCCFG_PDET</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Case of Standard Downstream Port */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>BCDCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>PCD_BCD_STD_DOWNSTREAM_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_PCDEx_BCD_Callback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>PCD_BCD_STD_DOWNSTREAM_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* start secondary detection to check connection to Charging Downstream
    Port or Dedicated Charging Port */</comment>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;=</operator> <operator>~</operator> <name>USB_OTG_GCCFG_PDEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HAL_Delay</name><argument_list>(<argument><expr><literal type="number">50U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>|=</operator>  <name>USB_OTG_GCCFG_SDEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HAL_Delay</name><argument_list>(<argument><expr><literal type="number">50U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;</operator> <name>USB_OTG_GCCFG_SDET</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_GCCFG_SDET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* case Dedicated Charging Port  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>BCDCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>PCD_BCD_DEDICATED_CHARGING_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_PCDEx_BCD_Callback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>PCD_BCD_DEDICATED_CHARGING_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* case Charging Downstream Port  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>BCDCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>PCD_BCD_CHARGING_DOWNSTREAM_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_PCDEx_BCD_Callback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>PCD_BCD_CHARGING_DOWNSTREAM_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Battery Charging capability discovery finished */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>HAL_PCDEx_DeActivateBCD</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_PCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hpcd</name><operator>-&gt;</operator><name>BCDCallback</name></name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>PCD_BCD_DISCOVERY_COMPLETED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_PCDEx_BCD_Callback</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>, <argument><expr><name>PCD_BCD_DISCOVERY_COMPLETED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_PCD_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCDEx_ActivateBCD</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name> <init>= <expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_GCCFG_PDEN</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_GCCFG_SDEN</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Power Down USB tranceiver  */</comment>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_GCCFG_PWRDWN</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Enable Battery charging */</comment>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>|=</operator> <name>USB_OTG_GCCFG_BCDEN</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>battery_charging_active</name></name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Deactivate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_PCDEx_DeActivateBCD</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name> <init>= <expr><name><name>hpcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_GCCFG_SDEN</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_GCCFG_PDEN</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Disable Battery charging */</comment>
  <expr_stmt><expr><name><name>USBx</name><operator>-&gt;</operator><name>GCCFG</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_GCCFG_BCDEN</name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hpcd</name><operator>-&gt;</operator><name>battery_charging_active</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined (USB_OTG_FS) || defined (USB_OTG_HS) */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Send LPM message to user layer callback.
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCDEx_LPM_Callback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>PCD_LPM_MsgTypeDef</name></type> <name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Send BatteryCharging message to user layer callback.
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_PCDEx_BCD_Callback</name><parameter_list>(<parameter><decl><type><name>PCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hpcd</name></decl></parameter>, <parameter><decl><type><name>PCD_BCD_MsgTypeDef</name></type> <name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_BCD_Callback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined (USB_OTG_FS) || defined (USB_OTG_HS) */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_PCD_MODULE_ENABLED */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
