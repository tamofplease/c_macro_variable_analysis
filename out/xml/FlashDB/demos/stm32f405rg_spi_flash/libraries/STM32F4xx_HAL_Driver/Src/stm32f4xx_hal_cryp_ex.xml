<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cryp_ex.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_cryp_ex.c
  * @author  MCD Application Team
  * @brief   Extended CRYP HAL module driver
  *          This file provides firmware functions to manage the following 
  *          functionalities of CRYP extension peripheral:
  *           + Extended AES processing functions     
  *  
  @verbatim
  ==============================================================================
                     ##### How to use this driver #####
  ==============================================================================
    [..]
    The CRYP extension HAL driver can be used as follows:
    (#)After AES-GCM or AES-CCM  Encryption/Decryption user can start following API 
       to get the  authentication messages :
      (##) HAL_CRYPEx_AESGCM_GenerateAuthTAG
      (##) HAL_CRYPEx_AESCCM_GenerateAuthTAG

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics. 
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the 
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment> 

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call>  <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP_CR_ALGOMODE_AES_GCM</name></expr></argument>)</argument_list></call><operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/** @defgroup CRYPEx CRYPEx
  * @brief CRYP Extension HAL module driver.
  * @{
  */</comment>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_CRYP_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup CRYPEx_Private_Defines
  * @{
  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_PHASE_INIT</name></cpp:macro>                              <cpp:value>0x00000000U</cpp:value></cpp:define>             <comment type="block" format="doxygen">/*!&lt; GCM/GMAC (or CCM) init phase */</comment> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_PHASE_HEADER</name></cpp:macro>                            <cpp:value>AES_CR_GCMPH_0</cpp:value></cpp:define>          <comment type="block" format="doxygen">/*!&lt; GCM/GMAC or CCM header phase */</comment> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_PHASE_PAYLOAD</name></cpp:macro>                           <cpp:value>AES_CR_GCMPH_1</cpp:value></cpp:define>          <comment type="block" format="doxygen">/*!&lt; GCM(/CCM) payload phase   */</comment> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_PHASE_FINAL</name></cpp:macro>                             <cpp:value>AES_CR_GCMPH</cpp:value></cpp:define>            <comment type="block" format="doxygen">/*!&lt; GCM/GMAC or CCM  final phase  */</comment> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_OPERATINGMODE_ENCRYPT</name></cpp:macro>                   <cpp:value>0x00000000U</cpp:value></cpp:define>             <comment type="block" format="doxygen">/*!&lt; Encryption mode   */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_OPERATINGMODE_KEYDERIVATION</name></cpp:macro>             <cpp:value>AES_CR_MODE_0</cpp:value></cpp:define>           <comment type="block" format="doxygen">/*!&lt; Key derivation mode  only used when performing ECB and CBC decryptions  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_OPERATINGMODE_DECRYPT</name></cpp:macro>                   <cpp:value>AES_CR_MODE_1</cpp:value></cpp:define>           <comment type="block" format="doxygen">/*!&lt; Decryption       */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT</name></cpp:macro>     <cpp:value>AES_CR_MODE</cpp:value></cpp:define>             <comment type="block" format="doxygen">/*!&lt; Key derivation and decryption only used when performing ECB and CBC decryptions  */</comment>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* CRYP */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_PHASE_INIT</name></cpp:macro>                 <cpp:value>0x00000000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_PHASE_HEADER</name></cpp:macro>               <cpp:value>CRYP_CR_GCM_CCMPH_0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_PHASE_PAYLOAD</name></cpp:macro>              <cpp:value>CRYP_CR_GCM_CCMPH_1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_PHASE_FINAL</name></cpp:macro>                <cpp:value>CRYP_CR_GCM_CCMPH</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_OPERATINGMODE_ENCRYPT</name></cpp:macro>      <cpp:value>0x00000000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_OPERATINGMODE_DECRYPT</name></cpp:macro>      <cpp:value>CRYP_CR_ALGODIR</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>CRYPEx_PHASE_PROCESS</name></cpp:macro>       <cpp:value>0x02U</cpp:value></cpp:define>     <comment type="block" format="doxygen">/*!&lt; CRYP peripheral is in processing phase */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>CRYPEx_PHASE_FINAL</name></cpp:macro>         <cpp:value>0x03U</cpp:value></cpp:define>     <comment type="block" format="doxygen">/*!&lt; CRYP peripheral is in final phase this is relevant only with CCM and GCM modes */</comment>   

 <comment type="block">/*  CTR0 information to use in CCM algorithm */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_CCM_CTR0_0</name></cpp:macro>            <cpp:value>0x07FFFFFFU</cpp:value></cpp:define>         
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_CCM_CTR0_3</name></cpp:macro>            <cpp:value>0xFFFFFF00U</cpp:value></cpp:define>         


<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>



<comment type="block">/* Exported functions---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup CRYPEx_Exported_Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup CRYPEx_Exported_Functions_Group1 Extended AES processing functions 
 *  @brief   Extended processing functions. 
 *
@verbatim   
  ==============================================================================
              ##### Extended AES processing functions #####
  ==============================================================================  
    [..]  This section provides functions allowing to generate the authentication 
          TAG in Polling mode 
      (#)HAL_CRYPEx_AESGCM_GenerateAuthTAG
      (#)HAL_CRYPEx_AESCCM_GenerateAuthTAG
         they should be used after Encrypt/Decrypt operation.

@endverbatim
  * @{
  */</comment>


<comment type="block" format="doxygen">/**
  * @brief  generate the GCM authentication TAG.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @param  AuthTag: Pointer to the authentication buffer
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CRYPEx_AESGCM_GenerateAuthTAG</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>AuthTag</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>    
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>headerlength</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name><operator>)</operator> <operator>*</operator> <literal type="number">32U</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Header length in bits */</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>inputlength</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator> <operator>*</operator> <literal type="number">8U</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* input length in bits */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tagaddr</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>AuthTag</name></expr></init></decl>;</decl_stmt>  
  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_READY</name></expr>)</condition>
  <block>{<block_content>  
    <comment type="block">/* Process locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Change the CRYP peripheral state */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_BUSY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Check if initialization phase has already been performed */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>==</operator> <name>CRYPEx_PHASE_PROCESS</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Change the CRYP phase */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYPEx_PHASE_FINAL</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="block">/* Initialization phase has not been performed*/</comment>
    <block>{<block_content> 
      <comment type="block">/* Disable the Peripheral */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Sequence error code field */</comment> 
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_AUTH_TAG_SEQUENCE</name></expr>;</expr_stmt> 
      
      <comment type="block">/* Change the CRYP peripheral state */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>    
      
      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
    
    <comment type="block">/* Disable CRYP to start the final phase */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Select final phase */</comment>  
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_GCM_CCMPH</name></expr></argument>, <argument><expr><name>CRYP_PHASE_FINAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    
    <comment type="block">/*ALGODIR bit must be set to 0.*/</comment> 
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator>  <operator>~</operator><name>CRYP_CR_ALGODIR</name></expr>;</expr_stmt>
    
    <comment type="block">/* Enable the CRYP peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Write the number of bits in header (64 bits) followed by the number of bits
    in the payload */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_1B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>headerlength</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>inputlength</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_8B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>headerlength</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>inputlength</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_16B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>headerlength</name></expr></argument>, <argument><expr><literal type="number">16U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>inputlength</name></expr></argument>, <argument><expr><literal type="number">16U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_32B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>headerlength</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>inputlength</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Nothing to do */</comment>
    </block_content>}</block></else></if_stmt>
    
    <comment type="block">/* Wait for OFNE flag to be raised */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>CRYP_FLAG_OFNE</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check for the Timeout */</comment>
      <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator><operator>||</operator><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>       
          <comment type="block">/* Disable the CRYP Peripheral Clock */</comment>
          <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="block">/* Change state */</comment>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
          
          <comment type="block">/* Process unlocked */</comment>          
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>          
    
    <comment type="block">/* Read the authentication TAG in the output FIFO */</comment>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>tagaddr</name><operator>)</operator> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tagaddr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>tagaddr</name><operator>)</operator> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tagaddr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>tagaddr</name><operator>)</operator> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tagaddr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>tagaddr</name><operator>)</operator> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>      
    
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES*/</comment>
    
    <comment type="block">/* Select final phase */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_GCMPH</name></expr></argument>, <argument><expr><name>CRYP_PHASE_FINAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <comment type="block">/* Write the number of bits in header (64 bits) followed by the number of bits
    in the payload */</comment> 
    <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_1B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>headerlength</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>inputlength</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_8B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>headerlength</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>inputlength</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_16B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>headerlength</name></expr></argument>, <argument><expr><literal type="number">16U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>inputlength</name></expr></argument>, <argument><expr><literal type="number">16U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_32B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>headerlength</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>inputlength</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Nothing to do */</comment>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* Wait for CCF flag to be raised */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>AES_SR_CCF</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check for the Timeout */</comment>
      <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator><operator>||</operator><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>       
          <comment type="block">/* Disable the CRYP peripheral clock */</comment>
          <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="block">/* Change state */</comment>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
          
          <comment type="block">/* Process unlocked */</comment>          
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>         
    
    <comment type="block">/* Read the authentication TAG in the output FIFO */</comment>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>tagaddr</name><operator>)</operator> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tagaddr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>tagaddr</name><operator>)</operator> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tagaddr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>tagaddr</name><operator>)</operator> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tagaddr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>tagaddr</name><operator>)</operator> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt> 
    
    <comment type="block">/* Clear CCF flag */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       
    
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment> 
    
    <comment type="block">/* Disable the peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Change the CRYP peripheral state */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>    
    
    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Busy error code field */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_BUSY</name></expr>;</expr_stmt> 
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>   
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  AES CCM Authentication TAG generation.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @param  AuthTag: Pointer to the authentication buffer
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CRYPEx_AESCCM_GenerateAuthTAG</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>AuthTag</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tagaddr</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>AuthTag</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>ctr0</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ctr0addr</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ctr0</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Change the CRYP peripheral state */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Check if initialization phase has already been performed */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>==</operator> <name>CRYPEx_PHASE_PROCESS</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Change the CRYP phase */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYPEx_PHASE_FINAL</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="block">/* Initialization phase has not been performed*/</comment>
    <block>{<block_content>
      <comment type="block">/* Disable the peripheral */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Sequence error code field */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_AUTH_TAG_SEQUENCE</name></expr>;</expr_stmt>

      <comment type="block">/* Change the CRYP peripheral state */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>

      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if> 

    <comment type="block">/* Disable CRYP to start the final phase */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Select final phase &amp; ALGODIR bit must be set to 0. */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_GCM_CCMPH</name><operator>|</operator><name>CRYP_CR_ALGODIR</name></expr></argument>, <argument><expr><name>CRYP_PHASE_FINAL</name><operator>|</operator><name>CRYP_OPERATINGMODE_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the CRYP peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Write the counter block in the IN FIFO, CTR0 information from B0
    data has to be swapped according to the DATATYPE*/</comment>
    <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>CRYP_CCM_CTR0_0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator>  <name>CRYP_CCM_CTR0_3</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_8B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_16B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_1B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* Wait for OFNE flag to be raised */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>CRYP_FLAG_OFNE</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check for the Timeout */</comment>
      <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator><operator>||</operator><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Disable the CRYP peripheral Clock */</comment>
          <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Change state */</comment>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>

          <comment type="block">/* Process unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Read the Auth TAG in the IN FIFO */</comment>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>tagaddr</name><operator>)</operator> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tagaddr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>tagaddr</name><operator>)</operator> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tagaddr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>tagaddr</name><operator>)</operator> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tagaddr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>tagaddr</name><operator>)</operator> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment>

    <comment type="block">/* Select final phase */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_GCMPH</name></expr></argument>, <argument><expr><name>CRYP_PHASE_FINAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Write the counter block in the IN FIFO, CTR0 information from B0
    data has to be swapped according to the DATATYPE*/</comment>
    <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_8B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><operator>(</operator><call><name>__REV</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>CRYP_CCM_CTR0_0</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><call><name>__REV</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><call><name>__REV</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><operator>(</operator><call><name>__REV</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>CRYP_CCM_CTR0_3</name><operator>)</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_16B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <operator>(</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16U</literal></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>CRYP_CCM_CTR0_0</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator>   <call><name>__ROR</name><argument_list>(<argument><expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator>   <call><name>__ROR</name><argument_list>(<argument><expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator> <operator>(</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16U</literal></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>CRYP_CCM_CTR0_3</name><operator>)</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_1B</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><operator>(</operator><call><name>__RBIT</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>CRYP_CCM_CTR0_0</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><call><name>__RBIT</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><call><name>__RBIT</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><operator>(</operator><call><name>__RBIT</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>CRYP_CCM_CTR0_3</name><operator>)</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>CRYP_CCM_CTR0_0</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctr0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator>  <name>CRYP_CCM_CTR0_3</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctr0addr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ctr0addr</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Wait for CCF flag to be raised */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>AES_SR_CCF</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check for the Timeout */</comment>
      <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator><operator>||</operator><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Disable the CRYP peripheral Clock */</comment>
          <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Change state */</comment>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>

          <comment type="block">/* Process unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Read the authentication TAG in the output FIFO */</comment>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>tagaddr</name><operator>)</operator> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tagaddr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>tagaddr</name><operator>)</operator> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tagaddr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>tagaddr</name><operator>)</operator> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tagaddr</name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>tagaddr</name><operator>)</operator> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt>

    <comment type="block">/* Clear CCF Flag */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End of AES || CRYP */</comment>

    <comment type="block">/* Change the CRYP peripheral state */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Disable CRYP  */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Busy error code field */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_CRYP_ERROR_BUSY</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>   
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/** @defgroup CRYPEx_Exported_Functions_Group2 Key Derivation functions
 *  @brief   AutoKeyDerivation functions 
 *
@verbatim
  ==============================================================================
              ##### Key Derivation functions #####
  ==============================================================================  
    [..]  This section provides functions allowing to Enable or Disable the
          the AutoKeyDerivation parameter in CRYP_HandleTypeDef structure
          These function are allowed only in TinyAES IP.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  AES enable key derivation functions
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure.
  * @retval None
  */</comment>
<function><type><name>void</name></type>  <name>HAL_CRYPEx_EnableAutoKeyDerivation</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_READY</name></expr>)</condition>
  <block>{<block_content>  
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>AutoKeyDerivation</name></name> <operator>=</operator> <name>ENABLE</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Busy error code field */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_CRYP_ERROR_BUSY</name></expr>;</expr_stmt> 
  </block_content>}</block></else></if_stmt> 
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @brief  AES disable key derivation functions
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure.
  * @retval None
  */</comment>
<function><type><name>void</name></type>  <name>HAL_CRYPEx_DisableAutoKeyDerivation</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>AutoKeyDerivation</name></name> <operator>=</operator> <name>DISABLE</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Busy error code field */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_CRYP_ERROR_BUSY</name></expr>;</expr_stmt> 
  </block_content>}</block></else></if_stmt>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AES or GCM CCM defined*/</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AES */</comment> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_CRYP_MODULE_ENABLED */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TinyAES or CRYP*/</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
