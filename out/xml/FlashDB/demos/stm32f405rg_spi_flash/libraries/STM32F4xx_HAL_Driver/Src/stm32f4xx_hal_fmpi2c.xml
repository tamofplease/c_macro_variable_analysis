<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_fmpi2c.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_fmpi2c.c
  * @author  MCD Application Team
  * @brief   FMPI2C HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the Inter Integrated Circuit (FMPI2C) peripheral:
  *           + Initialization and de-initialization functions
  *           + IO operation functions
  *           + Peripheral State and Errors functions
  *
  @verbatim
  ==============================================================================
                        ##### How to use this driver #####
  ==============================================================================
    [..]
    The FMPI2C HAL driver can be used as follows:

    (#) Declare a FMPI2C_HandleTypeDef handle structure, for example:
        FMPI2C_HandleTypeDef  hfmpi2c;

    (#)Initialize the FMPI2C low level resources by implementing the @ref HAL_FMPI2C_MspInit() API:
        (##) Enable the FMPI2Cx interface clock
        (##) FMPI2C pins configuration
            (+++) Enable the clock for the FMPI2C GPIOs
            (+++) Configure FMPI2C pins as alternate function open-drain
        (##) NVIC configuration if you need to use interrupt process
            (+++) Configure the FMPI2Cx interrupt priority
            (+++) Enable the NVIC FMPI2C IRQ Channel
        (##) DMA Configuration if you need to use DMA process
            (+++) Declare a DMA_HandleTypeDef handle structure for the transmit or receive stream
            (+++) Enable the DMAx interface clock using
            (+++) Configure the DMA handle parameters
            (+++) Configure the DMA Tx or Rx stream
            (+++) Associate the initialized DMA handle to the hfmpi2c DMA Tx or Rx handle
            (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on
                  the DMA Tx or Rx stream

    (#) Configure the Communication Clock Timing, Own Address1, Master Addressing mode, Dual Addressing mode,
        Own Address2, Own Address2 Mask, General call and Nostretch mode in the hfmpi2c Init structure.

    (#) Initialize the FMPI2C registers by calling the @ref HAL_FMPI2C_Init(), configures also the low level Hardware
        (GPIO, CLOCK, NVIC...etc) by calling the customized @ref HAL_FMPI2C_MspInit(&amp;hfmpi2c) API.

    (#) To check if target device is ready for communication, use the function @ref HAL_FMPI2C_IsDeviceReady()

    (#) For FMPI2C IO and IO MEM operations, three operation modes are available within this driver :

    *** Polling mode IO operation ***
    =================================
    [..]
      (+) Transmit in master mode an amount of data in blocking mode using @ref HAL_FMPI2C_Master_Transmit()
      (+) Receive in master mode an amount of data in blocking mode using @ref HAL_FMPI2C_Master_Receive()
      (+) Transmit in slave mode an amount of data in blocking mode using @ref HAL_FMPI2C_Slave_Transmit()
      (+) Receive in slave mode an amount of data in blocking mode using @ref HAL_FMPI2C_Slave_Receive()

    *** Polling mode IO MEM operation ***
    =====================================
    [..]
      (+) Write an amount of data in blocking mode to a specific memory address using @ref HAL_FMPI2C_Mem_Write()
      (+) Read an amount of data in blocking mode from a specific memory address using @ref HAL_FMPI2C_Mem_Read()


    *** Interrupt mode IO operation ***
    ===================================
    [..]
      (+) Transmit in master mode an amount of data in non-blocking mode using @ref HAL_FMPI2C_Master_Transmit_IT()
      (+) At transmission end of transfer, @ref HAL_FMPI2C_MasterTxCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_MasterTxCpltCallback()
      (+) Receive in master mode an amount of data in non-blocking mode using @ref HAL_FMPI2C_Master_Receive_IT()
      (+) At reception end of transfer, @ref HAL_FMPI2C_MasterRxCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_MasterRxCpltCallback()
      (+) Transmit in slave mode an amount of data in non-blocking mode using @ref HAL_FMPI2C_Slave_Transmit_IT()
      (+) At transmission end of transfer, @ref HAL_FMPI2C_SlaveTxCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_SlaveTxCpltCallback()
      (+) Receive in slave mode an amount of data in non-blocking mode using @ref HAL_FMPI2C_Slave_Receive_IT()
      (+) At reception end of transfer, @ref HAL_FMPI2C_SlaveRxCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_SlaveRxCpltCallback()
      (+) In case of transfer Error, @ref HAL_FMPI2C_ErrorCallback() function is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_ErrorCallback()
      (+) Abort a master FMPI2C process communication with Interrupt using @ref HAL_FMPI2C_Master_Abort_IT()
      (+) End of abort process, @ref HAL_FMPI2C_AbortCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_AbortCpltCallback()
      (+) Discard a slave FMPI2C process communication using @ref __HAL_FMPI2C_GENERATE_NACK() macro.
           This action will inform Master to generate a Stop condition to discard the communication.


    *** Interrupt mode or DMA mode IO sequential operation ***
    ==========================================================
    [..]
      (@) These interfaces allow to manage a sequential transfer with a repeated start condition
          when a direction change during transfer
    [..]
      (+) A specific option field manage the different steps of a sequential transfer
      (+) Option field values are defined through @ref FMPI2C_XFEROPTIONS and are listed below:
      (++) FMPI2C_FIRST_AND_LAST_FRAME: No sequential usage, functionnal is same as associated interfaces in no sequential mode
      (++) FMPI2C_FIRST_FRAME: Sequential usage, this option allow to manage a sequence with start condition, address
                            and data to transfer without a final stop condition
      (++) FMPI2C_FIRST_AND_NEXT_FRAME: Sequential usage (Master only), this option allow to manage a sequence with start condition, address
                            and data to transfer without a final stop condition, an then permit a call the same master sequential interface
                            several times (like @ref HAL_FMPI2C_Master_Seq_Transmit_IT() then @ref HAL_FMPI2C_Master_Seq_Transmit_IT()
                            or @ref HAL_FMPI2C_Master_Seq_Transmit_DMA() then @ref HAL_FMPI2C_Master_Seq_Transmit_DMA())
      (++) FMPI2C_NEXT_FRAME: Sequential usage, this option allow to manage a sequence with a restart condition, address
                            and with new data to transfer if the direction change or manage only the new data to transfer
                            if no direction change and without a final stop condition in both cases
      (++) FMPI2C_LAST_FRAME: Sequential usage, this option allow to manage a sequance with a restart condition, address
                            and with new data to transfer if the direction change or manage only the new data to transfer
                            if no direction change and with a final stop condition in both cases
      (++) FMPI2C_LAST_FRAME_NO_STOP: Sequential usage (Master only), this option allow to manage a restart condition after several call of the same master sequential
                            interface several times (link with option FMPI2C_FIRST_AND_NEXT_FRAME).
                            Usage can, transfer several bytes one by one using HAL_FMPI2C_Master_Seq_Transmit_IT(option FMPI2C_FIRST_AND_NEXT_FRAME then FMPI2C_NEXT_FRAME)
                              or HAL_FMPI2C_Master_Seq_Receive_IT(option FMPI2C_FIRST_AND_NEXT_FRAME then FMPI2C_NEXT_FRAME)
                              or HAL_FMPI2C_Master_Seq_Transmit_DMA(option FMPI2C_FIRST_AND_NEXT_FRAME then FMPI2C_NEXT_FRAME)
                              or HAL_FMPI2C_Master_Seq_Receive_DMA(option FMPI2C_FIRST_AND_NEXT_FRAME then FMPI2C_NEXT_FRAME).
                            Then usage of this option FMPI2C_LAST_FRAME_NO_STOP at the last Transmit or Receive sequence permit to call the oposite interface Receive or Transmit
                              without stopping the communication and so generate a restart condition.
      (++) FMPI2C_OTHER_FRAME: Sequential usage (Master only), this option allow to manage a restart condition after each call of the same master sequential
                            interface.
                            Usage can, transfer several bytes one by one with a restart with slave address between each bytes using HAL_FMPI2C_Master_Seq_Transmit_IT(option FMPI2C_FIRST_FRAME then FMPI2C_OTHER_FRAME)
                              or HAL_FMPI2C_Master_Seq_Receive_IT(option FMPI2C_FIRST_FRAME then FMPI2C_OTHER_FRAME)
                              or HAL_FMPI2C_Master_Seq_Transmit_DMA(option FMPI2C_FIRST_FRAME then FMPI2C_OTHER_FRAME)
                              or HAL_FMPI2C_Master_Seq_Receive_DMA(option FMPI2C_FIRST_FRAME then FMPI2C_OTHER_FRAME).
                            Then usage of this option FMPI2C_OTHER_AND_LAST_FRAME at the last frame to help automatic generation of STOP condition.

      (+) Differents sequential FMPI2C interfaces are listed below:
      (++) Sequential transmit in master FMPI2C mode an amount of data in non-blocking mode using @ref HAL_FMPI2C_Master_Seq_Transmit_IT()
            or using @ref HAL_FMPI2C_Master_Seq_Transmit_DMA()
      (+++) At transmission end of current frame transfer, @ref HAL_FMPI2C_MasterTxCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_MasterTxCpltCallback()
      (++) Sequential receive in master FMPI2C mode an amount of data in non-blocking mode using @ref HAL_FMPI2C_Master_Seq_Receive_IT()
            or using @ref HAL_FMPI2C_Master_Seq_Receive_DMA()
      (+++) At reception end of current frame transfer, @ref HAL_FMPI2C_MasterRxCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_MasterRxCpltCallback()
      (++) Abort a master IT or DMA FMPI2C process communication with Interrupt using @ref HAL_FMPI2C_Master_Abort_IT()
      (+++) End of abort process, @ref HAL_FMPI2C_AbortCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_AbortCpltCallback()
      (++) Enable/disable the Address listen mode in slave FMPI2C mode using @ref HAL_FMPI2C_EnableListen_IT() @ref HAL_FMPI2C_DisableListen_IT()
      (+++) When address slave FMPI2C match, @ref HAL_FMPI2C_AddrCallback() is executed and user can
           add his own code to check the Address Match Code and the transmission direction request by master (Write/Read).
      (+++) At Listen mode end @ref HAL_FMPI2C_ListenCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_ListenCpltCallback()
      (++) Sequential transmit in slave FMPI2C mode an amount of data in non-blocking mode using @ref HAL_FMPI2C_Slave_Seq_Transmit_IT()
            or using @ref HAL_FMPI2C_Slave_Seq_Transmit_DMA()
      (+++) At transmission end of current frame transfer, @ref HAL_FMPI2C_SlaveTxCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_SlaveTxCpltCallback()
      (++) Sequential receive in slave FMPI2C mode an amount of data in non-blocking mode using @ref HAL_FMPI2C_Slave_Seq_Receive_IT()
            or using @ref HAL_FMPI2C_Slave_Seq_Receive_DMA()
      (+++) At reception end of current frame transfer, @ref HAL_FMPI2C_SlaveRxCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_SlaveRxCpltCallback()
      (++) In case of transfer Error, @ref HAL_FMPI2C_ErrorCallback() function is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_ErrorCallback()
      (++) Discard a slave FMPI2C process communication using @ref __HAL_FMPI2C_GENERATE_NACK() macro.
           This action will inform Master to generate a Stop condition to discard the communication.

    *** Interrupt mode IO MEM operation ***
    =======================================
    [..]
      (+) Write an amount of data in non-blocking mode with Interrupt to a specific memory address using
          @ref HAL_FMPI2C_Mem_Write_IT()
      (+) At Memory end of write transfer, @ref HAL_FMPI2C_MemTxCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_MemTxCpltCallback()
      (+) Read an amount of data in non-blocking mode with Interrupt from a specific memory address using
          @ref HAL_FMPI2C_Mem_Read_IT()
      (+) At Memory end of read transfer, @ref HAL_FMPI2C_MemRxCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_MemRxCpltCallback()
      (+) In case of transfer Error, @ref HAL_FMPI2C_ErrorCallback() function is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_ErrorCallback()

    *** DMA mode IO operation ***
    ==============================
    [..]
      (+) Transmit in master mode an amount of data in non-blocking mode (DMA) using
          @ref HAL_FMPI2C_Master_Transmit_DMA()
      (+) At transmission end of transfer, @ref HAL_FMPI2C_MasterTxCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_MasterTxCpltCallback()
      (+) Receive in master mode an amount of data in non-blocking mode (DMA) using
          @ref HAL_FMPI2C_Master_Receive_DMA()
      (+) At reception end of transfer, @ref HAL_FMPI2C_MasterRxCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_MasterRxCpltCallback()
      (+) Transmit in slave mode an amount of data in non-blocking mode (DMA) using
          @ref HAL_FMPI2C_Slave_Transmit_DMA()
      (+) At transmission end of transfer, @ref HAL_FMPI2C_SlaveTxCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_SlaveTxCpltCallback()
      (+) Receive in slave mode an amount of data in non-blocking mode (DMA) using
          @ref HAL_FMPI2C_Slave_Receive_DMA()
      (+) At reception end of transfer, @ref HAL_FMPI2C_SlaveRxCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_SlaveRxCpltCallback()
      (+) In case of transfer Error, @ref HAL_FMPI2C_ErrorCallback() function is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_ErrorCallback()
      (+) Abort a master FMPI2C process communication with Interrupt using @ref HAL_FMPI2C_Master_Abort_IT()
      (+) End of abort process, @ref HAL_FMPI2C_AbortCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_AbortCpltCallback()
      (+) Discard a slave FMPI2C process communication using @ref __HAL_FMPI2C_GENERATE_NACK() macro.
           This action will inform Master to generate a Stop condition to discard the communication.

    *** DMA mode IO MEM operation ***
    =================================
    [..]
      (+) Write an amount of data in non-blocking mode with DMA to a specific memory address using
          @ref HAL_FMPI2C_Mem_Write_DMA()
      (+) At Memory end of write transfer, @ref HAL_FMPI2C_MemTxCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_MemTxCpltCallback()
      (+) Read an amount of data in non-blocking mode with DMA from a specific memory address using
          @ref HAL_FMPI2C_Mem_Read_DMA()
      (+) At Memory end of read transfer, @ref HAL_FMPI2C_MemRxCpltCallback() is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_MemRxCpltCallback()
      (+) In case of transfer Error, @ref HAL_FMPI2C_ErrorCallback() function is executed and user can
           add his own code by customization of function pointer @ref HAL_FMPI2C_ErrorCallback()


     *** FMPI2C HAL driver macros list ***
     ==================================
     [..]
       Below the list of most used macros in FMPI2C HAL driver.

      (+) @ref __HAL_FMPI2C_ENABLE: Enable the FMPI2C peripheral
      (+) @ref __HAL_FMPI2C_DISABLE: Disable the FMPI2C peripheral
      (+) @ref __HAL_FMPI2C_GENERATE_NACK: Generate a Non-Acknowledge FMPI2C peripheral in Slave mode
      (+) @ref __HAL_FMPI2C_GET_FLAG: Check whether the specified FMPI2C flag is set or not
      (+) @ref __HAL_FMPI2C_CLEAR_FLAG: Clear the specified FMPI2C pending flag
      (+) @ref __HAL_FMPI2C_ENABLE_IT: Enable the specified FMPI2C interrupt
      (+) @ref __HAL_FMPI2C_DISABLE_IT: Disable the specified FMPI2C interrupt

     *** Callback registration ***
     =============================================

     The compilation flag USE_HAL_FMPI2C_REGISTER_CALLBACKS when set to 1
     allows the user to configure dynamically the driver callbacks.
     Use Functions @ref HAL_FMPI2C_RegisterCallback() or @ref HAL_FMPI2C_RegisterAddrCallback()
     to register an interrupt callback.

     Function @ref HAL_FMPI2C_RegisterCallback() allows to register following callbacks:
       (+) MasterTxCpltCallback : callback for Master transmission end of transfer.
       (+) MasterRxCpltCallback : callback for Master reception end of transfer.
       (+) SlaveTxCpltCallback  : callback for Slave transmission end of transfer.
       (+) SlaveRxCpltCallback  : callback for Slave reception end of transfer.
       (+) ListenCpltCallback   : callback for end of listen mode.
       (+) MemTxCpltCallback    : callback for Memory transmission end of transfer.
       (+) MemRxCpltCallback    : callback for Memory reception end of transfer.
       (+) ErrorCallback        : callback for error detection.
       (+) AbortCpltCallback    : callback for abort completion process.
       (+) MspInitCallback      : callback for Msp Init.
       (+) MspDeInitCallback    : callback for Msp DeInit.
     This function takes as parameters the HAL peripheral handle, the Callback ID
     and a pointer to the user callback function.

     For specific callback AddrCallback use dedicated register callbacks : @ref HAL_FMPI2C_RegisterAddrCallback().

     Use function @ref HAL_FMPI2C_UnRegisterCallback to reset a callback to the default
     weak function.
     @ref HAL_FMPI2C_UnRegisterCallback takes as parameters the HAL peripheral handle,
     and the Callback ID.
     This function allows to reset following callbacks:
       (+) MasterTxCpltCallback : callback for Master transmission end of transfer.
       (+) MasterRxCpltCallback : callback for Master reception end of transfer.
       (+) SlaveTxCpltCallback  : callback for Slave transmission end of transfer.
       (+) SlaveRxCpltCallback  : callback for Slave reception end of transfer.
       (+) ListenCpltCallback   : callback for end of listen mode.
       (+) MemTxCpltCallback    : callback for Memory transmission end of transfer.
       (+) MemRxCpltCallback    : callback for Memory reception end of transfer.
       (+) ErrorCallback        : callback for error detection.
       (+) AbortCpltCallback    : callback for abort completion process.
       (+) MspInitCallback      : callback for Msp Init.
       (+) MspDeInitCallback    : callback for Msp DeInit.

     For callback AddrCallback use dedicated register callbacks : @ref HAL_FMPI2C_UnRegisterAddrCallback().

     By default, after the @ref HAL_FMPI2C_Init() and when the state is @ref HAL_FMPI2C_STATE_RESET
     all callbacks are set to the corresponding weak functions:
     examples @ref HAL_FMPI2C_MasterTxCpltCallback(), @ref HAL_FMPI2C_MasterRxCpltCallback().
     Exception done for MspInit and MspDeInit functions that are
     reset to the legacy weak functions in the @ref HAL_FMPI2C_Init()/ @ref HAL_FMPI2C_DeInit() only when
     these callbacks are null (not registered beforehand).
     If MspInit or MspDeInit are not null, the @ref HAL_FMPI2C_Init()/ @ref HAL_FMPI2C_DeInit()
     keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state.

     Callbacks can be registered/unregistered in @ref HAL_FMPI2C_STATE_READY state only.
     Exception done MspInit/MspDeInit functions that can be registered/unregistered
     in @ref HAL_FMPI2C_STATE_READY or @ref HAL_FMPI2C_STATE_RESET state,
     thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
     Then, the user first registers the MspInit/MspDeInit user callbacks
     using @ref HAL_FMPI2C_RegisterCallback() before calling @ref HAL_FMPI2C_DeInit()
     or @ref HAL_FMPI2C_Init() function.

     When the compilation flag USE_HAL_FMPI2C_REGISTER_CALLBACKS is set to 0 or
     not defined, the callback registration feature is not available and all callbacks
     are set to the corresponding weak functions.

     [..]
       (@) You can refer to the FMPI2C HAL driver header file for more useful macros

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup FMPI2C FMPI2C
  * @brief FMPI2C HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_FMPI2C_MODULE_ENABLED</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FMPI2C_CR1_PE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup FMPI2C_Private_Define FMPI2C Private Define
  * @{
  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMING_CLEAR_MASK</name></cpp:macro>   <cpp:value>(0xF0FFFFFFU)</cpp:value></cpp:define>  <comment type="block" format="doxygen">/*!&lt; FMPI2C TIMING clear register Mask */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_TIMEOUT_ADDR</name></cpp:macro>    <cpp:value>(10000U)</cpp:value></cpp:define>       <comment type="block" format="doxygen">/*!&lt; 10 s  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_TIMEOUT_BUSY</name></cpp:macro>    <cpp:value>(25U)</cpp:value></cpp:define>          <comment type="block" format="doxygen">/*!&lt; 25 ms */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_TIMEOUT_DIR</name></cpp:macro>     <cpp:value>(25U)</cpp:value></cpp:define>          <comment type="block" format="doxygen">/*!&lt; 25 ms */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_TIMEOUT_RXNE</name></cpp:macro>    <cpp:value>(25U)</cpp:value></cpp:define>          <comment type="block" format="doxygen">/*!&lt; 25 ms */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_TIMEOUT_STOPF</name></cpp:macro>   <cpp:value>(25U)</cpp:value></cpp:define>          <comment type="block" format="doxygen">/*!&lt; 25 ms */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_TIMEOUT_TC</name></cpp:macro>      <cpp:value>(25U)</cpp:value></cpp:define>          <comment type="block" format="doxygen">/*!&lt; 25 ms */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_TIMEOUT_TCR</name></cpp:macro>     <cpp:value>(25U)</cpp:value></cpp:define>          <comment type="block" format="doxygen">/*!&lt; 25 ms */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_TIMEOUT_TXIS</name></cpp:macro>    <cpp:value>(25U)</cpp:value></cpp:define>          <comment type="block" format="doxygen">/*!&lt; 25 ms */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_TIMEOUT_FLAG</name></cpp:macro>    <cpp:value>(25U)</cpp:value></cpp:define>          <comment type="block" format="doxygen">/*!&lt; 25 ms */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NBYTE_SIZE</name></cpp:macro>      <cpp:value>255U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SlaveAddr_SHIFT</name></cpp:macro>     <cpp:value>7U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SlaveAddr_MSK</name></cpp:macro>       <cpp:value>0x06U</cpp:value></cpp:define>

<comment type="block">/* Private define for @ref PreviousState usage */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_STATE_MSK</name></cpp:macro>             <cpp:value>((uint32_t)((uint32_t)((uint32_t)HAL_FMPI2C_STATE_BUSY_TX | (uint32_t)HAL_FMPI2C_STATE_BUSY_RX) &amp; (uint32_t)(~((uint32_t)HAL_FMPI2C_STATE_READY))))</cpp:value></cpp:define> <comment type="block" format="doxygen">/*!&lt; Mask State define, keep only RX and TX bits            */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_STATE_NONE</name></cpp:macro>            <cpp:value>((uint32_t)(HAL_FMPI2C_MODE_NONE))</cpp:value></cpp:define>                                                        <comment type="block" format="doxygen">/*!&lt; Default Value                                          */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_STATE_MASTER_BUSY_TX</name></cpp:macro>  <cpp:value>((uint32_t)(((uint32_t)HAL_FMPI2C_STATE_BUSY_TX &amp; FMPI2C_STATE_MSK) | (uint32_t)HAL_FMPI2C_MODE_MASTER))</cpp:value></cpp:define>            <comment type="block" format="doxygen">/*!&lt; Master Busy TX, combinaison of State LSB and Mode enum */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_STATE_MASTER_BUSY_RX</name></cpp:macro>  <cpp:value>((uint32_t)(((uint32_t)HAL_FMPI2C_STATE_BUSY_RX &amp; FMPI2C_STATE_MSK) | (uint32_t)HAL_FMPI2C_MODE_MASTER))</cpp:value></cpp:define>            <comment type="block" format="doxygen">/*!&lt; Master Busy RX, combinaison of State LSB and Mode enum */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_STATE_SLAVE_BUSY_TX</name></cpp:macro>   <cpp:value>((uint32_t)(((uint32_t)HAL_FMPI2C_STATE_BUSY_TX &amp; FMPI2C_STATE_MSK) | (uint32_t)HAL_FMPI2C_MODE_SLAVE))</cpp:value></cpp:define>             <comment type="block" format="doxygen">/*!&lt; Slave Busy TX, combinaison of State LSB and Mode enum  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_STATE_SLAVE_BUSY_RX</name></cpp:macro>   <cpp:value>((uint32_t)(((uint32_t)HAL_FMPI2C_STATE_BUSY_RX &amp; FMPI2C_STATE_MSK) | (uint32_t)HAL_FMPI2C_MODE_SLAVE))</cpp:value></cpp:define>             <comment type="block" format="doxygen">/*!&lt; Slave Busy RX, combinaison of State LSB and Mode enum  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_STATE_MEM_BUSY_TX</name></cpp:macro>     <cpp:value>((uint32_t)(((uint32_t)HAL_FMPI2C_STATE_BUSY_TX &amp; FMPI2C_STATE_MSK) | (uint32_t)HAL_FMPI2C_MODE_MEM))</cpp:value></cpp:define>               <comment type="block" format="doxygen">/*!&lt; Memory Busy TX, combinaison of State LSB and Mode enum */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_STATE_MEM_BUSY_RX</name></cpp:macro>     <cpp:value>((uint32_t)(((uint32_t)HAL_FMPI2C_STATE_BUSY_RX &amp; FMPI2C_STATE_MSK) | (uint32_t)HAL_FMPI2C_MODE_MEM))</cpp:value></cpp:define>               <comment type="block" format="doxygen">/*!&lt; Memory Busy RX, combinaison of State LSB and Mode enum */</comment>


<comment type="block">/* Private define to centralize the enable/disable of Interrupts */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_XFER_TX_IT</name></cpp:macro>          <cpp:value>(0x00000001U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_XFER_RX_IT</name></cpp:macro>          <cpp:value>(0x00000002U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_XFER_LISTEN_IT</name></cpp:macro>      <cpp:value>(0x00000004U)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_XFER_ERROR_IT</name></cpp:macro>       <cpp:value>(0x00000011U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_XFER_CPLT_IT</name></cpp:macro>        <cpp:value>(0x00000012U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_XFER_RELOAD_IT</name></cpp:macro>      <cpp:value>(0x00000012U)</cpp:value></cpp:define>

<comment type="block">/* Private define Sequential Transfer Options default/reset value */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMPI2C_NO_OPTION_FRAME</name></cpp:macro>     <cpp:value>(0xFFFF0000U)</cpp:value></cpp:define>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup FMPI2C_Private_Functions FMPI2C Private Functions
  * @{
  */</comment>
<comment type="block">/* Private functions to handle DMA transfer */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_DMAMasterTransmitCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_DMAMasterReceiveCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_DMASlaveTransmitCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_DMASlaveReceiveCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_DMAAbort</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Private functions to handle IT transfer */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_ITAddrCplt</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITFlags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_ITMasterSeqCplt</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_ITSlaveSeqCplt</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_ITMasterCplt</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITFlags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_ITSlaveCplt</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITFlags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_ITListenCplt</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITFlags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_ITError</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ErrorCode</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Private functions to handle IT transfer */</comment>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_RequestMemoryWrite</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddSize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tickstart</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_RequestMemoryRead</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddSize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tickstart</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Private functions for FMPI2C transfer IRQ handler */</comment>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_Master_ISR_IT</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>__FMPI2C_HandleTypeDef</name></name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITFlags</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITSources</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_Slave_ISR_IT</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>__FMPI2C_HandleTypeDef</name></name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITFlags</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITSources</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_Master_ISR_DMA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>__FMPI2C_HandleTypeDef</name></name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITFlags</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITSources</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_Slave_ISR_DMA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>__FMPI2C_HandleTypeDef</name></name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITFlags</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITSources</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Private functions to handle flags during polling transfer */</comment>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_WaitOnFlagUntilTimeout</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Flag</name></decl></parameter>, <parameter><decl><type><name>FlagStatus</name></type> <name>Status</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tickstart</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_WaitOnTXISFlagUntilTimeout</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tickstart</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_WaitOnRXNEFlagUntilTimeout</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tickstart</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_WaitOnSTOPFlagUntilTimeout</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tickstart</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_IsAcknowledgeFailed</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tickstart</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Private functions to centralize the enable/disable of Interrupts */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_Enable_IRQ</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>InterruptRequest</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_Disable_IRQ</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>InterruptRequest</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Private function to flush TXDR register */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_Flush_TXDR</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Private function to handle  start, restart or stop a transfer */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_TransferConfig</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Mode</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Request</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Private function to Convert Specific options */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_ConvertOtherXferOptions</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup FMPI2C_Exported_Functions FMPI2C Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup FMPI2C_Exported_Functions_Group1 Initialization and de-initialization functions
 *  @brief    Initialization and Configuration functions
 *
@verbatim
 ===============================================================================
              ##### Initialization and de-initialization functions #####
 ===============================================================================
    [..]  This subsection provides a set of functions allowing to initialize and
          deinitialize the FMPI2Cx peripheral:

      (+) User must Implement HAL_FMPI2C_MspInit() function in which he configures
          all related peripherals resources (CLOCK, GPIO, DMA, IT and NVIC ).

      (+) Call the function HAL_FMPI2C_Init() to configure the selected device with
          the selected configuration:
        (++) Clock Timing
        (++) Own Address 1
        (++) Addressing mode (Master, Slave)
        (++) Dual Addressing mode
        (++) Own Address 2
        (++) Own Address 2 Mask
        (++) General call mode
        (++) Nostretch mode

      (+) Call the function HAL_FMPI2C_DeInit() to restore the default configuration
          of the selected FMPI2Cx peripheral.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the FMPI2C according to the specified parameters
  *         in the FMPI2C_InitTypeDef and initialize the associated handle.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Init</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the FMPI2C handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>hfmpi2c</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_OWN_ADDRESS1</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OwnAddress1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_ADDRESSING_MODE</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AddressingMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_DUAL_ADDRESS</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DualAddressMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_OWN_ADDRESS2</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OwnAddress2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_OWN_ADDRESS2_MASK</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OwnAddress2Masks</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_GENERAL_CALL</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>GeneralCallMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_NO_STRETCH</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NoStretchMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/* Init the FMPI2C Callback settings */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MasterTxCpltCallback</name></name> <operator>=</operator> <name>HAL_FMPI2C_MasterTxCpltCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MasterTxCpltCallback */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MasterRxCpltCallback</name></name> <operator>=</operator> <name>HAL_FMPI2C_MasterRxCpltCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MasterRxCpltCallback */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>SlaveTxCpltCallback</name></name>  <operator>=</operator> <name>HAL_FMPI2C_SlaveTxCpltCallback</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak SlaveTxCpltCallback  */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>SlaveRxCpltCallback</name></name>  <operator>=</operator> <name>HAL_FMPI2C_SlaveRxCpltCallback</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak SlaveRxCpltCallback  */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ListenCpltCallback</name></name>   <operator>=</operator> <name>HAL_FMPI2C_ListenCpltCallback</name></expr>;</expr_stmt>   <comment type="block">/* Legacy weak ListenCpltCallback   */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MemTxCpltCallback</name></name>    <operator>=</operator> <name>HAL_FMPI2C_MemTxCpltCallback</name></expr>;</expr_stmt>    <comment type="block">/* Legacy weak MemTxCpltCallback    */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MemRxCpltCallback</name></name>    <operator>=</operator> <name>HAL_FMPI2C_MemRxCpltCallback</name></expr>;</expr_stmt>    <comment type="block">/* Legacy weak MemRxCpltCallback    */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCallback</name></name>        <operator>=</operator> <name>HAL_FMPI2C_ErrorCallback</name></expr>;</expr_stmt>        <comment type="block">/* Legacy weak ErrorCallback        */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name>    <operator>=</operator> <name>HAL_FMPI2C_AbortCpltCallback</name></expr>;</expr_stmt>    <comment type="block">/* Legacy weak AbortCpltCallback    */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>AddrCallback</name></name>         <operator>=</operator> <name>HAL_FMPI2C_AddrCallback</name></expr>;</expr_stmt>         <comment type="block">/* Legacy weak AddrCallback         */</comment>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_FMPI2C_MspInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MspInit  */</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */</comment>
    <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */</comment>
    <expr_stmt><expr><call><name>HAL_FMPI2C_MspInit</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the selected FMPI2C peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_FMPI2C_DISABLE</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/</comment>
  <comment type="block">/* Configure FMPI2Cx: Frequency range */</comment>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TIMINGR</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Timing</name></name> <operator>&amp;</operator> <name>TIMING_CLEAR_MASK</name></expr>;</expr_stmt>

  <comment type="block">/*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/</comment>
  <comment type="block">/* Disable Own Address1 before set the Own Address1 configuration */</comment>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>OAR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_OAR1_OA1EN</name></expr>;</expr_stmt>

  <comment type="block">/* Configure FMPI2Cx: Own Address1 and ack own address1 mode */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AddressingMode</name></name> <operator>==</operator> <name>FMPI2C_ADDRESSINGMODE_7BIT</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>OAR1</name></name> <operator>=</operator> <operator>(</operator><name>FMPI2C_OAR1_OA1EN</name> <operator>|</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OwnAddress1</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <comment type="block">/* FMPI2C_ADDRESSINGMODE_10BIT */</comment>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>OAR1</name></name> <operator>=</operator> <operator>(</operator><name>FMPI2C_OAR1_OA1EN</name> <operator>|</operator> <name>FMPI2C_OAR1_OA1MODE</name> <operator>|</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OwnAddress1</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/</comment>
  <comment type="block">/* Configure FMPI2Cx: Addressing Master mode */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AddressingMode</name></name> <operator>==</operator> <name>FMPI2C_ADDRESSINGMODE_10BIT</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>=</operator> <operator>(</operator><name>FMPI2C_CR2_ADD10</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */</comment>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <operator>(</operator><name>FMPI2C_CR2_AUTOEND</name> <operator>|</operator> <name>FMPI2C_CR2_NACK</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/</comment>
  <comment type="block">/* Disable Own Address2 before set the Own Address2 configuration */</comment>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>OAR2</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_DUALADDRESS_ENABLE</name></expr>;</expr_stmt>

  <comment type="block">/* Configure FMPI2Cx: Dual mode and Own Address2 */</comment>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>OAR2</name></name> <operator>=</operator> <operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DualAddressMode</name></name> <operator>|</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OwnAddress2</name></name> <operator>|</operator> <operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OwnAddress2Masks</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/</comment>
  <comment type="block">/* Configure FMPI2Cx: Generalcall and NoStretch mode */</comment>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>=</operator> <operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>GeneralCallMode</name></name> <operator>|</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NoStretchMode</name></name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Enable the selected FMPI2C peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_FMPI2C_ENABLE</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>PreviousState</name></name> <operator>=</operator> <name>FMPI2C_STATE_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitialize the FMPI2C peripheral.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_DeInit</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the FMPI2C handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>hfmpi2c</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the FMPI2C Peripheral Clock */</comment>
  <expr_stmt><expr><call><name>__HAL_FMPI2C_DISABLE</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_FMPI2C_MspDeInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MspDeInit  */</comment>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* DeInit the low level hardware: GPIO, CLOCK, NVIC */</comment>
  <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* DeInit the low level hardware: GPIO, CLOCK, NVIC */</comment>
  <expr_stmt><expr><call><name>HAL_FMPI2C_MspDeInit</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>

  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_RESET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>PreviousState</name></name> <operator>=</operator> <name>FMPI2C_STATE_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Initialize the FMPI2C MSP.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_FMPI2C_MspInit</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_MspInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DeInitialize the FMPI2C MSP.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_FMPI2C_MspDeInit</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_MspDeInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User FMPI2C Callback
  *         To be used instead of the weak predefined callback
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  CallbackID ID of the callback to be registered
  *         This parameter can be one of the following values:
  *          @arg @ref HAL_FMPI2C_MASTER_TX_COMPLETE_CB_ID Master Tx Transfer completed callback ID
  *          @arg @ref HAL_FMPI2C_MASTER_RX_COMPLETE_CB_ID Master Rx Transfer completed callback ID
  *          @arg @ref HAL_FMPI2C_SLAVE_TX_COMPLETE_CB_ID Slave Tx Transfer completed callback ID
  *          @arg @ref HAL_FMPI2C_SLAVE_RX_COMPLETE_CB_ID Slave Rx Transfer completed callback ID
  *          @arg @ref HAL_FMPI2C_LISTEN_COMPLETE_CB_ID Listen Complete callback ID
  *          @arg @ref HAL_FMPI2C_MEM_TX_COMPLETE_CB_ID Memory Tx Transfer callback ID
  *          @arg @ref HAL_FMPI2C_MEM_RX_COMPLETE_CB_ID Memory Rx Transfer completed callback ID
  *          @arg @ref HAL_FMPI2C_ERROR_CB_ID Error callback ID
  *          @arg @ref HAL_FMPI2C_ABORT_CB_ID Abort callback ID
  *          @arg @ref HAL_FMPI2C_MSPINIT_CB_ID MspInit callback ID
  *          @arg @ref HAL_FMPI2C_MSPDEINIT_CB_ID MspDeInit callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>HAL_FMPI2C_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>, <parameter><decl><type><name>pFMPI2C_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>HAL_FMPI2C_STATE_READY</name> <operator>==</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_FMPI2C_MASTER_TX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MasterTxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_MASTER_RX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MasterRxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_SLAVE_TX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>SlaveTxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_SLAVE_RX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>SlaveRxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_LISTEN_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ListenCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_MEM_TX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MemTxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_MEM_RX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MemRxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_ERROR_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_ABORT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>HAL_FMPI2C_STATE_RESET</name> <operator>==</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_FMPI2C_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister an FMPI2C Callback
  *         FMPI2C callback is redirected to the weak predefined callback
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  CallbackID ID of the callback to be unregistered
  *         This parameter can be one of the following values:
  *         This parameter can be one of the following values:
  *          @arg @ref HAL_FMPI2C_MASTER_TX_COMPLETE_CB_ID Master Tx Transfer completed callback ID
  *          @arg @ref HAL_FMPI2C_MASTER_RX_COMPLETE_CB_ID Master Rx Transfer completed callback ID
  *          @arg @ref HAL_FMPI2C_SLAVE_TX_COMPLETE_CB_ID Slave Tx Transfer completed callback ID
  *          @arg @ref HAL_FMPI2C_SLAVE_RX_COMPLETE_CB_ID Slave Rx Transfer completed callback ID
  *          @arg @ref HAL_FMPI2C_LISTEN_COMPLETE_CB_ID Listen Complete callback ID
  *          @arg @ref HAL_FMPI2C_MEM_TX_COMPLETE_CB_ID Memory Tx Transfer callback ID
  *          @arg @ref HAL_FMPI2C_MEM_RX_COMPLETE_CB_ID Memory Rx Transfer completed callback ID
  *          @arg @ref HAL_FMPI2C_ERROR_CB_ID Error callback ID
  *          @arg @ref HAL_FMPI2C_ABORT_CB_ID Abort callback ID
  *          @arg @ref HAL_FMPI2C_MSPINIT_CB_ID MspInit callback ID
  *          @arg @ref HAL_FMPI2C_MSPDEINIT_CB_ID MspDeInit callback ID
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>HAL_FMPI2C_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>HAL_FMPI2C_STATE_READY</name> <operator>==</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_FMPI2C_MASTER_TX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MasterTxCpltCallback</name></name> <operator>=</operator> <name>HAL_FMPI2C_MasterTxCpltCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MasterTxCpltCallback */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_MASTER_RX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MasterRxCpltCallback</name></name> <operator>=</operator> <name>HAL_FMPI2C_MasterRxCpltCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MasterRxCpltCallback */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_SLAVE_TX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>SlaveTxCpltCallback</name></name> <operator>=</operator> <name>HAL_FMPI2C_SlaveTxCpltCallback</name></expr>;</expr_stmt>   <comment type="block">/* Legacy weak SlaveTxCpltCallback  */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_SLAVE_RX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>SlaveRxCpltCallback</name></name> <operator>=</operator> <name>HAL_FMPI2C_SlaveRxCpltCallback</name></expr>;</expr_stmt>   <comment type="block">/* Legacy weak SlaveRxCpltCallback  */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_LISTEN_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ListenCpltCallback</name></name> <operator>=</operator> <name>HAL_FMPI2C_ListenCpltCallback</name></expr>;</expr_stmt>     <comment type="block">/* Legacy weak ListenCpltCallback   */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_MEM_TX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MemTxCpltCallback</name></name> <operator>=</operator> <name>HAL_FMPI2C_MemTxCpltCallback</name></expr>;</expr_stmt>       <comment type="block">/* Legacy weak MemTxCpltCallback    */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_MEM_RX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MemRxCpltCallback</name></name> <operator>=</operator> <name>HAL_FMPI2C_MemRxCpltCallback</name></expr>;</expr_stmt>       <comment type="block">/* Legacy weak MemRxCpltCallback    */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_ERROR_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>HAL_FMPI2C_ErrorCallback</name></expr>;</expr_stmt>               <comment type="block">/* Legacy weak ErrorCallback        */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_ABORT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name> <operator>=</operator> <name>HAL_FMPI2C_AbortCpltCallback</name></expr>;</expr_stmt>       <comment type="block">/* Legacy weak AbortCpltCallback    */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_FMPI2C_MspInit</name></expr>;</expr_stmt>                   <comment type="block">/* Legacy weak MspInit              */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_FMPI2C_MspDeInit</name></expr>;</expr_stmt>               <comment type="block">/* Legacy weak MspDeInit            */</comment>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>HAL_FMPI2C_STATE_RESET</name> <operator>==</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_FMPI2C_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_FMPI2C_MspInit</name></expr>;</expr_stmt>                   <comment type="block">/* Legacy weak MspInit              */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_FMPI2C_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_FMPI2C_MspDeInit</name></expr>;</expr_stmt>               <comment type="block">/* Legacy weak MspDeInit            */</comment>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Register the Slave Address Match FMPI2C Callback
  *         To be used instead of the weak HAL_FMPI2C_AddrCallback() predefined callback
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  pCallback pointer to the Address Match Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_RegisterAddrCallback</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>pFMPI2C_AddrCallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>HAL_FMPI2C_STATE_READY</name> <operator>==</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>AddrCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  UnRegister the Slave Address Match FMPI2C Callback
  *         Info Ready FMPI2C Callback is redirected to the weak HAL_FMPI2C_AddrCallback() predefined callback
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_UnRegisterAddrCallback</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>HAL_FMPI2C_STATE_READY</name> <operator>==</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>AddrCallback</name></name> <operator>=</operator> <name>HAL_FMPI2C_AddrCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak AddrCallback  */</comment>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup FMPI2C_Exported_Functions_Group2 Input and Output operation functions
 *  @brief   Data transfers functions
 *
@verbatim
 ===============================================================================
                      ##### IO operation functions #####
 ===============================================================================
    [..]
    This subsection provides a set of functions allowing to manage the FMPI2C data
    transfers.

    (#) There are two modes of transfer:
       (++) Blocking mode : The communication is performed in the polling mode.
            The status of all data processing is returned by the same function
            after finishing transfer.
       (++) No-Blocking mode : The communication is performed using Interrupts
            or DMA. These functions return the status of the transfer startup.
            The end of the data processing will be indicated through the
            dedicated FMPI2C IRQ when using Interrupt mode or the DMA IRQ when
            using DMA mode.

    (#) Blocking mode functions are :
        (++) HAL_FMPI2C_Master_Transmit()
        (++) HAL_FMPI2C_Master_Receive()
        (++) HAL_FMPI2C_Slave_Transmit()
        (++) HAL_FMPI2C_Slave_Receive()
        (++) HAL_FMPI2C_Mem_Write()
        (++) HAL_FMPI2C_Mem_Read()
        (++) HAL_FMPI2C_IsDeviceReady()

    (#) No-Blocking mode functions with Interrupt are :
        (++) HAL_FMPI2C_Master_Transmit_IT()
        (++) HAL_FMPI2C_Master_Receive_IT()
        (++) HAL_FMPI2C_Slave_Transmit_IT()
        (++) HAL_FMPI2C_Slave_Receive_IT()
        (++) HAL_FMPI2C_Mem_Write_IT()
        (++) HAL_FMPI2C_Mem_Read_IT()
        (++) HAL_FMPI2C_Master_Seq_Transmit_IT()
        (++) HAL_FMPI2C_Master_Seq_Receive_IT()
        (++) HAL_FMPI2C_Slave_Seq_Transmit_IT()
        (++) HAL_FMPI2C_Slave_Seq_Receive_IT()
        (++) HAL_FMPI2C_EnableListen_IT()
        (++) HAL_FMPI2C_DisableListen_IT()
        (++) HAL_FMPI2C_Master_Abort_IT()

    (#) No-Blocking mode functions with DMA are :
        (++) HAL_FMPI2C_Master_Transmit_DMA()
        (++) HAL_FMPI2C_Master_Receive_DMA()
        (++) HAL_FMPI2C_Slave_Transmit_DMA()
        (++) HAL_FMPI2C_Slave_Receive_DMA()
        (++) HAL_FMPI2C_Mem_Write_DMA()
        (++) HAL_FMPI2C_Mem_Read_DMA()
        (++) HAL_FMPI2C_Master_Seq_Transmit_DMA()
        (++) HAL_FMPI2C_Master_Seq_Receive_DMA()
        (++) HAL_FMPI2C_Slave_Seq_Transmit_DMA()
        (++) HAL_FMPI2C_Slave_Seq_Receive_DMA()

    (#) A set of Transfer Complete Callbacks are provided in non Blocking mode:
        (++) HAL_FMPI2C_MasterTxCpltCallback()
        (++) HAL_FMPI2C_MasterRxCpltCallback()
        (++) HAL_FMPI2C_SlaveTxCpltCallback()
        (++) HAL_FMPI2C_SlaveRxCpltCallback()
        (++) HAL_FMPI2C_MemTxCpltCallback()
        (++) HAL_FMPI2C_MemRxCpltCallback()
        (++) HAL_FMPI2C_AddrCallback()
        (++) HAL_FMPI2C_ListenCpltCallback()
        (++) HAL_FMPI2C_ErrorCallback()
        (++) HAL_FMPI2C_AbortCpltCallback()

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Transmits in master mode an amount of data in blocking mode.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Master_Transmit</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Init tickstart for timeout management*/</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_BUSY</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>FMPI2C_TIMEOUT_BUSY</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_TX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_MASTER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>  <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>   <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Send Slave Address */</comment>
    <comment type="block">/* Set NBYTES to write and reload if hfmpi2c-&gt;XferCount &gt; MAX_NBYTE_SIZE and generate RESTART */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_RELOAD_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_GENERATE_START_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_AUTOEND_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_GENERATE_START_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <while>while <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Wait until TXIS flag is set */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnTXISFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* Write data to TXDR */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name> <operator>=</operator> <operator>*</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name></expr>;</expr_stmt>

      <comment type="block">/* Increment Buffer pointer */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name><operator>--</operator></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Wait until TCR flag is set */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_TCR</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_RELOAD_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_NO_STARTSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_AUTOEND_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_NO_STARTSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */</comment>
    <comment type="block">/* Wait until STOPF flag is set */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnSTOPFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Clear STOP Flag */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear Configuration Register 2 */</comment>
    <expr_stmt><expr><call><name>FMPI2C_RESET_CR2</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>  <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receives in master mode an amount of data in blocking mode.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Master_Receive</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Init tickstart for timeout management*/</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_BUSY</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>FMPI2C_TIMEOUT_BUSY</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_RX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_MASTER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>  <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>   <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Send Slave Address */</comment>
    <comment type="block">/* Set NBYTES to write and reload if hfmpi2c-&gt;XferCount &gt; MAX_NBYTE_SIZE and generate RESTART */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_RELOAD_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_GENERATE_START_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_AUTOEND_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_GENERATE_START_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <while>while <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Wait until RXNE flag is set */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnRXNEFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Read data from RXDR */</comment>
      <expr_stmt><expr><operator>*</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>RXDR</name></name></expr>;</expr_stmt>

      <comment type="block">/* Increment Buffer pointer */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Wait until TCR flag is set */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_TCR</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_RELOAD_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_NO_STARTSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_AUTOEND_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_NO_STARTSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */</comment>
    <comment type="block">/* Wait until STOPF flag is set */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnSTOPFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Clear STOP Flag */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear Configuration Register 2 */</comment>
    <expr_stmt><expr><call><name>FMPI2C_RESET_CR2</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>  <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Transmits in slave mode an amount of data in blocking mode.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Slave_Transmit</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Init tickstart for timeout management*/</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_TX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_SLAVE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>  <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>   <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Enable Address Acknowledge */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>

    <comment type="block">/* Wait until ADDR flag is set */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_ADDR</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable Address Acknowledge */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Clear ADDR flag */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If 10bit addressing mode is selected */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AddressingMode</name></name> <operator>==</operator> <name>FMPI2C_ADDRESSINGMODE_10BIT</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Wait until ADDR flag is set */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_ADDR</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Disable Address Acknowledge */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Clear ADDR flag */</comment>
      <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Wait until DIR flag is set Transmitter mode */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_DIR</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable Address Acknowledge */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Wait until TXIS flag is set */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnTXISFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Disable Address Acknowledge */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Write data to TXDR */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name> <operator>=</operator> <operator>*</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name></expr>;</expr_stmt>

      <comment type="block">/* Increment Buffer pointer */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Wait until STOP flag is set */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnSTOPFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable Address Acknowledge */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>==</operator> <name>HAL_FMPI2C_ERROR_AF</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Normal use case for Transmitter mode */</comment>
        <comment type="block">/* A NACK is generated to confirm the end of transfer */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Clear STOP flag */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait until BUSY flag is reset */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_BUSY</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable Address Acknowledge */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Disable Address Acknowledge */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>  <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receive in slave mode an amount of data in blocking mode
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Slave_Receive</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Init tickstart for timeout management*/</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_RX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_SLAVE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>  <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>   <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Enable Address Acknowledge */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>

    <comment type="block">/* Wait until ADDR flag is set */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_ADDR</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable Address Acknowledge */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Clear ADDR flag */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait until DIR flag is reset Receiver mode */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_DIR</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable Address Acknowledge */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Wait until RXNE flag is set */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnRXNEFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Disable Address Acknowledge */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>

        <comment type="block">/* Store Last receive data if any */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_RXNE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Read data from RXDR */</comment>
          <expr_stmt><expr><operator>*</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>RXDR</name></name></expr>;</expr_stmt>

          <comment type="block">/* Increment Buffer pointer */</comment>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Read data from RXDR */</comment>
      <expr_stmt><expr><operator>*</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>RXDR</name></name></expr>;</expr_stmt>

      <comment type="block">/* Increment Buffer pointer */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Wait until STOP flag is set */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnSTOPFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable Address Acknowledge */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Clear STOP flag */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait until BUSY flag is reset */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_BUSY</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable Address Acknowledge */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Disable Address Acknowledge */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>  <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Transmit in master mode an amount of data in non-blocking mode with Interrupt
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Master_Transmit_IT</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>xfermode</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_BUSY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_BUSY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>       <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_TX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>        <operator>=</operator> <name>HAL_FMPI2C_MODE_MASTER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name>   <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Master_ISR_IT</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_RELOAD_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_AUTOEND_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Send Slave Address */</comment>
    <comment type="block">/* Set NBYTES to write and reload if hfmpi2c-&gt;XferCount &gt; MAX_NBYTE_SIZE */</comment>
    <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>xfermode</name></expr></argument>, <argument><expr><name>FMPI2C_GENERATE_START_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
              to avoid the risk of FMPI2C interrupt handle execution before current
              process unlock */</comment>

    <comment type="block">/* Enable ERR, TC, STOP, NACK, TXI interrupt */</comment>
    <comment type="block">/* possible to enable all of these */</comment>
    <comment type="block">/* FMPI2C_IT_ERRI | FMPI2C_IT_TCI| FMPI2C_IT_STOPI| FMPI2C_IT_NACKI | FMPI2C_IT_ADDRI | FMPI2C_IT_RXI | FMPI2C_IT_TXI */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_TX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receive in master mode an amount of data in non-blocking mode with Interrupt
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Master_Receive_IT</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>xfermode</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_BUSY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_BUSY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>       <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_RX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>        <operator>=</operator> <name>HAL_FMPI2C_MODE_MASTER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name>   <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Master_ISR_IT</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_RELOAD_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_AUTOEND_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Send Slave Address */</comment>
    <comment type="block">/* Set NBYTES to write and reload if hfmpi2c-&gt;XferCount &gt; MAX_NBYTE_SIZE */</comment>
    <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>xfermode</name></expr></argument>, <argument><expr><name>FMPI2C_GENERATE_START_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
              to avoid the risk of FMPI2C interrupt handle execution before current
              process unlock */</comment>

    <comment type="block">/* Enable ERR, TC, STOP, NACK, RXI interrupt */</comment>
    <comment type="block">/* possible to enable all of these */</comment>
    <comment type="block">/* FMPI2C_IT_ERRI | FMPI2C_IT_TCI| FMPI2C_IT_STOPI| FMPI2C_IT_NACKI | FMPI2C_IT_ADDRI | FMPI2C_IT_RXI | FMPI2C_IT_TXI */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_RX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Transmit in slave mode an amount of data in non-blocking mode with Interrupt
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Slave_Transmit_IT</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>       <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_TX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>        <operator>=</operator> <name>HAL_FMPI2C_MODE_SLAVE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name>   <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Enable Address Acknowledge */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name>    <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Slave_ISR_IT</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
              to avoid the risk of FMPI2C interrupt handle execution before current
              process unlock */</comment>

    <comment type="block">/* Enable ERR, TC, STOP, NACK, TXI interrupt */</comment>
    <comment type="block">/* possible to enable all of these */</comment>
    <comment type="block">/* FMPI2C_IT_ERRI | FMPI2C_IT_TCI| FMPI2C_IT_STOPI| FMPI2C_IT_NACKI | FMPI2C_IT_ADDRI | FMPI2C_IT_RXI | FMPI2C_IT_TXI */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_TX_IT</name> <operator>|</operator> <name>FMPI2C_XFER_LISTEN_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receive in slave mode an amount of data in non-blocking mode with Interrupt
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Slave_Receive_IT</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>       <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_RX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>        <operator>=</operator> <name>HAL_FMPI2C_MODE_SLAVE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name>   <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Enable Address Acknowledge */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name>    <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Slave_ISR_IT</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
              to avoid the risk of FMPI2C interrupt handle execution before current
              process unlock */</comment>

    <comment type="block">/* Enable ERR, TC, STOP, NACK, RXI interrupt */</comment>
    <comment type="block">/* possible to enable all of these */</comment>
    <comment type="block">/* FMPI2C_IT_ERRI | FMPI2C_IT_TCI| FMPI2C_IT_STOPI| FMPI2C_IT_NACKI | FMPI2C_IT_ADDRI | FMPI2C_IT_RXI | FMPI2C_IT_TXI */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_RX_IT</name> <operator>|</operator> <name>FMPI2C_XFER_LISTEN_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Transmit in master mode an amount of data in non-blocking mode with DMA
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Master_Transmit_DMA</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>xfermode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>dmaxferstatus</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_BUSY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_BUSY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>       <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_TX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>        <operator>=</operator> <name>HAL_FMPI2C_MODE_MASTER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name>   <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Master_ISR_DMA</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_RELOAD_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_AUTOEND_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Set the FMPI2C DMA transfer complete callback */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAMasterTransmitCplt</name></expr>;</expr_stmt>

        <comment type="block">/* Set the DMA error callback */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAError</name></expr>;</expr_stmt>

        <comment type="block">/* Set the unused DMA callbacks to NULL */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <comment type="block">/* Enable the DMA stream */</comment>
        <expr_stmt><expr><name>dmaxferstatus</name> <operator>=</operator> <call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name></expr></argument>, <argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Update FMPI2C state */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

        <comment type="block">/* Update FMPI2C error code */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA_PARAM</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>dmaxferstatus</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Send Slave Address */</comment>
        <comment type="block">/* Set NBYTES to write and reload if hfmpi2c-&gt;XferCount &gt; MAX_NBYTE_SIZE and generate RESTART */</comment>
        <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>xfermode</name></expr></argument>, <argument><expr><name>FMPI2C_GENERATE_START_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Update XferCount value */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>-=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
                  to avoid the risk of FMPI2C interrupt handle execution before current
                  process unlock */</comment>
        <comment type="block">/* Enable ERR and NACK interrupts */</comment>
        <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_ERROR_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Enable DMA Request */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <name>FMPI2C_CR1_TXDMAEN</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Update FMPI2C state */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

        <comment type="block">/* Update FMPI2C error code */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Update Transfer ISR function pointer */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name> <operator>=</operator> <name>FMPI2C_Master_ISR_IT</name></expr>;</expr_stmt>

      <comment type="block">/* Send Slave Address */</comment>
      <comment type="block">/* Set NBYTES to write and generate START condition */</comment>
      <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_AUTOEND_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_GENERATE_START_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
                to avoid the risk of FMPI2C interrupt handle execution before current
                process unlock */</comment>
      <comment type="block">/* Enable ERR, TC, STOP, NACK, TXI interrupt */</comment>
      <comment type="block">/* possible to enable all of these */</comment>
      <comment type="block">/* FMPI2C_IT_ERRI | FMPI2C_IT_TCI| FMPI2C_IT_STOPI| FMPI2C_IT_NACKI | FMPI2C_IT_ADDRI | FMPI2C_IT_RXI | FMPI2C_IT_TXI */</comment>
      <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_TX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receive in master mode an amount of data in non-blocking mode with DMA
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Master_Receive_DMA</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>xfermode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>dmaxferstatus</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_BUSY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_BUSY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>       <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_RX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>        <operator>=</operator> <name>HAL_FMPI2C_MODE_MASTER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name>   <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Master_ISR_DMA</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_RELOAD_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_AUTOEND_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Set the FMPI2C DMA transfer complete callback */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAMasterReceiveCplt</name></expr>;</expr_stmt>

        <comment type="block">/* Set the DMA error callback */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAError</name></expr>;</expr_stmt>

        <comment type="block">/* Set the unused DMA callbacks to NULL */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <comment type="block">/* Enable the DMA stream */</comment>
        <expr_stmt><expr><name>dmaxferstatus</name> <operator>=</operator> <call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>RXDR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Update FMPI2C state */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

        <comment type="block">/* Update FMPI2C error code */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA_PARAM</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>dmaxferstatus</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Send Slave Address */</comment>
        <comment type="block">/* Set NBYTES to read and reload if hfmpi2c-&gt;XferCount &gt; MAX_NBYTE_SIZE and generate RESTART */</comment>
        <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>xfermode</name></expr></argument>, <argument><expr><name>FMPI2C_GENERATE_START_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Update XferCount value */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>-=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
                  to avoid the risk of FMPI2C interrupt handle execution before current
                  process unlock */</comment>
        <comment type="block">/* Enable ERR and NACK interrupts */</comment>
        <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_ERROR_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Enable DMA Request */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <name>FMPI2C_CR1_RXDMAEN</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Update FMPI2C state */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

        <comment type="block">/* Update FMPI2C error code */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Update Transfer ISR function pointer */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name> <operator>=</operator> <name>FMPI2C_Master_ISR_IT</name></expr>;</expr_stmt>

      <comment type="block">/* Send Slave Address */</comment>
      <comment type="block">/* Set NBYTES to read and generate START condition */</comment>
      <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_AUTOEND_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_GENERATE_START_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
                to avoid the risk of FMPI2C interrupt handle execution before current
                process unlock */</comment>
      <comment type="block">/* Enable ERR, TC, STOP, NACK, TXI interrupt */</comment>
      <comment type="block">/* possible to enable all of these */</comment>
      <comment type="block">/* FMPI2C_IT_ERRI | FMPI2C_IT_TCI| FMPI2C_IT_STOPI| FMPI2C_IT_NACKI | FMPI2C_IT_ADDRI | FMPI2C_IT_RXI | FMPI2C_IT_TXI */</comment>
      <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_TX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Transmit in slave mode an amount of data in non-blocking mode with DMA
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Slave_Transmit_DMA</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>dmaxferstatus</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>       <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_TX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>        <operator>=</operator> <name>HAL_FMPI2C_MODE_SLAVE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name>   <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name>    <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Slave_ISR_DMA</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the FMPI2C DMA transfer complete callback */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>FMPI2C_DMASlaveTransmitCplt</name></expr>;</expr_stmt>

      <comment type="block">/* Set the DMA error callback */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAError</name></expr>;</expr_stmt>

      <comment type="block">/* Set the unused DMA callbacks to NULL */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <comment type="block">/* Enable the DMA stream */</comment>
      <expr_stmt><expr><name>dmaxferstatus</name> <operator>=</operator> <call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name></expr></argument>, <argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Update FMPI2C state */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_LISTEN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

      <comment type="block">/* Update FMPI2C error code */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA_PARAM</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dmaxferstatus</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable Address Acknowledge */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
                to avoid the risk of FMPI2C interrupt handle execution before current
                process unlock */</comment>
      <comment type="block">/* Enable ERR, STOP, NACK, ADDR interrupts */</comment>
      <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_LISTEN_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Enable DMA Request */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <name>FMPI2C_CR1_TXDMAEN</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Update FMPI2C state */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_LISTEN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

      <comment type="block">/* Update FMPI2C error code */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receive in slave mode an amount of data in non-blocking mode with DMA
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Slave_Receive_DMA</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>dmaxferstatus</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>       <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_RX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>        <operator>=</operator> <name>HAL_FMPI2C_MODE_SLAVE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name>   <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name>    <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Slave_ISR_DMA</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the FMPI2C DMA transfer complete callback */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>FMPI2C_DMASlaveReceiveCplt</name></expr>;</expr_stmt>

      <comment type="block">/* Set the DMA error callback */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAError</name></expr>;</expr_stmt>

      <comment type="block">/* Set the unused DMA callbacks to NULL */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <comment type="block">/* Enable the DMA stream */</comment>
      <expr_stmt><expr><name>dmaxferstatus</name> <operator>=</operator> <call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>RXDR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Update FMPI2C state */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_LISTEN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

      <comment type="block">/* Update FMPI2C error code */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA_PARAM</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dmaxferstatus</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable Address Acknowledge */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
                to avoid the risk of FMPI2C interrupt handle execution before current
                process unlock */</comment>
      <comment type="block">/* Enable ERR, STOP, NACK, ADDR interrupts */</comment>
      <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_LISTEN_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Enable DMA Request */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <name>FMPI2C_CR1_RXDMAEN</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Update FMPI2C state */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_LISTEN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

      <comment type="block">/* Update FMPI2C error code */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @brief  Write an amount of data in blocking mode to a specific memory address
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  MemAddress Internal memory address
  * @param  MemAddSize Size of internal memory address
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Mem_Write</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddSize</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_MEMADD_SIZE</name><argument_list>(<argument><expr><name>MemAddSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Init tickstart for timeout management*/</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_BUSY</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>FMPI2C_TIMEOUT_BUSY</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_TX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_MEM</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>  <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>   <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Send Slave Address and Memory Address */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_RequestMemoryWrite</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><name>MemAddress</name></expr></argument>, <argument><expr><name>MemAddSize</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Set NBYTES to write and reload if hfmpi2c-&gt;XferCount &gt; MAX_NBYTE_SIZE */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_RELOAD_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_NO_STARTSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_AUTOEND_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_NO_STARTSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <do>do
    <block>{<block_content>
      <comment type="block">/* Wait until TXIS flag is set */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnTXISFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Write data to TXDR */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name> <operator>=</operator> <operator>*</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name></expr>;</expr_stmt>

      <comment type="block">/* Increment Buffer pointer */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name><operator>--</operator></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Wait until TCR flag is set */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_TCR</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_RELOAD_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_NO_STARTSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_AUTOEND_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_NO_STARTSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

    </block_content>}</block>
    while <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>;</do>

    <comment type="block">/* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */</comment>
    <comment type="block">/* Wait until STOPF flag is reset */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnSTOPFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Clear STOP Flag */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear Configuration Register 2 */</comment>
    <expr_stmt><expr><call><name>FMPI2C_RESET_CR2</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>  <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Read an amount of data in blocking mode from a specific memory address
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  MemAddress Internal memory address
  * @param  MemAddSize Size of internal memory address
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Mem_Read</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddSize</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_MEMADD_SIZE</name><argument_list>(<argument><expr><name>MemAddSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Init tickstart for timeout management*/</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_BUSY</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>FMPI2C_TIMEOUT_BUSY</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_RX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_MEM</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>  <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>   <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Send Slave Address and Memory Address */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_RequestMemoryRead</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><name>MemAddress</name></expr></argument>, <argument><expr><name>MemAddSize</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Send Slave Address */</comment>
    <comment type="block">/* Set NBYTES to write and reload if hfmpi2c-&gt;XferCount &gt; MAX_NBYTE_SIZE and generate RESTART */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_RELOAD_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_GENERATE_START_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_AUTOEND_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_GENERATE_START_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <do>do
    <block>{<block_content>
      <comment type="block">/* Wait until RXNE flag is set */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_RXNE</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Read data from RXDR */</comment>
      <expr_stmt><expr><operator>*</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>RXDR</name></name></expr>;</expr_stmt>

      <comment type="block">/* Increment Buffer pointer */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Wait until TCR flag is set */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_TCR</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_RELOAD_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_NO_STARTSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_AUTOEND_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_NO_STARTSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    while <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>;</do>

    <comment type="block">/* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */</comment>
    <comment type="block">/* Wait until STOPF flag is reset */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnSTOPFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Clear STOP Flag */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear Configuration Register 2 */</comment>
    <expr_stmt><expr><call><name>FMPI2C_RESET_CR2</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>  <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @brief  Write an amount of data in non-blocking mode with Interrupt to a specific memory address
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  MemAddress Internal memory address
  * @param  MemAddSize Size of internal memory address
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Mem_Write_IT</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddSize</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>xfermode</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_MEMADD_SIZE</name><argument_list>(<argument><expr><name>MemAddSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_BUSY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_BUSY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Init tickstart for timeout management*/</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>       <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_TX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>        <operator>=</operator> <name>HAL_FMPI2C_MODE_MEM</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name>   <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Master_ISR_IT</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_RELOAD_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_AUTOEND_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Send Slave Address and Memory Address */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_RequestMemoryWrite</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><name>MemAddress</name></expr></argument>, <argument><expr><name>MemAddSize</name></expr></argument>, <argument><expr><name>FMPI2C_TIMEOUT_FLAG</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Set NBYTES to write and reload if hfmpi2c-&gt;XferCount &gt; MAX_NBYTE_SIZE and generate RESTART */</comment>
    <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>xfermode</name></expr></argument>, <argument><expr><name>FMPI2C_NO_STARTSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
              to avoid the risk of FMPI2C interrupt handle execution before current
              process unlock */</comment>

    <comment type="block">/* Enable ERR, TC, STOP, NACK, TXI interrupt */</comment>
    <comment type="block">/* possible to enable all of these */</comment>
    <comment type="block">/* FMPI2C_IT_ERRI | FMPI2C_IT_TCI| FMPI2C_IT_STOPI| FMPI2C_IT_NACKI | FMPI2C_IT_ADDRI | FMPI2C_IT_RXI | FMPI2C_IT_TXI */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_TX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Read an amount of data in non-blocking mode with Interrupt from a specific memory address
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  MemAddress Internal memory address
  * @param  MemAddSize Size of internal memory address
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Mem_Read_IT</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddSize</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>xfermode</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_MEMADD_SIZE</name><argument_list>(<argument><expr><name>MemAddSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_BUSY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_BUSY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Init tickstart for timeout management*/</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>       <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_RX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>        <operator>=</operator> <name>HAL_FMPI2C_MODE_MEM</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name>   <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Master_ISR_IT</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_RELOAD_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_AUTOEND_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Send Slave Address and Memory Address */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_RequestMemoryRead</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><name>MemAddress</name></expr></argument>, <argument><expr><name>MemAddSize</name></expr></argument>, <argument><expr><name>FMPI2C_TIMEOUT_FLAG</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Set NBYTES to write and reload if hfmpi2c-&gt;XferCount &gt; MAX_NBYTE_SIZE and generate RESTART */</comment>
    <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>xfermode</name></expr></argument>, <argument><expr><name>FMPI2C_GENERATE_START_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
              to avoid the risk of FMPI2C interrupt handle execution before current
              process unlock */</comment>

    <comment type="block">/* Enable ERR, TC, STOP, NACK, RXI interrupt */</comment>
    <comment type="block">/* possible to enable all of these */</comment>
    <comment type="block">/* FMPI2C_IT_ERRI | FMPI2C_IT_TCI| FMPI2C_IT_STOPI| FMPI2C_IT_NACKI | FMPI2C_IT_ADDRI | FMPI2C_IT_RXI | FMPI2C_IT_TXI */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_RX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @brief  Write an amount of data in non-blocking mode with DMA to a specific memory address
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  MemAddress Internal memory address
  * @param  MemAddSize Size of internal memory address
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Mem_Write_DMA</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddSize</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>xfermode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>dmaxferstatus</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_MEMADD_SIZE</name><argument_list>(<argument><expr><name>MemAddSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_BUSY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_BUSY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Init tickstart for timeout management*/</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>       <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_TX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>        <operator>=</operator> <name>HAL_FMPI2C_MODE_MEM</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name>   <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Master_ISR_DMA</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_RELOAD_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_AUTOEND_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Send Slave Address and Memory Address */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_RequestMemoryWrite</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><name>MemAddress</name></expr></argument>, <argument><expr><name>MemAddSize</name></expr></argument>, <argument><expr><name>FMPI2C_TIMEOUT_FLAG</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>


    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the FMPI2C DMA transfer complete callback */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAMasterTransmitCplt</name></expr>;</expr_stmt>

      <comment type="block">/* Set the DMA error callback */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAError</name></expr>;</expr_stmt>

      <comment type="block">/* Set the unused DMA callbacks to NULL */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <comment type="block">/* Enable the DMA stream */</comment>
      <expr_stmt><expr><name>dmaxferstatus</name> <operator>=</operator> <call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name></expr></argument>, <argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Update FMPI2C state */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

      <comment type="block">/* Update FMPI2C error code */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA_PARAM</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dmaxferstatus</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Send Slave Address */</comment>
      <comment type="block">/* Set NBYTES to write and reload if hfmpi2c-&gt;XferCount &gt; MAX_NBYTE_SIZE and generate RESTART */</comment>
      <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>xfermode</name></expr></argument>, <argument><expr><name>FMPI2C_NO_STARTSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Update XferCount value */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>-=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
                to avoid the risk of FMPI2C interrupt handle execution before current
                process unlock */</comment>
      <comment type="block">/* Enable ERR and NACK interrupts */</comment>
      <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_ERROR_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Enable DMA Request */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <name>FMPI2C_CR1_TXDMAEN</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Update FMPI2C state */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

      <comment type="block">/* Update FMPI2C error code */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Reads an amount of data in non-blocking mode with DMA from a specific memory address.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  MemAddress Internal memory address
  * @param  MemAddSize Size of internal memory address
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Mem_Read_DMA</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddSize</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>xfermode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>dmaxferstatus</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_MEMADD_SIZE</name><argument_list>(<argument><expr><name>MemAddSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_BUSY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_BUSY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Init tickstart for timeout management*/</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>       <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_RX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>        <operator>=</operator> <name>HAL_FMPI2C_MODE_MEM</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name>   <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Master_ISR_DMA</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_RELOAD_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_AUTOEND_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Send Slave Address and Memory Address */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_RequestMemoryRead</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><name>MemAddress</name></expr></argument>, <argument><expr><name>MemAddSize</name></expr></argument>, <argument><expr><name>FMPI2C_TIMEOUT_FLAG</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the FMPI2C DMA transfer complete callback */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAMasterReceiveCplt</name></expr>;</expr_stmt>

      <comment type="block">/* Set the DMA error callback */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAError</name></expr>;</expr_stmt>

      <comment type="block">/* Set the unused DMA callbacks to NULL */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <comment type="block">/* Enable the DMA stream */</comment>
      <expr_stmt><expr><name>dmaxferstatus</name> <operator>=</operator> <call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>RXDR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Update FMPI2C state */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

      <comment type="block">/* Update FMPI2C error code */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA_PARAM</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dmaxferstatus</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set NBYTES to write and reload if hfmpi2c-&gt;XferCount &gt; MAX_NBYTE_SIZE and generate RESTART */</comment>
      <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>xfermode</name></expr></argument>, <argument><expr><name>FMPI2C_GENERATE_START_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Update XferCount value */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>-=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
                to avoid the risk of FMPI2C interrupt handle execution before current
                process unlock */</comment>
      <comment type="block">/* Enable ERR and NACK interrupts */</comment>
      <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_ERROR_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Enable DMA Request */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <name>FMPI2C_CR1_RXDMAEN</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Update FMPI2C state */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

      <comment type="block">/* Update FMPI2C error code */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Checks if target device is ready for communication.
  * @note   This function is used with Memory devices
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_IsDeviceReady</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Trials</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>FMPI2C_Trials</name> <init>= <expr><literal type="number">0UL</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>FlagStatus</name></type> <name>tmp1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FlagStatus</name></type> <name>tmp2</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_BUSY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_BUSY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <do>do
    <block>{<block_content>
      <comment type="block">/* Generate Start */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>=</operator> <call><name>FMPI2C_GENERATE_START</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AddressingMode</name></name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */</comment>
      <comment type="block">/* Wait until STOPF flag is set or a NACK flag is set*/</comment>
      <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><operator>(</operator><name>tmp1</name> <operator>==</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tmp2</name> <operator>==</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Update FMPI2C state */</comment>
            <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>

            <comment type="block">/* Update FMPI2C error code */</comment>
            <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_TIMEOUT</name></expr>;</expr_stmt>

            <comment type="block">/* Process Unlocked */</comment>
            <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>HAL_ERROR</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>

      <comment type="block">/* Check if the NACKF flag has not been set */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Wait until STOPF flag is reset */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Clear STOP Flag */</comment>
        <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Device is ready */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_OK</name></expr>;</return>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Wait until STOPF flag is reset */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Clear NACK Flag */</comment>
        <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Clear STOP Flag, auto generated with autoend*/</comment>
        <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <comment type="block">/* Check if the maximum allowed number of trials has been reached */</comment>
      <if_stmt><if>if <condition>(<expr><name>FMPI2C_Trials</name> <operator>==</operator> <name>Trials</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Generate Stop */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>FMPI2C_CR2_STOP</name></expr>;</expr_stmt>

        <comment type="block">/* Wait until STOPF flag is reset */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
        <block>{<block_content>
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Clear STOP Flag */</comment>
        <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Increment Trials */</comment>
      <expr_stmt><expr><name>FMPI2C_Trials</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block>
    while <condition>(<expr><name>FMPI2C_Trials</name> <operator>&lt;</operator> <name>Trials</name></expr>)</condition>;</do>

    <comment type="block">/* Update FMPI2C state */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Update FMPI2C error code */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_TIMEOUT</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sequential transmit in master FMPI2C mode an amount of data in non-blocking mode with Interrupt.
  * @note   This interface allow to manage repeated start condition when a direction change during transfer
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref FMPI2C_XFEROPTIONS
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Master_Seq_Transmit_IT</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>XferOptions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>xfermode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>xferrequest</name> <init>= <expr><name>FMPI2C_GENERATE_START_WRITE</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_TRANSFER_OPTIONS_REQUEST</name><argument_list>(<argument><expr><name>XferOptions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_TX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_MASTER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>XferOptions</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Master_ISR_IT</name></expr>;</expr_stmt>

    <comment type="block">/* If hfmpi2c-&gt;XferCount &gt; MAX_NBYTE_SIZE, use reload mode */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_RELOAD_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */</comment>
    <comment type="block">/* Mean Previous state is same as current state */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>PreviousState</name></name> <operator>==</operator> <name>FMPI2C_STATE_MASTER_BUSY_TX</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>IS_FMPI2C_TRANSFER_OTHER_OPTIONS_REQUEST</name><argument_list>(<argument><expr><name>XferOptions</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>xferrequest</name> <operator>=</operator> <name>FMPI2C_NO_STARTSTOP</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Convert OTHER_xxx XferOptions if any */</comment>
      <expr_stmt><expr><call><name>FMPI2C_ConvertOtherXferOptions</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Update xfermode accordingly if no reload is necessary */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&lt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Send Slave Address and set NBYTES to write */</comment>
    <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>xfermode</name></expr></argument>, <argument><expr><name>xferrequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
              to avoid the risk of FMPI2C interrupt handle execution before current
              process unlock */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_TX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sequential transmit in master FMPI2C mode an amount of data in non-blocking mode with DMA.
  * @note   This interface allow to manage repeated start condition when a direction change during transfer
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref FMPI2C_XFEROPTIONS
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Master_Seq_Transmit_DMA</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>XferOptions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>xfermode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>xferrequest</name> <init>= <expr><name>FMPI2C_GENERATE_START_WRITE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>dmaxferstatus</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_TRANSFER_OPTIONS_REQUEST</name><argument_list>(<argument><expr><name>XferOptions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_TX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_MASTER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>XferOptions</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Master_ISR_DMA</name></expr>;</expr_stmt>

    <comment type="block">/* If hfmpi2c-&gt;XferCount &gt; MAX_NBYTE_SIZE, use reload mode */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_RELOAD_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */</comment>
    <comment type="block">/* Mean Previous state is same as current state */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>PreviousState</name></name> <operator>==</operator> <name>FMPI2C_STATE_MASTER_BUSY_TX</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>IS_FMPI2C_TRANSFER_OTHER_OPTIONS_REQUEST</name><argument_list>(<argument><expr><name>XferOptions</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>xferrequest</name> <operator>=</operator> <name>FMPI2C_NO_STARTSTOP</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Convert OTHER_xxx XferOptions if any */</comment>
      <expr_stmt><expr><call><name>FMPI2C_ConvertOtherXferOptions</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Update xfermode accordingly if no reload is necessary */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&lt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Set the FMPI2C DMA transfer complete callback */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAMasterTransmitCplt</name></expr>;</expr_stmt>

        <comment type="block">/* Set the DMA error callback */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAError</name></expr>;</expr_stmt>

        <comment type="block">/* Set the unused DMA callbacks to NULL */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <comment type="block">/* Enable the DMA stream */</comment>
        <expr_stmt><expr><name>dmaxferstatus</name> <operator>=</operator> <call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name></expr></argument>, <argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Update FMPI2C state */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

        <comment type="block">/* Update FMPI2C error code */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA_PARAM</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>dmaxferstatus</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Send Slave Address and set NBYTES to write */</comment>
        <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>xfermode</name></expr></argument>, <argument><expr><name>xferrequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Update XferCount value */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>-=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
                  to avoid the risk of FMPI2C interrupt handle execution before current
                  process unlock */</comment>
        <comment type="block">/* Enable ERR and NACK interrupts */</comment>
        <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_ERROR_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Enable DMA Request */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <name>FMPI2C_CR1_TXDMAEN</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Update FMPI2C state */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

        <comment type="block">/* Update FMPI2C error code */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Update Transfer ISR function pointer */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name> <operator>=</operator> <name>FMPI2C_Master_ISR_IT</name></expr>;</expr_stmt>

      <comment type="block">/* Send Slave Address */</comment>
      <comment type="block">/* Set NBYTES to write and generate START condition */</comment>
      <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_AUTOEND_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_GENERATE_START_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
                to avoid the risk of FMPI2C interrupt handle execution before current
                process unlock */</comment>
      <comment type="block">/* Enable ERR, TC, STOP, NACK, TXI interrupt */</comment>
      <comment type="block">/* possible to enable all of these */</comment>
      <comment type="block">/* FMPI2C_IT_ERRI | FMPI2C_IT_TCI| FMPI2C_IT_STOPI| FMPI2C_IT_NACKI | FMPI2C_IT_ADDRI | FMPI2C_IT_RXI | FMPI2C_IT_TXI */</comment>
      <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_TX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sequential receive in master FMPI2C mode an amount of data in non-blocking mode with Interrupt
  * @note   This interface allow to manage repeated start condition when a direction change during transfer
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref FMPI2C_XFEROPTIONS
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Master_Seq_Receive_IT</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>XferOptions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>xfermode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>xferrequest</name> <init>= <expr><name>FMPI2C_GENERATE_START_READ</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_TRANSFER_OPTIONS_REQUEST</name><argument_list>(<argument><expr><name>XferOptions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_RX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_MASTER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>XferOptions</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Master_ISR_IT</name></expr>;</expr_stmt>

    <comment type="block">/* If hfmpi2c-&gt;XferCount &gt; MAX_NBYTE_SIZE, use reload mode */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_RELOAD_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */</comment>
    <comment type="block">/* Mean Previous state is same as current state */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>PreviousState</name></name> <operator>==</operator> <name>FMPI2C_STATE_MASTER_BUSY_RX</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>IS_FMPI2C_TRANSFER_OTHER_OPTIONS_REQUEST</name><argument_list>(<argument><expr><name>XferOptions</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>xferrequest</name> <operator>=</operator> <name>FMPI2C_NO_STARTSTOP</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Convert OTHER_xxx XferOptions if any */</comment>
      <expr_stmt><expr><call><name>FMPI2C_ConvertOtherXferOptions</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Update xfermode accordingly if no reload is necessary */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&lt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Send Slave Address and set NBYTES to read */</comment>
    <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>xfermode</name></expr></argument>, <argument><expr><name>xferrequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
              to avoid the risk of FMPI2C interrupt handle execution before current
              process unlock */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_RX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sequential receive in master FMPI2C mode an amount of data in non-blocking mode with DMA
  * @note   This interface allow to manage repeated start condition when a direction change during transfer
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref FMPI2C_XFEROPTIONS
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Master_Seq_Receive_DMA</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>XferOptions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>xfermode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>xferrequest</name> <init>= <expr><name>FMPI2C_GENERATE_START_READ</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>dmaxferstatus</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_TRANSFER_OPTIONS_REQUEST</name><argument_list>(<argument><expr><name>XferOptions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_RX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_MASTER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>XferOptions</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Master_ISR_DMA</name></expr>;</expr_stmt>

    <comment type="block">/* If hfmpi2c-&gt;XferCount &gt; MAX_NBYTE_SIZE, use reload mode */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_RELOAD_MODE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */</comment>
    <comment type="block">/* Mean Previous state is same as current state */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>PreviousState</name></name> <operator>==</operator> <name>FMPI2C_STATE_MASTER_BUSY_RX</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>IS_FMPI2C_TRANSFER_OTHER_OPTIONS_REQUEST</name><argument_list>(<argument><expr><name>XferOptions</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>xferrequest</name> <operator>=</operator> <name>FMPI2C_NO_STARTSTOP</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Convert OTHER_xxx XferOptions if any */</comment>
      <expr_stmt><expr><call><name>FMPI2C_ConvertOtherXferOptions</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Update xfermode accordingly if no reload is necessary */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&lt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Set the FMPI2C DMA transfer complete callback */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAMasterReceiveCplt</name></expr>;</expr_stmt>

        <comment type="block">/* Set the DMA error callback */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAError</name></expr>;</expr_stmt>

        <comment type="block">/* Set the unused DMA callbacks to NULL */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <comment type="block">/* Enable the DMA stream */</comment>
        <expr_stmt><expr><name>dmaxferstatus</name> <operator>=</operator> <call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>RXDR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Update FMPI2C state */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

        <comment type="block">/* Update FMPI2C error code */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA_PARAM</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>dmaxferstatus</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Send Slave Address and set NBYTES to read */</comment>
        <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>xfermode</name></expr></argument>, <argument><expr><name>xferrequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Update XferCount value */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>-=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
                  to avoid the risk of FMPI2C interrupt handle execution before current
                  process unlock */</comment>
        <comment type="block">/* Enable ERR and NACK interrupts */</comment>
        <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_ERROR_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Enable DMA Request */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <name>FMPI2C_CR1_RXDMAEN</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Update FMPI2C state */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

        <comment type="block">/* Update FMPI2C error code */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Update Transfer ISR function pointer */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name> <operator>=</operator> <name>FMPI2C_Master_ISR_IT</name></expr>;</expr_stmt>

      <comment type="block">/* Send Slave Address */</comment>
      <comment type="block">/* Set NBYTES to read and generate START condition */</comment>
      <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_AUTOEND_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_GENERATE_START_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
                to avoid the risk of FMPI2C interrupt handle execution before current
                process unlock */</comment>
      <comment type="block">/* Enable ERR, TC, STOP, NACK, TXI interrupt */</comment>
      <comment type="block">/* possible to enable all of these */</comment>
      <comment type="block">/* FMPI2C_IT_ERRI | FMPI2C_IT_TCI| FMPI2C_IT_STOPI| FMPI2C_IT_NACKI | FMPI2C_IT_ADDRI | FMPI2C_IT_RXI | FMPI2C_IT_TXI */</comment>
      <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_TX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sequential transmit in slave/device FMPI2C mode an amount of data in non-blocking mode with Interrupt
  * @note   This interface allow to manage repeated start condition when a direction change during transfer
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref FMPI2C_XFEROPTIONS
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Slave_Seq_Transmit_IT</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>XferOptions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_TRANSFER_OPTIONS_REQUEST</name><argument_list>(<argument><expr><name>XferOptions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>HAL_FMPI2C_STATE_LISTEN</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>HAL_FMPI2C_STATE_LISTEN</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Disable Interrupts, to prevent preemption during treatment in case of multicall */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_LISTEN_IT</name> <operator>|</operator> <name>FMPI2C_XFER_TX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* FMPI2C cannot manage full duplex exchange so disable previous IT enabled if any */</comment>
    <comment type="block">/* and then toggle the HAL slave RX state to TX state */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_BUSY_RX_LISTEN</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable associated Interrupts */</comment>
      <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_RX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Abort DMA Xfer if any */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;</operator> <name>FMPI2C_CR1_RXDMAEN</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_CR1_RXDMAEN</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR1_RXDMAEN</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set the FMPI2C DMA Abort callback :
           will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */</comment>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAAbort</name></expr>;</expr_stmt>

          <comment type="block">/* Abort DMA RX */</comment>
          <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Call Directly XferAbortCallback function in case of error */</comment>
            <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_TX_LISTEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_SLAVE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Enable Address Acknowledge */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name>    <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>XferOptions</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Slave_ISR_IT</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_GET_DIR</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FMPI2C_DIRECTION_RECEIVE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear ADDR flag after prepare the transfer parameters */</comment>
      <comment type="block">/* This action will generate an acknowledge to the Master */</comment>
      <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
    to avoid the risk of FMPI2C interrupt handle execution before current
    process unlock */</comment>
    <comment type="block">/* REnable ADDR interrupt */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_TX_IT</name> <operator>|</operator> <name>FMPI2C_XFER_LISTEN_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sequential transmit in slave/device FMPI2C mode an amount of data in non-blocking mode with DMA
  * @note   This interface allow to manage repeated start condition when a direction change during transfer
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref FMPI2C_XFEROPTIONS
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Slave_Seq_Transmit_DMA</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>XferOptions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>dmaxferstatus</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_TRANSFER_OPTIONS_REQUEST</name><argument_list>(<argument><expr><name>XferOptions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>HAL_FMPI2C_STATE_LISTEN</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>HAL_FMPI2C_STATE_LISTEN</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Disable Interrupts, to prevent preemption during treatment in case of multicall */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_LISTEN_IT</name> <operator>|</operator> <name>FMPI2C_XFER_TX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* FMPI2C cannot manage full duplex exchange so disable previous IT enabled if any */</comment>
    <comment type="block">/* and then toggle the HAL slave RX state to TX state */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_BUSY_RX_LISTEN</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable associated Interrupts */</comment>
      <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_RX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;</operator> <name>FMPI2C_CR1_RXDMAEN</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_CR1_RXDMAEN</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Abort DMA Xfer if any */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR1_RXDMAEN</name></expr>;</expr_stmt>

          <comment type="block">/* Set the FMPI2C DMA Abort callback :
           will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */</comment>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAAbort</name></expr>;</expr_stmt>

          <comment type="block">/* Abort DMA RX */</comment>
          <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Call Directly XferAbortCallback function in case of error */</comment>
            <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_BUSY_TX_LISTEN</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;</operator> <name>FMPI2C_CR1_TXDMAEN</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_CR1_TXDMAEN</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR1_TXDMAEN</name></expr>;</expr_stmt>

        <comment type="block">/* Abort DMA Xfer if any */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set the FMPI2C DMA Abort callback :
           will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */</comment>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAAbort</name></expr>;</expr_stmt>

          <comment type="block">/* Abort DMA TX */</comment>
          <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Call Directly XferAbortCallback function in case of error */</comment>
            <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Nothing to do */</comment>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_TX_LISTEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_SLAVE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Enable Address Acknowledge */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name>    <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>XferOptions</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Slave_ISR_DMA</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the FMPI2C DMA transfer complete callback */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>FMPI2C_DMASlaveTransmitCplt</name></expr>;</expr_stmt>

      <comment type="block">/* Set the DMA error callback */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAError</name></expr>;</expr_stmt>

      <comment type="block">/* Set the unused DMA callbacks to NULL */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <comment type="block">/* Enable the DMA stream */</comment>
      <expr_stmt><expr><name>dmaxferstatus</name> <operator>=</operator> <call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name></expr></argument>, <argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Update FMPI2C state */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_LISTEN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

      <comment type="block">/* Update FMPI2C error code */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA_PARAM</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dmaxferstatus</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Update XferCount value */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>-=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr>;</expr_stmt>

      <comment type="block">/* Reset XferSize */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Update FMPI2C state */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_LISTEN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

      <comment type="block">/* Update FMPI2C error code */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_GET_DIR</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FMPI2C_DIRECTION_RECEIVE</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear ADDR flag after prepare the transfer parameters */</comment>
      <comment type="block">/* This action will generate an acknowledge to the Master */</comment>
      <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
    to avoid the risk of FMPI2C interrupt handle execution before current
    process unlock */</comment>
    <comment type="block">/* Enable ERR, STOP, NACK, ADDR interrupts */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_LISTEN_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable DMA Request */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <name>FMPI2C_CR1_TXDMAEN</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sequential receive in slave/device FMPI2C mode an amount of data in non-blocking mode with Interrupt
  * @note   This interface allow to manage repeated start condition when a direction change during transfer
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref FMPI2C_XFEROPTIONS
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Slave_Seq_Receive_IT</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>XferOptions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_TRANSFER_OPTIONS_REQUEST</name><argument_list>(<argument><expr><name>XferOptions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>HAL_FMPI2C_STATE_LISTEN</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>HAL_FMPI2C_STATE_LISTEN</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Disable Interrupts, to prevent preemption during treatment in case of multicall */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_LISTEN_IT</name> <operator>|</operator> <name>FMPI2C_XFER_RX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* FMPI2C cannot manage full duplex exchange so disable previous IT enabled if any */</comment>
    <comment type="block">/* and then toggle the HAL slave TX state to RX state */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_BUSY_TX_LISTEN</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable associated Interrupts */</comment>
      <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_TX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;</operator> <name>FMPI2C_CR1_TXDMAEN</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_CR1_TXDMAEN</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR1_TXDMAEN</name></expr>;</expr_stmt>

        <comment type="block">/* Abort DMA Xfer if any */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set the FMPI2C DMA Abort callback :
           will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */</comment>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAAbort</name></expr>;</expr_stmt>

          <comment type="block">/* Abort DMA TX */</comment>
          <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Call Directly XferAbortCallback function in case of error */</comment>
            <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_RX_LISTEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_SLAVE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Enable Address Acknowledge */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name>    <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>XferOptions</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Slave_ISR_IT</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_GET_DIR</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FMPI2C_DIRECTION_TRANSMIT</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear ADDR flag after prepare the transfer parameters */</comment>
      <comment type="block">/* This action will generate an acknowledge to the Master */</comment>
      <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
    to avoid the risk of FMPI2C interrupt handle execution before current
    process unlock */</comment>
    <comment type="block">/* REnable ADDR interrupt */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_RX_IT</name> <operator>|</operator> <name>FMPI2C_XFER_LISTEN_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sequential receive in slave/device FMPI2C mode an amount of data in non-blocking mode with DMA
  * @note   This interface allow to manage repeated start condition when a direction change during transfer
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref FMPI2C_XFEROPTIONS
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Slave_Seq_Receive_DMA</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>XferOptions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>dmaxferstatus</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_TRANSFER_OPTIONS_REQUEST</name><argument_list>(<argument><expr><name>XferOptions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>HAL_FMPI2C_STATE_LISTEN</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>HAL_FMPI2C_STATE_LISTEN</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_INVALID_PARAM</name></expr>;</expr_stmt>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Disable Interrupts, to prevent preemption during treatment in case of multicall */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_LISTEN_IT</name> <operator>|</operator> <name>FMPI2C_XFER_RX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* FMPI2C cannot manage full duplex exchange so disable previous IT enabled if any */</comment>
    <comment type="block">/* and then toggle the HAL slave TX state to RX state */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_BUSY_TX_LISTEN</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable associated Interrupts */</comment>
      <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_TX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;</operator> <name>FMPI2C_CR1_TXDMAEN</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_CR1_TXDMAEN</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Abort DMA Xfer if any */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR1_TXDMAEN</name></expr>;</expr_stmt>

          <comment type="block">/* Set the FMPI2C DMA Abort callback :
           will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */</comment>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAAbort</name></expr>;</expr_stmt>

          <comment type="block">/* Abort DMA TX */</comment>
          <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Call Directly XferAbortCallback function in case of error */</comment>
            <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_BUSY_RX_LISTEN</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;</operator> <name>FMPI2C_CR1_RXDMAEN</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_CR1_RXDMAEN</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR1_RXDMAEN</name></expr>;</expr_stmt>

        <comment type="block">/* Abort DMA Xfer if any */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set the FMPI2C DMA Abort callback :
           will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */</comment>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAAbort</name></expr>;</expr_stmt>

          <comment type="block">/* Abort DMA RX */</comment>
          <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Call Directly XferAbortCallback function in case of error */</comment>
            <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Nothing to do */</comment>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY_RX_LISTEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_SLAVE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Enable Address Acknowledge */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>

    <comment type="block">/* Prepare transfer parameters */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name>    <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>   <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name>    <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>XferOptions</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>     <operator>=</operator> <name>FMPI2C_Slave_ISR_DMA</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the FMPI2C DMA transfer complete callback */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>FMPI2C_DMASlaveReceiveCplt</name></expr>;</expr_stmt>

      <comment type="block">/* Set the DMA error callback */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAError</name></expr>;</expr_stmt>

      <comment type="block">/* Set the unused DMA callbacks to NULL */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <comment type="block">/* Enable the DMA stream */</comment>
      <expr_stmt><expr><name>dmaxferstatus</name> <operator>=</operator> <call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>RXDR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Update FMPI2C state */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_LISTEN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

      <comment type="block">/* Update FMPI2C error code */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA_PARAM</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dmaxferstatus</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Update XferCount value */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>-=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr>;</expr_stmt>

      <comment type="block">/* Reset XferSize */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Update FMPI2C state */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>     <operator>=</operator> <name>HAL_FMPI2C_STATE_LISTEN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>      <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

      <comment type="block">/* Update FMPI2C error code */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_DMA</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_GET_DIR</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FMPI2C_DIRECTION_TRANSMIT</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear ADDR flag after prepare the transfer parameters */</comment>
      <comment type="block">/* This action will generate an acknowledge to the Master */</comment>
      <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
    to avoid the risk of FMPI2C interrupt handle execution before current
    process unlock */</comment>
    <comment type="block">/* REnable ADDR interrupt */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_RX_IT</name> <operator>|</operator> <name>FMPI2C_XFER_LISTEN_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable DMA Request */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <name>FMPI2C_CR1_RXDMAEN</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enable the Address listen mode with Interrupt.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_EnableListen_IT</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_LISTEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name> <operator>=</operator> <name>FMPI2C_Slave_ISR_IT</name></expr>;</expr_stmt>

    <comment type="block">/* Enable the Address Match interrupt */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_LISTEN_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable the Address listen mode with Interrupt.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_DisableListen_IT</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Declaration of tmp to prevent undefined behavior of volatile usage */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name></decl>;</decl_stmt>

  <comment type="block">/* Disable Address listen mode only if a transfer is not ongoing */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_LISTEN</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name><operator>)</operator> <operator>&amp;</operator> <name>FMPI2C_STATE_MSK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>PreviousState</name></name> <operator>=</operator> <name>tmp</name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Disable the Address Match interrupt */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_LISTEN_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Abort a master FMPI2C IT or DMA process communication with Interrupt.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2C_Master_Abort_IT</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>==</operator> <name>HAL_FMPI2C_MODE_MASTER</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Disable Interrupts */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_RX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_TX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set State at HAL_FMPI2C_STATE_ABORT */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_ABORT</name></expr>;</expr_stmt>

    <comment type="block">/* Set NBYTES to 1 to generate a dummy read on FMPI2C peripheral */</comment>
    <comment type="block">/* Set AUTOEND mode, this will generate a NACK then STOP condition to abort the current transfer */</comment>
    <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>FMPI2C_AUTOEND_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_GENERATE_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Note : The FMPI2C interrupts must be enabled after unlocking current process
              to avoid the risk of FMPI2C interrupt handle execution before current
              process unlock */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_CPLT_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Wrong usage of abort function */</comment>
    <comment type="block">/* This function should be used only in case of abort monitored by master device */</comment>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup FMPI2C_IRQ_Handler_and_Callbacks IRQ Handler and Callbacks
 * @{
 */</comment>

<comment type="block" format="doxygen">/**
  * @brief  This function handles FMPI2C event interrupt request.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_FMPI2C_EV_IRQHandler</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Get current IT Flags and IT sources value */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>itflags</name>   <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>itsources</name> <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* FMPI2C events treatment -------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>itflags</name></expr></argument>, <argument><expr><name>itsources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles FMPI2C error interrupt request.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_FMPI2C_ER_IRQHandler</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>itflags</name>   <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>ISR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>itsources</name> <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmperror</name></decl>;</decl_stmt>

  <comment type="block">/* FMPI2C Bus error interrupt occurred ------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>itflags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_BERR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>itsources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_ERRI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_BERR</name></expr>;</expr_stmt>

    <comment type="block">/* Clear BERR flag */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_BERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* FMPI2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>itflags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_OVR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>itsources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_ERRI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_OVR</name></expr>;</expr_stmt>

    <comment type="block">/* Clear OVR flag */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_OVR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* FMPI2C Arbitration Loss error interrupt occurred -------------------------------------*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>itflags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_ARLO</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>itsources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_ERRI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_ARLO</name></expr>;</expr_stmt>

    <comment type="block">/* Clear ARLO flag */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_ARLO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Store current volatile hfmpi2c-&gt;ErrorCode, misra rule */</comment>
  <expr_stmt><expr><name>tmperror</name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</expr_stmt>

  <comment type="block">/* Call the Error Callback in case of Error detected */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmperror</name> <operator>&amp;</operator> <operator>(</operator><name>HAL_FMPI2C_ERROR_BERR</name> <operator>|</operator> <name>HAL_FMPI2C_ERROR_OVR</name> <operator>|</operator> <name>HAL_FMPI2C_ERROR_ARLO</name><operator>)</operator><operator>)</operator> <operator>!=</operator>  <name>HAL_FMPI2C_ERROR_NONE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>FMPI2C_ITError</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>tmperror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Master Tx Transfer completed callback.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_FMPI2C_MasterTxCpltCallback</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_MasterTxCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Master Rx Transfer completed callback.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_FMPI2C_MasterRxCpltCallback</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_MasterRxCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** @brief  Slave Tx Transfer completed callback.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_FMPI2C_SlaveTxCpltCallback</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_SlaveTxCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Slave Rx Transfer completed callback.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_FMPI2C_SlaveRxCpltCallback</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_SlaveRxCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Slave Address Match callback.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref FMPI2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_FMPI2C_AddrCallback</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>TransferDirection</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>AddrMatchCode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>TransferDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>AddrMatchCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_AddrCallback() could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Listen Complete callback.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_FMPI2C_ListenCpltCallback</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_ListenCpltCallback() could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Memory Tx Transfer completed callback.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_FMPI2C_MemTxCpltCallback</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_MemTxCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Memory Rx Transfer completed callback.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_FMPI2C_MemRxCpltCallback</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_MemRxCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  FMPI2C error callback.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_FMPI2C_ErrorCallback</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_ErrorCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  FMPI2C abort callback.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_FMPI2C_AbortCpltCallback</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_AbortCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup FMPI2C_Exported_Functions_Group3 Peripheral State, Mode and Error functions
 *  @brief   Peripheral State, Mode and Error functions
 *
@verbatim
 ===============================================================================
            ##### Peripheral State, Mode and Error functions #####
 ===============================================================================
    [..]
    This subsection permit to get in run-time the status of the peripheral
    and the data flow.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Return the FMPI2C handle state.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL state
  */</comment>
<function><type><name>HAL_FMPI2C_StateTypeDef</name></type> <name>HAL_FMPI2C_GetState</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Return FMPI2C handle state */</comment>
  <return>return <expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns the FMPI2C Master, Slave, Memory or no mode.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *         the configuration information for FMPI2C module
  * @retval HAL mode
  */</comment>
<function><type><name>HAL_FMPI2C_ModeTypeDef</name></type> <name>HAL_FMPI2C_GetMode</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
* @brief  Return the FMPI2C error code.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *              the configuration information for the specified FMPI2C.
* @retval FMPI2C Error Code
*/</comment>
<function><type><name>uint32_t</name></type> <name>HAL_FMPI2C_GetError</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup FMPI2C_Private_Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Interrupt Sub-Routine which handle the Interrupt Flags Master Mode with Interrupt.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_Master_ISR_IT</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>__FMPI2C_HandleTypeDef</name></name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITFlags</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITSources</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>devaddress</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpITFlags</name> <init>= <expr><name>ITFlags</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>tmpITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_NACKI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear NACK Flag */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set corresponding Error Code */</comment>
    <comment type="block">/* No need to generate STOP, it is automatically done */</comment>
    <comment type="block">/* Error callback will be send during stop flag treatment */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_AF</name></expr>;</expr_stmt>

    <comment type="block">/* Flush TX register */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Flush_TXDR</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>tmpITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_RXNE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_RXI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Remove RXNE flag on temporary variable as read done */</comment>
    <expr_stmt><expr><name>tmpITFlags</name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_FLAG_RXNE</name></expr>;</expr_stmt>

    <comment type="block">/* Read data from RXDR */</comment>
    <expr_stmt><expr><operator>*</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>RXDR</name></name></expr>;</expr_stmt>

    <comment type="block">/* Increment Buffer pointer */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>tmpITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_TXIS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_TXI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Write data to TXDR */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name> <operator>=</operator> <operator>*</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name></expr>;</expr_stmt>

    <comment type="block">/* Increment Buffer pointer */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>tmpITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_TCR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_TCI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>devaddress</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;</operator> <name>FMPI2C_CR2_SADD</name><operator>)</operator></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>devaddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_RELOAD_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_NO_STARTSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>!=</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>devaddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name></expr></argument>, <argument><expr><name>FMPI2C_NO_STARTSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>devaddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>FMPI2C_AUTOEND_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_NO_STARTSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Call TxCpltCallback() if no stop mode is set */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_GET_STOP_MODE</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FMPI2C_AUTOEND_MODE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Call FMPI2C Master Sequential complete process */</comment>
        <expr_stmt><expr><call><name>FMPI2C_ITMasterSeqCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Wrong size Status regarding TCR flag event */</comment>
        <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
        <expr_stmt><expr><call><name>FMPI2C_ITError</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>HAL_FMPI2C_ERROR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>tmpITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_TC</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_TCI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_GET_STOP_MODE</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FMPI2C_AUTOEND_MODE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Generate a stop condition in case of no transfer option */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>==</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Generate Stop */</comment>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>FMPI2C_CR2_STOP</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <comment type="block">/* Call FMPI2C Master Sequential complete process */</comment>
          <expr_stmt><expr><call><name>FMPI2C_ITMasterSeqCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Wrong size Status regarding TC flag event */</comment>
      <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
      <expr_stmt><expr><call><name>FMPI2C_ITError</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>HAL_FMPI2C_ERROR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Nothing to do */</comment>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>tmpITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_STOPI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Call FMPI2C Master complete process */</comment>
    <expr_stmt><expr><call><name>FMPI2C_ITMasterCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>tmpITFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Interrupt Sub-Routine which handle the Interrupt Flags Slave Mode with Interrupt.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_Slave_ISR_IT</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>__FMPI2C_HandleTypeDef</name></name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITFlags</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITSources</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpoptions</name> <init>= <expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpITFlags</name> <init>= <expr><name>ITFlags</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>tmpITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_NACKI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check that FMPI2C transfer finished */</comment>
    <comment type="block">/* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */</comment>
    <comment type="block">/* Mean XferCount == 0*/</comment>
    <comment type="block">/* So clear Flag NACKF only */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_LISTEN</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tmpoptions</name> <operator>==</operator> <name>FMPI2C_FIRST_AND_LAST_FRAME</name><operator>)</operator></expr>)</condition> <comment type="block">/* Same action must be done for (tmpoptions == FMPI2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */</comment>
      <block>{<block_content>
        <comment type="block">/* Call FMPI2C Listen complete process */</comment>
        <expr_stmt><expr><call><name>FMPI2C_ITListenCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>tmpITFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_BUSY_TX_LISTEN</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tmpoptions</name> <operator>!=</operator> <name>FMPI2C_NO_OPTION_FRAME</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Clear NACK Flag */</comment>
        <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Flush TX register */</comment>
        <expr_stmt><expr><call><name>FMPI2C_Flush_TXDR</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Last Byte is Transmitted */</comment>
        <comment type="block">/* Call FMPI2C Slave Sequential complete process */</comment>
        <expr_stmt><expr><call><name>FMPI2C_ITSlaveSeqCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Clear NACK Flag */</comment>
        <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/</comment>
      <comment type="block">/* Clear NACK Flag */</comment>
      <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Set ErrorCode corresponding to a Non-Acknowledge */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_AF</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpoptions</name> <operator>==</operator> <name>FMPI2C_FIRST_FRAME</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tmpoptions</name> <operator>==</operator> <name>FMPI2C_NEXT_FRAME</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
        <expr_stmt><expr><call><name>FMPI2C_ITError</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>tmpITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_RXNE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_RXI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Remove RXNE flag on temporary variable as read done */</comment>
      <expr_stmt><expr><name>tmpITFlags</name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_FLAG_RXNE</name></expr>;</expr_stmt>

      <comment type="block">/* Read data from RXDR */</comment>
      <expr_stmt><expr><operator>*</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>RXDR</name></name></expr>;</expr_stmt>

      <comment type="block">/* Increment Buffer pointer */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> \
        <operator>(</operator><name>tmpoptions</name> <operator>!=</operator> <name>FMPI2C_NO_OPTION_FRAME</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Call FMPI2C Slave Sequential complete process */</comment>
      <expr_stmt><expr><call><name>FMPI2C_ITSlaveSeqCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>tmpITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_ADDR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_ADDRI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>FMPI2C_ITAddrCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>tmpITFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>tmpITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_TXIS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_TXI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Write data to TXDR only if XferCount not reach "0" */</comment>
    <comment type="block">/* A TXIS flag can be set, during STOP treatment      */</comment>
    <comment type="block">/* Check if all Datas have already been sent */</comment>
    <comment type="block">/* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Write data to TXDR */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name> <operator>=</operator> <operator>*</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name></expr>;</expr_stmt>

      <comment type="block">/* Increment Buffer pointer */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpoptions</name> <operator>==</operator> <name>FMPI2C_NEXT_FRAME</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tmpoptions</name> <operator>==</operator> <name>FMPI2C_FIRST_FRAME</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Last Byte is Transmitted */</comment>
        <comment type="block">/* Call FMPI2C Slave Sequential complete process */</comment>
        <expr_stmt><expr><call><name>FMPI2C_ITSlaveSeqCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Nothing to do */</comment>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Check if STOPF is set */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>tmpITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_STOPI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Call FMPI2C Slave complete process */</comment>
    <expr_stmt><expr><call><name>FMPI2C_ITSlaveCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>tmpITFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Interrupt Sub-Routine which handle the Interrupt Flags Master Mode with DMA.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_Master_ISR_DMA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>__FMPI2C_HandleTypeDef</name></name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITFlags</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITSources</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>devaddress</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>xfermode</name></decl>;</decl_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>ITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_NACKI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear NACK Flag */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set corresponding Error Code */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_AF</name></expr>;</expr_stmt>

    <comment type="block">/* No need to generate STOP, it is automatically done */</comment>
    <comment type="block">/* But enable STOP interrupt, to treat it */</comment>
    <comment type="block">/* Error callback will be send during stop flag treatment */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_CPLT_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Flush TX register */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Flush_TXDR</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>ITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_TCR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_TCI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable TC interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_DISABLE_IT</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_IT_TCI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Recover Slave address */</comment>
      <expr_stmt><expr><name>devaddress</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;</operator> <name>FMPI2C_CR2_SADD</name><operator>)</operator></expr>;</expr_stmt>

      <comment type="block">/* Prepare the new XferSize to transfer */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_RELOAD_MODE</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>!=</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><name>xfermode</name> <operator>=</operator> <name>FMPI2C_AUTOEND_MODE</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>

      <comment type="block">/* Set the new XferSize in Nbytes register */</comment>
      <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>devaddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>, <argument><expr><name>xfermode</name></expr></argument>, <argument><expr><name>FMPI2C_NO_STARTSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Update XferCount value */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>-=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr>;</expr_stmt>

      <comment type="block">/* Enable DMA Request */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_BUSY_RX</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <name>FMPI2C_CR1_RXDMAEN</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <name>FMPI2C_CR1_TXDMAEN</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Call TxCpltCallback() if no stop mode is set */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_GET_STOP_MODE</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FMPI2C_AUTOEND_MODE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Call FMPI2C Master Sequential complete process */</comment>
        <expr_stmt><expr><call><name>FMPI2C_ITMasterSeqCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Wrong size Status regarding TCR flag event */</comment>
        <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
        <expr_stmt><expr><call><name>FMPI2C_ITError</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>HAL_FMPI2C_ERROR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>ITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_TC</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_TCI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_GET_STOP_MODE</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FMPI2C_AUTOEND_MODE</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Generate a stop condition in case of no transfer option */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>==</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Generate Stop */</comment>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>FMPI2C_CR2_STOP</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <comment type="block">/* Call FMPI2C Master Sequential complete process */</comment>
          <expr_stmt><expr><call><name>FMPI2C_ITMasterSeqCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Wrong size Status regarding TC flag event */</comment>
      <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
      <expr_stmt><expr><call><name>FMPI2C_ITError</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>HAL_FMPI2C_ERROR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>ITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_STOPI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Call FMPI2C Master complete process */</comment>
    <expr_stmt><expr><call><name>FMPI2C_ITMasterCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>ITFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Nothing to do */</comment>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Interrupt Sub-Routine which handle the Interrupt Flags Slave Mode with DMA.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_Slave_ISR_DMA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>__FMPI2C_HandleTypeDef</name></name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITFlags</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITSources</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpoptions</name> <init>= <expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>treatdmanack</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>ITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_NACKI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check that FMPI2C transfer finished */</comment>
    <comment type="block">/* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */</comment>
    <comment type="block">/* Mean XferCount == 0 */</comment>
    <comment type="block">/* So clear Flag NACKF only */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_CR1_TXDMAEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_CR1_RXDMAEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Split check of hdmarx, for MISRA compliance */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_CR1_RXDMAEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>__HAL_DMA_GET_COUNTER</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><name>treatdmanack</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Split check of hdmatx, for MISRA compliance  */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_CR1_TXDMAEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>__HAL_DMA_GET_COUNTER</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><name>treatdmanack</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>treatdmanack</name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_LISTEN</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tmpoptions</name> <operator>==</operator> <name>FMPI2C_FIRST_AND_LAST_FRAME</name><operator>)</operator></expr>)</condition> <comment type="block">/* Same action must be done for (tmpoptions == FMPI2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */</comment>
        <block>{<block_content>
          <comment type="block">/* Call FMPI2C Listen complete process */</comment>
          <expr_stmt><expr><call><name>FMPI2C_ITListenCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>ITFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_BUSY_TX_LISTEN</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tmpoptions</name> <operator>!=</operator> <name>FMPI2C_NO_OPTION_FRAME</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Clear NACK Flag */</comment>
          <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Flush TX register */</comment>
          <expr_stmt><expr><call><name>FMPI2C_Flush_TXDR</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Last Byte is Transmitted */</comment>
          <comment type="block">/* Call FMPI2C Slave Sequential complete process */</comment>
          <expr_stmt><expr><call><name>FMPI2C_ITSlaveSeqCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <comment type="block">/* Clear NACK Flag */</comment>
          <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/</comment>
        <comment type="block">/* Clear NACK Flag */</comment>
        <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Set ErrorCode corresponding to a Non-Acknowledge */</comment>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_AF</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpoptions</name> <operator>==</operator> <name>FMPI2C_FIRST_FRAME</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tmpoptions</name> <operator>==</operator> <name>FMPI2C_NEXT_FRAME</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
          <expr_stmt><expr><call><name>FMPI2C_ITError</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Only Clear NACK Flag, no DMA treatment is pending */</comment>
      <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>ITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_ADDR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_ADDRI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>FMPI2C_ITAddrCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>ITFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>ITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>ITSources</name></expr></argument>, <argument><expr><name>FMPI2C_IT_STOPI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Call FMPI2C Slave complete process */</comment>
    <expr_stmt><expr><call><name>FMPI2C_ITSlaveCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>ITFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Nothing to do */</comment>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Master sends target device address followed by internal memory address for write request.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  MemAddress Internal memory address
  * @param  MemAddSize Size of internal memory address
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_RequestMemoryWrite</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddSize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tickstart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>MemAddSize</name></expr></argument>, <argument><expr><name>FMPI2C_RELOAD_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_GENERATE_START_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait until TXIS flag is set */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnTXISFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>Tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* If Memory address size is 8Bit */</comment>
  <if_stmt><if>if <condition>(<expr><name>MemAddSize</name> <operator>==</operator> <name>FMPI2C_MEMADD_SIZE_8BIT</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Send Memory Address */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name> <operator>=</operator> <call><name>FMPI2C_MEM_ADD_LSB</name><argument_list>(<argument><expr><name>MemAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* If Memory address size is 16Bit */</comment>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Send MSB of Memory Address */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name> <operator>=</operator> <call><name>FMPI2C_MEM_ADD_MSB</name><argument_list>(<argument><expr><name>MemAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait until TXIS flag is set */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnTXISFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>Tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Send LSB of Memory Address */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name> <operator>=</operator> <call><name>FMPI2C_MEM_ADD_LSB</name><argument_list>(<argument><expr><name>MemAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Wait until TCR flag is set */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_TCR</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>Tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Master sends target device address followed by internal memory address for read request.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  MemAddress Internal memory address
  * @param  MemAddSize Size of internal memory address
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_RequestMemoryRead</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>MemAddSize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tickstart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>FMPI2C_TransferConfig</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>DevAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>MemAddSize</name></expr></argument>, <argument><expr><name>FMPI2C_SOFTEND_MODE</name></expr></argument>, <argument><expr><name>FMPI2C_GENERATE_START_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wait until TXIS flag is set */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnTXISFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>Tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* If Memory address size is 8Bit */</comment>
  <if_stmt><if>if <condition>(<expr><name>MemAddSize</name> <operator>==</operator> <name>FMPI2C_MEMADD_SIZE_8BIT</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Send Memory Address */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name> <operator>=</operator> <call><name>FMPI2C_MEM_ADD_LSB</name><argument_list>(<argument><expr><name>MemAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* If Memory address size is 16Bit */</comment>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Send MSB of Memory Address */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name> <operator>=</operator> <call><name>FMPI2C_MEM_ADD_MSB</name><argument_list>(<argument><expr><name>MemAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait until TXIS flag is set */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnTXISFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>Tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Send LSB of Memory Address */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name> <operator>=</operator> <call><name>FMPI2C_MEM_ADD_LSB</name><argument_list>(<argument><expr><name>MemAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Wait until TC flag is set */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_TC</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>Tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  FMPI2C Address complete process callback.
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_ITAddrCplt</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITFlags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>transferdirection</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>slaveaddrcode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>ownadd1code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>ownadd2code</name></decl>;</decl_stmt>

  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ITFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* In case of Listen state, need to inform upper layer of address match code event */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>HAL_FMPI2C_STATE_LISTEN</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>HAL_FMPI2C_STATE_LISTEN</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>transferdirection</name> <operator>=</operator> <call><name>FMPI2C_GET_DIR</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>slaveaddrcode</name>     <operator>=</operator> <call><name>FMPI2C_GET_ADDR_MATCH</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ownadd1code</name>       <operator>=</operator> <call><name>FMPI2C_GET_OWN_ADDRESS1</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ownadd2code</name>       <operator>=</operator> <call><name>FMPI2C_GET_OWN_ADDRESS2</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If 10bits addressing mode is selected */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AddressingMode</name></name> <operator>==</operator> <name>FMPI2C_ADDRESSINGMODE_10BIT</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>slaveaddrcode</name> <operator>&amp;</operator> <name>SlaveAddr_MSK</name><operator>)</operator> <operator>==</operator> <operator>(</operator><operator>(</operator><name>ownadd1code</name> <operator>&gt;&gt;</operator> <name>SlaveAddr_SHIFT</name><operator>)</operator> <operator>&amp;</operator> <name>SlaveAddr_MSK</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>slaveaddrcode</name> <operator>=</operator> <name>ownadd1code</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>AddrEventCount</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>AddrEventCount</name></name> <operator>==</operator> <literal type="number">2U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Reset Address Event counter */</comment>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>AddrEventCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

          <comment type="block">/* Clear ADDR flag */</comment>
          <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Process Unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Call Slave Addr callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
          <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>AddrCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>transferdirection</name></expr></argument>, <argument><expr><name>slaveaddrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <expr_stmt><expr><call><name>HAL_FMPI2C_AddrCallback</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>transferdirection</name></expr></argument>, <argument><expr><name>slaveaddrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><name>slaveaddrcode</name> <operator>=</operator> <name>ownadd2code</name></expr>;</expr_stmt>

        <comment type="block">/* Disable ADDR Interrupts */</comment>
        <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_LISTEN_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Call Slave Addr callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>AddrCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>transferdirection</name></expr></argument>, <argument><expr><name>slaveaddrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_FMPI2C_AddrCallback</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>transferdirection</name></expr></argument>, <argument><expr><name>slaveaddrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <comment type="block">/* else 7 bits addressing mode is selected */</comment>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Disable ADDR Interrupts */</comment>
      <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_LISTEN_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Call Slave Addr callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>AddrCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>transferdirection</name></expr></argument>, <argument><expr><name>slaveaddrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_FMPI2C_AddrCallback</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>transferdirection</name></expr></argument>, <argument><expr><name>slaveaddrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Else clear address flag only */</comment>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Clear ADDR flag */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  FMPI2C Master sequential complete process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_ITMasterSeqCplt</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Reset FMPI2C handle mode */</comment>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* No Generate Stop, to permit restart mode */</comment>
  <comment type="block">/* The stop will be done at the end of transfer, when FMPI2C_AUTOEND_MODE enable */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_BUSY_TX</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>         <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>PreviousState</name></name> <operator>=</operator> <name>FMPI2C_STATE_MASTER_BUSY_TX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>       <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Disable Interrupts */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_TX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MasterTxCpltCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_FMPI2C_MasterTxCpltCallback</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if>
  <comment type="block">/* hfmpi2c-&gt;State == HAL_FMPI2C_STATE_BUSY_RX */</comment>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>         <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>PreviousState</name></name> <operator>=</operator> <name>FMPI2C_STATE_MASTER_BUSY_RX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>       <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Disable Interrupts */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_RX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MasterRxCpltCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_FMPI2C_MasterRxCpltCallback</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  FMPI2C Slave sequential complete process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_ITSlaveSeqCplt</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Reset FMPI2C handle mode */</comment>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_BUSY_TX_LISTEN</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Remove HAL_FMPI2C_STATE_SLAVE_BUSY_TX, keep only HAL_FMPI2C_STATE_LISTEN */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>         <operator>=</operator> <name>HAL_FMPI2C_STATE_LISTEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>PreviousState</name></name> <operator>=</operator> <name>FMPI2C_STATE_SLAVE_BUSY_TX</name></expr>;</expr_stmt>

    <comment type="block">/* Disable Interrupts */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_TX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>SlaveTxCpltCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_FMPI2C_SlaveTxCpltCallback</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if>

  <if type="elseif">else if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_BUSY_RX_LISTEN</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Remove HAL_FMPI2C_STATE_SLAVE_BUSY_RX, keep only HAL_FMPI2C_STATE_LISTEN */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>         <operator>=</operator> <name>HAL_FMPI2C_STATE_LISTEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>PreviousState</name></name> <operator>=</operator> <name>FMPI2C_STATE_SLAVE_BUSY_RX</name></expr>;</expr_stmt>

    <comment type="block">/* Disable Interrupts */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_RX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>SlaveRxCpltCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_FMPI2C_SlaveRxCpltCallback</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Nothing to do */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  FMPI2C Master complete process.
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_ITMasterCplt</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITFlags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmperror</name></decl>;</decl_stmt>

  <comment type="block">/* Clear STOP Flag */</comment>
  <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Clear Configuration Register 2 */</comment>
  <expr_stmt><expr><call><name>FMPI2C_RESET_CR2</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Reset handle parameters */</comment>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>PreviousState</name></name> <operator>=</operator> <name>FMPI2C_STATE_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>       <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name>   <operator>=</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>ITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Clear NACK Flag */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set acknowledge error code */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_AF</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Flush TX register */</comment>
  <expr_stmt><expr><call><name>FMPI2C_Flush_TXDR</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable Interrupts */</comment>
  <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_TX_IT</name> <operator>|</operator> <name>FMPI2C_XFER_RX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Store current volatile hfmpi2c-&gt;ErrorCode, misra rule */</comment>
  <expr_stmt><expr><name>tmperror</name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</expr_stmt>

  <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_ABORT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tmperror</name> <operator>!=</operator> <name>HAL_FMPI2C_ERROR_NONE</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
    <expr_stmt><expr><call><name>FMPI2C_ITError</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* hfmpi2c-&gt;State == HAL_FMPI2C_STATE_BUSY_TX */</comment>
  <if type="elseif">else if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_BUSY_TX</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>==</operator> <name>HAL_FMPI2C_MODE_MEM</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MemTxCpltCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_FMPI2C_MemTxCpltCallback</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MasterTxCpltCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_FMPI2C_MasterTxCpltCallback</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <comment type="block">/* hfmpi2c-&gt;State == HAL_FMPI2C_STATE_BUSY_RX */</comment>
  <if type="elseif">else if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_BUSY_RX</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>==</operator> <name>HAL_FMPI2C_MODE_MEM</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MemRxCpltCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_FMPI2C_MemRxCpltCallback</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>MasterRxCpltCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_FMPI2C_MasterRxCpltCallback</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Nothing to do */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  FMPI2C Slave complete process.
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_ITSlaveCplt</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITFlags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpcr1value</name> <init>= <expr><call><name>READ_REG</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpITFlags</name> <init>= <expr><name>ITFlags</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Clear STOP Flag */</comment>
  <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable all interrupts */</comment>
  <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_LISTEN_IT</name> <operator>|</operator> <name>FMPI2C_XFER_TX_IT</name> <operator>|</operator> <name>FMPI2C_XFER_RX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable Address Acknowledge */</comment>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>

  <comment type="block">/* Clear Configuration Register 2 */</comment>
  <expr_stmt><expr><call><name>FMPI2C_RESET_CR2</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Flush TX register */</comment>
  <expr_stmt><expr><call><name>FMPI2C_Flush_TXDR</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If a DMA is ongoing, Update handle size context */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>tmpcr1value</name></expr></argument>, <argument><expr><name>FMPI2C_CR1_TXDMAEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>__HAL_DMA_GET_COUNTER</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>FMPI2C_CHECK_IT_SOURCE</name><argument_list>(<argument><expr><name>tmpcr1value</name></expr></argument>, <argument><expr><name>FMPI2C_CR1_RXDMAEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>__HAL_DMA_GET_COUNTER</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Do nothing */</comment>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Store Last receive data if any */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>tmpITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_RXNE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Remove RXNE flag on temporary variable as read done */</comment>
    <expr_stmt><expr><name>tmpITFlags</name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_FLAG_RXNE</name></expr>;</expr_stmt>

    <comment type="block">/* Read data from RXDR */</comment>
    <expr_stmt><expr><operator>*</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>RXDR</name></name></expr>;</expr_stmt>

    <comment type="block">/* Increment Buffer pointer */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>&gt;</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* All data are not transferred, so set error code accordingly */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set ErrorCode corresponding to a Non-Acknowledge */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_AF</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>PreviousState</name></name> <operator>=</operator> <name>FMPI2C_STATE_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>!=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
    <expr_stmt><expr><call><name>FMPI2C_ITError</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_LISTEN</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Call FMPI2C Listen complete process */</comment>
      <expr_stmt><expr><call><name>FMPI2C_ITListenCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>tmpITFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>!=</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Call the Sequential Complete callback, to inform upper layer of the end of Tranfer */</comment>
    <expr_stmt><expr><call><name>FMPI2C_ITSlaveSeqCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ListenCpltCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_FMPI2C_ListenCpltCallback</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if>
  <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
  <if type="elseif">else if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_BUSY_RX</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>SlaveRxCpltCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_FMPI2C_SlaveRxCpltCallback</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>SlaveTxCpltCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_FMPI2C_SlaveTxCpltCallback</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  FMPI2C Listen complete process.
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_ITListenCplt</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ITFlags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Reset handle parameters */</comment>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>PreviousState</name></name> <operator>=</operator> <name>FMPI2C_STATE_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/* Store Last receive data if any */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_CHECK_FLAG</name><argument_list>(<argument><expr><name>ITFlags</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_RXNE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Read data from RXDR */</comment>
    <expr_stmt><expr><operator>*</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>RXDR</name></name></expr>;</expr_stmt>

    <comment type="block">/* Increment Buffer pointer */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>&gt;</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>

      <comment type="block">/* Set ErrorCode corresponding to a Non-Acknowledge */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_AF</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Disable all Interrupts*/</comment>
  <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_LISTEN_IT</name> <operator>|</operator> <name>FMPI2C_XFER_RX_IT</name> <operator>|</operator> <name>FMPI2C_XFER_TX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Clear NACK Flag */</comment>
  <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ListenCpltCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_FMPI2C_ListenCpltCallback</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  FMPI2C interrupts error process.
  * @param  hfmpi2c FMPI2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_ITError</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ErrorCode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_FMPI2C_StateTypeDef</name></type> <name>tmpstate</name> <init>= <expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Reset handle parameters */</comment>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name>          <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name>   <operator>=</operator> <name>FMPI2C_NO_OPTION_FRAME</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name>     <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

  <comment type="block">/* Set new error code */</comment>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>ErrorCode</name></expr>;</expr_stmt>

  <comment type="block">/* Disable Interrupts */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpstate</name> <operator>==</operator> <name>HAL_FMPI2C_STATE_LISTEN</name><operator>)</operator>         <operator>||</operator>
      <operator>(</operator><name>tmpstate</name> <operator>==</operator> <name>HAL_FMPI2C_STATE_BUSY_TX_LISTEN</name><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name>tmpstate</name> <operator>==</operator> <name>HAL_FMPI2C_STATE_BUSY_RX_LISTEN</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable all interrupts, except interrupts related to LISTEN state */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_RX_IT</name> <operator>|</operator> <name>FMPI2C_XFER_TX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* keep HAL_FMPI2C_STATE_LISTEN if set */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>         <operator>=</operator> <name>HAL_FMPI2C_STATE_LISTEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>PreviousState</name></name> <operator>=</operator> <name>FMPI2C_STATE_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>       <operator>=</operator> <name>FMPI2C_Slave_ISR_IT</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Disable all interrupts */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Disable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_LISTEN_IT</name> <operator>|</operator> <name>FMPI2C_XFER_RX_IT</name> <operator>|</operator> <name>FMPI2C_XFER_TX_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If state is an abort treatment on goind, don't change state */</comment>
    <comment type="block">/* This change will be do later */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_FMPI2C_STATE_ABORT</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set HAL_FMPI2C_STATE_READY */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name>         <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>PreviousState</name></name> <operator>=</operator> <name>FMPI2C_STATE_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name>       <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Abort DMA TX transfer if any */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;</operator> <name>FMPI2C_CR1_TXDMAEN</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_CR1_TXDMAEN</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR1_TXDMAEN</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the FMPI2C DMA Abort callback :
       will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAAbort</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Abort DMA TX */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Call Directly XferAbortCallback function in case of error */</comment>
        <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <comment type="block">/* Abort DMA RX transfer if any */</comment>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;</operator> <name>FMPI2C_CR1_RXDMAEN</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_CR1_RXDMAEN</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR1_RXDMAEN</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set the FMPI2C DMA Abort callback :
        will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */</comment>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>FMPI2C_DMAAbort</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Abort DMA RX */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Call Directly hfmpi2c-&gt;hdmarx-&gt;XferAbortCallback function in case of error */</comment>
        <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_ABORT</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_FMPI2C_AbortCpltCallback</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_FMPI2C_ErrorCallback</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  FMPI2C Tx data register flush process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_Flush_TXDR</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* If a pending TXIS flag is set */</comment>
  <comment type="block">/* Write a dummy data in TXDR to clear it */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_TXIS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name> <operator>=</operator> <literal type="number">0x00U</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Flush TX register if not empty */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_TXE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_TXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA FMPI2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_DMAMasterTransmitCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name> <init>= <expr><operator>(</operator><name>FMPI2C_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name><operator>)</operator></expr></init></decl>;</decl_stmt> <comment type="block">/* Derogation MISRAC2012-Rule-11.5 */</comment>

  <comment type="block">/* Disable DMA Request */</comment>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR1_TXDMAEN</name></expr>;</expr_stmt>

  <comment type="block">/* If last transfer, enable STOP interrupt */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable STOP interrupt */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_CPLT_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* else prepare a new DMA transfer and enable TCReload interrupt */</comment>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update Buffer pointer */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name> <operator>+=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr>;</expr_stmt>

    <comment type="block">/* Set the XferSize to transfer */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Enable the DMA stream */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>TXDR</name></name></expr></argument>, <argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
      <expr_stmt><expr><call><name>FMPI2C_ITError</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>HAL_FMPI2C_ERROR_DMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Enable TC interrupts */</comment>
      <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_RELOAD_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA FMPI2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_DMASlaveTransmitCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name> <init>= <expr><operator>(</operator><name>FMPI2C_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name><operator>)</operator></expr></init></decl>;</decl_stmt> <comment type="block">/* Derogation MISRAC2012-Rule-11.5 */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpoptions</name> <init>= <expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpoptions</name> <operator>==</operator> <name>FMPI2C_NEXT_FRAME</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tmpoptions</name> <operator>==</operator> <name>FMPI2C_FIRST_FRAME</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable DMA Request */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR1_TXDMAEN</name></expr>;</expr_stmt>

    <comment type="block">/* Last Byte is Transmitted */</comment>
    <comment type="block">/* Call FMPI2C Slave Sequential complete process */</comment>
    <expr_stmt><expr><call><name>FMPI2C_ITSlaveSeqCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* No specific action, Master fully manage the generation of STOP condition */</comment>
    <comment type="block">/* Mean that this generation can arrive at any time, at the end or during DMA process */</comment>
    <comment type="block">/* So STOP condition should be manage through Interrupt treatment */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DMA FMPI2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_DMAMasterReceiveCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name> <init>= <expr><operator>(</operator><name>FMPI2C_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name><operator>)</operator></expr></init></decl>;</decl_stmt> <comment type="block">/* Derogation MISRAC2012-Rule-11.5 */</comment>

  <comment type="block">/* Disable DMA Request */</comment>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR1_RXDMAEN</name></expr>;</expr_stmt>

  <comment type="block">/* If last transfer, enable STOP interrupt */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable STOP interrupt */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_CPLT_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* else prepare a new DMA transfer and enable TCReload interrupt */</comment>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update Buffer pointer */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name> <operator>+=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr>;</expr_stmt>

    <comment type="block">/* Set the XferSize to transfer */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <name>MAX_NBYTE_SIZE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>MAX_NBYTE_SIZE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferCount</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Enable the DMA stream */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>RXDR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>pBuffPtr</name></name></expr></argument>, <argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
      <expr_stmt><expr><call><name>FMPI2C_ITError</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>HAL_FMPI2C_ERROR_DMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Enable TC interrupts */</comment>
      <expr_stmt><expr><call><name>FMPI2C_Enable_IRQ</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_XFER_RELOAD_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA FMPI2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_DMASlaveReceiveCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name> <init>= <expr><operator>(</operator><name>FMPI2C_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name><operator>)</operator></expr></init></decl>;</decl_stmt> <comment type="block">/* Derogation MISRAC2012-Rule-11.5 */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpoptions</name> <init>= <expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>__HAL_DMA_GET_COUNTER</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> \
      <operator>(</operator><name>tmpoptions</name> <operator>!=</operator> <name>FMPI2C_NO_OPTION_FRAME</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable DMA Request */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMPI2C_CR1_RXDMAEN</name></expr>;</expr_stmt>

    <comment type="block">/* Call FMPI2C Slave Sequential complete process */</comment>
    <expr_stmt><expr><call><name>FMPI2C_ITSlaveSeqCplt</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* No specific action, Master fully manage the generation of STOP condition */</comment>
    <comment type="block">/* Mean that this generation can arrive at any time, at the end or during DMA process */</comment>
    <comment type="block">/* So STOP condition should be manage through Interrupt treatment */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA FMPI2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>treatdmaerror</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name> <init>= <expr><operator>(</operator><name>FMPI2C_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name><operator>)</operator></expr></init></decl>;</decl_stmt> <comment type="block">/* Derogation MISRAC2012-Rule-11.5 */</comment>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_DMA_GET_COUNTER</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>treatdmaerror</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_DMA_GET_COUNTER</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>treatdmaerror</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><call><name>HAL_DMA_GetError</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAL_DMA_ERROR_FE</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>treatdmaerror</name> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable Acknowledge */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <name>FMPI2C_CR2_NACK</name></expr>;</expr_stmt>

    <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
    <expr_stmt><expr><call><name>FMPI2C_ITError</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>HAL_FMPI2C_ERROR_DMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DMA FMPI2C communication abort callback
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_DMAAbort</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name> <init>= <expr><operator>(</operator><name>FMPI2C_HandleTypeDef</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name> <operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name><operator>)</operator></expr></init></decl>;</decl_stmt> <comment type="block">/* Derogation MISRAC2012-Rule-11.5 */</comment>

  <comment type="block">/* Reset AbortCpltCallback */</comment>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/* Check if come from abort from user */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_ABORT</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>AbortCpltCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_FMPI2C_AbortCpltCallback</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Call the corresponding callback to inform upper layer of End of Transfer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_FMPI2C_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_FMPI2C_ErrorCallback</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_FMPI2C_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles FMPI2C Communication Timeout.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  Flag Specifies the FMPI2C flag to check.
  * @param  Status The new Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_WaitOnFlagUntilTimeout</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Flag</name></decl></parameter>, <parameter><decl><type><name>FlagStatus</name></type> <name>Status</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tickstart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <while>while <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>Flag</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Status</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if <condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>Tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles FMPI2C Communication Timeout for specific usage of TXIS flag.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_WaitOnTXISFlagUntilTimeout</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tickstart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <while>while <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_TXIS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check if a NACK is detected */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_IsAcknowledgeFailed</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>Tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if <condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>Tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles FMPI2C Communication Timeout for specific usage of STOP flag.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_WaitOnSTOPFlagUntilTimeout</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tickstart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <while>while <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check if a NACK is detected */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_IsAcknowledgeFailed</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>Tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>Tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_TIMEOUT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles FMPI2C Communication Timeout for specific usage of RXNE flag.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_WaitOnRXNEFlagUntilTimeout</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tickstart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <while>while <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_RXNE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check if a NACK is detected */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FMPI2C_IsAcknowledgeFailed</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>Tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check if a STOPF is detected */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check if an RXNE is pending */</comment>
      <comment type="block">/* Store Last receive data if any */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_RXNE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>&gt;</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Return HAL_OK */</comment>
        <comment type="block">/* The Reading of data from RXDR will be done in caller function */</comment>
        <return>return <expr><name>HAL_OK</name></expr>;</return>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Clear STOP Flag */</comment>
        <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Clear Configuration Register 2 */</comment>
        <expr_stmt><expr><call><name>FMPI2C_RESET_CR2</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_FMPI2C_ERROR_NONE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>Tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_TIMEOUT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles Acknowledge failed detection during an FMPI2C Communication.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>FMPI2C_IsAcknowledgeFailed</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Tickstart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Wait until STOP Flag is reset */</comment>
    <comment type="block">/* AutoEnd should be initiate after AF */</comment>
    <while>while <condition>(<expr><call><name>__HAL_FMPI2C_GET_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check for the Timeout */</comment>
      <if_stmt><if>if <condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>Tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_TIMEOUT</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

          <comment type="block">/* Process Unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Clear NACKF Flag */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_AF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear STOP Flag */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>FMPI2C_FLAG_STOPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Flush TX register */</comment>
    <expr_stmt><expr><call><name>FMPI2C_Flush_TXDR</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear Configuration Register 2 */</comment>
    <expr_stmt><expr><call><name>FMPI2C_RESET_CR2</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_FMPI2C_ERROR_AF</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Mode</name></name> <operator>=</operator> <name>HAL_FMPI2C_MODE_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Handles FMPI2Cx communication when starting transfer or during transfer (TC or TCR flag are set).
  * @param  hfmpi2c FMPI2C handle.
  * @param  DevAddress Specifies the slave address to be programmed.
  * @param  Size Specifies the number of bytes to be programmed.
  *   This parameter must be a value between 0 and 255.
  * @param  Mode New state of the FMPI2C START condition generation.
  *   This parameter can be one of the following values:
  *     @arg @ref FMPI2C_RELOAD_MODE Enable Reload mode .
  *     @arg @ref FMPI2C_AUTOEND_MODE Enable Automatic end mode.
  *     @arg @ref FMPI2C_SOFTEND_MODE Enable Software end mode.
  * @param  Request New state of the FMPI2C START condition generation.
  *   This parameter can be one of the following values:
  *     @arg @ref FMPI2C_NO_STARTSTOP Don't Generate stop and start condition.
  *     @arg @ref FMPI2C_GENERATE_STOP Generate stop condition (Size should be set to 0).
  *     @arg @ref FMPI2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref FMPI2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_TransferConfig</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>DevAddress</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Mode</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TRANSFER_MODE</name><argument_list>(<argument><expr><name>Mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_TRANSFER_REQUEST</name><argument_list>(<argument><expr><name>Request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* update CR2 register */</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>FMPI2C_CR2_SADD</name> <operator>|</operator> <name>FMPI2C_CR2_NBYTES</name> <operator>|</operator> <name>FMPI2C_CR2_RELOAD</name> <operator>|</operator> <name>FMPI2C_CR2_AUTOEND</name> <operator>|</operator> <operator>(</operator><name>FMPI2C_CR2_RD_WRN</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>Request</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">31U</literal> <operator>-</operator> <name>FMPI2C_CR2_RD_WRN_Pos</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>|</operator> <name>FMPI2C_CR2_START</name> <operator>|</operator> <name>FMPI2C_CR2_STOP</name><operator>)</operator><operator>)</operator></expr></argument>, \
             <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>DevAddress</name> <operator>&amp;</operator> <name>FMPI2C_CR2_SADD</name><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>Size</name> <operator>&lt;&lt;</operator> <name>FMPI2C_CR2_NBYTES_Pos</name><operator>)</operator> <operator>&amp;</operator> <name>FMPI2C_CR2_NBYTES</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>Mode</name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>Request</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Manage the enabling of Interrupts.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  InterruptRequest Value of @ref FMPI2C_Interrupt_configuration_definition.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_Enable_IRQ</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>InterruptRequest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpisr</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name> <operator>==</operator> <name>FMPI2C_Master_ISR_DMA</name><operator>)</operator> <operator>||</operator> \
      <operator>(</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferISR</name></name> <operator>==</operator> <name>FMPI2C_Slave_ISR_DMA</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>InterruptRequest</name> <operator>&amp;</operator> <name>FMPI2C_XFER_LISTEN_IT</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_XFER_LISTEN_IT</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable ERR, STOP, NACK and ADDR interrupts */</comment>
      <expr_stmt><expr><name>tmpisr</name> <operator>|=</operator> <name>FMPI2C_IT_ADDRI</name> <operator>|</operator> <name>FMPI2C_IT_STOPI</name> <operator>|</operator> <name>FMPI2C_IT_NACKI</name> <operator>|</operator> <name>FMPI2C_IT_ERRI</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>InterruptRequest</name> <operator>&amp;</operator> <name>FMPI2C_XFER_ERROR_IT</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_XFER_ERROR_IT</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable ERR and NACK interrupts */</comment>
      <expr_stmt><expr><name>tmpisr</name> <operator>|=</operator> <name>FMPI2C_IT_ERRI</name> <operator>|</operator> <name>FMPI2C_IT_NACKI</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>InterruptRequest</name> <operator>&amp;</operator> <name>FMPI2C_XFER_CPLT_IT</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_XFER_CPLT_IT</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable STOP interrupts */</comment>
      <expr_stmt><expr><name>tmpisr</name> <operator>|=</operator> <name>FMPI2C_IT_STOPI</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>InterruptRequest</name> <operator>&amp;</operator> <name>FMPI2C_XFER_RELOAD_IT</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_XFER_RELOAD_IT</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable TC interrupts */</comment>
      <expr_stmt><expr><name>tmpisr</name> <operator>|=</operator> <name>FMPI2C_IT_TCI</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>InterruptRequest</name> <operator>&amp;</operator> <name>FMPI2C_XFER_LISTEN_IT</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_XFER_LISTEN_IT</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable ERR, STOP, NACK, and ADDR interrupts */</comment>
      <expr_stmt><expr><name>tmpisr</name> <operator>|=</operator> <name>FMPI2C_IT_ADDRI</name> <operator>|</operator> <name>FMPI2C_IT_STOPI</name> <operator>|</operator> <name>FMPI2C_IT_NACKI</name> <operator>|</operator> <name>FMPI2C_IT_ERRI</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>InterruptRequest</name> <operator>&amp;</operator> <name>FMPI2C_XFER_TX_IT</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_XFER_TX_IT</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable ERR, TC, STOP, NACK and RXI interrupts */</comment>
      <expr_stmt><expr><name>tmpisr</name> <operator>|=</operator> <name>FMPI2C_IT_ERRI</name> <operator>|</operator> <name>FMPI2C_IT_TCI</name> <operator>|</operator> <name>FMPI2C_IT_STOPI</name> <operator>|</operator> <name>FMPI2C_IT_NACKI</name> <operator>|</operator> <name>FMPI2C_IT_TXI</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>InterruptRequest</name> <operator>&amp;</operator> <name>FMPI2C_XFER_RX_IT</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_XFER_RX_IT</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable ERR, TC, STOP, NACK and TXI interrupts */</comment>
      <expr_stmt><expr><name>tmpisr</name> <operator>|=</operator> <name>FMPI2C_IT_ERRI</name> <operator>|</operator> <name>FMPI2C_IT_TCI</name> <operator>|</operator> <name>FMPI2C_IT_STOPI</name> <operator>|</operator> <name>FMPI2C_IT_NACKI</name> <operator>|</operator> <name>FMPI2C_IT_RXI</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>InterruptRequest</name> <operator>&amp;</operator> <name>FMPI2C_XFER_CPLT_IT</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_XFER_CPLT_IT</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable STOP interrupts */</comment>
      <expr_stmt><expr><name>tmpisr</name> <operator>|=</operator> <name>FMPI2C_IT_STOPI</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Enable interrupts only at the end */</comment>
  <comment type="block">/* to avoid the risk of FMPI2C interrupt handle execution before */</comment>
  <comment type="block">/* all interrupts requested done */</comment>
  <expr_stmt><expr><call><name>__HAL_FMPI2C_ENABLE_IT</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>tmpisr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Manage the disabling of Interrupts.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @param  InterruptRequest Value of @ref FMPI2C_Interrupt_configuration_definition.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_Disable_IRQ</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>InterruptRequest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpisr</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>InterruptRequest</name> <operator>&amp;</operator> <name>FMPI2C_XFER_TX_IT</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_XFER_TX_IT</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable TC and TXI interrupts */</comment>
    <expr_stmt><expr><name>tmpisr</name> <operator>|=</operator> <name>FMPI2C_IT_TCI</name> <operator>|</operator> <name>FMPI2C_IT_TXI</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>HAL_FMPI2C_STATE_LISTEN</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>HAL_FMPI2C_STATE_LISTEN</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable NACK and STOP interrupts */</comment>
      <expr_stmt><expr><name>tmpisr</name> <operator>|=</operator> <name>FMPI2C_IT_STOPI</name> <operator>|</operator> <name>FMPI2C_IT_NACKI</name> <operator>|</operator> <name>FMPI2C_IT_ERRI</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>InterruptRequest</name> <operator>&amp;</operator> <name>FMPI2C_XFER_RX_IT</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_XFER_RX_IT</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable TC and RXI interrupts */</comment>
    <expr_stmt><expr><name>tmpisr</name> <operator>|=</operator> <name>FMPI2C_IT_TCI</name> <operator>|</operator> <name>FMPI2C_IT_RXI</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>HAL_FMPI2C_STATE_LISTEN</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>HAL_FMPI2C_STATE_LISTEN</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable NACK and STOP interrupts */</comment>
      <expr_stmt><expr><name>tmpisr</name> <operator>|=</operator> <name>FMPI2C_IT_STOPI</name> <operator>|</operator> <name>FMPI2C_IT_NACKI</name> <operator>|</operator> <name>FMPI2C_IT_ERRI</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>InterruptRequest</name> <operator>&amp;</operator> <name>FMPI2C_XFER_LISTEN_IT</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_XFER_LISTEN_IT</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable ADDR, NACK and STOP interrupts */</comment>
    <expr_stmt><expr><name>tmpisr</name> <operator>|=</operator> <name>FMPI2C_IT_ADDRI</name> <operator>|</operator> <name>FMPI2C_IT_STOPI</name> <operator>|</operator> <name>FMPI2C_IT_NACKI</name> <operator>|</operator> <name>FMPI2C_IT_ERRI</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>InterruptRequest</name> <operator>&amp;</operator> <name>FMPI2C_XFER_ERROR_IT</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_XFER_ERROR_IT</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable ERR and NACK interrupts */</comment>
    <expr_stmt><expr><name>tmpisr</name> <operator>|=</operator> <name>FMPI2C_IT_ERRI</name> <operator>|</operator> <name>FMPI2C_IT_NACKI</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>InterruptRequest</name> <operator>&amp;</operator> <name>FMPI2C_XFER_CPLT_IT</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_XFER_CPLT_IT</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable STOP interrupts */</comment>
    <expr_stmt><expr><name>tmpisr</name> <operator>|=</operator> <name>FMPI2C_IT_STOPI</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>InterruptRequest</name> <operator>&amp;</operator> <name>FMPI2C_XFER_RELOAD_IT</name><operator>)</operator> <operator>==</operator> <name>FMPI2C_XFER_RELOAD_IT</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable TC interrupts */</comment>
    <expr_stmt><expr><name>tmpisr</name> <operator>|=</operator> <name>FMPI2C_IT_TCI</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Disable interrupts only at the end */</comment>
  <comment type="block">/* to avoid a breaking situation like at "t" time */</comment>
  <comment type="block">/* all disable interrupts request are not done */</comment>
  <expr_stmt><expr><call><name>__HAL_FMPI2C_DISABLE_IT</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>, <argument><expr><name>tmpisr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Convert FMPI2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FMPI2C_ConvertOtherXferOptions</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* if user set XferOptions to FMPI2C_OTHER_FRAME            */</comment>
  <comment type="block">/* it request implicitly to generate a restart condition */</comment>
  <comment type="block">/* set XferOptions to FMPI2C_FIRST_FRAME                    */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>==</operator> <name>FMPI2C_OTHER_FRAME</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>FMPI2C_FIRST_FRAME</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <comment type="block">/* else if user set XferOptions to FMPI2C_OTHER_AND_LAST_FRAME */</comment>
  <comment type="block">/* it request implicitly to generate a restart condition    */</comment>
  <comment type="block">/* then generate a stop condition at the end of transfer    */</comment>
  <comment type="block">/* set XferOptions to FMPI2C_FIRST_AND_LAST_FRAME              */</comment>
  <if type="elseif">else if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>==</operator> <name>FMPI2C_OTHER_AND_LAST_FRAME</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>XferOptions</name></name> <operator>=</operator> <name>FMPI2C_FIRST_AND_LAST_FRAME</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Nothing to do */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FMPI2C_CR1_PE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_FMPI2C_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
