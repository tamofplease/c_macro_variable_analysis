<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rng.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_rng.c
  * @author  MCD Application Team
  * @brief   RNG HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the Random Number Generator (RNG) peripheral:
  *           + Initialization and configuration functions
  *           + Peripheral Control functions
  *           + Peripheral State functions
  *
  @verbatim
  ==============================================================================
                     ##### How to use this driver #####
  ==============================================================================
  [..]
      The RNG HAL driver can be used as follows:

      (#) Enable the RNG controller clock using __HAL_RCC_RNG_CLK_ENABLE() macro
          in HAL_RNG_MspInit().
      (#) Activate the RNG peripheral using HAL_RNG_Init() function.
      (#) Wait until the 32 bit Random Number Generator contains a valid
          random data using (polling/interrupt) mode.
      (#) Get the 32 bit random number using HAL_RNG_GenerateRandomNumber() function.

    ##### Callback registration #####
    ==================================

    [..]
    The compilation define USE_HAL_RNG_REGISTER_CALLBACKS when set to 1
    allows the user to configure dynamically the driver callbacks.

    [..]
    Use Function @ref HAL_RNG_RegisterCallback() to register a user callback.
    Function @ref HAL_RNG_RegisterCallback() allows to register following callbacks:
    (+) ErrorCallback             : RNG Error Callback.
    (+) MspInitCallback           : RNG MspInit.
    (+) MspDeInitCallback         : RNG MspDeInit.
    This function takes as parameters the HAL peripheral handle, the Callback ID
    and a pointer to the user callback function.

    [..]
    Use function @ref HAL_RNG_UnRegisterCallback() to reset a callback to the default
    weak (surcharged) function.
    @ref HAL_RNG_UnRegisterCallback() takes as parameters the HAL peripheral handle,
    and the Callback ID.
    This function allows to reset following callbacks:
    (+) ErrorCallback             : RNG Error Callback.
    (+) MspInitCallback           : RNG MspInit.
    (+) MspDeInitCallback         : RNG MspDeInit.

    [..]
    For specific callback ReadyDataCallback, use dedicated register callbacks:
    respectively @ref HAL_RNG_RegisterReadyDataCallback() , @ref HAL_RNG_UnRegisterReadyDataCallback().

    [..]
    By default, after the @ref HAL_RNG_Init() and when the state is HAL_RNG_STATE_RESET
    all callbacks are set to the corresponding weak (surcharged) functions:
    example @ref HAL_RNG_ErrorCallback().
    Exception done for MspInit and MspDeInit functions that are respectively
    reset to the legacy weak (surcharged) functions in the @ref HAL_RNG_Init()
    and @ref HAL_RNG_DeInit() only when these callbacks are null (not registered beforehand).
    If not, MspInit or MspDeInit are not null, the @ref HAL_RNG_Init() and @ref HAL_RNG_DeInit()
    keep and use the user MspInit/MspDeInit callbacks (registered beforehand).

    [..]
    Callbacks can be registered/unregistered in HAL_RNG_STATE_READY state only.
    Exception done MspInit/MspDeInit that can be registered/unregistered
    in HAL_RNG_STATE_READY or HAL_RNG_STATE_RESET state, thus registered (user)
    MspInit/DeInit callbacks can be used during the Init/DeInit.
    In that case first register the MspInit/MspDeInit user callbacks
    using @ref HAL_RNG_RegisterCallback() before calling @ref HAL_RNG_DeInit()
    or @ref HAL_RNG_Init() function.

    [..]
    When The compilation define USE_HAL_RNG_REGISTER_CALLBACKS is set to 0 or
    not defined, the callback registration feature is not available
    and weak (surcharged) callbacks are used.

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>RNG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block" format="doxygen">/** @addtogroup RNG
  * @brief RNG HAL module driver.
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_RNG_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block">/* Private types -------------------------------------------------------------*/</comment>
<comment type="block">/* Private defines -----------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private constants ---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup RNG_Private_Constants RNG Private Constants
  * @{
  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RNG_TIMEOUT_VALUE</name></cpp:macro>     <cpp:value>2U</cpp:value></cpp:define>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<comment type="block">/* Private macros ------------------------------------------------------------*/</comment>
<comment type="block">/* Private functions prototypes ----------------------------------------------*/</comment>
<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>
<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @addtogroup RNG_Exported_Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup RNG_Exported_Functions_Group1
 *  @brief   Initialization and configuration functions
 *
@verbatim
 ===============================================================================
          ##### Initialization and configuration functions #####
 ===============================================================================
    [..]  This section provides functions allowing to:
      (+) Initialize the RNG according to the specified parameters
          in the RNG_InitTypeDef and create the associated handle
      (+) DeInitialize the RNG peripheral
      (+) Initialize the RNG MSP
      (+) DeInitialize RNG MSP

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the RNG peripheral and creates the associated handle.
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RNG_Init</name><parameter_list>(<parameter><decl><type><name>RNG_HandleTypeDef</name> <modifier>*</modifier></type><name>hrng</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the RNG handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>hrng</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_RNG_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hrng</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_RNG_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>hrng</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_RNG_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ReadyDataCallback</name></name>  <operator>=</operator> <name>HAL_RNG_ReadyDataCallback</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak ReadyDataCallback  */</comment>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCallback</name></name>      <operator>=</operator> <name>HAL_RNG_ErrorCallback</name></expr>;</expr_stmt>      <comment type="block">/* Legacy weak ErrorCallback      */</comment>

    <if_stmt><if>if <condition>(<expr><name><name>hrng</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_RNG_MspInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MspInit  */</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>hrng</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><name><name>hrng</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_RNG_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name>HAL_RNG_MspInit</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_RNG_REGISTER_CALLBACKS */</comment>

  <comment type="block">/* Change RNG peripheral state */</comment>
  <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RNG_STATE_BUSY</name></expr>;</expr_stmt>


  <comment type="block">/* Enable the RNG Peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_RNG_ENABLE</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize the RNG state */</comment>
  <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RNG_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Initialise the error code */</comment>
  <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_RNG_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitializes the RNG peripheral.
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RNG_DeInit</name><parameter_list>(<parameter><decl><type><name>RNG_HandleTypeDef</name> <modifier>*</modifier></type><name>hrng</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the RNG handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>hrng</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Disable the RNG Peripheral */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hrng</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>RNG_CR_IE</name> <operator>|</operator> <name>RNG_CR_RNGEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Clear RNG interrupt status flags */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hrng</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>RNG_SR_CEIS</name> <operator>|</operator> <name>RNG_SR_SEIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_RNG_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>hrng</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_RNG_MspDeInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MspDeInit  */</comment>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name><name>hrng</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name>HAL_RNG_MspDeInit</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_RNG_REGISTER_CALLBACKS */</comment>

  <comment type="block">/* Update the RNG state */</comment>
  <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RNG_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Initialise the error code */</comment>
  <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_RNG_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return the function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initializes the RNG MSP.
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_RNG_MspInit</name><parameter_list>(<parameter><decl><type><name>RNG_HandleTypeDef</name> <modifier>*</modifier></type><name>hrng</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitializes the RNG MSP.
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_RNG_MspDeInit</name><parameter_list>(<parameter><decl><type><name>RNG_HandleTypeDef</name> <modifier>*</modifier></type><name>hrng</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspDeInit must be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_RNG_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User RNG Callback
  *         To be used instead of the weak predefined callback
  * @param  hrng RNG handle
  * @param  CallbackID ID of the callback to be registered
  *         This parameter can be one of the following values:
  *          @arg @ref HAL_RNG_ERROR_CB_ID Error callback ID
  *          @arg @ref HAL_RNG_MSPINIT_CB_ID MspInit callback ID
  *          @arg @ref HAL_RNG_MSPDEINIT_CB_ID MspDeInit callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RNG_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>RNG_HandleTypeDef</name> <modifier>*</modifier></type><name>hrng</name></decl></parameter>, <parameter><decl><type><name>HAL_RNG_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>, <parameter><decl><type><name>pRNG_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_RNG_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>HAL_RNG_STATE_READY</name> <operator>==</operator> <name><name>hrng</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_RNG_ERROR_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_RNG_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_RNG_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <default>default :</default>
      <comment type="block">/* Update the error code */</comment>
      <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_RNG_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
     <comment type="block">/* Return error status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>HAL_RNG_STATE_RESET</name> <operator>==</operator> <name><name>hrng</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_RNG_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>HAL_RNG_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>

    <default>default :</default>
      <comment type="block">/* Update the error code */</comment>
      <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_RNG_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
     <comment type="block">/* Return error status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_RNG_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister an RNG Callback
  *         RNG callabck is redirected to the weak predefined callback
  * @param  hrng RNG handle
  * @param  CallbackID ID of the callback to be unregistered
  *         This parameter can be one of the following values:
  *          @arg @ref HAL_RNG_ERROR_CB_ID Error callback ID
  *          @arg @ref HAL_RNG_MSPINIT_CB_ID MspInit callback ID
  *          @arg @ref HAL_RNG_MSPDEINIT_CB_ID MspDeInit callback ID
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RNG_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>RNG_HandleTypeDef</name> <modifier>*</modifier></type><name>hrng</name></decl></parameter>, <parameter><decl><type><name>HAL_RNG_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>HAL_RNG_STATE_READY</name> <operator>==</operator> <name><name>hrng</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_RNG_ERROR_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>HAL_RNG_ErrorCallback</name></expr>;</expr_stmt>          <comment type="block">/* Legacy weak ErrorCallback  */</comment>
      <break>break;</break>

    <case>case <expr><name>HAL_RNG_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_RNG_MspInit</name></expr>;</expr_stmt>              <comment type="block">/* Legacy weak MspInit  */</comment>
      <break>break;</break>

    <case>case <expr><name>HAL_RNG_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_RNG_MspDeInit</name></expr>;</expr_stmt>          <comment type="block">/* Legacy weak MspDeInit  */</comment>
      <break>break;</break>

    <default>default :</default>
      <comment type="block">/* Update the error code */</comment>
      <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_RNG_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
     <comment type="block">/* Return error status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>HAL_RNG_STATE_RESET</name> <operator>==</operator> <name><name>hrng</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_RNG_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_RNG_MspInit</name></expr>;</expr_stmt>              <comment type="block">/* Legacy weak MspInit  */</comment>
      <break>break;</break>

    <case>case <expr><name>HAL_RNG_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_RNG_MspDeInit</name></expr>;</expr_stmt>          <comment type="block">/* Legacy weak MspInit  */</comment>
      <break>break;</break>

    <default>default :</default>
      <comment type="block">/* Update the error code */</comment>
      <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_RNG_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
     <comment type="block">/* Return error status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_RNG_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Register Data Ready RNG Callback
  *         To be used instead of the weak HAL_RNG_ReadyDataCallback() predefined callback
  * @param  hrng RNG handle
  * @param  pCallback pointer to the Data Ready Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RNG_RegisterReadyDataCallback</name><parameter_list>(<parameter><decl><type><name>RNG_HandleTypeDef</name> <modifier>*</modifier></type><name>hrng</name></decl></parameter>, <parameter><decl><type><name>pRNG_ReadyDataCallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_RNG_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>HAL_RNG_STATE_READY</name> <operator>==</operator> <name><name>hrng</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ReadyDataCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_RNG_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  UnRegister the Data Ready RNG Callback
  *         Data Ready RNG Callback is redirected to the weak HAL_RNG_ReadyDataCallback() predefined callback
  * @param  hrng RNG handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RNG_UnRegisterReadyDataCallback</name><parameter_list>(<parameter><decl><type><name>RNG_HandleTypeDef</name> <modifier>*</modifier></type><name>hrng</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>HAL_RNG_STATE_READY</name> <operator>==</operator> <name><name>hrng</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ReadyDataCallback</name></name> <operator>=</operator> <name>HAL_RNG_ReadyDataCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak ReadyDataCallback  */</comment>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_RNG_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_RNG_REGISTER_CALLBACKS */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup RNG_Exported_Functions_Group2
 *  @brief   Peripheral Control functions
 *
@verbatim
 ===============================================================================
                      ##### Peripheral Control functions #####
 ===============================================================================
    [..]  This section provides functions allowing to:
      (+) Get the 32 bit Random number
      (+) Get the 32 bit Random number with interrupt enabled
      (+) Handle RNG interrupt request

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Generates a 32-bit random number.
  * @note   Each time the random number data is read the RNG_FLAG_DRDY flag
  *         is automatically cleared.
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */</comment>

<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RNG_GenerateRandomNumber</name><parameter_list>(<parameter><decl><type><name>RNG_HandleTypeDef</name> <modifier>*</modifier></type><name>hrng</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>random32bit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check RNG peripheral state */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hrng</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_RNG_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Change RNG peripheral state */</comment>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RNG_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check if data register contains valid random data */</comment>
    <while>while <condition>(<expr><call><name>__HAL_RNG_GET_FLAG</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>, <argument><expr><name>RNG_FLAG_DRDY</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>RNG_TIMEOUT_VALUE</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RNG_STATE_READY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_RNG_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Get a 32bit Random number */</comment>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>RandomNumber</name></name> <operator>=</operator> <name><name>hrng</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>random32bit</name> <operator>=</operator> <name><name>hrng</name><operator>-&gt;</operator><name>RandomNumber</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RNG_STATE_READY</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_RNG_ERROR_BUSY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Generates a 32-bit random number in interrupt mode.
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_RNG_GenerateRandomNumber_IT</name><parameter_list>(<parameter><decl><type><name>RNG_HandleTypeDef</name> <modifier>*</modifier></type><name>hrng</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check RNG peripheral state */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hrng</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_RNG_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Change RNG peripheral state */</comment>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RNG_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Enable the RNG Interrupts: Data Ready, Clock error, Seed error */</comment>
    <expr_stmt><expr><call><name>__HAL_RNG_ENABLE_IT</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_RNG_ERROR_BUSY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns generated random number in polling mode (Obsolete)
  *         Use HAL_RNG_GenerateRandomNumber() API instead.
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RNG_GetRandomNumber</name><parameter_list>(<parameter><decl><type><name>RNG_HandleTypeDef</name> <modifier>*</modifier></type><name>hrng</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><call><name>HAL_RNG_GenerateRandomNumber</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>hrng</name><operator>-&gt;</operator><name>RandomNumber</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name><name>hrng</name><operator>-&gt;</operator><name>RandomNumber</name></name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><literal type="number">0U</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns a 32-bit random number with interrupt enabled (Obsolete),
  *         Use HAL_RNG_GenerateRandomNumber_IT() API instead.
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval 32-bit random number
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RNG_GetRandomNumber_IT</name><parameter_list>(<parameter><decl><type><name>RNG_HandleTypeDef</name> <modifier>*</modifier></type><name>hrng</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>random32bit</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change RNG peripheral state */</comment>
  <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RNG_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Get a 32bit Random number */</comment>
  <expr_stmt><expr><name>random32bit</name> <operator>=</operator> <name><name>hrng</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</expr_stmt>

  <comment type="block">/* Enable the RNG Interrupts: Data Ready, Clock error, Seed error */</comment>
  <expr_stmt><expr><call><name>__HAL_RNG_ENABLE_IT</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return the 32 bit random number */</comment>
  <return>return <expr><name>random32bit</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Handles RNG interrupt request.
  * @note   In the case of a clock error, the RNG is no more able to generate
  *         random numbers because the PLL48CLK clock is not correct. User has
  *         to check that the clock controller is correctly configured to provide
  *         the RNG clock and clear the CEIS bit using __HAL_RNG_CLEAR_IT().
  *         The clock error has no impact on the previously generated
  *         random numbers, and the RNG_DR register contents can be used.
  * @note   In the case of a seed error, the generation of random numbers is
  *         interrupted as long as the SECS bit is '1'. If a number is
  *         available in the RNG_DR register, it must not be used because it may
  *         not have enough entropy. In this case, it is recommended to clear the
  *         SEIS bit using __HAL_RNG_CLEAR_IT(), then disable and enable
  *         the RNG peripheral to reinitialize and restart the RNG.
  * @note   User-written HAL_RNG_ErrorCallback() API is called once whether SEIS
  *         or CEIS are set.
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None

  */</comment>
<function><type><name>void</name></type> <name>HAL_RNG_IRQHandler</name><parameter_list>(<parameter><decl><type><name>RNG_HandleTypeDef</name> <modifier>*</modifier></type><name>hrng</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>rngclockerror</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* RNG clock error interrupt occurred */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>__HAL_RNG_GET_IT</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>, <argument><expr><name>RNG_IT_CEI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_RNG_ERROR_SEED</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rngclockerror</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>__HAL_RNG_GET_IT</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>, <argument><expr><name>RNG_IT_SEI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_RNG_ERROR_CLOCK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rngclockerror</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Nothing to do */</comment>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>rngclockerror</name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Change RNG peripheral state */</comment>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RNG_STATE_ERROR</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_RNG_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/* Call registered Error callback */</comment>
    <expr_stmt><expr><call><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Call legacy weak Error callback */</comment>
    <expr_stmt><expr><call><name>HAL_RNG_ErrorCallback</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_RNG_REGISTER_CALLBACKS */</comment>

    <comment type="block">/* Clear the clock error flag */</comment>
    <expr_stmt><expr><call><name>__HAL_RNG_CLEAR_IT</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>, <argument><expr><name>RNG_IT_CEI</name> <operator>|</operator> <name>RNG_IT_SEI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check RNG data ready interrupt occurred */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>__HAL_RNG_GET_IT</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>, <argument><expr><name>RNG_IT_DRDY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Generate random number once, so disable the IT */</comment>
    <expr_stmt><expr><call><name>__HAL_RNG_DISABLE_IT</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get the 32bit Random number (DRDY flag automatically cleared) */</comment>
    <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>RandomNumber</name></name> <operator>=</operator> <name><name>hrng</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hrng</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_RNG_STATE_ERROR</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Change RNG peripheral state */</comment>
      <expr_stmt><expr><name><name>hrng</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_RNG_STATE_READY</name></expr>;</expr_stmt>
      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_RNG_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <comment type="block">/* Call registered Data Ready callback */</comment>
      <expr_stmt><expr><call><name><name>hrng</name><operator>-&gt;</operator><name>ReadyDataCallback</name></name><argument_list>(<argument><expr><name>hrng</name></expr></argument>, <argument><expr><name><name>hrng</name><operator>-&gt;</operator><name>RandomNumber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/* Call legacy weak Data Ready callback */</comment>
      <expr_stmt><expr><call><name>HAL_RNG_ReadyDataCallback</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>, <argument><expr><name><name>hrng</name><operator>-&gt;</operator><name>RandomNumber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_RNG_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Read latest generated random number.
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval random value
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RNG_ReadLastRandomNumber</name><parameter_list>(<parameter><decl><type><name>RNG_HandleTypeDef</name> <modifier>*</modifier></type><name>hrng</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>hrng</name><operator>-&gt;</operator><name>RandomNumber</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Data Ready callback in non-blocking mode.
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_RNG_ReadyDataCallback</name><parameter_list>(<parameter><decl><type><name>RNG_HandleTypeDef</name> <modifier>*</modifier></type><name>hrng</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>random32bit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>random32bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  RNG error callbacks.
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_RNG_ErrorCallback</name><parameter_list>(<parameter><decl><type><name>RNG_HandleTypeDef</name> <modifier>*</modifier></type><name>hrng</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */</comment>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>


<comment type="block" format="doxygen">/** @addtogroup RNG_Exported_Functions_Group3
 *  @brief   Peripheral State functions
 *
@verbatim
 ===============================================================================
                      ##### Peripheral State functions #####
 ===============================================================================
    [..]
    This subsection permits to get in run-time the status of the peripheral
    and the data flow.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Returns the RNG state.
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL state
  */</comment>
<function><type><name>HAL_RNG_StateTypeDef</name></type> <name>HAL_RNG_GetState</name><parameter_list>(<parameter><decl><type><name>RNG_HandleTypeDef</name> <modifier>*</modifier></type><name>hrng</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hrng</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the RNG handle error code.
  * @param  hrng: pointer to a RNG_HandleTypeDef structure.
  * @retval RNG Error Code
*/</comment>
<function><type><name>uint32_t</name></type> <name>HAL_RNG_GetError</name><parameter_list>(<parameter><decl><type><name>RNG_HandleTypeDef</name> <modifier>*</modifier></type><name>hrng</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Return RNG Error Code */</comment>
  <return>return <expr><name><name>hrng</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_RNG_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RNG */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
