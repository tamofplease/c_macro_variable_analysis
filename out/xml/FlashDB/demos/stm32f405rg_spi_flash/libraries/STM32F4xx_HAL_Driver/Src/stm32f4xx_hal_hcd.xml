<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_hcd.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_hcd.c
  * @author  MCD Application Team
  * @brief   HCD HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the USB Peripheral Controller:
  *           + Initialization and de-initialization functions
  *           + IO operation functions
  *           + Peripheral Control functions
  *           + Peripheral State functions
  *
  @verbatim
  ==============================================================================
                    ##### How to use this driver #####
  ==============================================================================
  [..]
    (#)Declare a HCD_HandleTypeDef handle structure, for example:
       HCD_HandleTypeDef  hhcd;

    (#)Fill parameters of Init structure in HCD handle

    (#)Call HAL_HCD_Init() API to initialize the HCD peripheral (Core, Host core, ...)

    (#)Initialize the HCD low level resources through the HAL_HCD_MspInit() API:
        (##) Enable the HCD/USB Low Level interface clock using the following macros
             (+++) __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
             (+++) __HAL_RCC_USB_OTG_HS_CLK_ENABLE(); (For High Speed Mode)
             (+++) __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE(); (For High Speed Mode)

        (##) Initialize the related GPIO clocks
        (##) Configure HCD pin-out
        (##) Configure HCD NVIC interrupt

    (#)Associate the Upper USB Host stack to the HAL HCD Driver:
        (##) hhcd.pData = phost;

    (#)Enable HCD transmission and reception:
        (##) HAL_HCD_Start();

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_HCD_MODULE_ENABLED</name></cpp:ifdef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_FS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>USB_OTG_HS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block" format="doxygen">/** @defgroup HCD HCD
  * @brief HCD HAL module driver
  * @{
  */</comment>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup HCD_Private_Functions HCD Private Functions
  * @{
  */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>HCD_HC_IN_IRQHandler</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>chnum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>HCD_HC_OUT_IRQHandler</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>chnum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>HCD_RXQLVL_IRQHandler</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>HCD_Port_IRQHandler</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup HCD_Exported_Functions HCD Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup HCD_Exported_Functions_Group1 Initialization and de-initialization functions
 *  @brief    Initialization and Configuration functions
 *
@verbatim
 ===============================================================================
          ##### Initialization and de-initialization functions #####
 ===============================================================================
    [..]  This section provides functions allowing to:

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_HCD_Init</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name></decl>;</decl_stmt>

  <comment type="block">/* Check the HCD handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>hhcd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_HCD_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>USBx</name> <operator>=</operator> <name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_HCD_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_HCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>SOFCallback</name></name> <operator>=</operator> <name>HAL_HCD_SOF_Callback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>ConnectCallback</name></name> <operator>=</operator> <name>HAL_HCD_Connect_Callback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>DisconnectCallback</name></name> <operator>=</operator> <name>HAL_HCD_Disconnect_Callback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>PortEnabledCallback</name></name> <operator>=</operator> <name>HAL_HCD_PortEnabled_Callback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>PortDisabledCallback</name></name> <operator>=</operator> <name>HAL_HCD_PortDisabled_Callback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>HC_NotifyURBChangeCallback</name></name> <operator>=</operator> <name>HAL_HCD_HC_NotifyURBChange_Callback</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_HCD_MspInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>hhcd</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Init the low level hardware : GPIO, CLOCK, NVIC... */</comment>
    <expr_stmt><expr><call><name>HAL_HCD_MspInit</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (USE_HAL_HCD_REGISTER_CALLBACKS) */</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_HCD_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable DMA mode for FS instance */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>USBx</name><operator>-&gt;</operator><name>CID</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x1U</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Disable the Interrupts */</comment>
  <expr_stmt><expr><call><name>__HAL_HCD_DISABLE</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Init the Core (common init.) */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_CoreInit</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Init</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Force Host Mode*/</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_SetCurrentMode</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>USB_HOST_MODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Init Host */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_HostInit</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Init</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_HCD_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initialize a host channel.
  * @param  hhcd HCD handle
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @param  epnum Endpoint number.
  *          This parameter can be a value from 1 to 15
  * @param  dev_address Current device address
  *          This parameter can be a value from 0 to 255
  * @param  speed Current device speed.
  *          This parameter can be one of these values:
  *            HCD_SPEED_HIGH: High speed mode,
  *            HCD_SPEED_FULL: Full speed mode,
  *            HCD_SPEED_LOW: Low speed mode
  * @param  ep_type Endpoint Type.
  *          This parameter can be one of these values:
  *            EP_TYPE_CTRL: Control type,
  *            EP_TYPE_ISOC: Isochronous type,
  *            EP_TYPE_BULK: Bulk type,
  *            EP_TYPE_INTR: Interrupt type
  * @param  mps Max Packet Size.
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_HCD_HC_Init</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>,
                                  <parameter><decl><type><name>uint8_t</name></type> <name>ch_num</name></decl></parameter>,
                                  <parameter><decl><type><name>uint8_t</name></type> <name>epnum</name></decl></parameter>,
                                  <parameter><decl><type><name>uint8_t</name></type> <name>dev_address</name></decl></parameter>,
                                  <parameter><decl><type><name>uint8_t</name></type> <name>speed</name></decl></parameter>,
                                  <parameter><decl><type><name>uint8_t</name></type> <name>ep_type</name></decl></parameter>,
                                  <parameter><decl><type><name>uint16_t</name></type> <name>mps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>do_ping</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>dev_addr</name> <operator>=</operator> <name>dev_address</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>max_packet</name> <operator>=</operator> <name>mps</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ch_num</name> <operator>=</operator> <name>ch_num</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ep_type</name> <operator>=</operator> <name>ep_type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ep_num</name> <operator>=</operator> <name>epnum</name> <operator>&amp;</operator> <literal type="number">0x7FU</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>epnum</name> <operator>&amp;</operator> <literal type="number">0x80U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ep_is_in</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ep_is_in</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <name>speed</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>status</name> <operator>=</operator>  <call><name>USB_HC_Init</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>,
                        <argument><expr><name>ch_num</name></expr></argument>,
                        <argument><expr><name>epnum</name></expr></argument>,
                        <argument><expr><name>dev_address</name></expr></argument>,
                        <argument><expr><name>speed</name></expr></argument>,
                        <argument><expr><name>ep_type</name></expr></argument>,
                        <argument><expr><name>mps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Halt a host channel.
  * @param  hhcd HCD handle
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_HCD_HC_Halt</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>ch_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_HC_Halt</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_HCD_DeInit</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the HCD handle allocation */</comment>
  <if_stmt><if>if <condition>(<expr><name>hhcd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_HCD_STATE_BUSY</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_HCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_HCD_MspDeInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MspDeInit  */</comment>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name><name>hhcd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* DeInit the low level hardware: CLOCK, NVIC.*/</comment>
  <expr_stmt><expr><call><name>HAL_HCD_MspDeInit</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_HCD_REGISTER_CALLBACKS */</comment>

  <expr_stmt><expr><call><name>__HAL_HCD_DISABLE</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_HCD_STATE_RESET</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initialize the HCD MSP.
  * @param  hhcd HCD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type>  <name>HAL_HCD_MspInit</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_MspInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitialize the HCD MSP.
  * @param  hhcd HCD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type>  <name>HAL_HCD_MspDeInit</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_MspDeInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup HCD_Exported_Functions_Group2 Input and Output operation functions
  *  @brief   HCD IO operation functions
  *
@verbatim
 ===============================================================================
                      ##### IO operation functions #####
 ===============================================================================
 [..] This subsection provides a set of functions allowing to manage the USB Host Data
    Transfer

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Submit a new URB for processing.
  * @param  hhcd HCD handle
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @param  direction Channel number.
  *          This parameter can be one of these values:
  *           0 : Output / 1 : Input
  * @param  ep_type Endpoint Type.
  *          This parameter can be one of these values:
  *            EP_TYPE_CTRL: Control type/
  *            EP_TYPE_ISOC: Isochronous type/
  *            EP_TYPE_BULK: Bulk type/
  *            EP_TYPE_INTR: Interrupt type/
  * @param  token Endpoint Type.
  *          This parameter can be one of these values:
  *            0: HC_PID_SETUP / 1: HC_PID_DATA1
  * @param  pbuff pointer to URB data
  * @param  length Length of URB data
  * @param  do_ping activate do ping protocol (for high speed only).
  *          This parameter can be one of these values:
  *           0 : do ping inactive / 1 : do ping active
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_HCD_HC_SubmitRequest</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>,
                                           <parameter><decl><type><name>uint8_t</name></type> <name>ch_num</name></decl></parameter>,
                                           <parameter><decl><type><name>uint8_t</name></type> <name>direction</name></decl></parameter>,
                                           <parameter><decl><type><name>uint8_t</name></type> <name>ep_type</name></decl></parameter>,
                                           <parameter><decl><type><name>uint8_t</name></type> <name>token</name></decl></parameter>,
                                           <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pbuff</name></decl></parameter>,
                                           <parameter><decl><type><name>uint16_t</name></type> <name>length</name></decl></parameter>,
                                           <parameter><decl><type><name>uint8_t</name></type> <name>do_ping</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>do_ping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ep_is_in</name> <operator>=</operator> <name>direction</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ep_type</name>  <operator>=</operator> <name>ep_type</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>data_pid</name> <operator>=</operator> <name>HC_PID_SETUP</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>data_pid</name> <operator>=</operator> <name>HC_PID_DATA1</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Manage Data Toggle */</comment>
  <switch>switch <condition>(<expr><name>ep_type</name></expr>)</condition>
  <block>{<block_content>
    <case>case <expr><name>EP_TYPE_CTRL</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>token</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>direction</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition> <comment type="block">/*send data */</comment>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* For Status OUT stage, Length==0, Status Out PID = 1 */</comment>
          <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>toggle_out</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Set the Data Toggle bit as per the Flag */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>toggle_out</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Put the PID 0 */</comment>
          <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>data_pid</name> <operator>=</operator> <name>HC_PID_DATA0</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <comment type="block">/* Put the PID 1 */</comment>
          <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>data_pid</name> <operator>=</operator> <name>HC_PID_DATA1</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>

    <case>case <expr><name>EP_TYPE_BULK</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>direction</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Set the Data Toggle bit as per the Flag */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>toggle_out</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Put the PID 0 */</comment>
          <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>data_pid</name> <operator>=</operator> <name>HC_PID_DATA0</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <comment type="block">/* Put the PID 1 */</comment>
          <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>data_pid</name> <operator>=</operator> <name>HC_PID_DATA1</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>toggle_in</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>data_pid</name> <operator>=</operator> <name>HC_PID_DATA0</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>data_pid</name> <operator>=</operator> <name>HC_PID_DATA1</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>

      <break>break;</break>
    <case>case <expr><name>EP_TYPE_INTR</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>direction</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Set the Data Toggle bit as per the Flag */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>toggle_out</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Put the PID 0 */</comment>
          <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>data_pid</name> <operator>=</operator> <name>HC_PID_DATA0</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <comment type="block">/* Put the PID 1 */</comment>
          <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>data_pid</name> <operator>=</operator> <name>HC_PID_DATA1</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>toggle_in</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>data_pid</name> <operator>=</operator> <name>HC_PID_DATA0</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>data_pid</name> <operator>=</operator> <name>HC_PID_DATA1</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><name>EP_TYPE_ISOC</name></expr>:</case>
      <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>data_pid</name> <operator>=</operator> <name>HC_PID_DATA0</name></expr>;</expr_stmt>
      <break>break;</break>

    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>xfer_buff</name> <operator>=</operator> <name>pbuff</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>xfer_len</name>  <operator>=</operator> <name>length</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>urb_state</name> <operator>=</operator> <name>URB_IDLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>xfer_count</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ch_num</name> <operator>=</operator> <name>ch_num</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>HC_IDLE</name></expr>;</expr_stmt>

  <return>return <expr><call><name>USB_HC_StartXfer</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>hhcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_HCD_IRQHandler</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name> <init>= <expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>interrupt</name></decl>;</decl_stmt>

  <comment type="block">/* Ensure that we are in device mode */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>USB_GetMode</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>USB_OTG_MODE_HOST</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Avoid spurious interrupt */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_HCD_IS_INVALID_INTERRUPT</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>__HAL_HCD_GET_FLAG</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_PXFR_INCOMPISOOUT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Incorrect mode, acknowledge the interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_PXFR_INCOMPISOOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>__HAL_HCD_GET_FLAG</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_IISOIXFR</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Incorrect mode, acknowledge the interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_IISOIXFR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>__HAL_HCD_GET_FLAG</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_PTXFE</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Incorrect mode, acknowledge the interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_PTXFE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>__HAL_HCD_GET_FLAG</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_MMIS</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Incorrect mode, acknowledge the interrupt */</comment>
      <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_MMIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Handle Host Disconnect Interrupts */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_HCD_GET_FLAG</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_DISCINT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

      <comment type="block">/* Cleanup HPRT */</comment>
      <expr_stmt><expr><name>USBx_HPRT0</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_HPRT_PENA</name> <operator>|</operator> <name>USB_OTG_HPRT_PCDET</name> <operator>|</operator> \
                      <name>USB_OTG_HPRT_PENCHNG</name> <operator>|</operator> <name>USB_OTG_HPRT_POCCHNG</name><operator>)</operator></expr>;</expr_stmt>

      <comment type="block">/* Handle Host Port Disconnect Interrupt */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_HCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hhcd</name><operator>-&gt;</operator><name>DisconnectCallback</name></name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_HCD_Disconnect_Callback</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_HCD_REGISTER_CALLBACKS */</comment>

      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_InitFSLSPClkSel</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>HCFG_48_MHZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_DISCINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Handle Host Port Interrupts */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_HCD_GET_FLAG</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_HPRTINT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>HCD_Port_IRQHandler</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Handle Host SOF Interrupt */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_HCD_GET_FLAG</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_SOF</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_HCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hhcd</name><operator>-&gt;</operator><name>SOFCallback</name></name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_HCD_SOF_Callback</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_HCD_REGISTER_CALLBACKS */</comment>

      <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_SOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Handle Host channel Interrupt */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_HCD_GET_FLAG</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_HCINT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>interrupt</name> <operator>=</operator> <call><name>USB_HC_ReadInterrupt</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hhcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Host_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>interrupt</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0xFU</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>&amp;</operator> <name>USB_OTG_HCCHAR_EPDIR</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCCHAR_EPDIR</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><call><name>HCD_HC_IN_IRQHandler</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else
          <block>{<block_content>
            <expr_stmt><expr><call><name>HCD_HC_OUT_IRQHandler</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_HCINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Handle Rx Queue Level Interrupts */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>__HAL_HCD_GET_FLAG</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_RXFLVL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>USB_MASK_INTERRUPT</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_RXFLVL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>HCD_RXQLVL_IRQHandler</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>USB_UNMASK_INTERRUPT</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_RXFLVL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_HCD_SOF_Callback</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_HCD_Connect_Callback</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_HCD_Disconnect_Callback</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_HCD_PortEnabled_Callback</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_HCD_PortDisabled_Callback</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Notify URB state change callback.
  * @param  hhcd HCD handle
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @param  urb_state:
  *          This parameter can be one of these values:
  *            URB_IDLE/
  *            URB_DONE/
  *            URB_NOTREADY/
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_HCD_HC_NotifyURBChange_Callback</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>chnum</name></decl></parameter>, <parameter><decl><type><name>HCD_URBStateTypeDef</name></type> <name>urb_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>chnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>urb_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_HCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User USB HCD Callback
  *         To be used instead of the weak predefined callback
  * @param  hhcd USB HCD handle
  * @param  CallbackID ID of the callback to be registered
  *         This parameter can be one of the following values:
  *          @arg @ref HAL_HCD_SOF_CB_ID USB HCD SOF callback ID
  *          @arg @ref HAL_HCD_CONNECT_CB_ID USB HCD Connect callback ID
  *          @arg @ref HAL_HCD_DISCONNECT_CB_ID OTG HCD Disconnect callback ID
  *          @arg @ref HAL_HCD_PORT_ENABLED_CB_ID USB HCD Port Enable callback ID
  *          @arg @ref HAL_HCD_PORT_DISABLED_CB_ID USB HCD Port Disable callback ID
  *          @arg @ref HAL_HCD_MSPINIT_CB_ID MspDeInit callback ID
  *          @arg @ref HAL_HCD_MSPDEINIT_CB_ID MspDeInit callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_HCD_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>, <parameter><decl><type><name>HAL_HCD_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>, <parameter><decl><type><name>pHCD_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_HCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_HCD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_HCD_SOF_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>SOFCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_HCD_CONNECT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>ConnectCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_HCD_DISCONNECT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>DisconnectCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_HCD_PORT_ENABLED_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>PortEnabledCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_HCD_PORT_DISABLED_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>PortDisabledCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_HCD_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_HCD_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_HCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_HCD_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_HCD_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_HCD_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_HCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_HCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister an USB HCD Callback
  *         USB HCD callabck is redirected to the weak predefined callback
  * @param  hhcd USB HCD handle
  * @param  CallbackID ID of the callback to be unregistered
  *         This parameter can be one of the following values:
  *          @arg @ref HAL_HCD_SOF_CB_ID USB HCD SOF callback ID
  *          @arg @ref HAL_HCD_CONNECT_CB_ID USB HCD Connect callback ID
  *          @arg @ref HAL_HCD_DISCONNECT_CB_ID OTG HCD Disconnect callback ID
  *          @arg @ref HAL_HCD_PORT_ENABLED_CB_ID USB HCD Port Enabled callback ID
  *          @arg @ref HAL_HCD_PORT_DISABLED_CB_ID USB HCD Port Disabled callback ID
  *          @arg @ref HAL_HCD_MSPINIT_CB_ID MspDeInit callback ID
  *          @arg @ref HAL_HCD_MSPDEINIT_CB_ID MspDeInit callback ID
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_HCD_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>, <parameter><decl><type><name>HAL_HCD_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Setup Legacy weak Callbacks  */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_HCD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_HCD_SOF_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>SOFCallback</name></name> <operator>=</operator> <name>HAL_HCD_SOF_Callback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_HCD_CONNECT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>ConnectCallback</name></name> <operator>=</operator> <name>HAL_HCD_Connect_Callback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_HCD_DISCONNECT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>DisconnectCallback</name></name> <operator>=</operator> <name>HAL_HCD_Disconnect_Callback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_HCD_PORT_ENABLED_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>PortEnabledCallback</name></name> <operator>=</operator> <name>HAL_HCD_PortEnabled_Callback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_HCD_PORT_DISABLED_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>PortDisabledCallback</name></name> <operator>=</operator> <name>HAL_HCD_PortDisabled_Callback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_HCD_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_HCD_MspInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_HCD_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_HCD_MspDeInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_HCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_HCD_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_HCD_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_HCD_MspInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_HCD_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_HCD_MspDeInit</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_HCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_HCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Register USB HCD Host Channel Notify URB Change Callback
  *         To be used instead of the weak HAL_HCD_HC_NotifyURBChange_Callback() predefined callback
  * @param  hhcd HCD handle
  * @param  pCallback pointer to the USB HCD Host Channel Notify URB Change Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_HCD_RegisterHC_NotifyURBChangeCallback</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>, <parameter><decl><type><name>pHCD_HC_NotifyURBChangeCallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_HCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_HCD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>HC_NotifyURBChangeCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_HCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  UnRegister the USB HCD Host Channel Notify URB Change Callback
  *         USB HCD Host Channel Notify URB Change Callback is redirected to the weak HAL_HCD_HC_NotifyURBChange_Callback() predefined callback
  * @param  hhcd HCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_HCD_UnRegisterHC_NotifyURBChangeCallback</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_HCD_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>HC_NotifyURBChangeCallback</name></name> <operator>=</operator> <name>HAL_HCD_HC_NotifyURBChange_Callback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak DataOutStageCallback  */</comment>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_HCD_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>

    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_HCD_REGISTER_CALLBACKS */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup HCD_Exported_Functions_Group3 Peripheral Control functions
 *  @brief   Management functions
 *
@verbatim
 ===============================================================================
                      ##### Peripheral Control functions #####
 ===============================================================================
    [..]
    This subsection provides a set of functions allowing to control the HCD data
    transfers.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_HCD_Start</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_HCD_ENABLE</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_DriveVbus</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Stop the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */</comment>

<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_HCD_Stop</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_StopHost</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_HCD_ResetPort</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>(</operator><call><name>USB_ResetPort</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup HCD_Exported_Functions_Group4 Peripheral State functions
 *  @brief   Peripheral State functions
 *
@verbatim
 ===============================================================================
                      ##### Peripheral State functions #####
 ===============================================================================
    [..]
    This subsection permits to get in run-time the status of the peripheral
    and the data flow.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Return the HCD handle state.
  * @param  hhcd HCD handle
  * @retval HAL state
  */</comment>
<function><type><name>HCD_StateTypeDef</name></type> <name>HAL_HCD_GetState</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hhcd</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return  URB state for a channel.
  * @param  hhcd HCD handle
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval URB state.
  *          This parameter can be one of these values:
  *            URB_IDLE/
  *            URB_DONE/
  *            URB_NOTREADY/
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */</comment>
<function><type><name>HCD_URBStateTypeDef</name></type> <name>HAL_HCD_HC_GetURBState</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>chnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>chnum</name></expr>]</index></name><operator>.</operator><name>urb_state</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  Return the last host transfer size.
  * @param  hhcd HCD handle
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_HCD_HC_GetXferCount</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>chnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>chnum</name></expr>]</index></name><operator>.</operator><name>xfer_count</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the Host Channel state.
  * @param  hhcd HCD handle
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval Host channel state
  *          This parameter can be one of these values:
  *            HC_IDLE/
  *            HC_XFRC/
  *            HC_HALTED/
  *            HC_NYET/
  *            HC_NAK/
  *            HC_STALL/
  *            HC_XACTERR/
  *            HC_BBLERR/
  *            HC_DATATGLERR
  */</comment>
<function><type><name>HCD_HCStateTypeDef</name></type>  <name>HAL_HCD_HC_GetState</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>chnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>chnum</name></expr>]</index></name><operator>.</operator><name>state</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_HCD_GetCurrentFrame</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>(</operator><call><name>USB_GetCurrentFrame</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_HCD_GetCurrentSpeed</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>(</operator><call><name>USB_GetHostSpeed</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup HCD_Private_Functions
  * @{
  */</comment>
<comment type="block" format="doxygen">/**
  * @brief  Handle Host Channel IN interrupt requests.
  * @param  hhcd HCD handle
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>HCD_HC_IN_IRQHandler</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>chnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name> <init>= <expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ch_num</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>chnum</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>&amp;</operator> <name>USB_OTG_HCINT_AHBERR</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCINT_AHBERR</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_AHBERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_UNMASK_HALT_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>&amp;</operator> <name>USB_OTG_HCINT_ACK</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCINT_ACK</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_ACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>&amp;</operator> <name>USB_OTG_HCINT_STALL</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCINT_STALL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_HCD_UNMASK_HALT_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>HC_STALL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_NAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_STALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_HC_Halt</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>&amp;</operator> <name>USB_OTG_HCINT_DTERR</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCINT_DTERR</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_HCD_UNMASK_HALT_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_HC_Halt</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_NAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>HC_DATATGLERR</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_DTERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* ... */</comment>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>&amp;</operator> <name>USB_OTG_HCINT_FRMOR</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCINT_FRMOR</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_HCD_UNMASK_HALT_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_HC_Halt</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_FRMOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>&amp;</operator> <name>USB_OTG_HCINT_XFRC</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCINT_XFRC</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>xfer_count</name> <operator>=</operator> <name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>xfer_len</name> <operator>-</operator> \
                                    <operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCTSIZ</name> <operator>&amp;</operator> <name>USB_OTG_HCTSIZ_XFRSIZ</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>HC_XFRC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ErrCnt</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_XFRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ep_type</name> <operator>==</operator> <name>EP_TYPE_CTRL</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ep_type</name> <operator>==</operator> <name>EP_TYPE_BULK</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>__HAL_HCD_UNMASK_HALT_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_HC_Halt</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_NAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ep_type</name> <operator>==</operator> <name>EP_TYPE_INTR</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>|=</operator> <name>USB_OTG_HCCHAR_ODDFRM</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>urb_state</name> <operator>=</operator> <name>URB_DONE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_HCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hhcd</name><operator>-&gt;</operator><name>HC_NotifyURBChangeCallback</name></name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>, <argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>urb_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_HCD_HC_NotifyURBChange_Callback</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>, <argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>urb_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_HCD_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* ... */</comment>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>toggle_in</name> <operator>^=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>

  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>&amp;</operator> <name>USB_OTG_HCINT_CHH</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCINT_CHH</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_HCD_MASK_HALT_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>HC_XFRC</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>urb_state</name>  <operator>=</operator> <name>URB_DONE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>HC_STALL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>urb_state</name>  <operator>=</operator> <name>URB_STALL</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>HC_XACTERR</name><operator>)</operator> <operator>||</operator>
             <operator>(</operator><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>HC_DATATGLERR</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ErrCnt</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ErrCnt</name> <operator>&gt;</operator> <literal type="number">3U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ErrCnt</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>urb_state</name> <operator>=</operator> <name>URB_ERROR</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>urb_state</name> <operator>=</operator> <name>URB_NOTREADY</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <comment type="block">/* re-activate the channel  */</comment>
      <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmpreg</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_HCCHAR_CHDIS</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmpreg</name> <operator>|=</operator> <name>USB_OTG_HCCHAR_CHENA</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>=</operator> <name>tmpreg</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>HC_NAK</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>urb_state</name>  <operator>=</operator> <name>URB_NOTREADY</name></expr>;</expr_stmt>
      <comment type="block">/* re-activate the channel  */</comment>
      <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmpreg</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_HCCHAR_CHDIS</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmpreg</name> <operator>|=</operator> <name>USB_OTG_HCCHAR_CHENA</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>=</operator> <name>tmpreg</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* ... */</comment>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_CHH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HAL_HCD_HC_NotifyURBChange_Callback</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>, <argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>urb_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>&amp;</operator> <name>USB_OTG_HCINT_TXERR</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCINT_TXERR</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_HCD_UNMASK_HALT_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ErrCnt</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>HC_XACTERR</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_HC_Halt</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_TXERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>&amp;</operator> <name>USB_OTG_HCINT_NAK</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCINT_NAK</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ep_type</name> <operator>==</operator> <name>EP_TYPE_INTR</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ErrCnt</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>__HAL_HCD_UNMASK_HALT_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_HC_Halt</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ep_type</name> <operator>==</operator> <name>EP_TYPE_CTRL</name><operator>)</operator> <operator>||</operator>
             <operator>(</operator><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ep_type</name> <operator>==</operator> <name>EP_TYPE_BULK</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ErrCnt</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>dma_enable</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>HC_NAK</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>__HAL_HCD_UNMASK_HALT_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_HC_Halt</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* ... */</comment>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_NAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* ... */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Handle Host Channel OUT interrupt requests.
  * @param  hhcd HCD handle
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>HCD_HC_OUT_IRQHandler</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>chnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name> <init>= <expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ch_num</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>chnum</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>&amp;</operator> <name>USB_OTG_HCINT_AHBERR</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCINT_AHBERR</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_AHBERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_UNMASK_HALT_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>&amp;</operator> <name>USB_OTG_HCINT_ACK</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCINT_ACK</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_ACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>do_ping</name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>do_ping</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>urb_state</name>  <operator>=</operator> <name>URB_NOTREADY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>__HAL_HCD_UNMASK_HALT_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_HC_Halt</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>&amp;</operator> <name>USB_OTG_HCINT_NYET</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCINT_NYET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>HC_NYET</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>do_ping</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ErrCnt</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_UNMASK_HALT_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_HC_Halt</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_NYET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>&amp;</operator> <name>USB_OTG_HCINT_FRMOR</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCINT_FRMOR</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_HCD_UNMASK_HALT_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_HC_Halt</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_FRMOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>&amp;</operator> <name>USB_OTG_HCINT_XFRC</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCINT_XFRC</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ErrCnt</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_UNMASK_HALT_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_HC_Halt</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_XFRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>HC_XFRC</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>&amp;</operator> <name>USB_OTG_HCINT_STALL</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCINT_STALL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_STALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_UNMASK_HALT_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_HC_Halt</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>HC_STALL</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>&amp;</operator> <name>USB_OTG_HCINT_NAK</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCINT_NAK</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ErrCnt</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>HC_NAK</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>do_ping</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>speed</name> <operator>==</operator> <name>HCD_SPEED_HIGH</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>do_ping</name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>__HAL_HCD_UNMASK_HALT_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_HC_Halt</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_NAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>&amp;</operator> <name>USB_OTG_HCINT_TXERR</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCINT_TXERR</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_HCD_UNMASK_HALT_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_HC_Halt</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>HC_XACTERR</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_TXERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>&amp;</operator> <name>USB_OTG_HCINT_DTERR</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCINT_DTERR</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_HCD_UNMASK_HALT_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_HC_Halt</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_NAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_DTERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>HC_DATATGLERR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCINT</name> <operator>&amp;</operator> <name>USB_OTG_HCINT_CHH</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HCINT_CHH</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_HCD_MASK_HALT_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>HC_XFRC</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>urb_state</name>  <operator>=</operator> <name>URB_DONE</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ep_type</name> <operator>==</operator> <name>EP_TYPE_BULK</name><operator>)</operator> <operator>||</operator>
          <operator>(</operator><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ep_type</name> <operator>==</operator> <name>EP_TYPE_INTR</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>toggle_out</name> <operator>^=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>HC_NAK</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>urb_state</name> <operator>=</operator> <name>URB_NOTREADY</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>HC_NYET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>urb_state</name>  <operator>=</operator> <name>URB_NOTREADY</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>HC_STALL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>urb_state</name>  <operator>=</operator> <name>URB_STALL</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>HC_XACTERR</name><operator>)</operator> <operator>||</operator>
             <operator>(</operator><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>HC_DATATGLERR</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ErrCnt</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ErrCnt</name> <operator>&gt;</operator> <literal type="number">3U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>ErrCnt</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>urb_state</name> <operator>=</operator> <name>URB_ERROR</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>urb_state</name> <operator>=</operator> <name>URB_NOTREADY</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <comment type="block">/* re-activate the channel  */</comment>
      <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmpreg</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_HCCHAR_CHDIS</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmpreg</name> <operator>|=</operator> <name>USB_OTG_HCCHAR_CHENA</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>=</operator> <name>tmpreg</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* ... */</comment>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>__HAL_HCD_CLEAR_HC_INT</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>USB_OTG_HCINT_CHH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HAL_HCD_HC_NotifyURBChange_Callback</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ch_num</name></expr></argument>, <argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>urb_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* ... */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>HCD_RXQLVL_IRQHandler</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name> <init>= <expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pktsts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pktcnt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>temp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ch_num</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>GRXSTSP</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ch_num</name> <operator>=</operator> <name>temp</name> <operator>&amp;</operator> <name>USB_OTG_GRXSTSP_EPNUM</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pktsts</name> <operator>=</operator> <operator>(</operator><name>temp</name> <operator>&amp;</operator> <name>USB_OTG_GRXSTSP_PKTSTS</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">17</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pktcnt</name> <operator>=</operator> <operator>(</operator><name>temp</name> <operator>&amp;</operator> <name>USB_OTG_GRXSTSP_BCNT</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>pktsts</name></expr>)</condition>
  <block>{<block_content>
    <case>case <expr><name>GRXSTS_PKTSTS_IN</name></expr>:</case>
      <comment type="block">/* Read the data into the host buffer. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pktcnt</name> <operator>&gt;</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>xfer_buff</name> <operator>!=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_ReadPacket</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>xfer_buff</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>pktcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*manage multiple Xfer */</comment>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>xfer_buff</name> <operator>+=</operator> <name>pktcnt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>xfer_count</name>  <operator>+=</operator> <name>pktcnt</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCTSIZ</name> <operator>&amp;</operator> <name>USB_OTG_HCTSIZ_PKTCNT</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* re-activate the channel when more packets are expected */</comment>
          <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>tmpreg</name> <operator>&amp;=</operator> <operator>~</operator><name>USB_OTG_HCCHAR_CHDIS</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>tmpreg</name> <operator>|=</operator> <name>USB_OTG_HCCHAR_CHENA</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>USBx_HC</name><argument_list>(<argument><expr><name>ch_num</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>HCCHAR</name> <operator>=</operator> <name>tmpreg</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hhcd</name><operator>-&gt;</operator><name>hc</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>toggle_in</name> <operator>^=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>

    <case>case <expr><name>GRXSTS_PKTSTS_DATA_TOGGLE_ERR</name></expr>:</case>
      <break>break;</break>

    <case>case <expr><name>GRXSTS_PKTSTS_IN_XFER_COMP</name></expr>:</case>
    <case>case <expr><name>GRXSTS_PKTSTS_CH_HALTED</name></expr>:</case>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>HCD_Port_IRQHandler</name><parameter_list>(<parameter><decl><type><name>HCD_HandleTypeDef</name> <modifier>*</modifier></type><name>hhcd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>USB_OTG_GlobalTypeDef</name> <modifier>*</modifier></type><name>USBx</name> <init>= <expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>USBx_BASE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USBx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>hprt0</name></decl>, <decl><type ref="prev"/><name>hprt0_dup</name></decl>;</decl_stmt>

  <comment type="block">/* Handle Host Port Interrupts */</comment>
  <expr_stmt><expr><name>hprt0</name> <operator>=</operator> <name>USBx_HPRT0</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>hprt0_dup</name> <operator>=</operator> <name>USBx_HPRT0</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>hprt0_dup</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_HPRT_PENA</name> <operator>|</operator> <name>USB_OTG_HPRT_PCDET</name> <operator>|</operator> \
                 <name>USB_OTG_HPRT_PENCHNG</name> <operator>|</operator> <name>USB_OTG_HPRT_POCCHNG</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Check whether Port Connect detected */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hprt0</name> <operator>&amp;</operator> <name>USB_OTG_HPRT_PCDET</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HPRT_PCDET</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hprt0</name> <operator>&amp;</operator> <name>USB_OTG_HPRT_PCSTS</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HPRT_PCSTS</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>USB_MASK_INTERRUPT</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_DISCINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_HCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hhcd</name><operator>-&gt;</operator><name>ConnectCallback</name></name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_HCD_Connect_Callback</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_HCD_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>hprt0_dup</name>  <operator>|=</operator> <name>USB_OTG_HPRT_PCDET</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check whether Port Enable Changed */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hprt0</name> <operator>&amp;</operator> <name>USB_OTG_HPRT_PENCHNG</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HPRT_PENCHNG</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>hprt0_dup</name> <operator>|=</operator> <name>USB_OTG_HPRT_PENCHNG</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hprt0</name> <operator>&amp;</operator> <name>USB_OTG_HPRT_PENA</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HPRT_PENA</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>phy_itface</name></name>  <operator>==</operator> <name>USB_OTG_EMBEDDED_PHY</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hprt0</name> <operator>&amp;</operator> <name>USB_OTG_HPRT_PSPD</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>HPRT0_PRTSPD_LOW_SPEED</name> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_InitFSLSPClkSel</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>HCFG_6_MHZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>USB_InitFSLSPClkSel</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>HCFG_48_MHZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>hhcd</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>speed</name></name> <operator>==</operator> <name>HCD_SPEED_FULL</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>USBx_HOST</name><operator>-&gt;</operator><name>HFIR</name></name> <operator>=</operator> <literal type="number">60000U</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_HCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hhcd</name><operator>-&gt;</operator><name>PortEnabledCallback</name></name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>hhcd</name><operator>-&gt;</operator><name>ConnectCallback</name></name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_HCD_PortEnabled_Callback</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>HAL_HCD_Connect_Callback</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_HCD_REGISTER_CALLBACKS */</comment>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_HCD_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hhcd</name><operator>-&gt;</operator><name>PortDisabledCallback</name></name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_HCD_PortDisabled_Callback</name><argument_list>(<argument><expr><name>hhcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_HCD_REGISTER_CALLBACKS */</comment>

      <comment type="block">/* Cleanup HPRT */</comment>
      <expr_stmt><expr><name>USBx_HPRT0</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USB_OTG_HPRT_PENA</name> <operator>|</operator> <name>USB_OTG_HPRT_PCDET</name> <operator>|</operator> \
                      <name>USB_OTG_HPRT_PENCHNG</name> <operator>|</operator> <name>USB_OTG_HPRT_POCCHNG</name><operator>)</operator></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>USB_UNMASK_INTERRUPT</name><argument_list>(<argument><expr><name><name>hhcd</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>USB_OTG_GINTSTS_DISCINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check for an overcurrent */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hprt0</name> <operator>&amp;</operator> <name>USB_OTG_HPRT_POCCHNG</name><operator>)</operator> <operator>==</operator> <name>USB_OTG_HPRT_POCCHNG</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>hprt0_dup</name> <operator>|=</operator> <name>USB_OTG_HPRT_POCCHNG</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Clear Port Interrupts */</comment>
  <expr_stmt><expr><name>USBx_HPRT0</name> <operator>=</operator> <name>hprt0_dup</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined (USB_OTG_FS) || defined (USB_OTG_HS) */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_HCD_MODULE_ENABLED */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
