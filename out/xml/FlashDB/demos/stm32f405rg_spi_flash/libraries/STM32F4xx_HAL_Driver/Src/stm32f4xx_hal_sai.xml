<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_sai.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_sai.c
  * @author  MCD Application Team
  * @brief   SAI HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of the Serial Audio Interface (SAI) peripheral:
  *           + Initialization/de-initialization functions
  *           + I/O operation functions
  *           + Peripheral Control functions
  *           + Peripheral State functions
  *
  @verbatim
  ==============================================================================
                  ##### How to use this driver #####
  ==============================================================================

  [..]
    The SAI HAL driver can be used as follows:

    (#) Declare a SAI_HandleTypeDef handle structure (eg. SAI_HandleTypeDef hsai).
    (#) Initialize the SAI low level resources by implementing the HAL_SAI_MspInit() API:
        (##) Enable the SAI interface clock.
        (##) SAI pins configuration:
            (+++) Enable the clock for the SAI GPIOs.
            (+++) Configure these SAI pins as alternate function pull-up.
        (##) NVIC configuration if you need to use interrupt process (HAL_SAI_Transmit_IT()
             and HAL_SAI_Receive_IT() APIs):
            (+++) Configure the SAI interrupt priority.
            (+++) Enable the NVIC SAI IRQ handle.

        (##) DMA Configuration if you need to use DMA process (HAL_SAI_Transmit_DMA()
             and HAL_SAI_Receive_DMA() APIs):
            (+++) Declare a DMA handle structure for the Tx/Rx stream.
            (+++) Enable the DMAx interface clock.
            (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
            (+++) Configure the DMA Tx/Rx Stream.
            (+++) Associate the initialized DMA handle to the SAI DMA Tx/Rx handle.
            (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on the
                DMA Tx/Rx Stream.

    (#) The initialization can be done by two ways
        (##) Expert mode : Initialize the structures Init, FrameInit and SlotInit and call HAL_SAI_Init().
        (##) Simplified mode : Initialize the high part of Init Structure and call HAL_SAI_InitProtocol().

  [..]
    (@) The specific SAI interrupts (FIFO request and Overrun underrun interrupt)
        will be managed using the macros __HAL_SAI_ENABLE_IT() and __HAL_SAI_DISABLE_IT()
        inside the transmit and receive process.

  [..]
   (@) SAI Clock Source configuration is managed differently depending on the selected
       STM32F4 devices :
       (+@) For STM32F446xx devices, the configuration is managed through RCCEx_PeriphCLKConfig()
            function in the HAL RCC drivers
       (+@) For STM32F439xx/STM32F437xx/STM32F429xx/STM32F427xx devices, the configuration
            is managed within HAL SAI drivers through HAL_SAI_Init() function using
            ClockSource field of SAI_InitTypeDef structure.
  [..]
   (@) Make sure that either:
       (+@) I2S PLL is configured or
       (+@) SAI PLL is configured or
       (+@) External clock source is configured after setting correctly
            the define constant EXTERNAL_CLOCK_VALUE in the stm32f4xx_hal_conf.h file.
  [..]
    (@) In master Tx mode: enabling the audio block immediately generates the bit clock
        for the external slaves even if there is no data in the FIFO, However FS signal
        generation is conditioned by the presence of data in the FIFO.

  [..]
    (@) In master Rx mode: enabling the audio block immediately generates the bit clock
        and FS signal for the external slaves.

  [..]
    (@) It is mandatory to respect the following conditions in order to avoid bad SAI behavior:
        (+@) First bit Offset &lt;= (SLOT size - Data size)
        (+@) Data size &lt;= SLOT size
        (+@) Number of SLOT x SLOT size = Frame length
        (+@) The number of slots should be even when SAI_FS_CHANNEL_IDENTIFICATION is selected.

  [..]
    Three operation modes are available within this driver :

    *** Polling mode IO operation ***
    =================================
    [..]
      (+) Send an amount of data in blocking mode using HAL_SAI_Transmit()
      (+) Receive an amount of data in blocking mode using HAL_SAI_Receive()

    *** Interrupt mode IO operation ***
    ===================================
    [..]
      (+) Send an amount of data in non-blocking mode using HAL_SAI_Transmit_IT()
      (+) At transmission end of transfer HAL_SAI_TxCpltCallback() is executed and user can
          add his own code by customization of function pointer HAL_SAI_TxCpltCallback()
      (+) Receive an amount of data in non-blocking mode using HAL_SAI_Receive_IT()
      (+) At reception end of transfer HAL_SAI_RxCpltCallback() is executed and user can
          add his own code by customization of function pointer HAL_SAI_RxCpltCallback()
      (+) In case of flag error, HAL_SAI_ErrorCallback() function is executed and user can
          add his own code by customization of function pointer HAL_SAI_ErrorCallback()

    *** DMA mode IO operation ***
    =============================
    [..]
      (+) Send an amount of data in non-blocking mode (DMA) using HAL_SAI_Transmit_DMA()
      (+) At transmission end of transfer HAL_SAI_TxCpltCallback() is executed and user can
          add his own code by customization of function pointer HAL_SAI_TxCpltCallback()
      (+) Receive an amount of data in non-blocking mode (DMA) using HAL_SAI_Receive_DMA()
      (+) At reception end of transfer HAL_SAI_RxCpltCallback() is executed and user can
          add his own code by customization of function pointer HAL_SAI_RxCpltCallback()
      (+) In case of flag error, HAL_SAI_ErrorCallback() function is executed and user can
          add his own code by customization of function pointer HAL_SAI_ErrorCallback()
      (+) Pause the DMA Transfer using HAL_SAI_DMAPause()
      (+) Resume the DMA Transfer using HAL_SAI_DMAResume()
      (+) Stop the DMA Transfer using HAL_SAI_DMAStop()

    *** SAI HAL driver additional function list ***
    ===============================================
    [..]
      Below the list the others API available SAI HAL driver :

      (+) HAL_SAI_EnableTxMuteMode(): Enable the mute in tx mode
      (+) HAL_SAI_DisableTxMuteMode(): Disable the mute in tx mode
      (+) HAL_SAI_EnableRxMuteMode(): Enable the mute in Rx mode
      (+) HAL_SAI_DisableRxMuteMode(): Disable the mute in Rx mode
      (+) HAL_SAI_FlushRxFifo(): Flush the rx fifo.
      (+) HAL_SAI_Abort(): Abort the current transfer

    *** SAI HAL driver macros list ***
    ==================================
    [..]
      Below the list of most used macros in SAI HAL driver :

      (+) __HAL_SAI_ENABLE(): Enable the SAI peripheral
      (+) __HAL_SAI_DISABLE(): Disable the SAI peripheral
      (+) __HAL_SAI_ENABLE_IT(): Enable the specified SAI interrupts
      (+) __HAL_SAI_DISABLE_IT(): Disable the specified SAI interrupts
      (+) __HAL_SAI_GET_IT_SOURCE(): Check if the specified SAI interrupt source is
          enabled or disabled
      (+) __HAL_SAI_GET_FLAG(): Check whether the specified SAI flag is set or not

    *** Callback registration ***
    =============================

    The compilation define USE_HAL_SAI_REGISTER_CALLBACKS when set to 1
    allows the user to configure dynamically the driver callbacks.
    Use functions @ref HAL_SAI_RegisterCallback() to register a user callback.

    Function @ref HAL_SAI_RegisterCallback() allows to register following callbacks:
      (+) RxCpltCallback     : SAI receive complete.
      (+) RxHalfCpltCallback : SAI receive half complete.
      (+) TxCpltCallback     : SAI transmit complete.
      (+) TxHalfCpltCallback : SAI transmit half complete.
      (+) ErrorCallback      : SAI error.
      (+) MspInitCallback    : SAI MspInit.
      (+) MspDeInitCallback  : SAI MspDeInit.
    This function takes as parameters the HAL peripheral handle, the callback ID
    and a pointer to the user callback function.

    Use function @ref HAL_SAI_UnRegisterCallback() to reset a callback to the default
    weak (surcharged) function.
    @ref HAL_SAI_UnRegisterCallback() takes as parameters the HAL peripheral handle,
    and the callback ID.
    This function allows to reset following callbacks:
      (+) RxCpltCallback     : SAI receive complete.
      (+) RxHalfCpltCallback : SAI receive half complete.
      (+) TxCpltCallback     : SAI transmit complete.
      (+) TxHalfCpltCallback : SAI transmit half complete.
      (+) ErrorCallback      : SAI error.
      (+) MspInitCallback    : SAI MspInit.
      (+) MspDeInitCallback  : SAI MspDeInit.

    By default, after the @ref HAL_SAI_Init and if the state is HAL_SAI_STATE_RESET
    all callbacks are reset to the corresponding legacy weak (surcharged) functions:
    examples @ref HAL_SAI_RxCpltCallback(), @ref HAL_SAI_ErrorCallback().
    Exception done for MspInit and MspDeInit callbacks that are respectively
    reset to the legacy weak (surcharged) functions in the @ref HAL_SAI_Init
    and @ref  HAL_SAI_DeInit only when these callbacks are null (not registered beforehand).
    If not, MspInit or MspDeInit are not null, the @ref HAL_SAI_Init and @ref HAL_SAI_DeInit
    keep and use the user MspInit/MspDeInit callbacks (registered beforehand).

    Callbacks can be registered/unregistered in READY state only.
    Exception done for MspInit/MspDeInit callbacks that can be registered/unregistered
    in READY or RESET state, thus registered (user) MspInit/DeInit callbacks can be used
    during the Init/DeInit.
    In that case first register the MspInit/MspDeInit user callbacks
    using @ref HAL_SAI_RegisterCallback before calling @ref HAL_SAI_DeInit
    or @ref HAL_SAI_Init function.

    When the compilation define USE_HAL_SAI_REGISTER_CALLBACKS is set to 0 or
    not defined, the callback registering feature is not available
    and weak (surcharged) callbacks are used.

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup SAI SAI
  * @brief SAI HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_SAI_MODULE_ENABLED</name></cpp:ifdef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call> <operator>||</operator>\
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator>\
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block" format="doxygen">/** @defgroup SAI_Private_Typedefs  SAI Private Typedefs
  * @{
  */</comment>
<typedef>typedef <type><enum>enum <block>{
  <decl><name>SAI_MODE_DMA</name></decl>,
  <decl><name>SAI_MODE_IT</name></decl>
}</block></enum></type><name>SAI_ModeTypedef</name>;</typedef>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private define ------------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup SAI_Private_Constants  SAI Private Constants
  * @{
  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAI_FIFO_SIZE</name></cpp:macro>         <cpp:value>8U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAI_DEFAULT_TIMEOUT</name></cpp:macro>   <cpp:value>4U</cpp:value></cpp:define> <comment type="block">/* 4ms */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup SAI_Private_Functions  SAI Private Functions
  * @{
  */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SAI_FillFifo</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>SAI_InterruptFlag</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>SAI_InitI2S</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>datasize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nbslot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>SAI_InitPCM</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>datasize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nbslot</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>SAI_Disable</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SAI_Transmit_IT8Bit</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SAI_Transmit_IT16Bit</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SAI_Transmit_IT32Bit</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SAI_Receive_IT8Bit</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SAI_Receive_IT16Bit</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SAI_Receive_IT32Bit</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SAI_DMATxCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SAI_DMATxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SAI_DMARxCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SAI_DMARxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SAI_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SAI_DMAAbort</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Exported functions ---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup SAI_Exported_Functions SAI Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup SAI_Exported_Functions_Group1 Initialization and de-initialization functions
  * @brief    Initialization and Configuration functions
  *
@verbatim
 ===============================================================================
            ##### Initialization and de-initialization functions #####
 ===============================================================================
  [..]  This subsection provides a set of functions allowing to initialize and
        de-initialize the SAIx peripheral:

      (+) User must implement HAL_SAI_MspInit() function in which he configures
          all related peripherals resources (CLOCK, GPIO, DMA, IT and NVIC ).

      (+) Call the function HAL_SAI_Init() to configure the selected device with
          the selected configuration:
        (++) Mode (Master/slave TX/RX)
        (++) Protocol
        (++) Data Size
        (++) MCLK Output
        (++) Audio frequency
        (++) FIFO Threshold
        (++) Frame Config
        (++) Slot Config

      (+) Call the function HAL_SAI_DeInit() to restore the default configuration
          of the selected SAI peripheral.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initialize the structure FrameInit, SlotInit and the low part of
  *         Init according to the specified parameters and call the function
  *         HAL_SAI_Init to initialize the SAI block.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @param  protocol one of the supported protocol @ref SAI_Protocol
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SAI_InitProtocol</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>datasize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nbslot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_SUPPORTED_PROTOCOL</name><argument_list>(<argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_PROTOCOL_DATASIZE</name><argument_list>(<argument><expr><name>datasize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch<condition>(<expr><name>protocol</name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>SAI_I2S_STANDARD</name></expr> :</case>
  <case>case <expr><name>SAI_I2S_MSBJUSTIFIED</name></expr> :</case>
  <case>case <expr><name>SAI_I2S_LSBJUSTIFIED</name></expr> :</case>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>SAI_InitI2S</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>datasize</name></expr></argument>, <argument><expr><name>nbslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>SAI_PCM_LONG</name></expr> :</case>
  <case>case <expr><name>SAI_PCM_SHORT</name></expr> :</case>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>SAI_InitPCM</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>datasize</name></expr></argument>, <argument><expr><name>nbslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <default>default :</default>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></switch>

  <if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>HAL_SAI_Init</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initialize the SAI according to the specified parameters.
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SAI_Init</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpregisterGCR</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* This variable used to store the SAI_CK_x (value in Hz) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>freq</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ckstr_bits</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>syncen_bits</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check the SAI handle allocation */</comment>
  <if_stmt><if>if<condition>(<expr><name>hsai</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* check the instance */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the SAI Block parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_AUDIO_FREQUENCY</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioFrequency</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_PROTOCOL</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Protocol</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_MODE</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_SYNCEXT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>SynchroExt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_DATASIZE</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_FIRST_BIT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FirstBit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_CLOCK_STROBING</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockStrobing</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_SYNCHRO</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Synchro</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_OUTPUT_DRIVE</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutputDrive</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_NODIVIDER</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NoDivider</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_FIFO_THRESHOLD</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FIFOThreshold</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_MONO_STEREO_MODE</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>MonoStereoMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_COMPANDING_MODE</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>CompandingMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_TRISTATE_MANAGEMENT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>TriState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the SAI Block Frame parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_FRAME_LENGTH</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FrameLength</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_ACTIVE_FRAME</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>ActiveFrameLength</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_FS_DEFINITION</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FSDefinition</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_FS_POLARITY</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FSPolarity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_FS_OFFSET</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FSOffset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the SAI Block Slot parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_FIRSTBIT_OFFSET</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>FirstBitOffset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_SLOT_SIZE</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>SlotSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_SLOT_NUMBER</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>SlotNumber</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_SLOT_ACTIVE</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>SlotActive</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SAI_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <comment type="block">/* Reset callback pointers to the weak predefined callbacks */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>RxCpltCallback</name></name>     <operator>=</operator> <name>HAL_SAI_RxCpltCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_SAI_RxHalfCpltCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>TxCpltCallback</name></name>     <operator>=</operator> <name>HAL_SAI_TxCpltCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_SAI_TxHalfCpltCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCallback</name></name>      <operator>=</operator> <name>HAL_SAI_ErrorCallback</name></expr>;</expr_stmt>

    <comment type="block">/* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_SAI_MspInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */</comment>
    <expr_stmt><expr><call><name>HAL_SAI_MspInit</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable the selected SAI peripheral */</comment>
  <expr_stmt><expr><call><name>SAI_Disable</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* SAI Block Synchro Configuration -----------------------------------------*/</comment>
  <expr_stmt><expr><call><name>SAI_BlockSynchroConfig</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioFrequency</name></name> <operator>!=</operator> <name>SAI_AUDIO_FREQUENCY_MCKDIV</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Get SAI clock source based on Source clock selection from RCC */</comment>
    <expr_stmt><expr><name>freq</name> <operator>=</operator> <call><name>SAI_GetInputClock</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* (saiclocksource x 10) to keep Significant digits */</comment>
    <expr_stmt><expr><name>tmpregisterGCR</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>freq</name> <operator>*</operator> <literal type="number">10U</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioFrequency</name></name><operator>)</operator> <operator>*</operator> <literal type="number">512U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mckdiv</name></name> <operator>=</operator> <name>tmpregisterGCR</name> <operator>/</operator> <literal type="number">10U</literal></expr>;</expr_stmt>

    <comment type="block">/* Round result to the nearest integer */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>tmpregisterGCR</name> <operator>%</operator> <literal type="number">10U</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">8U</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mckdiv</name></name><operator>+=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioMode</name></name> <operator>==</operator> <name>SAI_MODEMASTER_TX</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioMode</name></name> <operator>==</operator> <name>SAI_MODESLAVE_TX</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>ckstr_bits</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockStrobing</name></name> <operator>==</operator> <name>SAI_CLOCKSTROBING_RISINGEDGE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0U</literal></expr></then><else>: <expr><name>SAI_xCR1_CKSTR</name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>ckstr_bits</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockStrobing</name></name> <operator>==</operator> <name>SAI_CLOCKSTROBING_RISINGEDGE</name><operator>)</operator></expr> ?</condition><then> <expr><name>SAI_xCR1_CKSTR</name></expr></then><else>: <expr><literal type="number">0U</literal></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* SAI Block Configuration -------------------------------------------------*/</comment>
  <switch>switch<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Synchro</name></name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>SAI_ASYNCHRONOUS</name></expr> :</case>
    <block>{<block_content>
      <expr_stmt><expr><name>syncen_bits</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    </block_content>}</block>
    <break>break;</break>
  <case>case <expr><name>SAI_SYNCHRONOUS</name></expr> :</case>
    <block>{<block_content>
      <expr_stmt><expr><name>syncen_bits</name> <operator>=</operator> <name>SAI_xCR1_SYNCEN_0</name></expr>;</expr_stmt>
    </block_content>}</block>
    <break>break;</break>
  <case>case <expr><name>SAI_SYNCHRONOUS_EXT_SAI1</name></expr> :</case>
  <case>case <expr><name>SAI_SYNCHRONOUS_EXT_SAI2</name></expr> :</case>
    <block>{<block_content>
      <expr_stmt><expr><name>syncen_bits</name> <operator>=</operator> <name>SAI_xCR1_SYNCEN_1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <break>break;</break>
  <default>default:</default>
    <break>break;</break>
  </block_content>}</block></switch>
  <comment type="block">/* SAI CR1 Configuration */</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SAI_xCR1_MODE</name> <operator>|</operator> <name>SAI_xCR1_PRTCFG</name> <operator>|</operator>  <name>SAI_xCR1_DS</name> <operator>|</operator>      \
                           <name>SAI_xCR1_LSBFIRST</name> <operator>|</operator> <name>SAI_xCR1_CKSTR</name> <operator>|</operator> <name>SAI_xCR1_SYNCEN</name> <operator>|</operator>\
                           <name>SAI_xCR1_MONO</name> <operator>|</operator> <name>SAI_xCR1_OUTDRIV</name>  <operator>|</operator> <name>SAI_xCR1_DMAEN</name> <operator>|</operator>  \
                           <name>SAI_xCR1_NODIV</name> <operator>|</operator> <name>SAI_xCR1_MCKDIV</name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioMode</name></name> <operator>|</operator> <name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Protocol</name></name> <operator>|</operator>           \
                          <name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>|</operator> <name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FirstBit</name></name>  <operator>|</operator>           \
                          <name>ckstr_bits</name> <operator>|</operator> <name>syncen_bits</name> <operator>|</operator>                             \
                          <name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>MonoStereoMode</name></name> <operator>|</operator> <name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>OutputDrive</name></name> <operator>|</operator>   \
                          <name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NoDivider</name></name> <operator>|</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mckdiv</name></name> <operator>&lt;&lt;</operator> <literal type="number">20U</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* SAI CR2 Configuration */</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SAI_xCR2_FTH</name> <operator>|</operator> <name>SAI_xCR2_FFLUSH</name> <operator>|</operator> <name>SAI_xCR2_COMP</name> <operator>|</operator> <name>SAI_xCR2_CPL</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name> <operator>|=</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FIFOThreshold</name></name> <operator>|</operator> <name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>CompandingMode</name></name> <operator>|</operator> <name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>TriState</name></name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* SAI Frame Configuration -----------------------------------------*/</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FRCR</name></name><operator>&amp;=</operator><operator>(</operator><operator>~</operator><operator>(</operator><name>SAI_xFRCR_FRL</name> <operator>|</operator> <name>SAI_xFRCR_FSALL</name> <operator>|</operator> <name>SAI_xFRCR_FSDEF</name> <operator>|</operator> \
                           <name>SAI_xFRCR_FSPOL</name> <operator>|</operator> <name>SAI_xFRCR_FSOFF</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>FRCR</name></name><operator>|=</operator><operator>(</operator><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FrameLength</name></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>|</operator>
                          <name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FSOffset</name></name>     <operator>|</operator>
                          <name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FSDefinition</name></name> <operator>|</operator>
                          <name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FSPolarity</name></name>   <operator>|</operator>
                          <operator>(</operator><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>ActiveFrameLength</name></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8U</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* SAI Block_x SLOT Configuration ------------------------------------------*/</comment>
  <comment type="block">/* This register has no meaning in AC 97 and SPDIF audio protocol */</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SLOTR</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SAI_xSLOTR_FBOFF</name> <operator>|</operator> <name>SAI_xSLOTR_SLOTSZ</name> <operator>|</operator> \
                             <name>SAI_xSLOTR_NBSLOT</name> <operator>|</operator> <name>SAI_xSLOTR_SLOTEN</name> <operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SLOTR</name></name> <operator>|=</operator>  <name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>FirstBitOffset</name></name> <operator>|</operator>  <name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>SlotSize</name></name>  <operator>|</operator> \
                            <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>SlotActive</name></name> <operator>&lt;&lt;</operator> <literal type="number">16U</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>SlotNumber</name></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator>  <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Initialize the error code */</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SAI_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Initialize the SAI state */</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_SAI_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitialize the SAI peripheral.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SAI_DeInit</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the SAI handle allocation */</comment>
  <if_stmt><if>if<condition>(<expr><name>hsai</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disabled All interrupt and clear all the flag */</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IMR</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CLRFR</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt>

  <comment type="block">/* Disable the SAI */</comment>
  <expr_stmt><expr><call><name>SAI_Disable</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Flush the fifo */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SAI_xCR2_FFLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_SAI_MspDeInit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_SAI_MspDeInit</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>

  <comment type="block">/* Initialize the error code */</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SAI_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* Initialize the SAI state */</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Initialize the SAI MSP.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SAI_MspInit</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DeInitialize the SAI MSP.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SAI_MspDeInit</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspDeInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a user SAI callback
  *         to be used instead of the weak predefined callback.
  * @param  hsai SAI handle.
  * @param  CallbackID ID of the callback to be registered.
  *         This parameter can be one of the following values:
  *           @arg @ref HAL_SAI_RX_COMPLETE_CB_ID receive complete callback ID.
  *           @arg @ref HAL_SAI_RX_HALFCOMPLETE_CB_ID receive half complete callback ID.
  *           @arg @ref HAL_SAI_TX_COMPLETE_CB_ID transmit complete callback ID.
  *           @arg @ref HAL_SAI_TX_HALFCOMPLETE_CB_ID transmit half complete callback ID.
  *           @arg @ref HAL_SAI_ERROR_CB_ID error callback ID.
  *           @arg @ref HAL_SAI_MSPINIT_CB_ID MSP init callback ID.
  *           @arg @ref HAL_SAI_MSPDEINIT_CB_ID MSP de-init callback ID.
  * @param  pCallback pointer to the callback function.
  * @retval HAL status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SAI_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name>        <modifier>*</modifier></type><name>hsai</name></decl></parameter>,
                                           <parameter><decl><type><name>HAL_SAI_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>,
                                           <parameter><decl><type><name>pSAI_CallbackTypeDef</name></type>      <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* update the error code */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SAI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>HAL_SAI_STATE_READY</name> <operator>==</operator> <name><name>hsai</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
    <block>{<block_content>
      <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
      <block>{<block_content>
        <case>case <expr><name>HAL_SAI_RX_COMPLETE_CB_ID</name></expr> :</case>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>RxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>HAL_SAI_RX_HALFCOMPLETE_CB_ID</name></expr> :</case>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>HAL_SAI_TX_COMPLETE_CB_ID</name></expr> :</case>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>TxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>HAL_SAI_TX_HALFCOMPLETE_CB_ID</name></expr> :</case>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>HAL_SAI_ERROR_CB_ID</name></expr> :</case>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>HAL_SAI_MSPINIT_CB_ID</name></expr> :</case>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>HAL_SAI_MSPDEINIT_CB_ID</name></expr> :</case>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
          <break>break;</break>
        <default>default :</default>
          <comment type="block">/* update the error code */</comment>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SAI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
          <comment type="block">/* update return status */</comment>
          <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>HAL_SAI_STATE_RESET</name> <operator>==</operator> <name><name>hsai</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
    <block>{<block_content>
      <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
      <block>{<block_content>
        <case>case <expr><name>HAL_SAI_MSPINIT_CB_ID</name></expr> :</case>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>HAL_SAI_MSPDEINIT_CB_ID</name></expr> :</case>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
          <break>break;</break>
        <default>default :</default>
          <comment type="block">/* update the error code */</comment>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SAI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
          <comment type="block">/* update return status */</comment>
          <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* update the error code */</comment>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SAI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister a user SAI callback.
  *         SAI callback is redirected to the weak predefined callback.
  * @param  hsai SAI handle.
  * @param  CallbackID ID of the callback to be unregistered.
  *         This parameter can be one of the following values:
  *           @arg @ref HAL_SAI_RX_COMPLETE_CB_ID receive complete callback ID.
  *           @arg @ref HAL_SAI_RX_HALFCOMPLETE_CB_ID receive half complete callback ID.
  *           @arg @ref HAL_SAI_TX_COMPLETE_CB_ID transmit complete callback ID.
  *           @arg @ref HAL_SAI_TX_HALFCOMPLETE_CB_ID transmit half complete callback ID.
  *           @arg @ref HAL_SAI_ERROR_CB_ID error callback ID.
  *           @arg @ref HAL_SAI_MSPINIT_CB_ID MSP init callback ID.
  *           @arg @ref HAL_SAI_MSPDEINIT_CB_ID MSP de-init callback ID.
  * @retval HAL status.
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SAI_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name>        <modifier>*</modifier></type><name>hsai</name></decl></parameter>,
                                             <parameter><decl><type><name>HAL_SAI_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>HAL_SAI_STATE_READY</name> <operator>==</operator> <name><name>hsai</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_SAI_RX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>RxCpltCallback</name></name> <operator>=</operator> <name>HAL_SAI_RxCpltCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAL_SAI_RX_HALFCOMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_SAI_RxHalfCpltCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAL_SAI_TX_COMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>TxCpltCallback</name></name> <operator>=</operator> <name>HAL_SAI_TxCpltCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAL_SAI_TX_HALFCOMPLETE_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_SAI_TxHalfCpltCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAL_SAI_ERROR_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>HAL_SAI_ErrorCallback</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAL_SAI_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_SAI_MspInit</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAL_SAI_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_SAI_MspDeInit</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default :</default>
        <comment type="block">/* update the error code */</comment>
        <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SAI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
        <comment type="block">/* update return status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>HAL_SAI_STATE_RESET</name> <operator>==</operator> <name><name>hsai</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_SAI_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_SAI_MspInit</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAL_SAI_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_SAI_MspDeInit</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default :</default>
        <comment type="block">/* update the error code */</comment>
        <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SAI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
        <comment type="block">/* update return status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* update the error code */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SAI_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup SAI_Exported_Functions_Group2 IO operation functions
  * @brief    Data transfers functions
  *
@verbatim
  ==============================================================================
                      ##### IO operation functions #####
  ==============================================================================
  [..]
    This subsection provides a set of functions allowing to manage the SAI data
    transfers.

    (+) There are two modes of transfer:
      (++) Blocking mode : The communication is performed in the polling mode.
           The status of all data processing is returned by the same function
           after finishing transfer.
      (++) No-Blocking mode : The communication is performed using Interrupts
           or DMA. These functions return the status of the transfer startup.
           The end of the data processing will be indicated through the
           dedicated SAI IRQ when using Interrupt mode or the DMA IRQ when
           using DMA mode.

    (+) Blocking mode functions are :
      (++) HAL_SAI_Transmit()
      (++) HAL_SAI_Receive()

    (+) Non Blocking mode functions with Interrupt are :
      (++) HAL_SAI_Transmit_IT()
      (++) HAL_SAI_Receive_IT()

    (+) Non Blocking mode functions with DMA are :
      (++) HAL_SAI_Transmit_DMA()
      (++) HAL_SAI_Receive_DMA()

    (+) A set of Transfer Complete Callbacks are provided in non Blocking mode:
      (++) HAL_SAI_TxCpltCallback()
      (++) HAL_SAI_RxCpltCallback()
      (++) HAL_SAI_ErrorCallback()

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Transmit an amount of data in blocking mode.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SAI_Transmit</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name> <operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SAI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_BUSY_TX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SAI_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Check if the SAI is already enabled */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;</operator> <name>SAI_xCR1_SAIEN</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* fill the fifo with data before to enabled the SAI */</comment>
      <expr_stmt><expr><call><name>SAI_FillFifo</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Enable SAI peripheral */</comment>
      <expr_stmt><expr><call><name>__HAL_SAI_ENABLE</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Write data if the FIFO is not full */</comment>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name> <operator>&amp;</operator> <name>SAI_xSR_FLVL</name><operator>)</operator> <operator>!=</operator> <name>SAI_FIFOSTATUS_FULL</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>==</operator> <name>SAI_DATASIZE_8</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>CompandingMode</name></name> <operator>==</operator> <name>SAI_NOCOMPANDING</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>&lt;=</operator> <name>SAI_DATASIZE_16</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>+=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>+=</operator> <literal type="number">4U</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Check for the Timeout */</comment>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator><operator>||</operator><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name><operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Update error code */</comment>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SAI_ERROR_TIMEOUT</name></expr>;</expr_stmt>

          <comment type="block">/* Clear all the flags */</comment>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CLRFR</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt>

          <comment type="block">/* Disable SAI peripheral */</comment>
          <expr_stmt><expr><call><name>SAI_Disable</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Flush the fifo */</comment>
          <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SAI_xCR2_FFLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Change the SAI state */</comment>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_READY</name></expr>;</expr_stmt>

          <comment type="block">/* Process Unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receive an amount of data in blocking mode.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SAI_Receive</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name> <init>= <expr><call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name> <operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SAI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_BUSY_RX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SAI_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Check if the SAI is already enabled */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;</operator> <name>SAI_xCR1_SAIEN</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable SAI peripheral */</comment>
      <expr_stmt><expr><call><name>__HAL_SAI_ENABLE</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Receive data */</comment>
    <while>while<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name> <operator>&amp;</operator> <name>SAI_xSR_FLVL</name><operator>)</operator> <operator>!=</operator> <name>SAI_FIFOSTATUS_EMPTY</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>==</operator> <name>SAI_DATASIZE_8</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>CompandingMode</name></name> <operator>==</operator> <name>SAI_NOCOMPANDING</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>&lt;=</operator> <name>SAI_DATASIZE_16</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>)</operator> <operator>=</operator> <name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>+=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>)</operator> <operator>=</operator> <name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>+=</operator> <literal type="number">4U</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Check for the Timeout */</comment>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator><operator>||</operator><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Update error code */</comment>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SAI_ERROR_TIMEOUT</name></expr>;</expr_stmt>

          <comment type="block">/* Clear all the flags */</comment>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CLRFR</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt>

          <comment type="block">/* Disable SAI peripheral */</comment>
          <expr_stmt><expr><call><name>SAI_Disable</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Flush the fifo */</comment>
          <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SAI_xCR2_FFLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Change the SAI state */</comment>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_READY</name></expr>;</expr_stmt>

          <comment type="block">/* Process Unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Transmit an amount of data in non-blocking mode with Interrupt.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SAI_Transmit_IT</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SAI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SAI_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_BUSY_TX</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>==</operator> <name>SAI_DATASIZE_8</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>CompandingMode</name></name> <operator>==</operator> <name>SAI_NOCOMPANDING</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>InterruptServiceRoutine</name></name> <operator>=</operator> <name>SAI_Transmit_IT8Bit</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>&lt;=</operator> <name>SAI_DATASIZE_16</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>InterruptServiceRoutine</name></name> <operator>=</operator> <name>SAI_Transmit_IT16Bit</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>InterruptServiceRoutine</name></name> <operator>=</operator> <name>SAI_Transmit_IT32Bit</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Fill the fifo before starting the communication */</comment>
    <expr_stmt><expr><call><name>SAI_FillFifo</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable FRQ and OVRUDR interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_SAI_ENABLE_IT</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><call><name>SAI_InterruptFlag</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_MODE_IT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check if the SAI is already enabled */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;</operator> <name>SAI_xCR1_SAIEN</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable SAI peripheral */</comment>
      <expr_stmt><expr><call><name>__HAL_SAI_ENABLE</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receive an amount of data in non-blocking mode with Interrupt.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SAI_Receive_IT</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SAI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SAI_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_BUSY_RX</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>==</operator> <name>SAI_DATASIZE_8</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>CompandingMode</name></name> <operator>==</operator> <name>SAI_NOCOMPANDING</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>InterruptServiceRoutine</name></name> <operator>=</operator> <name>SAI_Receive_IT8Bit</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>&lt;=</operator> <name>SAI_DATASIZE_16</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>InterruptServiceRoutine</name></name> <operator>=</operator> <name>SAI_Receive_IT16Bit</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>InterruptServiceRoutine</name></name> <operator>=</operator> <name>SAI_Receive_IT32Bit</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Enable TXE and OVRUDR interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_SAI_ENABLE_IT</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><call><name>SAI_InterruptFlag</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_MODE_IT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check if the SAI is already enabled */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;</operator> <name>SAI_xCR1_SAIEN</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable SAI peripheral */</comment>
      <expr_stmt><expr><call><name>__HAL_SAI_ENABLE</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Pause the audio stream playing from the Media.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SAI_DMAPause</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Pause the audio file playing by disabling the SAI DMA requests */</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SAI_xCR1_DMAEN</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Resume the audio stream playing from the Media.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SAI_DMAResume</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable the SAI DMA requests */</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <name>SAI_xCR1_DMAEN</name></expr>;</expr_stmt>

  <comment type="block">/* If the SAI peripheral is still not enabled, enable it */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;</operator> <name>SAI_xCR1_SAIEN</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Enable SAI peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_SAI_ENABLE</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Stop the audio stream playing from the Media.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SAI_DMAStop</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the SAI DMA request */</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SAI_xCR1_DMAEN</name></expr>;</expr_stmt>

  <comment type="block">/* Abort the SAI Tx DMA Stream */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SAI_STATE_BUSY_TX</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* If the DMA Tx errorCode is different from DMA No Transfer then return Error */</comment>
      <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>!=</operator> <name>HAL_DMA_ERROR_NO_XFER</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SAI_ERROR_DMA</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Abort the SAI Rx DMA Stream */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SAI_STATE_BUSY_RX</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* If the DMA Rx errorCode is different from DMA No Transfer then return Error */</comment>
      <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>!=</operator> <name>HAL_DMA_ERROR_NO_XFER</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SAI_ERROR_DMA</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Disable SAI peripheral */</comment>
  <expr_stmt><expr><call><name>SAI_Disable</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Flush the fifo */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SAI_xCR2_FFLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set hsai state to ready */</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Abort the current transfer and disable the SAI.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SAI_Abort</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check SAI DMA is enabled or not */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;</operator> <name>SAI_xCR1_DMAEN</name><operator>)</operator> <operator>==</operator> <name>SAI_xCR1_DMAEN</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the SAI DMA request */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SAI_xCR1_DMAEN</name></expr>;</expr_stmt>

    <comment type="block">/* Abort the SAI Tx DMA Stream */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SAI_STATE_BUSY_TX</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* If the DMA Tx errorCode is different from DMA No Transfer then return Error */</comment>
        <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>!=</operator> <name>HAL_DMA_ERROR_NO_XFER</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SAI_ERROR_DMA</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Abort the SAI Rx DMA Stream */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SAI_STATE_BUSY_RX</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Abort</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* If the DMA Rx errorCode is different from DMA No Transfer then return Error */</comment>
        <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>!=</operator> <name>HAL_DMA_ERROR_NO_XFER</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_ERROR</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SAI_ERROR_DMA</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Disabled All interrupt and clear all the flag */</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IMR</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CLRFR</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt>

  <comment type="block">/* Disable SAI peripheral */</comment>
  <expr_stmt><expr><call><name>SAI_Disable</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Flush the fifo */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SAI_xCR2_FFLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set hsai state to ready */</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Transmit an amount of data in non-blocking mode with DMA.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SAI_Transmit_DMA</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SAI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SAI_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_BUSY_TX</name></expr>;</expr_stmt>

    <comment type="block">/* Set the SAI Tx DMA Half transfer complete callback */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>SAI_DMATxHalfCplt</name></expr>;</expr_stmt>

    <comment type="block">/* Set the SAI TxDMA transfer complete callback */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>SAI_DMATxCplt</name></expr>;</expr_stmt>

    <comment type="block">/* Set the DMA error callback */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>SAI_DMAError</name></expr>;</expr_stmt>

    <comment type="block">/* Set the DMA Tx abort callback */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Enable the Tx DMA Stream */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></argument>, <argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check if the SAI is already enabled */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;</operator> <name>SAI_xCR1_SAIEN</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable SAI peripheral */</comment>
      <expr_stmt><expr><call><name>__HAL_SAI_ENABLE</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Enable the interrupts for error handling */</comment>
    <expr_stmt><expr><call><name>__HAL_SAI_ENABLE_IT</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><call><name>SAI_InterruptFlag</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_MODE_DMA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable SAI Tx DMA Request */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <name>SAI_xCR1_DMAEN</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receive an amount of data in non-blocking mode with DMA.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SAI_Receive_DMA</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SAI_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SAI_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_BUSY_RX</name></expr>;</expr_stmt>

    <comment type="block">/* Set the SAI Rx DMA Half transfer complete callback */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>SAI_DMARxHalfCplt</name></expr>;</expr_stmt>

    <comment type="block">/* Set the SAI Rx DMA transfer complete callback */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>SAI_DMARxCplt</name></expr>;</expr_stmt>

    <comment type="block">/* Set the DMA error callback */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>SAI_DMAError</name></expr>;</expr_stmt>

    <comment type="block">/* Set the DMA Rx abort callback */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Enable the Rx DMA Stream */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name></expr></argument>, <argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferSize</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check if the SAI is already enabled */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;</operator> <name>SAI_xCR1_SAIEN</name><operator>)</operator> <operator>==</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Enable SAI peripheral */</comment>
      <expr_stmt><expr><call><name>__HAL_SAI_ENABLE</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Enable the interrupts for error handling */</comment>
    <expr_stmt><expr><call><name>__HAL_SAI_ENABLE_IT</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><call><name>SAI_InterruptFlag</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_MODE_DMA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable SAI Rx DMA Request */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <name>SAI_xCR1_DMAEN</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enable the Tx mute mode.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @param  val  value sent during the mute @ref SAI_Block_Mute_Value
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SAI_EnableTxMuteMode</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_MUTE_VALUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_SAI_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SAI_xCR2_MUTEVAL</name> <operator>|</operator> <name>SAI_xCR2_MUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SAI_xCR2_MUTE</name> <operator>|</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>HAL_ERROR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable the Tx mute mode.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SAI_DisableTxMuteMode</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_SAI_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SAI_xCR2_MUTEVAL</name> <operator>|</operator> <name>SAI_xCR2_MUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>HAL_ERROR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Enable the Rx mute detection.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @param  callback function called when the mute is detected.
  * @param  counter number a data before mute detection max 63.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SAI_EnableRxMuteMode</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>, <parameter><decl><type><name>SAIcallback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>counter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SAI_BLOCK_MUTE_COUNTER</name><argument_list>(<argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_SAI_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* set the mute counter */</comment>
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SAI_xCR2_MUTECNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>counter</name> <operator>&lt;&lt;</operator> <name>SAI_xCR2_MUTECNT_Pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>mutecallback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
    <comment type="block">/* enable the IT interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_SAI_ENABLE_IT</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_IT_MUTEDET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>HAL_ERROR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable the Rx mute detection.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SAI_DisableRxMuteMode</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_SAI_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* set the mutecallback to NULL */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>mutecallback</name></name> <operator>=</operator> <operator>(</operator><name>SAIcallback</name><operator>)</operator><name>NULL</name></expr>;</expr_stmt>
    <comment type="block">/* enable the IT interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_SAI_DISABLE_IT</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_IT_MUTEDET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>HAL_ERROR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Handle SAI interrupt request.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_SAI_IRQHandler</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>!=</operator> <name>HAL_SAI_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>itflags</name> <init>= <expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>itsources</name> <init>= <expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IMR</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>cr1config</name> <init>= <expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmperror</name></decl>;</decl_stmt>

    <comment type="block">/* SAI Fifo request interrupt occurred ------------------------------------*/</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>itflags</name> <operator>&amp;</operator> <name>SAI_xSR_FREQ</name><operator>)</operator> <operator>==</operator> <name>SAI_xSR_FREQ</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itsources</name> <operator>&amp;</operator> <name>SAI_IT_FREQ</name><operator>)</operator> <operator>==</operator> <name>SAI_IT_FREQ</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>InterruptServiceRoutine</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="block">/* SAI Overrun error interrupt occurred ----------------------------------*/</comment>
    <if type="elseif">else if<condition>(<expr><operator>(</operator><operator>(</operator><name>itflags</name> <operator>&amp;</operator> <name>SAI_FLAG_OVRUDR</name><operator>)</operator> <operator>==</operator> <name>SAI_FLAG_OVRUDR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itsources</name> <operator>&amp;</operator> <name>SAI_IT_OVRUDR</name><operator>)</operator> <operator>==</operator> <name>SAI_IT_OVRUDR</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear the SAI Overrun flag */</comment>
      <expr_stmt><expr><call><name>__HAL_SAI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_FLAG_OVRUDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Get the SAI error code */</comment>
      <expr_stmt><expr><name>tmperror</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SAI_STATE_BUSY_RX</name><operator>)</operator></expr> ?</condition><then> <expr><name>HAL_SAI_ERROR_OVR</name></expr> </then><else>: <expr><name>HAL_SAI_ERROR_UDR</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

      <comment type="block">/* Change the SAI error code */</comment>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>tmperror</name></expr>;</expr_stmt>

      <comment type="block">/* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_SAI_ErrorCallback</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if>
    <comment type="block">/* SAI mutedet interrupt occurred ----------------------------------*/</comment>
    <if type="elseif">else if<condition>(<expr><operator>(</operator><operator>(</operator><name>itflags</name> <operator>&amp;</operator> <name>SAI_FLAG_MUTEDET</name><operator>)</operator> <operator>==</operator> <name>SAI_FLAG_MUTEDET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itsources</name> <operator>&amp;</operator> <name>SAI_IT_MUTEDET</name><operator>)</operator> <operator>==</operator> <name>SAI_IT_MUTEDET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear the SAI mutedet flag */</comment>
      <expr_stmt><expr><call><name>__HAL_SAI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_FLAG_MUTEDET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* call the call back function */</comment>
      <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>mutecallback</name></name> <operator>!=</operator> <operator>(</operator><name>SAIcallback</name><operator>)</operator><name>NULL</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* inform the user that an RX mute event has been detected */</comment>
        <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>mutecallback</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <comment type="block">/* SAI AFSDET interrupt occurred ----------------------------------*/</comment>
    <if type="elseif">else if<condition>(<expr><operator>(</operator><operator>(</operator><name>itflags</name> <operator>&amp;</operator> <name>SAI_FLAG_AFSDET</name><operator>)</operator> <operator>==</operator> <name>SAI_FLAG_AFSDET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itsources</name> <operator>&amp;</operator> <name>SAI_IT_AFSDET</name><operator>)</operator> <operator>==</operator> <name>SAI_IT_AFSDET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Change the SAI error code */</comment>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SAI_ERROR_AFSDET</name></expr>;</expr_stmt>

      <comment type="block">/* Check SAI DMA is enabled or not */</comment>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>cr1config</name> <operator>&amp;</operator> <name>SAI_xCR1_DMAEN</name><operator>)</operator> <operator>==</operator> <name>SAI_xCR1_DMAEN</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Abort the SAI DMA Streams */</comment>
        <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set the DMA Tx abort callback */</comment>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>SAI_DMAAbort</name></expr>;</expr_stmt>

          <comment type="block">/* Abort DMA in IT mode */</comment>
          <expr_stmt><expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set the DMA Rx abort callback */</comment>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>SAI_DMAAbort</name></expr>;</expr_stmt>

          <comment type="block">/* Abort DMA in IT mode */</comment>
          <expr_stmt><expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Abort SAI */</comment>
        <expr_stmt><expr><call><name>HAL_SAI_Abort</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Set error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_SAI_ErrorCallback</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <comment type="block">/* SAI LFSDET interrupt occurred ----------------------------------*/</comment>
    <if type="elseif">else if<condition>(<expr><operator>(</operator><operator>(</operator><name>itflags</name> <operator>&amp;</operator> <name>SAI_FLAG_LFSDET</name><operator>)</operator> <operator>==</operator> <name>SAI_FLAG_LFSDET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itsources</name> <operator>&amp;</operator> <name>SAI_IT_LFSDET</name><operator>)</operator> <operator>==</operator> <name>SAI_IT_LFSDET</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Change the SAI error code */</comment>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SAI_ERROR_LFSDET</name></expr>;</expr_stmt>

      <comment type="block">/* Check SAI DMA is enabled or not */</comment>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>cr1config</name> <operator>&amp;</operator> <name>SAI_xCR1_DMAEN</name><operator>)</operator> <operator>==</operator> <name>SAI_xCR1_DMAEN</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Abort the SAI DMA Streams */</comment>
        <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set the DMA Tx abort callback */</comment>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>SAI_DMAAbort</name></expr>;</expr_stmt>

          <comment type="block">/* Abort DMA in IT mode */</comment>
          <expr_stmt><expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set the DMA Rx abort callback */</comment>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>SAI_DMAAbort</name></expr>;</expr_stmt>

          <comment type="block">/* Abort DMA in IT mode */</comment>
          <expr_stmt><expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* Abort SAI */</comment>
        <expr_stmt><expr><call><name>HAL_SAI_Abort</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Set error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_SAI_ErrorCallback</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <comment type="block">/* SAI WCKCFG interrupt occurred ----------------------------------*/</comment>
    <if type="elseif">else if<condition>(<expr><operator>(</operator><operator>(</operator><name>itflags</name> <operator>&amp;</operator> <name>SAI_FLAG_WCKCFG</name><operator>)</operator> <operator>==</operator> <name>SAI_FLAG_WCKCFG</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itsources</name> <operator>&amp;</operator> <name>SAI_IT_WCKCFG</name><operator>)</operator> <operator>==</operator> <name>SAI_IT_WCKCFG</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Change the SAI error code */</comment>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SAI_ERROR_WCKCFG</name></expr>;</expr_stmt>

      <comment type="block">/* Check SAI DMA is enabled or not */</comment>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name>cr1config</name> <operator>&amp;</operator> <name>SAI_xCR1_DMAEN</name><operator>)</operator> <operator>==</operator> <name>SAI_xCR1_DMAEN</name></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Abort the SAI DMA Streams */</comment>
        <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set the DMA Tx abort callback */</comment>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>SAI_DMAAbort</name></expr>;</expr_stmt>

          <comment type="block">/* Abort DMA in IT mode */</comment>
          <expr_stmt><expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Set the DMA Rx abort callback */</comment>
          <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>XferAbortCallback</name></name> <operator>=</operator> <name>SAI_DMAAbort</name></expr>;</expr_stmt>

          <comment type="block">/* Abort DMA in IT mode */</comment>
          <expr_stmt><expr><call><name>HAL_DMA_Abort_IT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* If WCKCFG occurs, SAI audio block is automatically disabled */</comment>
        <comment type="block">/* Disable all interrupts and clear all flags */</comment>
        <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IMR</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CLRFR</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt>

        <comment type="block">/* Set the SAI state to ready to be able to start again the process */</comment>
        <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_READY</name></expr>;</expr_stmt>

        <comment type="block">/* Initialize XferCount */</comment>
        <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

        <comment type="block">/* SAI error Callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>HAL_SAI_ErrorCallback</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <comment type="block">/* SAI CNRDY interrupt occurred ----------------------------------*/</comment>
    <if type="elseif">else if<condition>(<expr><operator>(</operator><operator>(</operator><name>itflags</name> <operator>&amp;</operator> <name>SAI_FLAG_CNRDY</name><operator>)</operator> <operator>==</operator> <name>SAI_FLAG_CNRDY</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itsources</name> <operator>&amp;</operator> <name>SAI_IT_CNRDY</name><operator>)</operator> <operator>==</operator> <name>SAI_IT_CNRDY</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Clear the SAI CNRDY flag */</comment>
      <expr_stmt><expr><call><name>__HAL_SAI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_FLAG_CNRDY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Change the SAI error code */</comment>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SAI_ERROR_CNREADY</name></expr>;</expr_stmt>

      <comment type="block">/* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
      <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>HAL_SAI_ErrorCallback</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <comment type="block">/* Nothing to do */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Tx Transfer completed callback.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SAI_TxCpltCallback</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Tx Transfer Half completed callback.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SAI_TxHalfCpltCallback</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Rx Transfer completed callback.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SAI_RxCpltCallback</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Rx Transfer half completed callback.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SAI_RxHalfCpltCallback</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief SAI error callback.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SAI_ErrorCallback</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup SAI_Exported_Functions_Group3 Peripheral State functions
  * @brief    Peripheral State functions
  *
@verbatim
 ===============================================================================
                ##### Peripheral State and Errors functions #####
 ===============================================================================
  [..]
    This subsection permits to get in run-time the status of the peripheral
    and the data flow.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Return the SAI handle state.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL state
  */</comment>
<function><type><name>HAL_SAI_StateTypeDef</name></type> <name>HAL_SAI_GetState</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the SAI error code.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for the specified SAI Block.
  * @retval SAI Error Code
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_SAI_GetError</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup SAI_Private_Functions
  * @brief      Private functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Initialize the SAI I2S protocol according to the specified parameters
  *         in the SAI_InitTypeDef and create the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @param  protocol one of the supported protocol.
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  *                the configuration information for SAI module.
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>SAI_InitI2S</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>datasize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nbslot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Protocol</name></name>            <operator>=</operator> <name>SAI_FREE_PROTOCOL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FirstBit</name></name>            <operator>=</operator> <name>SAI_FIRSTBIT_MSB</name></expr>;</expr_stmt>
  <comment type="block">/* Compute ClockStrobing according AudioMode */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioMode</name></name> <operator>==</operator> <name>SAI_MODEMASTER_TX</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioMode</name></name> <operator>==</operator> <name>SAI_MODESLAVE_TX</name><operator>)</operator></expr>)</condition>
  <block>{<block_content> <comment type="block">/* Transmit */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockStrobing</name></name>     <operator>=</operator> <name>SAI_CLOCKSTROBING_FALLINGEDGE</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content> <comment type="block">/* Receive */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockStrobing</name></name>     <operator>=</operator> <name>SAI_CLOCKSTROBING_RISINGEDGE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FSDefinition</name></name>   <operator>=</operator> <name>SAI_FS_CHANNEL_IDENTIFICATION</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>SlotActive</name></name>      <operator>=</operator> <name>SAI_SLOTACTIVE_ALL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>FirstBitOffset</name></name>  <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>SlotNumber</name></name>      <operator>=</operator> <name>nbslot</name></expr>;</expr_stmt>

  <comment type="block">/* in IS2 the number of slot must be even */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>nbslot</name> <operator>&amp;</operator> <literal type="number">0x1U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch<condition>(<expr><name>protocol</name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>SAI_I2S_STANDARD</name></expr> :</case>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FSPolarity</name></name> <operator>=</operator> <name>SAI_FS_ACTIVE_LOW</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FSOffset</name></name>   <operator>=</operator> <name>SAI_FS_BEFOREFIRSTBIT</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>SAI_I2S_MSBJUSTIFIED</name></expr> :</case>
  <case>case <expr><name>SAI_I2S_LSBJUSTIFIED</name></expr> :</case>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FSPolarity</name></name> <operator>=</operator> <name>SAI_FS_ACTIVE_HIGH</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FSOffset</name></name>   <operator>=</operator> <name>SAI_FS_FIRSTBIT</name></expr>;</expr_stmt>
    <break>break;</break>
  <default>default :</default>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></switch>

  <comment type="block">/* Frame definition */</comment>
  <switch>switch<condition>(<expr><name>datasize</name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>SAI_PROTOCOL_DATASIZE_16BIT</name></expr>:</case>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>=</operator> <name>SAI_DATASIZE_16</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FrameLength</name></name> <operator>=</operator> <literal type="number">32U</literal><operator>*</operator><operator>(</operator><name>nbslot</name><operator>/</operator><literal type="number">2U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>ActiveFrameLength</name></name> <operator>=</operator> <literal type="number">16U</literal><operator>*</operator><operator>(</operator><name>nbslot</name><operator>/</operator><literal type="number">2U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>SlotSize</name></name> <operator>=</operator> <name>SAI_SLOTSIZE_16B</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>SAI_PROTOCOL_DATASIZE_16BITEXTENDED</name></expr> :</case>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>=</operator> <name>SAI_DATASIZE_16</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FrameLength</name></name> <operator>=</operator> <literal type="number">64U</literal><operator>*</operator><operator>(</operator><name>nbslot</name><operator>/</operator><literal type="number">2U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>ActiveFrameLength</name></name> <operator>=</operator> <literal type="number">32U</literal><operator>*</operator><operator>(</operator><name>nbslot</name><operator>/</operator><literal type="number">2U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>SlotSize</name></name> <operator>=</operator> <name>SAI_SLOTSIZE_32B</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>SAI_PROTOCOL_DATASIZE_24BIT</name></expr>:</case>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>=</operator> <name>SAI_DATASIZE_24</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FrameLength</name></name> <operator>=</operator> <literal type="number">64U</literal><operator>*</operator><operator>(</operator><name>nbslot</name><operator>/</operator><literal type="number">2U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>ActiveFrameLength</name></name> <operator>=</operator> <literal type="number">32U</literal><operator>*</operator><operator>(</operator><name>nbslot</name><operator>/</operator><literal type="number">2U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>SlotSize</name></name> <operator>=</operator> <name>SAI_SLOTSIZE_32B</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>SAI_PROTOCOL_DATASIZE_32BIT</name></expr>:</case>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>=</operator> <name>SAI_DATASIZE_32</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FrameLength</name></name> <operator>=</operator> <literal type="number">64U</literal><operator>*</operator><operator>(</operator><name>nbslot</name><operator>/</operator><literal type="number">2U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>ActiveFrameLength</name></name> <operator>=</operator> <literal type="number">32U</literal><operator>*</operator><operator>(</operator><name>nbslot</name><operator>/</operator><literal type="number">2U</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>SlotSize</name></name> <operator>=</operator> <name>SAI_SLOTSIZE_32B</name></expr>;</expr_stmt>
    <break>break;</break>
  <default>default :</default>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></switch>
  <if_stmt><if>if<condition>(<expr><name>protocol</name> <operator>==</operator> <name>SAI_I2S_LSBJUSTIFIED</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>datasize</name> <operator>==</operator> <name>SAI_PROTOCOL_DATASIZE_16BITEXTENDED</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>FirstBitOffset</name></name> <operator>=</operator> <literal type="number">16U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>datasize</name> <operator>==</operator> <name>SAI_PROTOCOL_DATASIZE_24BIT</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>FirstBitOffset</name></name> <operator>=</operator> <literal type="number">8U</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Initialize the SAI PCM protocol according to the specified parameters
  *         in the SAI_InitTypeDef and create the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @param  protocol one of the supported protocol
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>SAI_InitPCM</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>datasize</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nbslot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Protocol</name></name>            <operator>=</operator> <name>SAI_FREE_PROTOCOL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>FirstBit</name></name>            <operator>=</operator> <name>SAI_FIRSTBIT_MSB</name></expr>;</expr_stmt>
  <comment type="block">/* Compute ClockStrobing according AudioMode */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioMode</name></name> <operator>==</operator> <name>SAI_MODEMASTER_TX</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioMode</name></name> <operator>==</operator> <name>SAI_MODESLAVE_TX</name><operator>)</operator></expr>)</condition>
  <block>{<block_content> <comment type="block">/* Transmit */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockStrobing</name></name>     <operator>=</operator> <name>SAI_CLOCKSTROBING_RISINGEDGE</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content> <comment type="block">/* Receive */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ClockStrobing</name></name>     <operator>=</operator> <name>SAI_CLOCKSTROBING_FALLINGEDGE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FSDefinition</name></name>   <operator>=</operator> <name>SAI_FS_STARTFRAME</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FSPolarity</name></name>     <operator>=</operator> <name>SAI_FS_ACTIVE_HIGH</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FSOffset</name></name>       <operator>=</operator> <name>SAI_FS_BEFOREFIRSTBIT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>FirstBitOffset</name></name>  <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>SlotNumber</name></name>      <operator>=</operator> <name>nbslot</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>SlotActive</name></name>      <operator>=</operator> <name>SAI_SLOTACTIVE_ALL</name></expr>;</expr_stmt>

  <switch>switch<condition>(<expr><name>protocol</name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>SAI_PCM_SHORT</name></expr> :</case>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>ActiveFrameLength</name></name> <operator>=</operator> <literal type="number">1U</literal></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>SAI_PCM_LONG</name></expr> :</case>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>ActiveFrameLength</name></name> <operator>=</operator> <literal type="number">13U</literal></expr>;</expr_stmt>
    <break>break;</break>
  <default>default :</default>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></switch>

  <switch>switch<condition>(<expr><name>datasize</name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>SAI_PROTOCOL_DATASIZE_16BIT</name></expr>:</case>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>=</operator> <name>SAI_DATASIZE_16</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FrameLength</name></name> <operator>=</operator> <literal type="number">16U</literal> <operator>*</operator> <name>nbslot</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>SlotSize</name></name> <operator>=</operator> <name>SAI_SLOTSIZE_16B</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>SAI_PROTOCOL_DATASIZE_16BITEXTENDED</name></expr> :</case>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>=</operator> <name>SAI_DATASIZE_16</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FrameLength</name></name> <operator>=</operator> <literal type="number">32U</literal> <operator>*</operator> <name>nbslot</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>SlotSize</name></name> <operator>=</operator> <name>SAI_SLOTSIZE_32B</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>SAI_PROTOCOL_DATASIZE_24BIT</name></expr> :</case>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>=</operator> <name>SAI_DATASIZE_24</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FrameLength</name></name> <operator>=</operator> <literal type="number">32U</literal> <operator>*</operator> <name>nbslot</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>SlotSize</name></name> <operator>=</operator> <name>SAI_SLOTSIZE_32B</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>SAI_PROTOCOL_DATASIZE_32BIT</name></expr>:</case>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>=</operator> <name>SAI_DATASIZE_32</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>FrameInit</name><operator>.</operator><name>FrameLength</name></name> <operator>=</operator> <literal type="number">32U</literal> <operator>*</operator> <name>nbslot</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>SlotInit</name><operator>.</operator><name>SlotSize</name></name> <operator>=</operator> <name>SAI_SLOTSIZE_32B</name></expr>;</expr_stmt>
    <break>break;</break>
  <default>default :</default>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></switch>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Fill the fifo.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SAI_FillFifo</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* fill the fifo with data before to enabled the SAI */</comment>
  <while>while<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name> <operator>&amp;</operator> <name>SAI_xSR_FLVL</name><operator>)</operator> <operator>!=</operator> <name>SAI_FIFOSTATUS_FULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>&gt;</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>==</operator> <name>SAI_DATASIZE_8</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>CompandingMode</name></name> <operator>==</operator> <name>SAI_NOCOMPANDING</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataSize</name></name> <operator>&lt;=</operator> <name>SAI_DATASIZE_16</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>+=</operator> <literal type="number">2U</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>+=</operator> <literal type="number">4U</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the interrupt flag to set according the SAI setup.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>SAI_InterruptFlag</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpIT</name> <init>= <expr><name>SAI_IT_OVRUDR</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>SAI_MODE_IT</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmpIT</name><operator>|=</operator> <name>SAI_IT_FREQ</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Protocol</name></name> <operator>==</operator> <name>SAI_AC97_PROTOCOL</name><operator>)</operator> <operator>&amp;&amp;</operator>
    <operator>(</operator><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioMode</name></name> <operator>==</operator> <name>SAI_MODESLAVE_RX</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioMode</name></name> <operator>==</operator> <name>SAI_MODEMASTER_RX</name><operator>)</operator><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmpIT</name><operator>|=</operator> <name>SAI_IT_CNRDY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioMode</name></name> <operator>==</operator> <name>SAI_MODESLAVE_RX</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>AudioMode</name></name> <operator>==</operator> <name>SAI_MODESLAVE_TX</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmpIT</name><operator>|=</operator> <name>SAI_IT_AFSDET</name> <operator>|</operator> <name>SAI_IT_LFSDET</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* hsai has been configured in master mode */</comment>
    <expr_stmt><expr><name>tmpIT</name><operator>|=</operator> <name>SAI_IT_WCKCFG</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>tmpIT</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disable the SAI and wait for the disabling.
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>SAI_Disable</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>register</specifier> <name>uint32_t</name></type> <name>count</name> <init>= <expr><name>SAI_DEFAULT_TIMEOUT</name> <operator>*</operator> <operator>(</operator><name>SystemCoreClock</name> <operator>/</operator><literal type="number">7U</literal><operator>/</operator><literal type="number">1000U</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Disable the SAI instance */</comment>
  <expr_stmt><expr><call><name>__HAL_SAI_DISABLE</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <do>do
  <block>{<block_content>
    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if <condition>(<expr><name>count</name><operator>--</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Update error code */</comment>
      <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SAI_ERROR_TIMEOUT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>HAL_TIMEOUT</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block> while<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;</operator> <name>SAI_xCR1_SAIEN</name><operator>)</operator> <operator>!=</operator> <name>RESET</name></expr>)</condition>;</do>

  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Tx Handler for Transmit in Interrupt mode 8-Bit transfer.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SAI_Transmit_IT8Bit</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Handle the end of the transmission */</comment>
    <comment type="block">/* Disable FREQ and OVRUDR interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_SAI_DISABLE_IT</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><call><name>SAI_InterruptFlag</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_MODE_IT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_READY</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>TxCpltCallback</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_SAI_TxCpltCallback</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Write data on DR register */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Tx Handler for Transmit in Interrupt mode for 16-Bit transfer.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SAI_Transmit_IT16Bit</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Handle the end of the transmission */</comment>
    <comment type="block">/* Disable FREQ and OVRUDR interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_SAI_DISABLE_IT</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><call><name>SAI_InterruptFlag</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_MODE_IT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_READY</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>TxCpltCallback</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_SAI_TxCpltCallback</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Write data on DR register */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>+=</operator><literal type="number">2U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Tx Handler for Transmit in Interrupt mode for 32-Bit transfer.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SAI_Transmit_IT32Bit</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Handle the end of the transmission */</comment>
    <comment type="block">/* Disable FREQ and OVRUDR interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_SAI_DISABLE_IT</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><call><name>SAI_InterruptFlag</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_MODE_IT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_READY</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>TxCpltCallback</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_SAI_TxCpltCallback</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Write data on DR register */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Rx Handler for Receive in Interrupt mode 8-Bit transfer.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SAI_Receive_IT8Bit</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Receive data */</comment>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>

  <comment type="block">/* Check end of the transfer */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable TXE and OVRUDR interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_SAI_DISABLE_IT</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><call><name>SAI_InterruptFlag</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_MODE_IT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear the SAI Overrun flag */</comment>
    <expr_stmt><expr><call><name>__HAL_SAI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_FLAG_OVRUDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_READY</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>RxCpltCallback</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_SAI_RxCpltCallback</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Rx Handler for Receive in Interrupt mode for 16-Bit transfer.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SAI_Receive_IT16Bit</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Receive data */</comment>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name> <operator>=</operator> <name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>+=</operator><literal type="number">2U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>

  <comment type="block">/* Check end of the transfer */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable TXE and OVRUDR interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_SAI_DISABLE_IT</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><call><name>SAI_InterruptFlag</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_MODE_IT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear the SAI Overrun flag */</comment>
    <expr_stmt><expr><call><name>__HAL_SAI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_FLAG_OVRUDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_READY</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>RxCpltCallback</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_SAI_RxCpltCallback</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Rx Handler for Receive in Interrupt mode for 32-Bit transfer.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SAI_Receive_IT32Bit</name><parameter_list>(<parameter><decl><type><name>SAI_HandleTypeDef</name> <modifier>*</modifier></type><name>hsai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Receive data */</comment>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name> <operator>=</operator> <name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>pBuffPtr</name></name><operator>+=</operator><literal type="number">4U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name><operator>--</operator></expr>;</expr_stmt>

  <comment type="block">/* Check end of the transfer */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable TXE and OVRUDR interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_SAI_DISABLE_IT</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><call><name>SAI_InterruptFlag</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_MODE_IT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear the SAI Overrun flag */</comment>
    <expr_stmt><expr><call><name>__HAL_SAI_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_FLAG_OVRUDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_READY</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>RxCpltCallback</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_SAI_RxCpltCallback</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DMA SAI transmit process complete callback.
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SAI_DMATxCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SAI_HandleTypeDef</name><modifier>*</modifier></type> <name>hsai</name> <init>= <expr><operator>(</operator><name>SAI_HandleTypeDef</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator> <operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DMA_SxCR_CIRC</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

    <comment type="block">/* Disable SAI Tx DMA Request */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>~</operator><name>SAI_xCR1_DMAEN</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Stop the interrupts error handling */</comment>
    <expr_stmt><expr><call><name>__HAL_SAI_DISABLE_IT</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><call><name>SAI_InterruptFlag</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_MODE_DMA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_SAI_STATE_READY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>TxCpltCallback</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_SAI_TxCpltCallback</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DMA SAI transmit process half complete callback.
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SAI_DMATxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SAI_HandleTypeDef</name><modifier>*</modifier></type> <name>hsai</name> <init>= <expr><operator>(</operator><name>SAI_HandleTypeDef</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>TxHalfCpltCallback</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_SAI_TxHalfCpltCallback</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DMA SAI receive process complete callback.
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SAI_DMARxCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SAI_HandleTypeDef</name><modifier>*</modifier></type> <name>hsai</name> <init>= <expr><operator>(</operator> <name>SAI_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator> <operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdma</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>DMA_SxCR_CIRC</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable Rx DMA Request */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>~</operator><name>SAI_xCR1_DMAEN</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

    <comment type="block">/* Stop the interrupts error handling */</comment>
    <expr_stmt><expr><call><name>__HAL_SAI_DISABLE_IT</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><call><name>SAI_InterruptFlag</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>, <argument><expr><name>SAI_MODE_DMA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_READY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>RxCpltCallback</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_SAI_RxCpltCallback</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DMA SAI receive process half complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SAI_DMARxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SAI_HandleTypeDef</name><modifier>*</modifier></type> <name>hsai</name> <init>= <expr><operator>(</operator><name>SAI_HandleTypeDef</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_SAI_RxHalfCpltCallback</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DMA SAI communication error callback.
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SAI_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SAI_HandleTypeDef</name><modifier>*</modifier></type> <name>hsai</name> <init>= <expr><operator>(</operator> <name>SAI_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator> <operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Set SAI error code */</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SAI_ERROR_DMA</name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>hdmatx</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>==</operator> <name>HAL_DMA_ERROR_TE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hsai</name><operator>-&gt;</operator><name>hdmarx</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>==</operator> <name>HAL_DMA_ERROR_TE</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable the SAI DMA request */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SAI_xCR1_DMAEN</name></expr>;</expr_stmt>

    <comment type="block">/* Disable SAI peripheral */</comment>
    <expr_stmt><expr><call><name>SAI_Disable</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set the SAI state ready to be able to start again the process */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Initialize XferCount */</comment>
    <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* SAI error Callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_SAI_ErrorCallback</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA SAI Abort callback.
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SAI_DMAAbort</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SAI_HandleTypeDef</name><modifier>*</modifier></type> <name>hsai</name> <init>= <expr><operator>(</operator> <name>SAI_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator> <operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Disable DMA request */</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SAI_xCR1_DMAEN</name></expr>;</expr_stmt>

  <comment type="block">/* Disable all interrupts and clear all flags */</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IMR</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CLRFR</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>!=</operator> <name>HAL_SAI_ERROR_WCKCFG</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable SAI peripheral */</comment>
    <expr_stmt><expr><call><name>SAI_Disable</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Flush the fifo */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hsai</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR2</name></name></expr></argument>, <argument><expr><name>SAI_xCR2_FFLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Set the SAI state to ready to be able to start again the process */</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SAI_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Initialize XferCount */</comment>
  <expr_stmt><expr><name><name>hsai</name><operator>-&gt;</operator><name>XferCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

  <comment type="block">/* SAI error Callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SAI_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hsai</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_SAI_ErrorCallback</name><argument_list>(<argument><expr><name>hsai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SAI_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F446xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_SAI_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
