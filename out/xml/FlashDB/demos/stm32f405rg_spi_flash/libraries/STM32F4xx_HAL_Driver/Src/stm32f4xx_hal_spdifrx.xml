<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_spdifrx.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_spdifrx.c
  * @author  MCD Application Team
  * @brief   This file provides firmware functions to manage the following
  *          functionalities of the SPDIFRX audio interface:
  *           + Initialization and Configuration
  *           + Data transfers functions
  *           + DMA transfers management
  *           + Interrupts and flags management
  @verbatim
 ===============================================================================
                  ##### How to use this driver #####
 ===============================================================================
 [..]
    The SPDIFRX HAL driver can be used as follow:

    (#) Declare SPDIFRX_HandleTypeDef handle structure.
    (#) Initialize the SPDIFRX low level resources by implement the HAL_SPDIFRX_MspInit() API:
        (##) Enable the SPDIFRX interface clock.
        (##) SPDIFRX pins configuration:
            (+++) Enable the clock for the SPDIFRX GPIOs.
            (+++) Configure these SPDIFRX pins as alternate function pull-up.
        (##) NVIC configuration if you need to use interrupt process (HAL_SPDIFRX_ReceiveControlFlow_IT() and HAL_SPDIFRX_ReceiveDataFlow_IT() API's).
            (+++) Configure the SPDIFRX interrupt priority.
            (+++) Enable the NVIC SPDIFRX IRQ handle.
        (##) DMA Configuration if you need to use DMA process (HAL_SPDIFRX_ReceiveDataFlow_DMA() and HAL_SPDIFRX_ReceiveControlFlow_DMA() API's).
            (+++) Declare a DMA handle structure for the reception of the Data Flow channel.
            (+++) Declare a DMA handle structure for the reception of the Control Flow channel.
            (+++) Enable the DMAx interface clock.
            (+++) Configure the declared DMA handle structure CtrlRx/DataRx with the required parameters.
            (+++) Configure the DMA Channel.
            (+++) Associate the initialized DMA handle to the SPDIFRX DMA CtrlRx/DataRx handle.
            (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on the
                DMA CtrlRx/DataRx channel.

   (#) Program the input selection, re-tries number, wait for activity, channel status selection, data format, stereo mode and masking of user bits
       using HAL_SPDIFRX_Init() function.

   -@- The specific SPDIFRX interrupts (RXNE/CSRNE and Error Interrupts) will be managed using the macros
       __SPDIFRX_ENABLE_IT() and __SPDIFRX_DISABLE_IT() inside the receive process.
   -@- Make sure that ck_spdif clock is configured.

   (#) Three operation modes are available within this driver :

   *** Polling mode for reception operation (for debug purpose) ***
   ================================================================
   [..]
     (+) Receive data flow in blocking mode using HAL_SPDIFRX_ReceiveDataFlow()
     (+) Receive control flow of data in blocking mode using HAL_SPDIFRX_ReceiveControlFlow()

   *** Interrupt mode for reception operation ***
   =========================================
   [..]
     (+) Receive an amount of data (Data Flow) in non blocking mode using HAL_SPDIFRX_ReceiveDataFlow_IT()
     (+) Receive an amount of data (Control Flow) in non blocking mode using HAL_SPDIFRX_ReceiveControlFlow_IT()
     (+) At reception end of half transfer HAL_SPDIFRX_RxHalfCpltCallback is executed and user can
         add his own code by customization of function pointer HAL_SPDIFRX_RxHalfCpltCallback
     (+) At reception end of transfer HAL_SPDIFRX_RxCpltCallback is executed and user can
         add his own code by customization of function pointer HAL_SPDIFRX_RxCpltCallback
     (+) In case of transfer Error, HAL_SPDIFRX_ErrorCallback() function is executed and user can
         add his own code by customization of function pointer HAL_SPDIFRX_ErrorCallback

   *** DMA mode for reception operation ***
   ========================================
   [..]
     (+) Receive an amount of data (Data Flow) in non blocking mode (DMA) using HAL_SPDIFRX_ReceiveDataFlow_DMA()
     (+) Receive an amount of data (Control Flow) in non blocking mode (DMA) using HAL_SPDIFRX_ReceiveControlFlow_DMA()
     (+) At reception end of half transfer HAL_SPDIFRX_RxHalfCpltCallback is executed and user can
         add his own code by customization of function pointer HAL_SPDIFRX_RxHalfCpltCallback
     (+) At reception end of transfer HAL_SPDIFRX_RxCpltCallback is executed and user can
         add his own code by customization of function pointer HAL_SPDIFRX_RxCpltCallback
     (+) In case of transfer Error, HAL_SPDIFRX_ErrorCallback() function is executed and user can
         add his own code by customization of function pointer HAL_SPDIFRX_ErrorCallback
     (+) Stop the DMA Transfer using HAL_SPDIFRX_DMAStop()

   *** SPDIFRX HAL driver macros list ***
   =============================================
   [..]
     Below the list of most used macros in SPDIFRX HAL driver.
      (+) __HAL_SPDIFRX_IDLE: Disable the specified SPDIFRX peripheral (IDEL State)
      (+) __HAL_SPDIFRX_SYNC: Enable the synchronization state of the specified SPDIFRX peripheral (SYNC State)
      (+) __HAL_SPDIFRX_RCV: Enable the receive state of the specified SPDIFRX peripheral (RCV State)
      (+) __HAL_SPDIFRX_ENABLE_IT : Enable the specified SPDIFRX interrupts
      (+) __HAL_SPDIFRX_DISABLE_IT : Disable the specified SPDIFRX interrupts
      (+) __HAL_SPDIFRX_GET_FLAG: Check whether the specified SPDIFRX flag is set or not.

   [..]
      (@) You can refer to the SPDIFRX HAL driver header file for more useful macros

  *** Callback registration ***
  =============================================

  The compilation define  USE_HAL_SPDIFRX_REGISTER_CALLBACKS when set to 1
  allows the user to configure dynamically the driver callbacks.
  Use HAL_SPDIFRX_RegisterCallback() funtion to register an interrupt callback.

  The HAL_SPDIFRX_RegisterCallback() function allows to register the following callbacks:
    (+) RxHalfCpltCallback  : SPDIFRX Data flow half completed callback.
    (+) RxCpltCallback      : SPDIFRX Data flow completed callback.
    (+) CxHalfCpltCallback  : SPDIFRX Control flow half completed callback.
    (+) CxCpltCallback      : SPDIFRX Control flow completed callback.
    (+) ErrorCallback       : SPDIFRX error callback.
    (+) MspInitCallback     : SPDIFRX MspInit.
    (+) MspDeInitCallback   : SPDIFRX MspDeInit.
  This function takes as parameters the HAL peripheral handle, the Callback ID
  and a pointer to the user callback function.

  Use HAL_SPDIFRX_UnRegisterCallback() function to reset a callback to the default
  weak function.
  The HAL_SPDIFRX_UnRegisterCallback() function takes as parameters the HAL peripheral handle,
  and the Callback ID.
  This function allows to reset the following callbacks:
    (+) RxHalfCpltCallback  : SPDIFRX Data flow half completed callback.
    (+) RxCpltCallback      : SPDIFRX Data flow completed callback.
    (+) CxHalfCpltCallback  : SPDIFRX Control flow half completed callback.
    (+) CxCpltCallback      : SPDIFRX Control flow completed callback.
    (+) ErrorCallback       : SPDIFRX error callback.
    (+) MspInitCallback     : SPDIFRX MspInit.
    (+) MspDeInitCallback   : SPDIFRX MspDeInit.

  By default, after the HAL_SPDIFRX_Init() and when the state is HAL_SPDIFRX_STATE_RESET
  all callbacks are set to the corresponding weak functions :
  HAL_SPDIFRX_RxHalfCpltCallback() , HAL_SPDIFRX_RxCpltCallback(), HAL_SPDIFRX_CxHalfCpltCallback(),
  HAL_SPDIFRX_CxCpltCallback() and HAL_SPDIFRX_ErrorCallback()
  Exception done for MspInit and MspDeInit functions that are
  reset to the legacy weak function in the HAL_SPDIFRX_Init()/ HAL_SPDIFRX_DeInit() only when
  these callbacks pointers are NULL (not registered beforehand).
  If not, MspInit or MspDeInit callbacks pointers are not null, the HAL_SPDIFRX_Init() / HAL_SPDIFRX_DeInit()
  keep and use the user MspInit/MspDeInit functions (registered beforehand)

  Callbacks can be registered/unregistered in HAL_SPDIFRX_STATE_READY state only.
  Exception done MspInit/MspDeInit callbacks that can be registered/unregistered
  in HAL_SPDIFRX_STATE_READY or HAL_SPDIFRX_STATE_RESET state,
  thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
  In that case first register the MspInit/MspDeInit user callbacks
  using HAL_SPDIFRX_RegisterCallback() before calling HAL_SPDIFRX_DeInit()
  or HAL_SPDIFRX_Init() function.

  When The compilation define USE_HAL_SPDIFRX_REGISTER_CALLBACKS is set to 0 or
  not defined, the callback registration feature is not available and all callbacks
  are set to the corresponding weak functions.

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup SPDIFRX SPDIFRX
  * @brief SPDIFRX HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_SPDIFRX_MODULE_ENABLED</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>SPDIFRX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPDIFRX_TIMEOUT_VALUE</name></cpp:macro>  <cpp:value>0xFFFFU</cpp:value></cpp:define>

<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup SPDIFRX_Private_Functions
  * @{
  */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>SPDIFRX_DMARxCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>SPDIFRX_DMARxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>SPDIFRX_DMACxCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>SPDIFRX_DMACxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>SPDIFRX_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>SPDIFRX_ReceiveControlFlow_IT</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>SPDIFRX_ReceiveDataFlow_IT</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type>  <name>SPDIFRX_WaitOnFlagUntilTimeout</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Flag</name></decl></parameter>, <parameter><decl><type><name>FlagStatus</name></type> <name>Status</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<comment type="block">/* Exported functions ---------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup SPDIFRX_Exported_Functions SPDIFRX Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup  SPDIFRX_Exported_Functions_Group1 Initialization and de-initialization functions
  *  @brief    Initialization and Configuration functions
  *
  @verbatim
  ===============================================================================
  ##### Initialization and de-initialization functions #####
  ===============================================================================
  [..]  This subsection provides a set of functions allowing to initialize and
        de-initialize the SPDIFRX peripheral:

  (+) User must Implement HAL_SPDIFRX_MspInit() function in which he configures
      all related peripherals resources (CLOCK, GPIO, DMA, IT and NVIC ).

  (+) Call the function HAL_SPDIFRX_Init() to configure the SPDIFRX peripheral with
      the selected configuration:
  (++) Input Selection (IN0, IN1,...)
  (++) Maximum allowed re-tries during synchronization phase
  (++) Wait for activity on SPDIF selected input
  (++) Channel status selection (from channel A or B)
  (++) Data format (LSB, MSB, ...)
  (++) Stereo mode
  (++) User bits masking (PT,C,U,V,...)

  (+) Call the function HAL_SPDIFRX_DeInit() to restore the default configuration
      of the selected SPDIFRXx peripheral.
  @endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief Initializes the SPDIFRX according to the specified parameters
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SPDIFRX_Init</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name></decl>;</decl_stmt>

  <comment type="block">/* Check the SPDIFRX handle allocation */</comment>
  <if_stmt><if>if<condition>(<expr><name>hspdif</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the SPDIFRX parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_STEREO_MODE</name><argument_list>(<argument><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>StereoMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SPDIFRX_INPUT_SELECT</name><argument_list>(<argument><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>InputSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SPDIFRX_MAX_RETRIES</name><argument_list>(<argument><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Retries</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SPDIFRX_WAIT_FOR_ACTIVITY</name><argument_list>(<argument><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>WaitForActivity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SPDIFRX_CHANNEL</name><argument_list>(<argument><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ChannelSelection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SPDIFRX_DATA_FORMAT</name><argument_list>(<argument><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_PREAMBLE_TYPE_MASK</name><argument_list>(<argument><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PreambleTypeMask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CHANNEL_STATUS_MASK</name><argument_list>(<argument><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ChannelStatusMask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_VALIDITY_MASK</name><argument_list>(<argument><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ValidityBitMask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_PARITY_ERROR_MASK</name><argument_list>(<argument><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ParityErrorMask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SPDIFRX_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SPDIFRX_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name>  <operator>=</operator> <name>HAL_SPDIFRX_RxHalfCpltCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak RxHalfCpltCallback */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>RxCpltCallback</name></name>      <operator>=</operator> <name>HAL_SPDIFRX_RxCpltCallback</name></expr>;</expr_stmt>     <comment type="block">/* Legacy weak RxCpltCallback     */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>CxHalfCpltCallback</name></name>  <operator>=</operator> <name>HAL_SPDIFRX_CxHalfCpltCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak CxHalfCpltCallback */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>CxCpltCallback</name></name>      <operator>=</operator> <name>HAL_SPDIFRX_CxCpltCallback</name></expr>;</expr_stmt>     <comment type="block">/* Legacy weak CxCpltCallback     */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCallback</name></name>       <operator>=</operator> <name>HAL_SPDIFRX_ErrorCallback</name></expr>;</expr_stmt>      <comment type="block">/* Legacy weak ErrorCallback      */</comment>

    <if_stmt><if>if<condition>(<expr><name><name>hspdif</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_SPDIFRX_MspInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MspInit  */</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>hspdif</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if<condition>(<expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SPDIFRX_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>
    <comment type="block">/* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */</comment>
    <expr_stmt><expr><call><name>HAL_SPDIFRX_MspInit</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */</comment>

  <comment type="block">/* SPDIFRX peripheral state is BUSY */</comment>
  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPDIFRX_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable SPDIFRX interface (IDLE State) */</comment>
  <expr_stmt><expr><call><name>__HAL_SPDIFRX_IDLE</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Reset the old SPDIFRX CR configuration */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmpreg</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SPDIFRX_CR_RXSTEO</name>  <operator>|</operator> <name>SPDIFRX_CR_DRFMT</name>  <operator>|</operator> <name>SPDIFRX_CR_PMSK</name> <operator>|</operator>
              <name>SPDIFRX_CR_VMSK</name> <operator>|</operator> <name>SPDIFRX_CR_CUMSK</name> <operator>|</operator> <name>SPDIFRX_CR_PTMSK</name>  <operator>|</operator>
              <name>SPDIFRX_CR_CHSEL</name> <operator>|</operator> <name>SPDIFRX_CR_NBTR</name> <operator>|</operator> <name>SPDIFRX_CR_WFA</name> <operator>|</operator>
              <name>SPDIFRX_CR_INSEL</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Sets the new configuration of the SPDIFRX peripheral */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>|=</operator> <operator>(</operator><name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>StereoMode</name></name> <operator>|</operator>
             <name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>InputSelection</name></name> <operator>|</operator>
             <name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Retries</name></name> <operator>|</operator>
             <name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>WaitForActivity</name></name> <operator>|</operator>
             <name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ChannelSelection</name></name> <operator>|</operator>
             <name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataFormat</name></name> <operator>|</operator>
             <name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>PreambleTypeMask</name></name> <operator>|</operator>
             <name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ChannelStatusMask</name></name> <operator>|</operator>
             <name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ValidityBitMask</name></name> <operator>|</operator>
             <name><name>hspdif</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ParityErrorMask</name></name>
             <operator>)</operator></expr>;</expr_stmt>


  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>=</operator> <name>tmpreg</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SPDIFRX_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* SPDIFRX peripheral state is READY*/</comment>
  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPDIFRX_STATE_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DeInitializes the SPDIFRX peripheral
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SPDIFRX_DeInit</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the SPDIFRX handle allocation */</comment>
  <if_stmt><if>if<condition>(<expr><name>hspdif</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SPDIFRX_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPDIFRX_STATE_BUSY</name></expr>;</expr_stmt>

  <comment type="block">/* Disable SPDIFRX interface (IDLE state) */</comment>
  <expr_stmt><expr><call><name>__HAL_SPDIFRX_IDLE</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SPDIFRX_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><name><name>hspdif</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_SPDIFRX_MspDeInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MspDeInit  */</comment>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name><name>hspdif</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* DeInit the low level hardware: GPIO, CLOCK, NVIC... */</comment>
  <expr_stmt><expr><call><name>HAL_SPDIFRX_MspDeInit</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */</comment>

  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SPDIFRX_ERROR_NONE</name></expr>;</expr_stmt>

  <comment type="block">/* SPDIFRX peripheral state is RESET*/</comment>
  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPDIFRX_STATE_RESET</name></expr>;</expr_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief SPDIFRX MSP Init
  * @param hspdif SPDIFRX handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SPDIFRX_MspInit</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_SPDIFRX_MspInit could be implemented in the user file
  */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief SPDIFRX MSP DeInit
  * @param hspdif SPDIFRX handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SPDIFRX_MspDeInit</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_SPDIFRX_MspDeInit could be implemented in the user file
  */</comment>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SPDIFRX_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User SPDIFRX Callback
  *         To be used instead of the weak predefined callback
  * @param  hspdif SPDIFRX handle
  * @param  CallbackID ID of the callback to be registered
  *         This parameter can be one of the following values:
  *          @arg @ref HAL_SPDIFRX_RX_HALF_CB_ID    SPDIFRX Data flow half completed callback ID
  *          @arg @ref HAL_SPDIFRX_RX_CPLT_CB_ID    SPDIFRX Data flow completed callback ID
  *          @arg @ref HAL_SPDIFRX_CX_HALF_CB_ID    SPDIFRX Control flow half completed callback ID
  *          @arg @ref HAL_SPDIFRX_CX_CPLT_CB_ID    SPDIFRX Control flow completed callback ID
  *          @arg @ref HAL_SPDIFRX_ERROR_CB_ID      SPDIFRX error callback ID
  *          @arg @ref HAL_SPDIFRX_MSPINIT_CB_ID    MspInit callback ID
  *          @arg @ref HAL_SPDIFRX_MSPDEINIT_CB_ID  MspDeInit callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SPDIFRX_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>, <parameter><decl><type><name>HAL_SPDIFRX_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>, <parameter><decl><type><name>pSPDIFRX_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SPDIFRX_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>HAL_SPDIFRX_STATE_READY</name> <operator>==</operator> <name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_SPDIFRX_RX_HALF_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_SPDIFRX_RX_CPLT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>RxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_SPDIFRX_CX_HALF_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>CxHalfCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_SPDIFRX_CX_CPLT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>CxCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_SPDIFRX_ERROR_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_SPDIFRX_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_SPDIFRX_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SPDIFRX_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name>HAL_SPDIFRX_STATE_RESET</name> <operator>==</operator> <name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_SPDIFRX_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_SPDIFRX_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SPDIFRX_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
       <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SPDIFRX_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister a SPDIFRX Callback
  *         SPDIFRX callabck is redirected to the weak predefined callback
  * @param  hspdif SPDIFRX handle
  * @param  CallbackID ID of the callback to be unregistered
  *         This parameter can be one of the following values:
  *          @arg @ref HAL_SPDIFRX_RX_HALF_CB_ID    SPDIFRX Data flow half completed callback ID
  *          @arg @ref HAL_SPDIFRX_RX_CPLT_CB_ID    SPDIFRX Data flow completed callback ID
  *          @arg @ref HAL_SPDIFRX_CX_HALF_CB_ID    SPDIFRX Control flow half completed callback ID
  *          @arg @ref HAL_SPDIFRX_CX_CPLT_CB_ID    SPDIFRX Control flow completed callback ID
  *          @arg @ref HAL_SPDIFRX_ERROR_CB_ID      SPDIFRX error callback ID
  *          @arg @ref HAL_SPDIFRX_MSPINIT_CB_ID    MspInit callback ID
  *          @arg @ref HAL_SPDIFRX_MSPDEINIT_CB_ID  MspDeInit callback ID
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SPDIFRX_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>, <parameter><decl><type><name>HAL_SPDIFRX_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>HAL_SPDIFRX_STATE_READY</name> <operator>==</operator> <name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_SPDIFRX_RX_HALF_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_SPDIFRX_RxHalfCpltCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_SPDIFRX_RX_CPLT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>RxCpltCallback</name></name> <operator>=</operator> <name>HAL_SPDIFRX_RxCpltCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_SPDIFRX_CX_HALF_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>CxHalfCpltCallback</name></name> <operator>=</operator> <name>HAL_SPDIFRX_CxHalfCpltCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_SPDIFRX_CX_CPLT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>CxCpltCallback</name></name> <operator>=</operator> <name>HAL_SPDIFRX_CxCpltCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HAL_SPDIFRX_ERROR_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>HAL_SPDIFRX_ErrorCallback</name></expr>;</expr_stmt>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SPDIFRX_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
       <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name>HAL_SPDIFRX_STATE_RESET</name> <operator>==</operator> <name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>HAL_SPDIFRX_MSPINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_SPDIFRX_MspInit</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak MspInit  */</comment>
        <break>break;</break>

      <case>case <expr><name>HAL_SPDIFRX_MSPDEINIT_CB_ID</name></expr> :</case>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_SPDIFRX_MspDeInit</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak MspInit  */</comment>
        <break>break;</break>

      <default>default :</default>
        <comment type="block">/* Update the error code */</comment>
        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SPDIFRX_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
        <comment type="block">/* Return error status */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SPDIFRX_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */</comment>

<comment type="block" format="doxygen">/**
  * @brief Set the SPDIFRX  data format according to the specified parameters in the SPDIFRX_InitTypeDef.
  * @param hspdif SPDIFRX handle
  * @param sDataFormat SPDIFRX data format
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SPDIFRX_SetDataFormat</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>, <parameter><decl><type><name>SPDIFRX_SetDataFormatTypeDef</name></type> <name>sDataFormat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name></decl>;</decl_stmt>

  <comment type="block">/* Check the SPDIFRX handle allocation */</comment>
  <if_stmt><if>if<condition>(<expr><name>hspdif</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the SPDIFRX parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_STEREO_MODE</name><argument_list>(<argument><expr><name><name>sDataFormat</name><operator>.</operator><name>StereoMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_SPDIFRX_DATA_FORMAT</name><argument_list>(<argument><expr><name><name>sDataFormat</name><operator>.</operator><name>DataFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_PREAMBLE_TYPE_MASK</name><argument_list>(<argument><expr><name><name>sDataFormat</name><operator>.</operator><name>PreambleTypeMask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CHANNEL_STATUS_MASK</name><argument_list>(<argument><expr><name><name>sDataFormat</name><operator>.</operator><name>ChannelStatusMask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_VALIDITY_MASK</name><argument_list>(<argument><expr><name><name>sDataFormat</name><operator>.</operator><name>ValidityBitMask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_PARITY_ERROR_MASK</name><argument_list>(<argument><expr><name><name>sDataFormat</name><operator>.</operator><name>ParityErrorMask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Reset the old SPDIFRX CR configuration */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <name>SPDIFRX_STATE_RCV</name><operator>)</operator> <operator>==</operator> <name>SPDIFRX_STATE_RCV</name><operator>)</operator> <operator>&amp;&amp;</operator>
     <operator>(</operator><operator>(</operator><operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <name>SPDIFRX_CR_DRFMT</name><operator>)</operator> <operator>!=</operator> <name><name>sDataFormat</name><operator>.</operator><name>DataFormat</name></name><operator>)</operator> <operator>||</operator>
      <operator>(</operator><operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <name>SPDIFRX_CR_RXSTEO</name><operator>)</operator> <operator>!=</operator> <name><name>sDataFormat</name><operator>.</operator><name>StereoMode</name></name><operator>)</operator><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>tmpreg</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SPDIFRX_CR_RXSTEO</name>  <operator>|</operator> <name>SPDIFRX_CR_DRFMT</name>  <operator>|</operator> <name>SPDIFRX_CR_PMSK</name> <operator>|</operator>
              <name>SPDIFRX_CR_VMSK</name> <operator>|</operator> <name>SPDIFRX_CR_CUMSK</name> <operator>|</operator> <name>SPDIFRX_CR_PTMSK</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Configure the new data format */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>|=</operator> <operator>(</operator><name><name>sDataFormat</name><operator>.</operator><name>StereoMode</name></name> <operator>|</operator>
             <name><name>sDataFormat</name><operator>.</operator><name>DataFormat</name></name> <operator>|</operator>
             <name><name>sDataFormat</name><operator>.</operator><name>PreambleTypeMask</name></name> <operator>|</operator>
             <name><name>sDataFormat</name><operator>.</operator><name>ChannelStatusMask</name></name> <operator>|</operator>
             <name><name>sDataFormat</name><operator>.</operator><name>ValidityBitMask</name></name> <operator>|</operator>
             <name><name>sDataFormat</name><operator>.</operator><name>ParityErrorMask</name></name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>=</operator> <name>tmpreg</name></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup SPDIFRX_Exported_Functions_Group2 IO operation functions
  *  @brief Data transfers functions
  *
@verbatim
===============================================================================
                     ##### IO operation functions #####
===============================================================================
    [..]
    This subsection provides a set of functions allowing to manage the SPDIFRX data
    transfers.

    (#) There is two mode of transfer:
        (++) Blocking mode : The communication is performed in the polling mode.
             The status of all data processing is returned by the same function
             after finishing transfer.
        (++) No-Blocking mode : The communication is performed using Interrupts
             or DMA. These functions return the status of the transfer start-up.
             The end of the data processing will be indicated through the
             dedicated SPDIFRX IRQ when using Interrupt mode or the DMA IRQ when
             using DMA mode.

    (#) Blocking mode functions are :
        (++) HAL_SPDIFRX_ReceiveDataFlow()
        (++) HAL_SPDIFRX_ReceiveControlFlow()
                (+@) Do not use blocking mode to receive both control and data flow at the same time.

    (#) No-Blocking mode functions with Interrupt are :
        (++) HAL_SPDIFRX_ReceiveControlFlow_IT()
        (++) HAL_SPDIFRX_ReceiveDataFlow_IT()

    (#) No-Blocking mode functions with DMA are :
        (++) HAL_SPDIFRX_ReceiveControlFlow_DMA()
        (++) HAL_SPDIFRX_ReceiveDataFlow_DMA()

    (#) A set of Transfer Complete Callbacks are provided in No_Blocking mode:
        (++) HAL_SPDIFRX_RxCpltCallback()
        (++) HAL_SPDIFRX_CxCpltCallback()

@endverbatim
* @{
*/</comment>

<comment type="block" format="doxygen">/**
  * @brief  Receives an amount of data (Data Flow) in blocking mode.
  * @param  hspdif pointer to SPDIFRX_HandleTypeDef structure that contains
  *                 the configuration information for SPDIFRX module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SPDIFRX_ReceiveDataFlow</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>sizeCounter</name> <init>= <expr><name>Size</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pTmpBuf</name> <init>= <expr><name>pData</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name> <operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SPDIFRX_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPDIFRX_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Start synchronisation */</comment>
    <expr_stmt><expr><call><name>__HAL_SPDIFRX_SYNC</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait until SYNCD flag is set */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>SPDIFRX_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_FLAG_SYNCD</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Start reception */</comment>
    <expr_stmt><expr><call><name>__HAL_SPDIFRX_RCV</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Receive data flow */</comment>
    <while>while<condition>(<expr><name>sizeCounter</name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Get tick */</comment>
      <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Wait until RXNE flag is set */</comment>
      <if_stmt><if>if<condition>(<expr><call><name>SPDIFRX_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_FLAG_RXNE</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pTmpBuf</name><operator>)</operator> <operator>=</operator> <name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pTmpBuf</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>sizeCounter</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* SPDIFRX ready */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPDIFRX_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Receives an amount of data (Control Flow) in blocking mode.
  * @param  hspdif pointer to a SPDIFRX_HandleTypeDef structure that contains
  *                 the configuration information for SPDIFRX module.
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SPDIFRX_ReceiveControlFlow</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>sizeCounter</name> <init>= <expr><name>Size</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pTmpBuf</name> <init>= <expr><name>pData</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name> <operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SPDIFRX_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPDIFRX_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Start synchronization */</comment>
    <expr_stmt><expr><call><name>__HAL_SPDIFRX_SYNC</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wait until SYNCD flag is set */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>SPDIFRX_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_FLAG_SYNCD</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Start reception */</comment>
    <expr_stmt><expr><call><name>__HAL_SPDIFRX_RCV</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Receive control flow */</comment>
    <while>while<condition>(<expr><name>sizeCounter</name> <operator>&gt;</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Get tick */</comment>
      <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Wait until CSRNE flag is set */</comment>
      <if_stmt><if>if<condition>(<expr><call><name>SPDIFRX_WaitOnFlagUntilTimeout</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_FLAG_CSRNE</name></expr></argument>, <argument><expr><name>RESET</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>, <argument><expr><name>tickstart</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pTmpBuf</name><operator>)</operator> <operator>=</operator> <name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CSR</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pTmpBuf</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>sizeCounter</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* SPDIFRX ready */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPDIFRX_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Receive an amount of data (Data Flow) in non-blocking mode with Interrupt
  * @param hspdif SPDIFRX handle
  * @param pData a 32-bit pointer to the Receive data buffer.
  * @param Size number of data sample to be received .
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SPDIFRX_ReceiveDataFlow_IT</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>register</specifier> <name>uint32_t</name></type> <name>count</name> <init>= <expr><name>SPDIFRX_TIMEOUT_VALUE</name> <operator>*</operator> <operator>(</operator><name>SystemCoreClock</name> <operator>/</operator> <literal type="number">24U</literal> <operator>/</operator> <literal type="number">1000U</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>HAL_SPDIFRX_StateTypeDef</name></type> <name>tempState</name> <init>= <expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>tempState</name> <operator>==</operator> <name>HAL_SPDIFRX_STATE_READY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tempState</name> <operator>==</operator> <name>HAL_SPDIFRX_STATE_BUSY_CX</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SPDIFRX_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Check if a receive process is ongoing or not */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPDIFRX_STATE_BUSY_RX</name></expr>;</expr_stmt>

    <comment type="block">/* Enable the SPDIFRX  PE Error Interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_SPDIFRX_ENABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_PERRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the SPDIFRX  OVR Error Interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_SPDIFRX_ENABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_OVRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the SPDIFRX RXNE interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_SPDIFRX_ENABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_RXNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>SPDIFRX</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>SPDIFRX_CR_SPDIFEN</name><operator>)</operator> <operator>!=</operator> <name>SPDIFRX_STATE_RCV</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Start synchronization */</comment>
      <expr_stmt><expr><call><name>__HAL_SPDIFRX_SYNC</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Wait until SYNCD flag is set */</comment>
      <do>do
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */</comment>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_RXNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_CSRNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_PERRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_OVRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_SBLKIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_SYNCDIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_IFEIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_SPDIFRX_STATE_READY</name></expr>;</expr_stmt>

          <comment type="block">/* Process Unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block> while <condition>(<expr><call><name>__HAL_SPDIFRX_GET_FLAG</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_FLAG_SYNCD</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>;</do>

      <comment type="block">/* Start reception */</comment>
      <expr_stmt><expr><call><name>__HAL_SPDIFRX_RCV</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Receive an amount of data (Control Flow) with Interrupt
  * @param hspdif SPDIFRX handle
  * @param pData a 32-bit pointer to the Receive data buffer.
  * @param Size number of data sample (Control Flow) to be received
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SPDIFRX_ReceiveControlFlow_IT</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>register</specifier> <name>uint32_t</name></type> <name>count</name> <init>= <expr><name>SPDIFRX_TIMEOUT_VALUE</name> <operator>*</operator> <operator>(</operator><name>SystemCoreClock</name> <operator>/</operator> <literal type="number">24U</literal> <operator>/</operator> <literal type="number">1000U</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>HAL_SPDIFRX_StateTypeDef</name></type> <name>tempState</name> <init>= <expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>tempState</name> <operator>==</operator> <name>HAL_SPDIFRX_STATE_READY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tempState</name> <operator>==</operator> <name>HAL_SPDIFRX_STATE_BUSY_RX</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name> <operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>pCsBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>CsXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>CsXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SPDIFRX_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Check if a receive process is ongoing or not */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPDIFRX_STATE_BUSY_CX</name></expr>;</expr_stmt>

    <comment type="block">/* Enable the SPDIFRX PE Error Interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_SPDIFRX_ENABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_PERRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the SPDIFRX OVR Error Interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_SPDIFRX_ENABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_OVRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enable the SPDIFRX CSRNE interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_SPDIFRX_ENABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_CSRNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>SPDIFRX</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>SPDIFRX_CR_SPDIFEN</name><operator>)</operator> <operator>!=</operator> <name>SPDIFRX_STATE_RCV</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Start synchronization */</comment>
      <expr_stmt><expr><call><name>__HAL_SPDIFRX_SYNC</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Wait until SYNCD flag is set */</comment>
      <do>do
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */</comment>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_RXNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_CSRNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_PERRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_OVRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_SBLKIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_SYNCDIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_IFEIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_SPDIFRX_STATE_READY</name></expr>;</expr_stmt>

          <comment type="block">/* Process Unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block> while <condition>(<expr><call><name>__HAL_SPDIFRX_GET_FLAG</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_FLAG_SYNCD</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>;</do>

      <comment type="block">/* Start reception */</comment>
      <expr_stmt><expr><call><name>__HAL_SPDIFRX_RCV</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Receive an amount of data (Data Flow) mode with DMA
  * @param hspdif SPDIFRX handle
  * @param pData a 32-bit pointer to the Receive data buffer.
  * @param Size number of data sample to be received
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SPDIFRX_ReceiveDataFlow_DMA</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>register</specifier> <name>uint32_t</name></type> <name>count</name> <init>= <expr><name>SPDIFRX_TIMEOUT_VALUE</name> <operator>*</operator> <operator>(</operator><name>SystemCoreClock</name> <operator>/</operator> <literal type="number">24U</literal> <operator>/</operator> <literal type="number">1000U</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>HAL_SPDIFRX_StateTypeDef</name></type> <name>tempState</name> <init>= <expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>tempState</name> <operator>==</operator> <name>HAL_SPDIFRX_STATE_READY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tempState</name> <operator>==</operator> <name>HAL_SPDIFRX_STATE_BUSY_CX</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>RxXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SPDIFRX_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPDIFRX_STATE_BUSY_RX</name></expr>;</expr_stmt>

    <comment type="block">/* Set the SPDIFRX Rx DMA Half transfer complete callback */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>hdmaDrRx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>SPDIFRX_DMARxHalfCplt</name></expr>;</expr_stmt>

    <comment type="block">/* Set the SPDIFRX Rx DMA transfer complete callback */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>hdmaDrRx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>SPDIFRX_DMARxCplt</name></expr>;</expr_stmt>

    <comment type="block">/* Set the DMA error callback */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>hdmaDrRx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>SPDIFRX_DMAError</name></expr>;</expr_stmt>

    <comment type="block">/* Enable the DMA request */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hspdif</name><operator>-&gt;</operator><name>hdmaDrRx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hspdif</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set SPDIFRX error */</comment>
      <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SPDIFRX_ERROR_DMA</name></expr>;</expr_stmt>

      <comment type="block">/* Set SPDIFRX state */</comment>
      <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPDIFRX_STATE_ERROR</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Enable RXDMAEN bit in SPDIFRX CR register for data flow reception*/</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <name>SPDIFRX_CR_RXDMAEN</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>SPDIFRX</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>SPDIFRX_CR_SPDIFEN</name><operator>)</operator> <operator>!=</operator> <name>SPDIFRX_STATE_RCV</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Start synchronization */</comment>
      <expr_stmt><expr><call><name>__HAL_SPDIFRX_SYNC</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Wait until SYNCD flag is set */</comment>
      <do>do
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */</comment>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_RXNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_CSRNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_PERRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_OVRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_SBLKIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_SYNCDIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_IFEIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_SPDIFRX_STATE_READY</name></expr>;</expr_stmt>

          <comment type="block">/* Process Unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block> while <condition>(<expr><call><name>__HAL_SPDIFRX_GET_FLAG</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_FLAG_SYNCD</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>;</do>

      <comment type="block">/* Start reception */</comment>
      <expr_stmt><expr><call><name>__HAL_SPDIFRX_RCV</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Receive an amount of data (Control Flow) with DMA
  * @param hspdif SPDIFRX handle
  * @param pData a 32-bit pointer to the Receive data buffer.
  * @param Size number of data (Control Flow) sample to be received
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SPDIFRX_ReceiveControlFlow_DMA</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>register</specifier> <name>uint32_t</name></type> <name>count</name> <init>= <expr><name>SPDIFRX_TIMEOUT_VALUE</name> <operator>*</operator> <operator>(</operator><name>SystemCoreClock</name> <operator>/</operator> <literal type="number">24U</literal> <operator>/</operator> <literal type="number">1000U</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>HAL_SPDIFRX_StateTypeDef</name></type> <name>tempState</name> <init>= <expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>pData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>tempState</name> <operator>==</operator> <name>HAL_SPDIFRX_STATE_READY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tempState</name> <operator>==</operator> <name>HAL_SPDIFRX_STATE_BUSY_RX</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>pCsBuffPtr</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>CsXferSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>CsXferCount</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>

    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SPDIFRX_ERROR_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPDIFRX_STATE_BUSY_CX</name></expr>;</expr_stmt>

    <comment type="block">/* Set the SPDIFRX Rx DMA Half transfer complete callback */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>hdmaCsRx</name><operator>-&gt;</operator><name>XferHalfCpltCallback</name></name> <operator>=</operator> <name>SPDIFRX_DMACxHalfCplt</name></expr>;</expr_stmt>

    <comment type="block">/* Set the SPDIFRX Rx DMA transfer complete callback */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>hdmaCsRx</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>SPDIFRX_DMACxCplt</name></expr>;</expr_stmt>

    <comment type="block">/* Set the DMA error callback */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>hdmaCsRx</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>SPDIFRX_DMAError</name></expr>;</expr_stmt>

    <comment type="block">/* Enable the DMA request */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hspdif</name><operator>-&gt;</operator><name>hdmaCsRx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CSR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>hspdif</name><operator>-&gt;</operator><name>pCsBuffPtr</name></name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Set SPDIFRX error */</comment>
      <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_SPDIFRX_ERROR_DMA</name></expr>;</expr_stmt>

      <comment type="block">/* Set SPDIFRX state */</comment>
      <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPDIFRX_STATE_ERROR</name></expr>;</expr_stmt>

      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Enable CBDMAEN bit in SPDIFRX CR register for control flow reception*/</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <name>SPDIFRX_CR_CBDMAEN</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>SPDIFRX</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>SPDIFRX_CR_SPDIFEN</name><operator>)</operator> <operator>!=</operator> <name>SPDIFRX_STATE_RCV</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Start synchronization */</comment>
      <expr_stmt><expr><call><name>__HAL_SPDIFRX_SYNC</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Wait until SYNCD flag is set */</comment>
      <do>do
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */</comment>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_RXNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_CSRNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_PERRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_OVRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_SBLKIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_SYNCDIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_IFEIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_SPDIFRX_STATE_READY</name></expr>;</expr_stmt>

          <comment type="block">/* Process Unlocked */</comment>
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block> while <condition>(<expr><call><name>__HAL_SPDIFRX_GET_FLAG</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_FLAG_SYNCD</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESET</name></expr>)</condition>;</do>

      <comment type="block">/* Start reception */</comment>
      <expr_stmt><expr><call><name>__HAL_SPDIFRX_RCV</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief stop the audio stream receive from the Media.
  * @param hspdif SPDIFRX handle
  * @retval None
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SPDIFRX_DMAStop</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable the SPDIFRX DMA requests */</comment>
  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>~</operator><name>SPDIFRX_CR_RXDMAEN</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>~</operator><name>SPDIFRX_CR_CBDMAEN</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Disable the SPDIFRX DMA channel */</comment>
  <expr_stmt><expr><call><name>__HAL_DMA_DISABLE</name><argument_list>(<argument><expr><name><name>hspdif</name><operator>-&gt;</operator><name>hdmaDrRx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_DMA_DISABLE</name><argument_list>(<argument><expr><name><name>hspdif</name><operator>-&gt;</operator><name>hdmaCsRx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable SPDIFRX peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_SPDIFRX_IDLE</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPDIFRX_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  This function handles SPDIFRX interrupt request.
  * @param  hspdif SPDIFRX handle
  * @retval HAL status
  */</comment>
<function><type><name>void</name></type> <name>HAL_SPDIFRX_IRQHandler</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>itFlag</name>   <init>= <expr><name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>itSource</name> <init>= <expr><name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IMR</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* SPDIFRX in mode Data Flow Reception */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>itFlag</name> <operator>&amp;</operator> <name>SPDIFRX_FLAG_RXNE</name><operator>)</operator> <operator>==</operator> <name>SPDIFRX_FLAG_RXNE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itSource</name> <operator>&amp;</operator>  <name>SPDIFRX_IT_RXNE</name><operator>)</operator> <operator>==</operator> <name>SPDIFRX_IT_RXNE</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_SPDIFRX_CLEAR_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_RXNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SPDIFRX_ReceiveDataFlow_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* SPDIFRX in mode Control Flow Reception */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>itFlag</name> <operator>&amp;</operator> <name>SPDIFRX_FLAG_CSRNE</name><operator>)</operator> <operator>==</operator> <name>SPDIFRX_FLAG_CSRNE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itSource</name> <operator>&amp;</operator>  <name>SPDIFRX_IT_CSRNE</name><operator>)</operator> <operator>==</operator> <name>SPDIFRX_IT_CSRNE</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_SPDIFRX_CLEAR_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_CSRNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SPDIFRX_ReceiveControlFlow_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* SPDIFRX Overrun error interrupt occurred */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>itFlag</name> <operator>&amp;</operator> <name>SPDIFRX_FLAG_OVR</name><operator>)</operator> <operator>==</operator> <name>SPDIFRX_FLAG_OVR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itSource</name> <operator>&amp;</operator>  <name>SPDIFRX_IT_OVRIE</name><operator>)</operator> <operator>==</operator> <name>SPDIFRX_IT_OVRIE</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_SPDIFRX_CLEAR_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_OVRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Change the SPDIFRX error code */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SPDIFRX_ERROR_OVR</name></expr>;</expr_stmt>

    <comment type="block">/* the transfer is not stopped */</comment>
    <expr_stmt><expr><call><name>HAL_SPDIFRX_ErrorCallback</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* SPDIFRX Parity error interrupt occurred */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>itFlag</name> <operator>&amp;</operator> <name>SPDIFRX_FLAG_PERR</name><operator>)</operator> <operator>==</operator> <name>SPDIFRX_FLAG_PERR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>itSource</name> <operator>&amp;</operator>  <name>SPDIFRX_IT_PERRIE</name><operator>)</operator> <operator>==</operator> <name>SPDIFRX_IT_PERRIE</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>__HAL_SPDIFRX_CLEAR_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_PERRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Change the SPDIFRX error code */</comment>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SPDIFRX_ERROR_PE</name></expr>;</expr_stmt>

    <comment type="block">/* the transfer is not stopped */</comment>
    <expr_stmt><expr><call><name>HAL_SPDIFRX_ErrorCallback</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Rx Transfer (Data flow) half completed callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SPDIFRX_RxHalfCpltCallback</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
  */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Rx Transfer (Data flow) completed callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SPDIFRX_RxCpltCallback</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
  */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Rx (Control flow) Transfer half completed callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SPDIFRX_CxHalfCpltCallback</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
  */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Rx Transfer (Control flow) completed callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SPDIFRX_CxCpltCallback</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
  */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief SPDIFRX error callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SPDIFRX_ErrorCallback</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_ErrorCallback could be implemented in the user file
  */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup SPDIFRX_Exported_Functions_Group3 Peripheral State and Errors functions
  *  @brief   Peripheral State functions
  *
@verbatim
===============================================================================
##### Peripheral State and Errors functions #####
===============================================================================
[..]
This subsection permit to get in run-time the status of the peripheral
and the data flow.

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Return the SPDIFRX state
  * @param  hspdif SPDIFRX handle
  * @retval HAL state
  */</comment>
<function><type><name>HAL_SPDIFRX_StateTypeDef</name></type> <name>HAL_SPDIFRX_GetState</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <specifier>const</specifier> <modifier>*</modifier> <specifier>const</specifier></type> <name>hspdif</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the SPDIFRX error code
  * @param  hspdif SPDIFRX handle
  * @retval SPDIFRX Error Code
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_SPDIFRX_GetError</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <specifier>const</specifier> <modifier>*</modifier> <specifier>const</specifier></type> <name>hspdif</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief DMA SPDIFRX receive process (Data flow) complete callback
  * @param hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SPDIFRX_DMARxCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SPDIFRX_HandleTypeDef</name><modifier>*</modifier></type> <name>hspdif</name> <init>= <expr><operator>(</operator> <name>SPDIFRX_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator> <operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Disable Rx DMA Request */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hdma</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Mode</name></name> <operator>!=</operator> <name>DMA_CIRCULAR</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>~</operator><name>SPDIFRX_CR_RXDMAEN</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPDIFRX_STATE_READY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SPDIFRX_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hspdif</name><operator>-&gt;</operator><name>RxCpltCallback</name></name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_SPDIFRX_RxCpltCallback</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DMA SPDIFRX receive process (Data flow) half complete callback
  * @param hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SPDIFRX_DMARxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SPDIFRX_HandleTypeDef</name><modifier>*</modifier></type> <name>hspdif</name> <init>= <expr><operator>(</operator><name>SPDIFRX_HandleTypeDef</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SPDIFRX_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hspdif</name><operator>-&gt;</operator><name>RxHalfCpltCallback</name></name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_SPDIFRX_RxHalfCpltCallback</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief DMA SPDIFRX receive process (Control flow) complete callback
  * @param hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SPDIFRX_DMACxCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SPDIFRX_HandleTypeDef</name><modifier>*</modifier></type> <name>hspdif</name> <init>= <expr><operator>(</operator> <name>SPDIFRX_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator> <operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Disable Cb DMA Request */</comment>
  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>~</operator><name>SPDIFRX_CR_CBDMAEN</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>CsXferCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPDIFRX_STATE_READY</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SPDIFRX_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hspdif</name><operator>-&gt;</operator><name>CxCpltCallback</name></name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_SPDIFRX_CxCpltCallback</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DMA SPDIFRX receive process (Control flow) half complete callback
  * @param hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SPDIFRX_DMACxHalfCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SPDIFRX_HandleTypeDef</name><modifier>*</modifier></type> <name>hspdif</name> <init>= <expr><operator>(</operator><name>SPDIFRX_HandleTypeDef</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SPDIFRX_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hspdif</name><operator>-&gt;</operator><name>CxHalfCpltCallback</name></name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_SPDIFRX_CxHalfCpltCallback</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief DMA SPDIFRX communication error callback
  * @param hdma DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SPDIFRX_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SPDIFRX_HandleTypeDef</name><modifier>*</modifier></type> <name>hspdif</name> <init>= <expr><operator>(</operator> <name>SPDIFRX_HandleTypeDef</name><operator>*</operator> <operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator> <operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Disable Rx and Cb DMA Request */</comment>
  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>~</operator><operator>(</operator><name>SPDIFRX_CR_RXDMAEN</name> <operator>|</operator> <name>SPDIFRX_CR_CBDMAEN</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_SPDIFRX_STATE_READY</name></expr>;</expr_stmt>

  <comment type="block">/* Set the error code and execute error callback*/</comment>
  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_SPDIFRX_ERROR_DMA</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SPDIFRX_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/* The transfer is not stopped */</comment>
  <expr_stmt><expr><call><name><name>hspdif</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* The transfer is not stopped */</comment>
  <expr_stmt><expr><call><name>HAL_SPDIFRX_ErrorCallback</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Receive an amount of data (Data Flow) with Interrupt
  * @param hspdif SPDIFRX handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SPDIFRX_ReceiveDataFlow_IT</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Receive data */</comment>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>hspdif</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name><operator>)</operator> <operator>=</operator> <name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DR</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>pRxBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>RxXferCount</name></name><operator>--</operator></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hspdif</name><operator>-&gt;</operator><name>RxXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable RXNE/PE and OVR interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_OVRIE</name> <operator>|</operator> <name>SPDIFRX_IT_PERRIE</name> <operator>|</operator> <name>SPDIFRX_IT_RXNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPDIFRX_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SPDIFRX_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hspdif</name><operator>-&gt;</operator><name>RxCpltCallback</name></name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_SPDIFRX_RxCpltCallback</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Receive an amount of data (Control Flow) with Interrupt
  * @param hspdif SPDIFRX handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SPDIFRX_ReceiveControlFlow_IT</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Receive data */</comment>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>hspdif</name><operator>-&gt;</operator><name>pCsBuffPtr</name></name><operator>)</operator> <operator>=</operator> <name><name>hspdif</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CSR</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>pCsBuffPtr</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>CsXferCount</name></name><operator>--</operator></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>hspdif</name><operator>-&gt;</operator><name>CsXferCount</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Disable CSRNE interrupt */</comment>
    <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_CSRNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SPDIFRX_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SPDIFRX_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name><name>hspdif</name><operator>-&gt;</operator><name>CxCpltCallback</name></name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>HAL_SPDIFRX_CxCpltCallback</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief This function handles SPDIFRX Communication Timeout.
  * @param hspdif SPDIFRX handle
  * @param Flag Flag checked
  * @param Status Value of the flag expected
  * @param Timeout Duration of the timeout
  * @param tickstart Tick start value
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>SPDIFRX_WaitOnFlagUntilTimeout</name><parameter_list>(<parameter><decl><type><name>SPDIFRX_HandleTypeDef</name> <modifier>*</modifier></type><name>hspdif</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Flag</name></decl></parameter>, <parameter><decl><type><name>FlagStatus</name></type> <name>Status</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Wait until flag is set */</comment>
  <while>while<condition>(<expr><call><name>__HAL_SPDIFRX_GET_FLAG</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>Flag</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Status</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */</comment>
        <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_RXNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_CSRNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_PERRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_OVRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_SBLKIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_SYNCDIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>__HAL_SPDIFRX_DISABLE_IT</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>, <argument><expr><name>SPDIFRX_IT_IFEIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>hspdif</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_SPDIFRX_STATE_READY</name></expr>;</expr_stmt>

        <comment type="block">/* Process Unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hspdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>HAL_TIMEOUT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F446xx */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SPDIFRX */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_SPDIFRX_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
