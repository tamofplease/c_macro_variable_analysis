<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_fmpi2c_ex.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_fmpi2c_ex.c
  * @author  MCD Application Team
  * @brief   FMPI2C Extended HAL module driver.
  *          This file provides firmware functions to manage the following
  *          functionalities of FMPI2C Extended peripheral:
  *           + Extended features functions
  *
  @verbatim
  ==============================================================================
               ##### FMPI2C peripheral Extended features  #####
  ==============================================================================

  [..] Comparing to other previous devices, the FMPI2C interface for STM32F4xx
       devices contains the following additional features

       (+) Possibility to disable or enable Analog Noise Filter
       (+) Use of a configured Digital Noise Filter
       (+) Disable or enable Fast Mode Plus

                     ##### How to use this driver #####
  ==============================================================================
  [..] This driver provides functions to:
    (#) Configure FMPI2C Analog noise filter using the function HAL_FMPI2CEx_ConfigAnalogFilter()
    (#) Configure FMPI2C Digital noise filter using the function HAL_FMPI2CEx_ConfigDigitalFilter()
    (#) Configure the enable or disable of fast mode plus driving capability using the functions :
          (++) HAL_FMPI2CEx_EnableFastModePlus()
          (++) HAL_FMPI2CEx_DisableFastModePlus()
  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup FMPI2CEx FMPI2CEx
  * @brief FMPI2C Extended HAL module driver
  * @{
  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_FMPI2C_MODULE_ENABLED</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FMPI2C_CR1_PE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup FMPI2CEx_Exported_Functions FMPI2C Extended Exported Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup FMPI2CEx_Exported_Functions_Group1 Extended features functions
  * @brief    Extended features functions
 *
@verbatim
 ===============================================================================
                      ##### Extended features functions #####
 ===============================================================================
    [..] This section provides functions allowing to:
      (+) Configure Noise Filters
      (+) Configure Fast Mode Plus

@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Configure FMPI2C Analog noise filter.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2CEx_ConfigAnalogFilter</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>AnalogFilter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_ANALOG_FILTER</name><argument_list>(<argument><expr><name>AnalogFilter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Disable the selected FMPI2C peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_DISABLE</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Reset FMPI2Cx ANOFF bit */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>FMPI2C_CR1_ANFOFF</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Set analog filter bit*/</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>|=</operator> <name>AnalogFilter</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>__HAL_FMPI2C_ENABLE</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Configure FMPI2C Digital noise filter.
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_FMPI2CEx_ConfigDigitalFilter</name><parameter_list>(<parameter><decl><type><name>FMPI2C_HandleTypeDef</name> <modifier>*</modifier></type><name>hfmpi2c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>DigitalFilter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmpreg</name></decl>;</decl_stmt>

  <comment type="block">/* Check the parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_ALL_INSTANCE</name><argument_list>(<argument><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_DIGITAL_FILTER</name><argument_list>(<argument><expr><name>DigitalFilter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Process Locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_BUSY</name></expr>;</expr_stmt>

    <comment type="block">/* Disable the selected FMPI2C peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_FMPI2C_DISABLE</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get the old register value */</comment>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name></expr>;</expr_stmt>

    <comment type="block">/* Reset FMPI2Cx DNF bits [11:8] */</comment>
    <expr_stmt><expr><name>tmpreg</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>FMPI2C_CR1_DNF</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Set FMPI2Cx DNF coefficient */</comment>
    <expr_stmt><expr><name>tmpreg</name> <operator>|=</operator> <name>DigitalFilter</name> <operator>&lt;&lt;</operator> <literal type="number">8U</literal></expr>;</expr_stmt>

    <comment type="block">/* Store the new register value */</comment>
    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR1</name></name> <operator>=</operator> <name>tmpreg</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>__HAL_FMPI2C_ENABLE</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hfmpi2c</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_FMPI2C_STATE_READY</name></expr>;</expr_stmt>

    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hfmpi2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <return>return <expr><name>HAL_BUSY</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Enable the FMPI2C fast mode plus driving capability.
  * @param ConfigFastModePlus Selects the pin.
  *   This parameter can be one of the @ref FMPI2CEx_FastModePlus values
  * @note  For FMPI2C1, fast mode plus driving capability can be enabled on all selected
  *        FMPI2C1 pins using FMPI2C_FASTMODEPLUS_FMPI2C1 parameter or independently
  *        on each one of the following pins PB6, PB7, PB8 and PB9.
  * @note  For remaining FMPI2C1 pins (PA14, PA15...) fast mode plus driving capability
  *        can be enabled only by using FMPI2C_FASTMODEPLUS_FMPI2C1 parameter.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_FMPI2CEx_EnableFastModePlus</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>ConfigFastModePlus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameter */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_FASTMODEPLUS</name><argument_list>(<argument><expr><name>ConfigFastModePlus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable SYSCFG clock */</comment>
  <expr_stmt><expr><call><name>__HAL_RCC_SYSCFG_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable fast mode plus driving capability for selected pin */</comment>
  <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>SYSCFG</name><operator>-&gt;</operator><name>CFGR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ConfigFastModePlus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief Disable the FMPI2C fast mode plus driving capability.
  * @param ConfigFastModePlus Selects the pin.
  *   This parameter can be one of the @ref FMPI2CEx_FastModePlus values
  * @note  For FMPI2C1, fast mode plus driving capability can be disabled on all selected
  *        FMPI2C1 pins using FMPI2C_FASTMODEPLUS_FMPI2C1 parameter or independently
  *        on each one of the following pins PB6, PB7, PB8 and PB9.
  * @note  For remaining FMPI2C1 pins (PA14, PA15...) fast mode plus driving capability
  *        can be disabled only by using FMPI2C_FASTMODEPLUS_FMPI2C1 parameter.
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_FMPI2CEx_DisableFastModePlus</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>ConfigFastModePlus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the parameter */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_FMPI2C_FASTMODEPLUS</name><argument_list>(<argument><expr><name>ConfigFastModePlus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable SYSCFG clock */</comment>
  <expr_stmt><expr><call><name>__HAL_RCC_SYSCFG_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Disable fast mode plus driving capability for selected pin */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>SYSCFG</name><operator>-&gt;</operator><name>CFGR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ConfigFastModePlus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FMPI2C_CR1_PE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_FMPI2C_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
