<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cryp.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_cryp.c
  * @author  MCD Application Team
  * @brief   CRYP HAL module driver.
  *          This file provides firmware functions to manage the following 
  *          functionalities of the Cryptography (CRYP) peripheral:
  *           + Initialization, de-initialization, set config and get config  functions
  *           + DES/TDES, AES processing functions
  *           + DMA callback functions
  *           + CRYP IRQ handler management
  *           + Peripheral State functions
  *
  @verbatim
  ==============================================================================
                     ##### How to use this driver #####
  ==============================================================================
    [..]
      The CRYP HAL driver can be used in CRYP or TinyAES IP as follows:

      (#)Initialize the CRYP low level resources by implementing the HAL_CRYP_MspInit():
         (##) Enable the CRYP interface clock using __HAL_RCC_CRYP_CLK_ENABLE()or __HAL_RCC_AES_CLK_ENABLE for TinyAES IP
         (##) In case of using interrupts (e.g. HAL_CRYP_Encrypt_IT())
             (+++) Configure the CRYP interrupt priority using HAL_NVIC_SetPriority()
             (+++) Enable the CRYP IRQ handler using HAL_NVIC_EnableIRQ()
             (+++) In CRYP IRQ handler, call HAL_CRYP_IRQHandler()
         (##) In case of using DMA to control data transfer (e.g. HAL_CRYP_Encrypt_DMA())
             (+++) Enable the DMAx interface clock using __RCC_DMAx_CLK_ENABLE()
             (+++) Configure and enable two DMA streams one for managing data transfer from
                 memory to peripheral (input stream) and another stream for managing data
                 transfer from peripheral to memory (output stream)
             (+++) Associate the initialized DMA handle to the CRYP DMA handle
                 using  __HAL_LINKDMA()
             (+++) Configure the priority and enable the NVIC for the transfer complete
                 interrupt on the two DMA Streams. The output stream should have higher
                 priority than the input stream HAL_NVIC_SetPriority() and HAL_NVIC_EnableIRQ()

      (#)Initialize the CRYP according to the specified parameters :
         (##) The data type: 1-bit, 8-bit, 16-bit or 32-bit.
         (##) The key size: 128, 192 or 256.
         (##) The AlgoMode DES/ TDES Algorithm ECB/CBC or AES Algorithm ECB/CBC/CTR/GCM or CCM.
         (##) The initialization vector (counter). It is not used in ECB mode.
         (##) The key buffer used for encryption/decryption.
         (##) The Header used only in AES GCM and CCM Algorithm for authentication.
         (##) The HeaderSize The size of header buffer in word.
         (##) The B0 block is the first authentication block used only  in AES CCM mode.

      (#)Three processing (encryption/decryption) functions are available:
         (##) Polling mode: encryption and decryption APIs are blocking functions
              i.e. they process the data and wait till the processing is finished,
              e.g. HAL_CRYP_Encrypt &amp; HAL_CRYP_Decrypt
         (##) Interrupt mode: encryption and decryption APIs are not blocking functions
              i.e. they process the data under interrupt,
              e.g. HAL_CRYP_Encrypt_IT &amp; HAL_CRYP_Decrypt_IT
         (##) DMA mode: encryption and decryption APIs are not blocking functions
              i.e. the data transfer is ensured by DMA,
              e.g. HAL_CRYP_Encrypt_DMA &amp; HAL_CRYP_Decrypt_DMA

      (#)When the processing function is called at first time after HAL_CRYP_Init()
         the CRYP peripheral is configured and processes the buffer in input.
         At second call, no need to Initialize the CRYP, user have to get current configuration via
         HAL_CRYP_GetConfig() API, then only  HAL_CRYP_SetConfig() is requested to set
         new parametres, finally user can  start encryption/decryption.

       (#)Call HAL_CRYP_DeInit() to deinitialize the CRYP peripheral.

    [..]
      The cryptographic processor supports following standards:
      (#) The data encryption standard (DES) and Triple-DES (TDES) supported only by CRYP1 IP:
         (##)64-bit data block processing
         (##) chaining modes supported :
             (+++)  Electronic Code Book(ECB)
             (+++)  Cipher Block Chaining (CBC)
         (##) keys length supported :64-bit, 128-bit and 192-bit.
      (#) The advanced encryption standard (AES) supported  by CRYP1 &amp; TinyAES IP:
         (##)128-bit data block processing
         (##) chaining modes supported :
             (+++)  Electronic Code Book(ECB)
             (+++)  Cipher Block Chaining (CBC)
             (+++)  Counter mode (CTR)
             (+++)  Galois/counter mode (GCM/GMAC)
             (+++)  Counter with Cipher Block Chaining-Message(CCM)
         (##) keys length Supported :
             (+++) for CRYP1 IP: 128-bit, 192-bit and 256-bit.
             (+++) for TinyAES IP:  128-bit and 256-bit

    [..]  This section describes the AES Galois/counter mode (GCM) supported by both CRYP1 IP:
      (#)  Algorithm supported :
         (##) Galois/counter mode (GCM)
         (##) Galois message authentication code (GMAC) :is exactly the same as
              GCM algorithm composed only by an header.
      (#)  Four phases are performed in GCM :
         (##) Init phase: IP prepares the GCM hash subkey (H) and do the IV processing
         (##) Header phase: IP processes the Additional Authenticated Data (AAD), with hash
          computation only.
         (##) Payload phase: IP processes the plaintext (P) with hash computation + keystream
          encryption + data XORing. It works in a similar way for ciphertext (C).
         (##) Final phase: IP generates the authenticated tag (T) using the last block of data.
      (#)  structure of message construction in GCM is defined as below  :
         (##) 16 bytes Initial Counter Block (ICB)composed of IV and counter
         (##) The authenticated header A (also knows as Additional Authentication Data AAD)
          this part of the message is only authenticated, not encrypted.
         (##) The plaintext message P is both authenticated and encrypted as ciphertext.
          GCM standard specifies that ciphertext has same bit length as the plaintext.
         (##) The last block is composed of the length of A (on 64 bits) and the length of ciphertext
          (on 64 bits)

    [..]  This section describe The AES Counter with Cipher Block Chaining-Message
          Authentication Code (CCM) supported by both CRYP1 IP:
      (#)  Specific parameters for CCM  :

         (##) B0 block  : According to NIST Special Publication 800-38C,
            The first block B0 is formatted as follows, where l(m) is encoded in
            most-significant-byte first order(see below table 3)

              (+++)  Q: a bit string representation of the octet length of P (plaintext)
              (+++)  q The octet length of the binary representation of the octet length of the payload
              (+++)  A nonce (N), n The octet length of the where n+q=15.
              (+++)  Flags: most significant octet containing four flags for control information,
              (+++)  t The octet length of the MAC.
         (##) B1 block (header) : associated data length(a) concatenated with Associated Data (A)
              the associated data length expressed in bytes (a) defined as below:
            (+++)  If 0 &lt; a &lt; 216-28, then it is encoded as [a]16, i.e. two octets
            (+++)  If 216-28 &lt; a &lt; 232, then it is encoded as 0xff || 0xfe || [a]32, i.e. six octets
            (+++)  If 232 &lt; a &lt; 264, then it is encoded as 0xff || 0xff || [a]64, i.e. ten octets
         (##) CTRx block  : control blocks
            (+++) Generation of CTR1 from first block B0 information :
              equal to B0 with first 5 bits zeroed and most significant bits storing octet
              length of P also zeroed, then incremented by one ( see below Table 4)
            (+++) Generation of CTR0: same as CTR1 with bit[0] set to zero.

      (#)  Four phases are performed in CCM for CRYP1 IP:
         (##) Init phase: IP prepares the GCM hash subkey (H) and do the IV processing
         (##) Header phase: IP processes the Additional Authenticated Data (AAD), with hash
          computation only.
         (##) Payload phase: IP processes the plaintext (P) with hash computation + keystream
          encryption + data XORing. It works in a similar way for ciphertext (C).
         (##) Final phase: IP generates the authenticated tag (T) using the last block of data.

  *** Callback registration ***
  =============================================

  The compilation define  USE_HAL_CRYP_REGISTER_CALLBACKS when set to 1
  allows the user to configure dynamically the driver callbacks.
  Use Functions @ref HAL_CRYP_RegisterCallback() or HAL_CRYP_RegisterXXXCallback()
  to register an interrupt callback.

  Function @ref HAL_CRYP_RegisterCallback() allows to register following callbacks:
    (+) InCpltCallback     :  Input FIFO transfer completed callback.
    (+) OutCpltCallback    : Output FIFO transfer completed callback.
    (+) ErrorCallback      : callback for error detection.
    (+) MspInitCallback    : CRYP MspInit.
    (+) MspDeInitCallback  : CRYP MspDeInit.
  This function takes as parameters the HAL peripheral handle, the Callback ID
  and a pointer to the user callback function.

  Use function @ref HAL_CRYP_UnRegisterCallback() to reset a callback to the default
  weak function.
  @ref HAL_CRYP_UnRegisterCallback() takes as parameters the HAL peripheral handle,
  and the Callback ID.
  This function allows to reset following callbacks:
    (+) InCpltCallback     :  Input FIFO transfer completed callback.
    (+) OutCpltCallback    : Output FIFO transfer completed callback.
    (+) ErrorCallback      : callback for error detection.
    (+) MspInitCallback    : CRYP MspInit.
    (+) MspDeInitCallback  : CRYP MspDeInit.

  By default, after the @ref HAL_CRYP_Init() and when the state is HAL_CRYP_STATE_RESET
  all callbacks are set to the corresponding weak functions :
  examples @ref HAL_CRYP_InCpltCallback() , @ref HAL_CRYP_OutCpltCallback().
  Exception done for MspInit and MspDeInit functions that are
  reset to the legacy weak function in the @ref HAL_CRYP_Init()/ @ref HAL_CRYP_DeInit() only when
  these callbacks are null (not registered beforehand).
  if not, MspInit or MspDeInit are not null, the @ref HAL_CRYP_Init() / @ref HAL_CRYP_DeInit()
  keep and use the user MspInit/MspDeInit functions (registered beforehand)

  Callbacks can be registered/unregistered in HAL_CRYP_STATE_READY state only.
  Exception done MspInit/MspDeInit callbacks that can be registered/unregistered
  in HAL_CRYP_STATE_READY or HAL_CRYP_STATE_RESET state,
  thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
  In that case first register the MspInit/MspDeInit user callbacks
  using @ref HAL_CRYP_RegisterCallback() before calling @ref HAL_CRYP_DeInit()
  or @ref HAL_CRYP_Init() function.

  When The compilation define USE_HAL_CRYP_REGISTER_CALLBACKS is set to 0 or
  not defined, the callback registration feature is not available and all callbacks
  are set to the corresponding weak functions.

  Table 1. Initial Counter Block (ICB)
          +-------------------------------------------------------+
          |       Initialization vector (IV)      |  Counter      |
          |----------------|----------------|-----------|---------|
         127              95                63            31       0


              Bit Number    Register           Contents
              ----------   ---------------       -----------
              127 ...96    CRYP_IV1R[31:0]     ICB[127:96]
              95  ...64    CRYP_IV1L[31:0]     B0[95:64]
              63 ... 32    CRYP_IV0R[31:0]     ICB[63:32]
              31 ... 0     CRYP_IV0L[31:0]     ICB[31:0], where 32-bit counter= 0x2

  Table 2.  GCM last block definition

          +-------------------------------------------------------------------+
          |  Bit[0]   |  Bit[32]           |  Bit[64]  | Bit[96]              |
          |-----------|--------------------|-----------|----------------------|
          |   0x0     | Header length[31:0]|     0x0   | Payload length[31:0] |
          |-----------|--------------------|-----------|----------------------|

  Table 3. B0 block
                Octet Number   Contents
                ------------   ---------
                0              Flags
                1 ... 15-q     Nonce N
                16-q ... 15    Q

            the Flags field is formatted as follows:

                Bit Number   Contents
                ----------   ----------------------
                7            Reserved (always zero)
                6            Adata
                5 ... 3      (t-2)/2
                2 ... 0      [q-1]3

 Table 4. CTRx block
                Bit Number    Register           Contents
                ----------   ---------------       -----------
                127 ...96    CRYP_IV1R[31:0]     B0[127:96], where Q length bits are set to 0, except for
                                                 bit 0 that is set to 1
                95  ...64    CRYP_IV1L[31:0]     B0[95:64]
                63 ... 32    CRYP_IV0R[31:0]     B0[63:32]
                31 ... 0     CRYP_IV0L[31:0]     B0[31:0], where flag bits set to 0

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2016 STMicroelectronics. 
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the 
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment> 

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call>  <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
  
<comment type="block" format="doxygen">/** @defgroup CRYP CRYP
  * @brief CRYP HAL module driver.
  * @{
  */</comment>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_CRYP_MODULE_ENABLED</name></cpp:ifdef>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup CRYP_Private_Defines
  * @{
  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_TIMEOUT_KEYPREPARATION</name></cpp:macro>      <cpp:value>82U</cpp:value></cpp:define>         <comment type="block">/*The latency of key preparation operation is 82 clock cycles.*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_TIMEOUT_GCMCCMINITPHASE</name></cpp:macro>     <cpp:value>299U</cpp:value></cpp:define>        <comment type="block">/*  The latency of  GCM/CCM init phase to prepare hash subkey is 299 clock cycles.*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_TIMEOUT_GCMCCMHEADERPHASE</name></cpp:macro>   <cpp:value>290U</cpp:value></cpp:define>        <comment type="block">/*  The latency of  GCM/CCM header phase is 290 clock cycles.*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>CRYP_PHASE_READY</name></cpp:macro>                <cpp:value>0x00000001U</cpp:value></cpp:define> <comment type="block" format="doxygen">/*!&lt; CRYP peripheral is ready for initialization. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>CRYP_PHASE_PROCESS</name></cpp:macro>              <cpp:value>0x00000002U</cpp:value></cpp:define> <comment type="block" format="doxygen">/*!&lt; CRYP peripheral is in processing phase */</comment>
    
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_OPERATINGMODE_ENCRYPT</name></cpp:macro>                   <cpp:value>0x00000000U</cpp:value></cpp:define>     <comment type="block" format="doxygen">/*!&lt; Encryption mode(Mode 1)  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_OPERATINGMODE_KEYDERIVATION</name></cpp:macro>             <cpp:value>AES_CR_MODE_0</cpp:value></cpp:define>   <comment type="block" format="doxygen">/*!&lt; Key derivation mode  only used when performing ECB and CBC decryptions (Mode 2) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_OPERATINGMODE_DECRYPT</name></cpp:macro>                   <cpp:value>AES_CR_MODE_1</cpp:value></cpp:define>   <comment type="block" format="doxygen">/*!&lt; Decryption    (Mode 3)    */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT</name></cpp:macro>     <cpp:value>AES_CR_MODE</cpp:value></cpp:define>     <comment type="block" format="doxygen">/*!&lt; Key derivation and decryption only used when performing ECB and CBC decryptions (Mode 4) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_PHASE_INIT</name></cpp:macro>                              <cpp:value>0x00000000U</cpp:value></cpp:define>        <comment type="block" format="doxygen">/*!&lt; GCM/GMAC (or CCM) init phase */</comment> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_PHASE_HEADER</name></cpp:macro>                            <cpp:value>AES_CR_GCMPH_0</cpp:value></cpp:define>     <comment type="block" format="doxygen">/*!&lt; GCM/GMAC or CCM header phase */</comment> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_PHASE_PAYLOAD</name></cpp:macro>                           <cpp:value>AES_CR_GCMPH_1</cpp:value></cpp:define>     <comment type="block" format="doxygen">/*!&lt; GCM(/CCM) payload phase      */</comment> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_PHASE_FINAL</name></cpp:macro>                             <cpp:value>AES_CR_GCMPH</cpp:value></cpp:define>       <comment type="block" format="doxygen">/*!&lt; GCM/GMAC or CCM  final phase */</comment> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="block">/* CRYP */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_PHASE_INIT</name></cpp:macro>                              <cpp:value>0x00000000U</cpp:value></cpp:define>             <comment type="block" format="doxygen">/*!&lt; GCM/GMAC (or CCM) init phase */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_PHASE_HEADER</name></cpp:macro>                            <cpp:value>CRYP_CR_GCM_CCMPH_0</cpp:value></cpp:define>     <comment type="block" format="doxygen">/*!&lt; GCM/GMAC or CCM header phase */</comment> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_PHASE_PAYLOAD</name></cpp:macro>                           <cpp:value>CRYP_CR_GCM_CCMPH_1</cpp:value></cpp:define>     <comment type="block" format="doxygen">/*!&lt; GCM(/CCM) payload phase      */</comment> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_PHASE_FINAL</name></cpp:macro>                             <cpp:value>CRYP_CR_GCM_CCMPH</cpp:value></cpp:define>       <comment type="block" format="doxygen">/*!&lt; GCM/GMAC or CCM  final phase */</comment> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_OPERATINGMODE_ENCRYPT</name></cpp:macro>                   <cpp:value>0x00000000U</cpp:value></cpp:define>             <comment type="block" format="doxygen">/*!&lt; Encryption mode   */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_OPERATINGMODE_DECRYPT</name></cpp:macro>                   <cpp:value>CRYP_CR_ALGODIR</cpp:value></cpp:define>         <comment type="block" format="doxygen">/*!&lt; Decryption        */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End CRYP or  AES */</comment> 

 <comment type="block">/*  CTR1 information to use in CCM algorithm */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_CCM_CTR1_0</name></cpp:macro>                  <cpp:value>0x07FFFFFFU</cpp:value></cpp:define>         
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_CCM_CTR1_1</name></cpp:macro>                  <cpp:value>0xFFFFFF00U</cpp:value></cpp:define>         
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_CCM_CTR1_2</name></cpp:macro>                  <cpp:value>0x00000001U</cpp:value></cpp:define>         


<comment type="block" format="doxygen">/**
  * @}
  */</comment>

  
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup CRYP_Private_Macros
  * @{
  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_SET_PHASE</name><parameter_list>(<parameter><type><name>__HANDLE__</name></type></parameter>, <parameter><type><name>__PHASE__</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>do{(__HANDLE__)-&gt;Instance-&gt;CR &amp;= (uint32_t)(~CRYP_CR_GCM_CCMPH);\
                                                        (__HANDLE__)-&gt;Instance-&gt;CR |= (uint32_t)(__PHASE__);\
                                                       }while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAL_CRYP_FIFO_FLUSH</name><parameter_list>(<parameter><type><name>__HANDLE__</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((__HANDLE__)-&gt;Instance-&gt;CR |=  CRYP_CR_FFLUSH)</cpp:value></cpp:define>  
                                                        
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/*AES*/</comment>                                                         
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYP_SET_PHASE</name><parameter_list>(<parameter><type><name>__HANDLE__</name></type></parameter>, <parameter><type><name>__PHASE__</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>do{(__HANDLE__)-&gt;Instance-&gt;CR &amp;= (uint32_t)(~AES_CR_GCMPH);\
                                                        (__HANDLE__)-&gt;Instance-&gt;CR |= (uint32_t)(__PHASE__);\
                                                       }while(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP*/</comment>


<comment type="block" format="doxygen">/**
  * @}
  */</comment> 
                                                         
<comment type="block">/* Private struct -------------------------------------------------------------*/</comment>
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup CRYP_Private_Functions_prototypes
  * @{
  */</comment>  

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_SetDMAConfig</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>inputaddr</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>outputaddr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_DMAInCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_DMAOutCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_SetKey</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>KeySize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_AES_IT</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP_CR_ALGOMODE_AES_GCM</name></expr></argument>)</argument_list></call><operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_GCMCCM_SetHeaderPhase</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_GCMCCM_SetPayloadPhase_IT</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_GCMCCM_SetHeaderPhase_IT</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_GCMCCM_SetHeaderPhase_DMA</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_Workaround</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AESGCM_Process_DMA</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AESGCM_Process_IT</name> <parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AESGCM_Process</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AESCCM_Process</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AESCCM_Process_IT</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AESCCM_Process_DMA</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AES or GCM CCM defined*/</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_AES_ProcessData</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcrypt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AES_Encrypt</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AES_Decrypt</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AES_Decrypt_IT</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AES_Encrypt_IT</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AES_Decrypt_DMA</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_TDES_IT</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP_CR_ALGOMODE_AES_GCM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_WaitOnIFEMFlag</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* GCM CCM defined*/</comment>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_WaitOnBUSYFlag</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_WaitOnOFNEFlag</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_TDES_Process</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/*AES*/</comment>
<function_decl><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_WaitOnCCFlag</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End CRYP or AES */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment> 

<comment type="block">/* Exported functions ---------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/** @defgroup CRYP_Exported_Functions CRYP Exported Functions
  * @{
  */</comment>

  
<comment type="block" format="doxygen">/** @defgroup CRYP_Exported_Functions_Group1 Initialization and de-initialization functions 
 *  @brief    Initialization and Configuration functions. 
 *
@verbatim    
  ========================================================================================
     ##### Initialization, de-initialization and Set and Get configuration functions #####
  ========================================================================================
    [..]  This section provides functions allowing to:
      (+) Initialize the CRYP  
      (+) DeInitialize the CRYP  
      (+) Initialize the CRYP MSP
      (+) DeInitialize the CRYP MSP 
      (+) configure CRYP (HAL_CRYP_SetConfig) with the specified parameters in the CRYP_ConfigTypeDef
          Parameters which are configured in This section are :
          (+) Key size 
          (+) Data Type : 32,16, 8 or 1bit
          (+) AlgoMode : 
              - for CRYP1 IP : 
                 ECB and CBC in DES/TDES Standard 
                 ECB,CBC,CTR,GCM/GMAC and CCM in AES Standard. 
              - for TinyAES2 IP, only ECB,CBC,CTR,GCM/GMAC and CCM in AES Standard are supported.
      (+) Get CRYP configuration (HAL_CRYP_GetConfig) from the specified parameters in the CRYP_HandleTypeDef


@endverbatim
  * @{
  */</comment>


<comment type="block" format="doxygen">/**
  * @brief  Initializes the CRYP according to the specified
  *         parameters in the CRYP_ConfigTypeDef and creates the associated handle.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CRYP_Init</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
  <comment type="block">/* Check the CRYP handle allocation */</comment>
  <if_stmt><if>if<condition>(<expr><name>hcryp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt> 
  
  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CRYP_KEYSIZE</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CRYP_DATATYPE</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CRYP_ALGORITHM</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>InCpltCallback</name></name>  <operator>=</operator> <name>HAL_CRYP_InCpltCallback</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak InCpltCallback   */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>OutCpltCallback</name></name> <operator>=</operator> <name>HAL_CRYP_OutCpltCallback</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak OutCpltCallback  */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCallback</name></name>   <operator>=</operator> <name>HAL_CRYP_ErrorCallback</name></expr>;</expr_stmt>   <comment type="block">/* Legacy weak ErrorCallback    */</comment>
    
    <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_CRYP_MspInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MspInit  */</comment>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>
    
    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name>HAL_CRYP_MspInit</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
 <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (USE_HAL_CRYP_REGISTER_CALLBACKS) */</comment>
  
  <comment type="block">/* Set the key size(This bit field is dont care in the DES or TDES modes) data type and Algorithm */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
  
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_DATATYPE</name><operator>|</operator><name>CRYP_CR_KEYSIZE</name><operator>|</operator><name>CRYP_CR_ALGOMODE</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>|</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name> <operator>|</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/*AES*/</comment>
  
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_DATATYPE</name><operator>|</operator><name>AES_CR_KEYSIZE</name><operator>|</operator><name>AES_CR_CHMOD</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>|</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name> <operator>|</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* End AES or CRYP*/</comment>
  
  <comment type="block">/* Reset Error Code field */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_CRYP_ERROR_NONE</name></expr>;</expr_stmt> 
  
  <comment type="block">/* Change the CRYP state */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
  
  <comment type="block">/* Set the default CRYP phase */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_READY</name></expr>;</expr_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  De-Initializes the CRYP peripheral. 
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
*/</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CRYP_DeInit</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the CRYP handle allocation */</comment>
  <if_stmt><if>if<condition>(<expr><name>hcryp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Set the default CRYP phase */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_READY</name></expr>;</expr_stmt>
  
  <comment type="block">/* Reset CrypInCount and CrypOutCount */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name> <operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> 
  
  <comment type="block">/* Disable the CRYP peripheral clock */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_CRYP_MspDeInit</name></expr>;</expr_stmt> <comment type="block">/* Legacy weak MspDeInit  */</comment>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  
  <comment type="block">/* DeInit the low level hardware: CLOCK, NVIC.*/</comment>
  <expr_stmt><expr><call><name>HAL_CRYP_MspDeInit</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment>
  
  <comment type="block">/* Change the CRYP state */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_RESET</name></expr>;</expr_stmt>
  
  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>
    
<comment type="block" format="doxygen">/**
  * @brief  Configure the CRYP according to the specified
  *         parameters in the CRYP_ConfigTypeDef 
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure
  * @param  pConf: pointer to a CRYP_ConfigTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CRYP_SetConfig</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>CRYP_ConfigTypeDef</name> <modifier>*</modifier></type><name>pConf</name></decl></parameter> )</parameter_list>
<block>{<block_content> 
  <comment type="block">/* Check the CRYP handle allocation */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>hcryp</name> <operator>==</operator> <name>NULL</name><operator>)</operator><operator>||</operator> <operator>(</operator><name>pConf</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> )</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Check parameters */</comment>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CRYP_KEYSIZE</name><argument_list>(<argument><expr><name><name>pConf</name><operator>-&gt;</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CRYP_DATATYPE</name><argument_list>(<argument><expr><name><name>pConf</name><operator>-&gt;</operator><name>DataType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_CRYP_ALGORITHM</name><argument_list>(<argument><expr><name><name>pConf</name><operator>-&gt;</operator><name>Algorithm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_READY</name></expr>)</condition> 
  <block>{<block_content>  
    <comment type="block">/* Change the CRYP state */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_BUSY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Process locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     
    
    <comment type="block">/* Set  CRYP parameters  */</comment>    
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name>   <operator>=</operator> <name><name>pConf</name><operator>-&gt;</operator><name>DataType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name>       <operator>=</operator> <name><name>pConf</name><operator>-&gt;</operator><name>pKey</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name>  <operator>=</operator> <name><name>pConf</name><operator>-&gt;</operator><name>Algorithm</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name>    <operator>=</operator> <name><name>pConf</name><operator>-&gt;</operator><name>KeySize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name>  <operator>=</operator> <name><name>pConf</name><operator>-&gt;</operator><name>pInitVect</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name>     <operator>=</operator> <name><name>pConf</name><operator>-&gt;</operator><name>Header</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>=</operator> <name><name>pConf</name><operator>-&gt;</operator><name>HeaderSize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name>         <operator>=</operator> <name><name>pConf</name><operator>-&gt;</operator><name>B0</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataWidthUnit</name></name> <operator>=</operator> <name><name>pConf</name><operator>-&gt;</operator><name>DataWidthUnit</name></name></expr>;</expr_stmt>
    
    <comment type="block">/* Set the key size(This bit field is dont care in the DES or TDES modes) data type, AlgoMode and operating mode*/</comment>    
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if> 
    
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_DATATYPE</name><operator>|</operator><name>CRYP_CR_KEYSIZE</name><operator>|</operator><name>CRYP_CR_ALGOMODE</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>|</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name> <operator>|</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/*AES*/</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_DATATYPE</name><operator>|</operator><name>AES_CR_KEYSIZE</name><operator>|</operator><name>AES_CR_CHMOD</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>|</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name> <operator>|</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/*clear error flags*/</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_ERR_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* End AES or CRYP */</comment> 
    
    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Reset Error Code field */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>=</operator> <name>HAL_CRYP_ERROR_NONE</name></expr>;</expr_stmt> 
    
    <comment type="block">/* Change the CRYP state */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
    
    <comment type="block">/* Set the default CRYP phase */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_READY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Return function status */</comment>
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    
    <comment type="block">/* Busy error code field */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_BUSY</name></expr>;</expr_stmt> 
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Get CRYP Configuration parameters in associated handle.
  * @param  pConf: pointer to a CRYP_ConfigTypeDef structure
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CRYP_GetConfig</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>CRYP_ConfigTypeDef</name> <modifier>*</modifier></type><name>pConf</name></decl></parameter> )</parameter_list>
<block>{<block_content> 
  <comment type="block">/* Check the CRYP handle allocation */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>hcryp</name> <operator>==</operator> <name>NULL</name><operator>)</operator><operator>||</operator> <operator>(</operator><name>pConf</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> )</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_READY</name></expr>)</condition> 
  <block>{<block_content>  
    <comment type="block">/* Change the CRYP state */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_BUSY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Process locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    
    <comment type="block">/* Get  CRYP parameters  */</comment>      
    <expr_stmt><expr><name><name>pConf</name><operator>-&gt;</operator><name>DataType</name></name>        <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pConf</name><operator>-&gt;</operator><name>pKey</name></name>            <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pConf</name><operator>-&gt;</operator><name>Algorithm</name></name>       <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pConf</name><operator>-&gt;</operator><name>KeySize</name></name>         <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pConf</name><operator>-&gt;</operator><name>pInitVect</name></name>       <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pConf</name><operator>-&gt;</operator><name>Header</name></name>          <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pConf</name><operator>-&gt;</operator><name>HeaderSize</name></name>      <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pConf</name><operator>-&gt;</operator><name>B0</name></name>              <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pConf</name><operator>-&gt;</operator><name>DataWidthUnit</name></name>    <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataWidthUnit</name></name></expr>;</expr_stmt>
    
    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Change the CRYP state */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>   
    
    <comment type="block">/* Return function status */</comment>
    <return>return <expr><name>HAL_OK</name></expr>;</return>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <comment type="block">/* Busy error code field */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_BUSY</name></expr>;</expr_stmt> 
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @brief  Initializes the CRYP MSP.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_CRYP_MspInit</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CRYP_MspInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DeInitializes CRYP MSP.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_CRYP_MspDeInit</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CRYP_MspDeInit could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User CRYP Callback
  *         To be used instead of the weak predefined callback
  * @param hcryp cryp handle
  * @param CallbackID ID of the callback to be registered
  *        This parameter can be one of the following values:
  *          @arg @ref HAL_CRYP_INPUT_COMPLETE_CB_ID Input FIFO transfer completed callback ID
  *          @arg @ref HAL_CRYP_OUTPUT_COMPLETE_CB_ID Output FIFO transfer completed callback ID
  *          @arg @ref HAL_CRYP_ERROR_CB_ID Error callback ID 
  *          @arg @ref HAL_CRYP_MSPINIT_CB_ID MspInit callback ID
  *          @arg @ref HAL_CRYP_MSPDEINIT_CB_ID MspDeInit callback ID
  * @param pCallback pointer to the Callback function
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CRYP_RegisterCallback</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>HAL_CRYP_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>, <parameter><decl><type><name>pCRYP_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_CRYP_INPUT_COMPLETE_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>InCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
      
    <case>case <expr><name>HAL_CRYP_OUTPUT_COMPLETE_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>OutCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
      
    <case>case <expr><name>HAL_CRYP_ERROR_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
      
    <case>case <expr><name>HAL_CRYP_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
      
    <case>case <expr><name>HAL_CRYP_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
      
    <default>default :</default>
      <comment type="block">/* Update the error code */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
      <comment type="block">/* Return error status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_CRYP_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
      
    <case>case <expr><name>HAL_CRYP_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
      
    <default>default :</default>
      <comment type="block">/* Update the error code */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
      <comment type="block">/* Return error status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister an CRYP Callback
  *         CRYP callback is redirected to the weak predefined callback
  * @param hcryp cryp handle
  * @param CallbackID ID of the callback to be unregistered
  *        This parameter can be one of the following values:
  *          @arg @ref HAL_CRYP_INPUT_COMPLETE_CB_ID Input FIFO transfer completed callback ID
  *          @arg @ref HAL_CRYP_OUTPUT_COMPLETE_CB_ID Output FIFO transfer completed callback ID
  *          @arg @ref HAL_CRYP_ERROR_CB_ID Error callback ID 
  *          @arg @ref HAL_CRYP_MSPINIT_CB_ID MspInit callback ID
  *          @arg @ref HAL_CRYP_MSPDEINIT_CB_ID MspDeInit callback ID
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CRYP_UnRegisterCallback</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>HAL_CRYP_CallbackIDTypeDef</name></type> <name>CallbackID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_CRYP_INPUT_COMPLETE_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>InCpltCallback</name></name> <operator>=</operator> <name>HAL_CRYP_InCpltCallback</name></expr>;</expr_stmt>  <comment type="block">/* Legacy weak  InCpltCallback  */</comment>
      <break>break;</break>
      
    <case>case <expr><name>HAL_CRYP_OUTPUT_COMPLETE_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>OutCpltCallback</name></name> <operator>=</operator> <name>HAL_CRYP_OutCpltCallback</name></expr>;</expr_stmt>         <comment type="block">/* Legacy weak OutCpltCallback       */</comment>
      <break>break;</break>
      
    <case>case <expr><name>HAL_CRYP_ERROR_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCallback</name></name> <operator>=</operator> <name>HAL_CRYP_ErrorCallback</name></expr>;</expr_stmt>           <comment type="block">/* Legacy weak ErrorCallback        */</comment>
      <break>break;</break>
      
    <case>case <expr><name>HAL_CRYP_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_CRYP_MspInit</name></expr>;</expr_stmt>
      <break>break;</break>
      
    <case>case <expr><name>HAL_CRYP_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_CRYP_MspDeInit</name></expr>;</expr_stmt>
      <break>break;</break>
      
    <default>default :</default>
      <comment type="block">/* Update the error code */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
      <comment type="block">/* Return error status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackID</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_CRYP_MSPINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_CRYP_MspInit</name></expr>;</expr_stmt>
      <break>break;</break>
      
    <case>case <expr><name>HAL_CRYP_MSPDEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_CRYP_MspDeInit</name></expr>;</expr_stmt>
      <break>break;</break>
      
    <default>default :</default>
      <comment type="block">/* Update the error code */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
      <comment type="block">/* Return error status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Update the error code */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_INVALID_CALLBACK</name></expr>;</expr_stmt>
    <comment type="block">/* Return error status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_UART_REGISTER_CALLBACKS */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup CRYP_Exported_Functions_Group2  Encrypt Decrypt functions 
 *  @brief   processing functions. 
 *
@verbatim   
  ==============================================================================
                      ##### Encrypt Decrypt  functions #####
  ==============================================================================  
    [..]  This section provides API allowing to Encrypt/Decrypt Data following 
          Standard DES/TDES or AES, and Algorithm configured by the user:
      (+) Standard DES/TDES only supported by CRYP1 IP, below list of Algorithm supported : 
           - Electronic Code Book(ECB)
           - Cipher Block Chaining (CBC)
      (+) Standard AES  supported by CRYP1 IP &amp; TinyAES, list of Algorithm supported:
           - Electronic Code Book(ECB)
           - Cipher Block Chaining (CBC)
           - Counter mode (CTR)
           - Cipher Block Chaining (CBC)
           - Counter mode (CTR)
           - Galois/counter mode (GCM)
           - Counter with Cipher Block Chaining-Message(CCM) 
    [..]  Three processing functions are available:
      (+) Polling mode : HAL_CRYP_Encrypt &amp; HAL_CRYP_Decrypt
      (+) Interrupt mode : HAL_CRYP_Encrypt_IT &amp; HAL_CRYP_Decrypt_IT
      (+) DMA mode : HAL_CRYP_Encrypt_DMA &amp; HAL_CRYP_Decrypt_DMA

@endverbatim
  * @{
  */</comment>


<comment type="block" format="doxygen">/**
  * @brief  Encryption mode.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @param  Input: Pointer to the input buffer (plaintext)
  * @param  Size: Length of the plaintext buffer in word.
  * @param  Output: Pointer to the output buffer(ciphertext)
  * @param  Timeout: Specify Timeout value  
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CRYP_Encrypt</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>Input</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>Output</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>algo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_READY</name></expr>)</condition>
  <block>{<block_content> 
    <comment type="block">/* Change state Busy */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_BUSY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Process locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters*/</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>=</operator> <name>Input</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>=</operator> <name>Output</name></expr>;</expr_stmt>
    
    <comment type="block">/*  Calculate Size parameter in Byte*/</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataWidthUnit</name></name> <operator>==</operator> <name>CRYP_DATAWIDTHUNIT_WORD</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <name>Size</name> <operator>*</operator> <literal type="number">4U</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>	
    </block_content>}</block></else></if_stmt>
    
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>  
    <comment type="block">/* Set Encryption operating mode*/</comment>   
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_ALGODIR</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    
    <comment type="block">/* algo get algorithm selected */</comment>     
    <expr_stmt><expr><name>algo</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>CRYP_CR_ALGOMODE</name></expr>;</expr_stmt>
    
    <switch>switch<condition>(<expr><name>algo</name></expr>)</condition>
    <block>{<block_content>    
    <case>case <expr><name>CRYP_DES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_DES_CBC</name></expr>:</case>
    <case>case <expr><name>CRYP_TDES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_TDES_CBC</name></expr>:</case>
      
      <comment type="block">/*Set Key */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K1LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K1RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_ECB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_CBC</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K2LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K2RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K3LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K3RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>  
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/*Set Initialization Vector (IV)*/</comment>    
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_DES_CBC</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_CBC</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Flush FIFO */</comment>
      <expr_stmt><expr><call><name>HAL_CRYP_FIFO_FLUSH</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Set the phase */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>
      
      <comment type="block">/* Statrt DES/TDES encryption process */</comment>     
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_TDES_Process</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     
      <break>break;</break>
      
    <case>case <expr><name>CRYP_AES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CBC</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CTR</name></expr>:</case>
      
      <comment type="block">/* AES encryption */</comment>       
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AES_Encrypt</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>   
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP_CR_ALGOMODE_AES_GCM</name></expr></argument>)</argument_list></call></expr></cpp:if>      
    <case>case <expr><name>CRYP_AES_GCM</name></expr>:</case>
      
      <comment type="block">/* AES GCM encryption */</comment>       
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESGCM_Process</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <break>break;</break>
      
    <case>case <expr><name>CRYP_AES_CCM</name></expr>:</case>
      
      <comment type="block">/* AES CCM encryption */</comment>  
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESCCM_Process</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     
      <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* GCM CCM defined*/</comment>       
    <default>default:</default>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_NOT_SUPPORTED</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></switch>      
    
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/*AES*/</comment>
    
    <comment type="block">/* Set the operating mode*/</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_MODE</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    
    <comment type="block">/* algo get algorithm selected */</comment>  
    <expr_stmt><expr><name>algo</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>AES_CR_CHMOD</name></expr>;</expr_stmt>  
    
    <switch>switch<condition>(<expr><name>algo</name></expr>)</condition>
    <block>{<block_content>    
      
    <case>case <expr><name>CRYP_AES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CBC</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CTR</name></expr>:</case>
      
      <comment type="block">/* AES encryption */</comment>        
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AES_Encrypt</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     
      <break>break;</break>   
      
    <case>case <expr><name>CRYP_AES_GCM_GMAC</name></expr>:</case>
      
      <comment type="block">/* AES GCM encryption */</comment>  
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESGCM_Process</name> <argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  
      <break>break;</break>
      
    <case>case <expr><name>CRYP_AES_CCM</name></expr>:</case>
      
      <comment type="block">/* AES CCM encryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESCCM_Process</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
      <break>break;</break>
      
    <default>default:</default>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_NOT_SUPPORTED</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/*end AES or CRYP */</comment>   
    
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content> 
      <comment type="block">/* Change the CRYP peripheral state */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
      
      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Busy error code field */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_BUSY</name></expr>;</expr_stmt> 
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt> 
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Decryption mode.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @param  Input: Pointer to the input buffer (ciphertext )
  * @param  Size: Length of the plaintext buffer in word.
  * @param  Output: Pointer to the output buffer(plaintext)
  * @param  Timeout: Specify Timeout value  
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CRYP_Decrypt</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>Input</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>Output</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>algo</name></decl>;</decl_stmt> 
  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Change state Busy */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_BUSY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Process locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    
    <comment type="block">/*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr  parameters*/</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>=</operator> <name>Input</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>=</operator> <name>Output</name></expr>;</expr_stmt>
    
    <comment type="block">/*  Calculate Size parameter in Byte*/</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataWidthUnit</name></name> <operator>==</operator> <name>CRYP_DATAWIDTHUNIT_WORD</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <name>Size</name> <operator>*</operator> <literal type="number">4U</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>	
    </block_content>}</block></else></if_stmt>
    
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
    
    <comment type="block">/* Set Decryption operating mode*/</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_ALGODIR</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* algo get algorithm selected */</comment>   
    <expr_stmt><expr><name>algo</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>CRYP_CR_ALGOMODE</name></expr>;</expr_stmt>
    
    <switch>switch<condition>(<expr><name>algo</name></expr>)</condition>
    <block>{<block_content>    
    <case>case <expr><name>CRYP_DES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_DES_CBC</name></expr>:</case>
    <case>case <expr><name>CRYP_TDES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_TDES_CBC</name></expr>:</case>
      
      <comment type="block">/*Set Key */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K1LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K1RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_ECB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_CBC</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K2LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K2RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K3LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K3RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>  
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/*Set Initialization Vector (IV)*/</comment>   
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_DES_CBC</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_CBC</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Flush FIFO */</comment>
      <expr_stmt><expr><call><name>HAL_CRYP_FIFO_FLUSH</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Set the phase */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>
      
      <comment type="block">/* Start DES/TDES decryption process */</comment>  
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_TDES_Process</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <break>break;</break>
      
    <case>case <expr><name>CRYP_AES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CBC</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CTR</name></expr>:</case>
      
      <comment type="block">/* AES decryption */</comment>   
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AES_Decrypt</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>   
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP_CR_ALGOMODE_AES_GCM</name></expr></argument>)</argument_list></call></expr></cpp:if>      
    <case>case <expr><name>CRYP_AES_GCM</name></expr>:</case>
      
      <comment type="block">/* AES GCM decryption */</comment>       
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESGCM_Process</name> <argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   
      <break>break;</break>
      
    <case>case <expr><name>CRYP_AES_CCM</name></expr>:</case>
      
      <comment type="block">/* AES CCM decryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESCCM_Process</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* GCM CCM defined*/</comment>       
    <default>default:</default>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_NOT_SUPPORTED</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></switch>      
    
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/*AES*/</comment>
    
    <comment type="block">/* Set Decryption operating mode*/</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_MODE</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <comment type="block">/* algo get algorithm selected */</comment>  
    <expr_stmt><expr><name>algo</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>AES_CR_CHMOD</name></expr>;</expr_stmt>
    
    <switch>switch<condition>(<expr><name>algo</name></expr>)</condition>
    <block>{<block_content>    
      
    <case>case <expr><name>CRYP_AES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CBC</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CTR</name></expr>:</case>
      
      <comment type="block">/* AES decryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AES_Decrypt</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>   
      
    <case>case <expr><name>CRYP_AES_GCM_GMAC</name></expr>:</case>
      
      <comment type="block">/* AES GCM decryption */</comment>   
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESGCM_Process</name> <argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  
      <break>break;</break>
      
    <case>case <expr><name>CRYP_AES_CCM</name></expr>:</case>
      
      <comment type="block">/* AES CCM decryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESCCM_Process</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
      <break>break;</break>
      
    <default>default:</default>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_NOT_SUPPORTED</name></expr>;</expr_stmt>
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment> 
    
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content> 
      <comment type="block">/* Change the CRYP peripheral state */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
      
      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Busy error code field */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_BUSY</name></expr>;</expr_stmt> 
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Encryption in interrupt mode.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @param  Input: Pointer to the input buffer (plaintext)
  * @param  Size: Length of the plaintext buffer in word
  * @param  Output: Pointer to the output buffer(ciphertext)
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CRYP_Encrypt_IT</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>Input</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>Output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>algo</name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Change state Busy */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_BUSY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Process locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters*/</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>=</operator> <name>Input</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>=</operator> <name>Output</name></expr>;</expr_stmt>  
    
    <comment type="block">/*  Calculate Size parameter in Byte*/</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataWidthUnit</name></name> <operator>==</operator> <name>CRYP_DATAWIDTHUNIT_WORD</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <name>Size</name> <operator>*</operator> <literal type="number">4U</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>	
    </block_content>}</block></else></if_stmt>
    
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
    
    <comment type="block">/* Set encryption operating mode*/</comment>   
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_ALGODIR</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    
    <comment type="block">/* algo get algorithm selected */</comment>  
    <expr_stmt><expr><name>algo</name> <operator>=</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>CRYP_CR_ALGOMODE</name><operator>)</operator></expr>;</expr_stmt>
    
    <switch>switch<condition>(<expr><name>algo</name></expr>)</condition>
    <block>{<block_content>    
    <case>case <expr><name>CRYP_DES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_DES_CBC</name></expr>:</case>
    <case>case <expr><name>CRYP_TDES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_TDES_CBC</name></expr>:</case>
      
      <comment type="block">/*Set Key */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K1LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K1RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_ECB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_CBC</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K2LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K2RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K3LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K3RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>  
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* Set the Initialization Vector*/</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_DES_CBC</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_CBC</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Flush FIFO */</comment>
      <expr_stmt><expr><call><name>HAL_CRYP_FIFO_FLUSH</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Set the phase */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>
      
      <comment type="block">/* Enable interrupts */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_INI</name> <operator>|</operator> <name>CRYP_IT_OUTI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Enable CRYP to start DES/TDES process*/</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
      <break>break;</break>
      
    <case>case <expr><name>CRYP_AES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CBC</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CTR</name></expr>:</case>
      
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AES_Encrypt_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>   
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP_CR_ALGOMODE_AES_GCM</name></expr></argument>)</argument_list></call></expr></cpp:if>      
    <case>case <expr><name>CRYP_AES_GCM</name></expr>:</case>
      
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESGCM_Process_IT</name> <argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  
      <break>break;</break>
      
    <case>case <expr><name>CRYP_AES_CCM</name></expr>:</case>
      
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESCCM_Process_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
      <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* GCM CCM defined*/</comment>     
    <default>default:</default>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_NOT_SUPPORTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>   
      <break>break;</break>
    </block_content>}</block></switch>
    
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment>
    
    <comment type="block">/* Set encryption operating mode*/</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_MODE</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    
    <comment type="block">/* algo get algorithm selected */</comment>  
    <expr_stmt><expr><name>algo</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>AES_CR_CHMOD</name></expr>;</expr_stmt>
    
    <switch>switch<condition>(<expr><name>algo</name></expr>)</condition>
    <block>{<block_content>         
    <case>case <expr><name>CRYP_AES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CBC</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CTR</name></expr>:</case>
      
      <comment type="block">/* AES encryption */</comment>  
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AES_Encrypt_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>   
      
    <case>case <expr><name>CRYP_AES_GCM_GMAC</name></expr>:</case>
      
      <comment type="block">/* AES GCM encryption */</comment>  
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESGCM_Process_IT</name> <argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  
      <break>break;</break>
      
    <case>case <expr><name>CRYP_AES_CCM</name></expr>:</case>
      
      <comment type="block">/* AES CCM encryption */</comment>  
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESCCM_Process_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <break>break;</break>
      
    <default>default:</default>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_NOT_SUPPORTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/*end AES or CRYP*/</comment> 
    
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Busy error code field */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_BUSY</name></expr>;</expr_stmt> 
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt> 
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Decryption in itnterrupt mode.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @param  Input: Pointer to the input buffer (ciphertext )
  * @param  Size: Length of the plaintext buffer in word.
  * @param  Output: Pointer to the output buffer(plaintext)
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CRYP_Decrypt_IT</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>Input</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>Output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>algo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_READY</name></expr>)</condition>
  <block>{<block_content>  
    <comment type="block">/* Change state Busy */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_BUSY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Process locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    
    <comment type="block">/*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters*/</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>=</operator> <name>Input</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>=</operator> <name>Output</name></expr>;</expr_stmt>
    
    <comment type="block">/*  Calculate Size parameter in Byte*/</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataWidthUnit</name></name> <operator>==</operator> <name>CRYP_DATAWIDTHUNIT_WORD</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <name>Size</name> <operator>*</operator> <literal type="number">4U</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>	
    </block_content>}</block></else></if_stmt>
    
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
    
    <comment type="block">/* Set decryption operating mode*/</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_ALGODIR</name></expr></argument>,<argument><expr><name>CRYP_OPERATINGMODE_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* algo get algorithm selected */</comment>     
    <expr_stmt><expr><name>algo</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>CRYP_CR_ALGOMODE</name></expr>;</expr_stmt>
    
    <switch>switch<condition>(<expr><name>algo</name></expr>)</condition>
    <block>{<block_content>    
    <case>case <expr><name>CRYP_DES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_DES_CBC</name></expr>:</case>
    <case>case <expr><name>CRYP_TDES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_TDES_CBC</name></expr>:</case>
      
      <comment type="block">/*Set Key */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K1LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K1RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_ECB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_CBC</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K2LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K2RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K3LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K3RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>  
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Set the Initialization Vector*/</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_DES_CBC</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_CBC</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* Flush FIFO */</comment>
      <expr_stmt><expr><call><name>HAL_CRYP_FIFO_FLUSH</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Set the phase */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>
      
      <comment type="block">/* Enable interrupts */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_INI</name> <operator>|</operator> <name>CRYP_IT_OUTI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Enable CRYP and start DES/TDES process*/</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      
      <break>break;</break>
      
    <case>case <expr><name>CRYP_AES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CBC</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CTR</name></expr>:</case>
      
      <comment type="block">/* AES decryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AES_Decrypt_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>   
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP_CR_ALGOMODE_AES_GCM</name></expr></argument>)</argument_list></call></expr></cpp:if>      
    <case>case <expr><name>CRYP_AES_GCM</name></expr>:</case>
      
      <comment type="block">/* AES GCM decryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESGCM_Process_IT</name> <argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
      <break>break;</break>
      
    <case>case <expr><name>CRYP_AES_CCM</name></expr>:</case>
      
      <comment type="block">/* AES CCMdecryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESCCM_Process_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
      <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* GCM CCM defined*/</comment>      
    <default>default:</default>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_NOT_SUPPORTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break> 
    </block_content>}</block></switch>
    
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/*AES*/</comment>
    
    <comment type="block">/* Set decryption operating mode*/</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_MODE</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    
    <comment type="block">/* algo get algorithm selected */</comment>  
    <expr_stmt><expr><name>algo</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>AES_CR_CHMOD</name></expr>;</expr_stmt>
    
    <switch>switch<condition>(<expr><name>algo</name></expr>)</condition>
    <block>{<block_content>        
    <case>case <expr><name>CRYP_AES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CBC</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CTR</name></expr>:</case>
      
      <comment type="block">/* AES decryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AES_Decrypt_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>   
      
    <case>case <expr><name>CRYP_AES_GCM_GMAC</name></expr>:</case>
      
      <comment type="block">/* AES GCM decryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESGCM_Process_IT</name> <argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    
      <break>break;</break>
      
    <case>case <expr><name>CRYP_AES_CCM</name></expr>:</case>
      
      <comment type="block">/* AES CCM decryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESCCM_Process_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <break>break;</break>
      
    <default>default:</default>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_NOT_SUPPORTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment>  
    
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Busy error code field */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_BUSY</name></expr>;</expr_stmt> 
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt> 
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Encryption in DMA mode.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @param  Input: Pointer to the input buffer (plaintext)
  * @param  Size: Length of the plaintext buffer in word.
  * @param  Output: Pointer to the output buffer(ciphertext)
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CRYP_Encrypt_DMA</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>Input</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>Output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>algo</name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Change state Busy */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_BUSY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Process locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters*/</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>=</operator> <name>Input</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>=</operator> <name>Output</name></expr>;</expr_stmt>
    
    <comment type="block">/*  Calculate Size parameter in Byte*/</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataWidthUnit</name></name> <operator>==</operator> <name>CRYP_DATAWIDTHUNIT_WORD</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <name>Size</name> <operator>*</operator> <literal type="number">4U</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>	
    </block_content>}</block></else></if_stmt>
    
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
    
    <comment type="block">/* Set encryption operating mode*/</comment>   
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_ALGODIR</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    
    <comment type="block">/* algo get algorithm selected */</comment>  
    <expr_stmt><expr><name>algo</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>CRYP_CR_ALGOMODE</name></expr>;</expr_stmt>
    
    <switch>switch<condition>(<expr><name>algo</name></expr>)</condition>
    <block>{<block_content>    
    <case>case <expr><name>CRYP_DES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_DES_CBC</name></expr>:</case>
    <case>case <expr><name>CRYP_TDES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_TDES_CBC</name></expr>:</case>
      
      <comment type="block">/*Set Key */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K1LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K1RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_ECB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_CBC</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K2LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K2RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K3LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K3RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>  
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Set the Initialization Vector*/</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_DES_CBC</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_CBC</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Flush FIFO */</comment>
      <expr_stmt><expr><call><name>HAL_CRYP_FIFO_FLUSH</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Set the phase */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>
      
      <comment type="block">/* Start DMA process transfer for DES/TDES */</comment> 
      <expr_stmt><expr><call><name>CRYP_SetDMAConfig</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator><operator>/</operator><literal type="number">4U</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>     
      <break>break;</break>
      
    <case>case <expr><name>CRYP_AES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CBC</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CTR</name></expr>:</case>
      
      <comment type="block">/*  Set the Key*/</comment>
      <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Set the Initialization Vector IV */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>!=</operator> <name>CRYP_AES_ECB</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>     
      <comment type="block">/* Set the phase */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>  
      
      <comment type="block">/* Start DMA process transfer for AES */</comment> 
      <expr_stmt><expr><call><name>CRYP_SetDMAConfig</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator><operator>/</operator><literal type="number">4U</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
      <break>break;</break>   
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP_CR_ALGOMODE_AES_GCM</name></expr></argument>)</argument_list></call></expr></cpp:if>      
    <case>case <expr><name>CRYP_AES_GCM</name></expr>:</case>    
      <comment type="block">/* AES GCM encryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESGCM_Process_DMA</name> <argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  
      <break>break;</break>
      
    <case>case <expr><name>CRYP_AES_CCM</name></expr>:</case>      
      <comment type="block">/* AES CCM encryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESCCM_Process_DMA</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       
      <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* GCM CCM defined*/</comment>      
    <default>default:</default>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_NOT_SUPPORTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
    
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/*AES*/</comment> 
    <comment type="block">/* Set encryption operating mode*/</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_MODE</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    
    <comment type="block">/* algo get algorithm selected */</comment>  
    <expr_stmt><expr><name>algo</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>AES_CR_CHMOD</name></expr>;</expr_stmt>
    
    <switch>switch<condition>(<expr><name>algo</name></expr>)</condition>
    <block>{<block_content>    
      
    <case>case <expr><name>CRYP_AES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CBC</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CTR</name></expr>:</case>
      
      <comment type="block">/*  Set the Key*/</comment>
      <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Set the Initialization Vector*/</comment> 
      <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>!=</operator> <name>CRYP_AES_ECB</name></expr>)</condition>
      <block>{<block_content>   
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR3</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR2</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR1</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR0</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Set the phase */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>
      
      <comment type="block">/* Start DMA process transfer for AES */</comment> 
      <expr_stmt><expr><call><name>CRYP_SetDMAConfig</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
      <break>break;</break>   
      
    <case>case <expr><name>CRYP_AES_GCM_GMAC</name></expr>:</case>     
      <comment type="block">/* AES GCM encryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESGCM_Process_DMA</name> <argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    
      <break>break;</break>
      
    <case>case <expr><name>CRYP_AES_CCM</name></expr>:</case>      
      <comment type="block">/* AES CCM encryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESCCM_Process_DMA</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
      <break>break;</break>
      
    <default>default:</default>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_NOT_SUPPORTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment>  
    
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Busy error code field */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_BUSY</name></expr>;</expr_stmt> 
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt> 
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Decryption in DMA mode.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @param  Input: Pointer to the input buffer (ciphertext )
  * @param  Size: Length of the plaintext buffer in word
  * @param  Output: Pointer to the output buffer(plaintext)
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_CRYP_Decrypt_DMA</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>Input</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>Output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>algo</name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
   
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_READY</name></expr>)</condition>
  <block>{<block_content>
    
    <comment type="block">/* Change state Busy */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_BUSY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Process locked */</comment>
    <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    
    <comment type="block">/*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr, pCrypOutBuffPtr and Size parameters*/</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>=</operator> <name>Input</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>=</operator> <name>Output</name></expr>;</expr_stmt>
    
    <comment type="block">/*  Calculate Size parameter in Byte*/</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataWidthUnit</name></name> <operator>==</operator> <name>CRYP_DATAWIDTHUNIT_WORD</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <name>Size</name> <operator>*</operator> <literal type="number">4U</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>	
    </block_content>}</block></else></if_stmt>    
    
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
    
    <comment type="block">/* Set decryption operating mode*/</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_ALGODIR</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* algo get algorithm selected */</comment>   
    <expr_stmt><expr><name>algo</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>CRYP_CR_ALGOMODE</name></expr>;</expr_stmt>
    
    <switch>switch<condition>(<expr><name>algo</name></expr>)</condition>
    <block>{<block_content>    
    <case>case <expr><name>CRYP_DES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_DES_CBC</name></expr>:</case>
    <case>case <expr><name>CRYP_TDES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_TDES_CBC</name></expr>:</case>
      
      <comment type="block">/*Set Key */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K1LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K1RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_ECB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_CBC</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K2LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K2RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K3LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K3RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>  
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Set the Initialization Vector*/</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_DES_CBC</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_CBC</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Flush FIFO */</comment>
      <expr_stmt><expr><call><name>HAL_CRYP_FIFO_FLUSH</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Set the phase */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>
      
      <comment type="block">/* Start DMA process transfer for DES/TDES */</comment> 
      <expr_stmt><expr><call><name>CRYP_SetDMAConfig</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator><operator>/</operator><literal type="number">4U</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
      <break>break;</break>
      
    <case>case <expr><name>CRYP_AES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CBC</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CTR</name></expr>:</case>
      
      <comment type="block">/* AES decryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AES_Decrypt_DMA</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>   
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP_CR_ALGOMODE_AES_GCM</name></expr></argument>)</argument_list></call></expr></cpp:if>      
    <case>case <expr><name>CRYP_AES_GCM</name></expr>:</case>     
      <comment type="block">/* AES GCM decryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESGCM_Process_DMA</name> <argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    
      <break>break;</break>
      
    <case>case <expr><name>CRYP_AES_CCM</name></expr>:</case>      
      <comment type="block">/* AES CCM decryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESCCM_Process_DMA</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       
      <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* GCM CCM defined*/</comment>      
    <default>default:</default>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_NOT_SUPPORTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
    
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/*AES*/</comment>
    
    <comment type="block">/* Set decryption operating mode*/</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_MODE</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* algo get algorithm selected */</comment>  
    <expr_stmt><expr><name>algo</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>AES_CR_CHMOD</name></expr>;</expr_stmt>
    
    <switch>switch<condition>(<expr><name>algo</name></expr>)</condition>
    <block>{<block_content>    
      
    <case>case <expr><name>CRYP_AES_ECB</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CBC</name></expr>:</case>
    <case>case <expr><name>CRYP_AES_CTR</name></expr>:</case>
      
      <comment type="block">/* AES decryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AES_Decrypt_DMA</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>   
      
    <case>case <expr><name>CRYP_AES_GCM_GMAC</name></expr>:</case>     
      <comment type="block">/* AES GCM decryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESGCM_Process_DMA</name> <argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>       
      <break>break;</break>
      
    <case>case <expr><name>CRYP_AES_CCM</name></expr>:</case>     
      <comment type="block">/* AES CCM decryption */</comment> 
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CRYP_AESCCM_Process_DMA</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       
      <break>break;</break>
      
    <default>default:</default>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_NOT_SUPPORTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment>           
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Busy error code field */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_BUSY</name></expr>;</expr_stmt> 
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>status</name></expr>;</return>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup CRYP_Exported_Functions_Group3 CRYP IRQ handler management  
 *  @brief   CRYP IRQ handler.
 *
@verbatim   
  ==============================================================================
                ##### CRYP IRQ handler management #####
  ==============================================================================  
[..]  This section provides CRYP IRQ handler and callback functions.
      (+) HAL_CRYP_IRQHandler CRYP interrupt request
      (+) HAL_CRYP_InCpltCallback input data transfer complete callback
      (+) HAL_CRYP_OutCpltCallback output data transfer complete callback
      (+) HAL_CRYP_ErrorCallback  CRYP error callback
      (+) HAL_CRYP_GetState return the CRYP state 
      (+) HAL_CRYP_GetError return the CRYP error code
@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  This function handles cryptographic interrupt request.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>HAL_CRYP_IRQHandler</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>__HAL_CRYP_GET_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_INI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x0U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>__HAL_CRYP_GET_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_OUTI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_DES_ECB</name><operator>)</operator><operator>||</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_DES_CBC</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_ECB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_TDES_CBC</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>CRYP_TDES_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* DES or TDES*/</comment>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_AES_ECB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_AES_CBC</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_AES_CTR</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>CRYP_AES_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/*AES*/</comment>
    </block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP_CR_ALGOMODE_AES_GCM</name></expr></argument>)</argument_list></call></expr></cpp:if>    
    <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_AES_GCM</name><operator>)</operator> <operator>||</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_CR_ALGOMODE_AES_CCM</name><operator>)</operator></expr> )</condition>
    <block>{<block_content>
      <comment type="block">/* if header phase */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>CRYP_PHASE_HEADER</name><operator>)</operator> <operator>==</operator> <name>CRYP_PHASE_HEADER</name></expr> )</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>CRYP_GCMCCM_SetHeaderPhase_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>     
      <else>else  <comment type="block">/* if payload phase */</comment>         
      <block>{<block_content>
        <expr_stmt><expr><call><name>CRYP_GCMCCM_SetPayloadPhase_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* GCM CCM defined*/</comment>    
    <else>else
    <block>{<block_content>
      <comment type="block">/* Nothing to do */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt> 
  
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/*AES*/</comment> 
  <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>__HAL_CRYP_GET_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_IT_CCF</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>__HAL_CRYP_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_IT_CCFIE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    
    <comment type="block">/* Clear computation complete flag */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_AES_GCM_GMAC</name></expr>)</condition>
    <block>{<block_content>
      
      <comment type="block">/* if header phase */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>CRYP_PHASE_HEADER</name><operator>)</operator> <operator>==</operator> <name>CRYP_PHASE_HEADER</name></expr> )</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>CRYP_GCMCCM_SetHeaderPhase_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>    
      <else>else  <comment type="block">/* if payload phase */</comment>    
      <block>{<block_content>
        <expr_stmt><expr><call><name>CRYP_GCMCCM_SetPayloadPhase_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_AES_CCM</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* if header phase */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>&gt;=</operator>  <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name></expr> )</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>CRYP_GCMCCM_SetHeaderPhase_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>    
      <else>else   <comment type="block">/* if payload phase */</comment>  
      <block>{<block_content>
        <expr_stmt><expr><call><name>CRYP_GCMCCM_SetPayloadPhase_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>    
    <else>else  <comment type="block">/* AES Algorithm ECB,CBC or CTR*/</comment>
    <block>{<block_content>
      <expr_stmt><expr><call><name>CRYP_AES_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>    
  <comment type="block">/* Check if error occurred */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>__HAL_CRYP_GET_IT_SOURCE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_IT_ERRIE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* If write Error occurred */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_CRYP_GET_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_IT_WRERR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_WRITE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* If read Error occurred */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>__HAL_CRYP_GET_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_IT_RDERR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_READ</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment>     
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Return the CRYP error code.
  * @param  hcryp : pointer to a CRYP_HandleTypeDef structure that contains
  *                 the configuration information for the  CRYP IP
  * @retval CRYP error code
  */</comment>
<function><type><name>uint32_t</name></type> <name>HAL_CRYP_GetError</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Returns the CRYP state.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval HAL state
  */</comment>
<function><type><name>HAL_CRYP_STATETypeDef</name></type> <name>HAL_CRYP_GetState</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Input FIFO transfer completed callback.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_CRYP_InCpltCallback</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CRYP_InCpltCallback could be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Output FIFO transfer completed callback.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_CRYP_OutCpltCallback</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CRYP_OutCpltCallback could be implemented in the user file
   */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  CRYP error callback.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */</comment>
 <function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_CRYP_ErrorCallback</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CRYP_ErrorCallback could be implemented in the user file
   */</comment> 
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @addtogroup CRYP_Private_Functions
  * @{
  */</comment>

 <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block" format="doxygen">/**
  * @brief  Encryption in ECB/CBC Algorithm with DES/TDES standard.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module 
  * @param  Timeout: specify Timeout value 
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_TDES_Process</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>temp</name></decl>;</decl_stmt>  <comment type="block">/* Temporary CrypOutBuff */</comment>  
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>incount</name></decl>;</decl_stmt> <comment type="block">/* Temporary CrypInCount Value */</comment> 
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>outcount</name></decl>;</decl_stmt>  <comment type="block">/* Temporary CrypOutCount Value */</comment>
  
  <comment type="block">/* Enable CRYP */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/*Temporary CrypOutCount Value*/</comment>
  <expr_stmt><expr><name>outcount</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name></expr>;</expr_stmt>
  
  <comment type="block">/*Start processing*/</comment>  
  <while>while<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>outcount</name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator><operator>)</operator></expr>)</condition>
  <block>{<block_content> 
    <comment type="block">/* Temporary CrypInCount Value */</comment> 
    <expr_stmt><expr><name>incount</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name></expr>;</expr_stmt>      
    <comment type="block">/* Write plain data and get cipher data */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name> <operator>&amp;</operator> <name>CRYP_FLAG_IFNF</name> <operator>)</operator> <operator>!=</operator> <literal type="number">0x0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>incount</name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Write the input block in the IN FIFO */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>        
    </block_content>}</block></if></if_stmt>   
    
    <comment type="block">/* Wait for OFNE flag to be raised */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnOFNEFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
    <block>{<block_content> 
      <comment type="block">/* Disable the CRYP peripheral clock */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Change state &amp; errorCode*/</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
      
      <comment type="block">/* Process unlocked */</comment>          
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
      <comment type="block">/*Call registered error callback*/</comment>
      <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/*Call legacy weak error callback*/</comment>
      <expr_stmt><expr><call><name>HAL_CRYP_ErrorCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment> 
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/*Temporary CrypOutCount Value*/</comment>
    <expr_stmt><expr><name>outcount</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name> <operator>&amp;</operator> <name>CRYP_FLAG_OFNE</name> <operator>)</operator> <operator>!=</operator> <literal type="number">0x0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>outcount</name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Read the output block from the Output FIFO and put them in temporary Buffer then get CrypOutBuff from temporary buffer  */</comment>    
      <expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>      
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>  
      <expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>  
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>      
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>  
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*Temporary CrypOutCount Value*/</comment>
    <expr_stmt><expr><name>outcount</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <comment type="block">/* Disable CRYP */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <comment type="block">/* Change the CRYP state */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/** 
  * @brief  CRYP block input/output data handling under interruption with DES/TDES standard.
  * @note   The function is called under interruption only, once
  *         interruptions have been enabled by CRYP_Decrypt_IT() and CRYP_Encrypt_IT().
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval none
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_TDES_IT</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>temp</name></decl>;</decl_stmt>  <comment type="block">/* Temporary CrypOutBuff */</comment> 
  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content> 
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>__HAL_CRYP_GET_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_INI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>__HAL_CRYP_GET_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_FLAG_INRIS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x0U</literal><operator>)</operator></expr>)</condition>
      
    <block>{<block_content>     
      <comment type="block">/* Write input block in the IN FIFO */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
      
      <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>==</operator>  <operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator><operator>/</operator><literal type="number">4U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>     
        <comment type="block">/* Disable interruption */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_INI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Call the input data transfer complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if> 
        <comment type="block">/*Call registered Input complete callback*/</comment>
        <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>InCpltCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <comment type="block">/*Call legacy weak Input complete callback*/</comment>
        <expr_stmt><expr><call><name>HAL_CRYP_InCpltCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>__HAL_CRYP_GET_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_OUTI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x0U</literal><operator>)</operator><operator>&amp;&amp;</operator> <operator>(</operator><call><name>__HAL_CRYP_GET_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_FLAG_OUTRIS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Read the output block from the Output FIFO and put them in temporary Buffer then get CrypOutBuff from temporary buffer  */</comment>    
      <expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>      
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>  
      <expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>  
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>      
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>            
      <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name> <operator>==</operator>  <operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator><operator>/</operator><literal type="number">4U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Disable interruption */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_OUTI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Disable CRYP */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Process unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        
        <comment type="block">/* Change the CRYP state */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
        <comment type="block">/* Call output transfer complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
        <comment type="block">/*Call registered Output complete callback*/</comment>
        <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>OutCpltCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <comment type="block">/*Call legacy weak Output complete callback*/</comment>
        <expr_stmt><expr><call><name>HAL_CRYP_OutCpltCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment>  
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>   
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     
    <comment type="block">/* Busy error code field */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_BUSY</name></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
    <comment type="block">/*Call registered error callback*/</comment>
    <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/*Call legacy weak error callback*/</comment>
    <expr_stmt><expr><call><name>HAL_CRYP_ErrorCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CRYP */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Encryption in ECB/CBC &amp; CTR Algorithm with AES Standard
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure 
  * @param  Timeout: specify Timeout value 
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AES_Encrypt</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>  
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>outcount</name></decl>;</decl_stmt>  <comment type="block">/* Temporary CrypOutCount Value */</comment>
  
  <comment type="block">/*  Set the Key*/</comment>
  <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>!=</operator> <name>CRYP_AES_ECB</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set the Initialization Vector*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if>       
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR3</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR2</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR1</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR0</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* CRYP */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Set the phase */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>
  
  <comment type="block">/* Enable CRYP */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/*Temporary CrypOutCount Value*/</comment>
  <expr_stmt><expr><name>outcount</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name></expr>;</expr_stmt>
  
  <while>while<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>outcount</name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator><operator>)</operator></expr>)</condition>
  <block>{<block_content>      
    <comment type="block">/* Write plain Ddta and get cipher data */</comment>
    <expr_stmt><expr><call><name>CRYP_AES_ProcessData</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <comment type="block">/*Temporary CrypOutCount Value*/</comment>
    <expr_stmt><expr><name>outcount</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name></expr>;</expr_stmt>     
  </block_content>}</block></while> 
  
  <comment type="block">/* Disable CRYP */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Change the CRYP state */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>   
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Encryption in ECB/CBC &amp; CTR mode with AES Standard using interrupt mode
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AES_Encrypt_IT</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>   
  
  <comment type="block">/*  Set the Key*/</comment>
  <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>!=</operator> <name>CRYP_AES_ECB</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set the Initialization Vector*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if>  
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR3</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR2</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR1</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR0</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* CRYP */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Set the phase */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>    
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if> 
    
    <comment type="block">/* Enable computation complete flag and error interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_IT_CCFIE</name> <operator>|</operator> <name>CRYP_IT_ERRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Enable CRYP */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Write the input block in the IN FIFO */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>   
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt> 
    
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* CRYP */</comment>  
    
    <comment type="block">/* Enable interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_INI</name> <operator>|</operator> <name>CRYP_IT_OUTI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Enable CRYP */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/*  End AES or CRYP  */</comment>      
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>  
    <comment type="block">/* Change the CRYP state */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  </block_content>}</block></else></if_stmt>   
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Decryption in ECB/CBC &amp; CTR mode with AES Standard
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure 
  * @param  Timeout: Specify Timeout value 
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AES_Decrypt</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter> )</parameter_list>
<block>{<block_content>  
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>outcount</name></decl>;</decl_stmt>  <comment type="block">/* Temporary CrypOutCount Value */</comment>
  
  <comment type="block">/*  Key preparation for ECB/CBC */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>!=</operator> <name>CRYP_AES_CTR</name></expr>)</condition> 
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if> 
    <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>AutoKeyDerivation</name></name> <operator>==</operator> <name>DISABLE</name></expr>)</condition><comment type="block">/*Mode 2 Key preparation*/</comment>
    <block>{<block_content>     
      <comment type="block">/* Set key preparation for decryption operating mode*/</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_MODE</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_KEYDERIVATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/*  Set the Key*/</comment>
      <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      
      <comment type="block">/* Enable CRYP */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Wait for CCF flag to be raised */</comment>
      <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnCCFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
      <block>{<block_content> 
        <comment type="block">/* Disable the CRYP peripheral clock */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Change state &amp; error code*/</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
        
        <comment type="block">/* Process unlocked */</comment>          
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* Clear CCF Flag */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Return to decryption operating mode(Mode 3)*/</comment>      
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_MODE</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="block">/*Mode 4 : decryption &amp; Key preparation*/</comment>
    <block>{<block_content>
      <comment type="block">/*  Set the Key*/</comment>
      <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Set decryption &amp; Key preparation operating mode*/</comment>             
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_MODE</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    </block_content>}</block></else></if_stmt>     
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* CRYP */</comment>
    <comment type="block">/* change ALGOMODE to key preparation for decryption*/</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_ALGOMODE</name></expr></argument>, <argument><expr><name>CRYP_CR_ALGOMODE_AES_KEY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/*  Set the Key*/</comment>
    <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Enable CRYP */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Wait for BUSY flag to be raised */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnBUSYFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
    <block>{<block_content> 
      <comment type="block">/* Disable the CRYP peripheral clock */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Change state */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
      
      <comment type="block">/* Process unlocked */</comment>          
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>       
    <comment type="block">/* Turn back to ALGOMODE of the configuration */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_ALGOMODE</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>  
    
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP  */</comment> 
  </block_content>}</block></if>
  <else>else  <comment type="block">/*Algorithm CTR */</comment>
  <block>{<block_content>  
    <comment type="block">/*  Set the Key*/</comment>
    <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt> 
  
  <comment type="block">/* Set IV */</comment> 
  <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>!=</operator> <name>CRYP_AES_ECB</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set the Initialization Vector*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if>       
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR3</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR2</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR1</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR0</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* CRYP */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment>
  </block_content>}</block></if></if_stmt>     
  <comment type="block">/* Set the phase */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>
  
  <comment type="block">/* Enable CRYP */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/*Temporary CrypOutCount Value*/</comment>  
  <expr_stmt><expr><name>outcount</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name></expr>;</expr_stmt> 
  
  <while>while<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>outcount</name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator><operator>)</operator></expr>)</condition>
  <block>{<block_content>      
    <comment type="block">/* Write plain data and get cipher data */</comment>
    <expr_stmt><expr><call><name>CRYP_AES_ProcessData</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*Temporary CrypOutCount Value*/</comment>
    <expr_stmt><expr><name>outcount</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>  
  
  <comment type="block">/* Disable CRYP */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Change the CRYP state */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>   
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @brief  Decryption in ECB/CBC &amp; CTR mode with AES Standard using interrupt mode
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AES_Decrypt_IT</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/*  Key preparation for ECB/CBC */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>!=</operator> <name>CRYP_AES_CTR</name></expr>)</condition> 
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if> 
    <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>AutoKeyDerivation</name></name> <operator>==</operator> <name>DISABLE</name></expr>)</condition><comment type="block">/*Mode 2 Key preparation*/</comment>
    <block>{<block_content>     
      <comment type="block">/* Set key preparation for decryption operating mode*/</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_MODE</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_KEYDERIVATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/*  Set the Key*/</comment>
      <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      
      <comment type="block">/* Enable CRYP */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Wait for CCF flag to be raised */</comment>
      <expr_stmt><expr><name>count</name> <operator>=</operator> <name>CRYP_TIMEOUT_KEYPREPARATION</name></expr>;</expr_stmt>
      <do>do
      <block>{<block_content>
        <expr_stmt><expr><name>count</name><operator>--</operator></expr> ;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Disable the CRYP peripheral clock */</comment>
          <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="block">/* Change state */</comment>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt> 
          
          <comment type="block">/* Process unlocked */</comment>          
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block>
      while<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>AES_SR_CCF</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
      
      <comment type="block">/* Clear CCF Flag */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Return to decryption operating mode(Mode 3)*/</comment> 
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_MODE</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="block">/*Mode 4 : decryption &amp; key preparation*/</comment>
    <block>{<block_content>
      <comment type="block">/*  Set the Key*/</comment>
      <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Set decryption &amp; key preparation operating mode*/</comment> 
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_MODE</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    </block_content>}</block></else></if_stmt>        
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* CRYP */</comment>
    
    <comment type="block">/* change ALGOMODE to key preparation for decryption*/</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_ALGOMODE</name></expr></argument>, <argument><expr><name>CRYP_CR_ALGOMODE_AES_KEY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/*  Set the Key*/</comment>
    <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Enable CRYP */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Wait for BUSY flag to be raised */</comment>
    <expr_stmt><expr><name>count</name> <operator>=</operator> <name>CRYP_TIMEOUT_KEYPREPARATION</name></expr>;</expr_stmt>
    <do>do
    <block>{<block_content>
      <expr_stmt><expr><name>count</name><operator>--</operator></expr> ;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Change state */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
        
        <comment type="block">/* Process unlocked */</comment>          
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    while<condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>CRYP_FLAG_BUSY</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>  
    
    <comment type="block">/* Turn back to ALGOMODE of the configuration */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_ALGOMODE</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
    
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment>    
  </block_content>}</block></if>
  
  <else>else  <comment type="block">/*Algorithm CTR */</comment>
  <block>{<block_content>  
    <comment type="block">/*  Set the Key*/</comment>
    <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>    
  
  <comment type="block">/* Set IV */</comment> 
  <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>!=</operator> <name>CRYP_AES_ECB</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set the Initialization Vector*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if>       
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR3</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR2</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR1</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR0</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* CRYP */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment>
  </block_content>}</block></if></if_stmt>     
  <comment type="block">/* Set the phase */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content> 
    
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if> 
    
    <comment type="block">/* Enable computation complete flag and error interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_IT_CCFIE</name> <operator>|</operator> <name>CRYP_IT_ERRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Enable CRYP */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Write the input block in the IN FIFO */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>   
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>  
    
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* CRYP */</comment>
    
    <comment type="block">/* Enable interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_INI</name> <operator>|</operator> <name>CRYP_IT_OUTI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Enable CRYP */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment>        
  </block_content>}</block></if>
  <else>else 
  <block>{<block_content>
    <comment type="block">/* Process locked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Change the CRYP state */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>  
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @brief  Decryption in ECB/CBC &amp; CTR mode with AES Standard using DMA mode
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AES_Decrypt_DMA</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/*  Key preparation for ECB/CBC */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>!=</operator> <name>CRYP_AES_CTR</name></expr>)</condition>  
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if> 
    <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>AutoKeyDerivation</name></name> <operator>==</operator> <name>DISABLE</name></expr>)</condition><comment type="block">/*Mode 2 key preparation*/</comment>
    <block>{<block_content>     
      <comment type="block">/* Set key preparation for decryption operating mode*/</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_MODE</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_KEYDERIVATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/*  Set the Key*/</comment>
      <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      
      <comment type="block">/* Enable CRYP */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Wait for CCF flag to be raised */</comment>
      <expr_stmt><expr><name>count</name> <operator>=</operator> <name>CRYP_TIMEOUT_KEYPREPARATION</name></expr>;</expr_stmt>
      <do>do
      <block>{<block_content>
        <expr_stmt><expr><name>count</name><operator>--</operator></expr> ;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Disable the CRYP peripheral clock */</comment>
          <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="block">/* Change state */</comment>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt> 
          
          <comment type="block">/* Process unlocked */</comment>          
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block>
      while<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>AES_SR_CCF</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
      
      <comment type="block">/* Clear CCF Flag */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Return to decryption operating mode(Mode 3)*/</comment>      
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_MODE</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    </block_content>}</block></if>
    <else>else <comment type="block">/*Mode 4 : decryption &amp; key preparation*/</comment>
    <block>{<block_content>
      <comment type="block">/*  Set the Key*/</comment>
      <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Set decryption &amp; Key preparation operating mode*/</comment> 
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_MODE</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    </block_content>}</block></else></if_stmt>     
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* CRYP */</comment>   
    <comment type="block">/* change ALGOMODE to key preparation for decryption*/</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_ALGOMODE</name></expr></argument>, <argument><expr><name>CRYP_CR_ALGOMODE_AES_KEY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/*  Set the Key*/</comment>
    <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Enable CRYP */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Wait for BUSY flag to be raised */</comment>
    <expr_stmt><expr><name>count</name> <operator>=</operator> <name>CRYP_TIMEOUT_KEYPREPARATION</name></expr>;</expr_stmt>
    <do>do
    <block>{<block_content>
      <expr_stmt><expr><name>count</name><operator>--</operator></expr> ;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Disable the CRYP peripheral clock */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Change state */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
        
        <comment type="block">/* Process unlocked */</comment>          
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    while<condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>CRYP_FLAG_BUSY</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
    
    <comment type="block">/* Turn back to ALGOMODE of the configuration */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_ALGOMODE</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
    
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP  */</comment> 
  </block_content>}</block></if>
  <else>else  <comment type="block">/*Algorithm CTR */</comment>
  <block>{<block_content>  
    <comment type="block">/*  Set the Key*/</comment>
    <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt> 
  
  <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>!=</operator> <name>CRYP_AES_ECB</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set the Initialization Vector*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if>       
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR3</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR2</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR1</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR0</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* CRYP */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP  */</comment>
  </block_content>}</block></if></if_stmt>      
  <comment type="block">/* Set the phase */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>    
    <comment type="block">/* Set the input and output addresses and start DMA transfer */</comment> 
    <expr_stmt><expr><call><name>CRYP_SetDMAConfig</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
  </block_content>}</block></if>
  <else>else 
  <block>{<block_content>
    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Change the CRYP state */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>       
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  DMA CRYP input data process complete callback.
  * @param  hdma: DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_DMAInCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>  
<block>{<block_content>
  <decl_stmt><decl><type><name>CRYP_HandleTypeDef</name><modifier>*</modifier></type> <name>hcryp</name> <init>= <expr><operator>(</operator><name>CRYP_HandleTypeDef</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Disable the DMA transfer for input FIFO request by resetting the DIEN bit
  in the DMACR register */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>  
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DMACR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>~</operator><name>CRYP_DMACR_DIEN</name><operator>)</operator></expr>;</expr_stmt>  
  
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment>
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_DMAINEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* TinyAES2, No output on CCM AES, unlock should be done when input data process complete */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>&amp;</operator> <name>CRYP_AES_CCM</name><operator>)</operator> <operator>==</operator> <name>CRYP_AES_CCM</name></expr>)</condition>
  <block>{<block_content>  
    <comment type="block">/* Clear CCF flag */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Change the CRYP state to ready */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Process Unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment> 
  
  <comment type="block">/* Call input data transfer complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
  <comment type="block">/*Call registered Input complete callback*/</comment>
  <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>InCpltCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/*Call legacy weak Input complete callback*/</comment>
  <expr_stmt><expr><call><name>HAL_CRYP_InCpltCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA CRYP output data process complete callback.
  * @param  hdma: DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_DMAOutCplt</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CRYP_HandleTypeDef</name><modifier>*</modifier></type> <name>hcryp</name> <init>= <expr><operator>(</operator><name>CRYP_HandleTypeDef</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Disable the DMA transfer for output FIFO request by resetting
  the DOEN bit in the DMACR register */</comment>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if> 

  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DMACR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>~</operator><name>CRYP_DMACR_DOEN</name><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP_CR_ALGOMODE_AES_GCM</name></expr></argument>)</argument_list></call></expr></cpp:if>  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>&amp;</operator> <name>CRYP_AES_GCM</name><operator>)</operator> <operator>!=</operator> <name>CRYP_AES_GCM</name></expr>)</condition>
  <block>{<block_content>  
    <comment type="block">/* Disable CRYP  (not allowed in  GCM)*/</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/*NO GCM CCM */</comment>
    <comment type="block">/* Disable CRYP */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* GCM CCM defined*/</comment>    
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment> 
  
  <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_DMAOUTEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Clear CCF flag */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>&amp;</operator> <name>CRYP_AES_GCM_GMAC</name><operator>)</operator> <operator>!=</operator> <name>CRYP_AES_GCM_GMAC</name></expr>)</condition>
  <block>{<block_content>  
    <comment type="block">/* Disable CRYP (not allowed in  GCM)*/</comment> 
    <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment> 
  
  <comment type="block">/* Change the CRYP state to ready */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <comment type="block">/* Call output data transfer complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
  <comment type="block">/*Call registered Output complete callback*/</comment>
  <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>OutCpltCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/*Call legacy weak Output complete callback*/</comment>
  <expr_stmt><expr><call><name>HAL_CRYP_OutCpltCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA CRYP communication error callback. 
  * @param  hdma: DMA handle
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_DMAError</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CRYP_HandleTypeDef</name><modifier>*</modifier></type> <name>hcryp</name> <init>= <expr><operator>(</operator><name>CRYP_HandleTypeDef</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>DMA_HandleTypeDef</name><operator>*</operator><operator>)</operator><name>hdma</name><operator>)</operator><operator>-&gt;</operator><name>Parent</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Change the CRYP peripheral state */</comment> 
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name><operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
  
  <comment type="block">/* DMA error code field */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_DMA</name></expr>;</expr_stmt> 
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if> 
  
  <comment type="block">/* Clear CCF flag */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AES */</comment>   
  
  <comment type="block">/* Call error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
  <comment type="block">/*Call registered error callback*/</comment>
  <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/*Call legacy weak error callback*/</comment>
  <expr_stmt><expr><call><name>HAL_CRYP_ErrorCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Set the DMA configuration and start the DMA transfer
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @param  inputaddr: address of the input buffer
  * @param  Size: size of the input buffer, must be a multiple of 16.
  * @param  outputaddr: address of the output buffer
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_SetDMAConfig</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>inputaddr</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>outputaddr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Set the CRYP DMA transfer complete callback */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>hdmain</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>CRYP_DMAInCplt</name></expr>;</expr_stmt>
  
  <comment type="block">/* Set the DMA input error callback */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>hdmain</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>CRYP_DMAError</name></expr>;</expr_stmt>
  
  <comment type="block">/* Set the CRYP DMA transfer complete callback */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>hdmaout</name><operator>-&gt;</operator><name>XferCpltCallback</name></name> <operator>=</operator> <name>CRYP_DMAOutCplt</name></expr>;</expr_stmt>
  
  <comment type="block">/* Set the DMA output error callback */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>hdmaout</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>CRYP_DMAError</name></expr>;</expr_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>   
  
  <comment type="block">/* Enable CRYP */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Enable the input DMA Stream */</comment>
  <if_stmt><if>if <condition>( <expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>hdmain</name></name></expr></argument>, <argument><expr><name>inputaddr</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call><operator>!=</operator><name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* DMA error code field */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_DMA</name></expr>;</expr_stmt>  
    
    <comment type="block">/* Call error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
    <comment type="block">/*Call registered error callback*/</comment>
    <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/*Call legacy weak error callback*/</comment>
    <expr_stmt><expr><call><name>HAL_CRYP_ErrorCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment> 
  </block_content>}</block></if></if_stmt>  
  <comment type="block">/* Enable the output DMA Stream */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>hdmaout</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr></argument>, <argument><expr><name>outputaddr</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call><operator>!=</operator><name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* DMA error code field */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_DMA</name></expr>;</expr_stmt>  
    
    <comment type="block">/* Call error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
    <comment type="block">/*Call registered error callback*/</comment>
    <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/*Call legacy weak error callback*/</comment>
    <expr_stmt><expr><call><name>HAL_CRYP_ErrorCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Enable In/Out DMA request */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DMACR</name></name> <operator>=</operator> <name>CRYP_DMACR_DOEN</name> <operator>|</operator> <name>CRYP_DMACR_DIEN</name></expr>;</expr_stmt>
  
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment>
  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>&amp;</operator> <name>CRYP_AES_GCM_GMAC</name><operator>)</operator> <operator>!=</operator> <name>CRYP_AES_GCM_GMAC</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>&amp;</operator> <name>CRYP_AES_CCM</name><operator>)</operator> <operator>!=</operator> <name>CRYP_AES_CCM</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>  
    <comment type="block">/* Enable CRYP (not allowed in  GCM &amp; CCM)*/</comment> 
    <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt> 
  
  <comment type="block">/* Enable the DMA input stream */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>hdmain</name></name></expr></argument>, <argument><expr><name>inputaddr</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call><operator>!=</operator><name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* DMA error code field */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_DMA</name></expr>;</expr_stmt>  
    
    <comment type="block">/* Call error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
    <comment type="block">/*Call registered error callback*/</comment>
    <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/*Call legacy weak error callback*/</comment>
    <expr_stmt><expr><call><name>HAL_CRYP_ErrorCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>  
  <comment type="block">/* Enable the DMA output stream */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>hdmaout</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>&amp;</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr></argument>, <argument><expr><name>outputaddr</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call><operator>!=</operator><name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* DMA error code field */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_DMA</name></expr>;</expr_stmt>  
    
    <comment type="block">/* Call error callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
    <comment type="block">/*Call registered error callback*/</comment>
    <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/*Call legacy weak error callback*/</comment>
    <expr_stmt><expr><call><name>HAL_CRYP_ErrorCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment>
  </block_content>}</block></if></if_stmt>  
 <comment type="block">/*AES2v1.1.1 : CCM authentication : no init phase, only header and final phase */</comment> 
  <comment type="block">/* Enable In and Out DMA requests */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>&amp;</operator> <name>CRYP_AES_CCM</name><operator>)</operator> <operator>==</operator> <name>CRYP_AES_CCM</name></expr>)</condition>
  <block>{<block_content> 
    <comment type="block">/* Enable only In DMA requests for CCM*/</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>AES_CR_DMAINEN</name> <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Enable In and Out DMA requests */</comment>
    <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><operator>(</operator><name>AES_CR_DMAINEN</name> <operator>|</operator> <name>AES_CR_DMAOUTEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Process Data: Write Input data in polling mode and used in AES functions. 
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @param  Timeout: Specify Timeout value  
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_AES_ProcessData</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>temp</name></decl>;</decl_stmt>  <comment type="block">/* Temporary CrypOutBuff */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>incount</name></decl>;</decl_stmt>  <comment type="block">/* Temporary CrypInCount Value */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>outcount</name></decl>;</decl_stmt>  <comment type="block">/* Temporary CrypOutCount Value */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>  
   
  <comment type="block">/*Temporary CrypOutCount Value*/</comment>
  <expr_stmt><expr><name>incount</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name></expr>;</expr_stmt> 
  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name> <operator>&amp;</operator> <name>CRYP_FLAG_IFNF</name> <operator>)</operator> <operator>!=</operator> <literal type="number">0x0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>incount</name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Write the input block in the IN FIFO */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>   
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>      
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Wait for OFNE flag to be raised */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnOFNEFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
  <block>{<block_content> 
    <comment type="block">/* Disable the CRYP peripheral clock */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Change state &amp; error code*/</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Process unlocked */</comment>          
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
    <comment type="block">/*Call registered error callback*/</comment>
    <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/*Call legacy weak error callback*/</comment>
    <expr_stmt><expr><call><name>HAL_CRYP_ErrorCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment> 
  </block_content>}</block></if></if_stmt> 
  
  <comment type="block">/*Temporary CrypOutCount Value*/</comment>
  <expr_stmt><expr><name>outcount</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name> <operator>&amp;</operator> <name>CRYP_FLAG_OFNE</name> <operator>)</operator> <operator>!=</operator> <literal type="number">0x0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>outcount</name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Read the output block from the Output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer  */</comment> 
    <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>      
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>    
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>    
    <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>    
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>      
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>   
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt> 
  </block_content>}</block></if></if_stmt> 
  
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment>
  
  <comment type="block">/* Write the input block in the IN FIFO */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>   
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>      
  
  <comment type="block">/* Wait for CCF flag to be raised */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnCCFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
  <block>{<block_content> 
    <comment type="block">/* Disable the CRYP peripheral clock */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Change state */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
    
    <comment type="block">/* Process unlocked */</comment>          
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
    <comment type="block">/*Call registered error callback*/</comment>
    <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/*Call legacy weak error callback*/</comment>
    <expr_stmt><expr><call><name>HAL_CRYP_ErrorCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment> 
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Clear CCF Flag */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer*/</comment> 
  <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator><operator>)</operator> <operator>=</operator><name>temp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator>   <operator>=</operator><name>temp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>    
  <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>      
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt> 
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator>   <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt> 
  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** 
  * @brief  Handle CRYP block input/output data handling under interruption.
  * @note   The function is called under interruption only, once
  *         interruptions have been enabled by HAL_CRYP_Encrypt_IT or HAL_CRYP_Decrypt_IT.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_AES_IT</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>temp</name></decl>;</decl_stmt>  <comment type="block">/* Temporary CrypOutBuff */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if> 
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>incount</name></decl>;</decl_stmt> <comment type="block">/* Temporary CrypInCount Value */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>outcount</name></decl>;</decl_stmt>  <comment type="block">/* Temporary CrypOutCount Value */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_CRYP_STATE_BUSY</name></expr>)</condition>
  <block>{<block_content> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if> 
   
    <comment type="block">/*Temporary CrypOutCount Value*/</comment>
    <expr_stmt><expr><name>incount</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name> <operator>&amp;</operator> <name>CRYP_FLAG_IFNF</name> <operator>)</operator> <operator>!=</operator> <literal type="number">0x0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>incount</name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Write the input block in the IN FIFO */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>   
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>      
      <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>==</operator>  <operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator><operator>/</operator><literal type="number">4U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>     
        <comment type="block">/* Disable interrupts */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_INI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Call the input data transfer complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
        <comment type="block">/*Call registered Input complete callback*/</comment>
        <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>InCpltCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <comment type="block">/*Call legacy weak Input complete callback*/</comment>
        <expr_stmt><expr><call><name>HAL_CRYP_InCpltCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*Temporary CrypOutCount Value*/</comment>
    <expr_stmt><expr><name>outcount</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name> <operator>&amp;</operator> <name>CRYP_FLAG_OFNE</name> <operator>)</operator> <operator>!=</operator> <literal type="number">0x0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>outcount</name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer  */</comment> 
      <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>      
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>    
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>    
      <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>    
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>      
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>   
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt> 
      <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name> <operator>==</operator>  <operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator><operator>/</operator><literal type="number">4U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Disable interrupts */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_OUTI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Change the CRYP state */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>        
        
        <comment type="block">/* Disable CRYP */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Process unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
      <comment type="block">/* Call Output transfer complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
      <comment type="block">/*Call registered Output complete callback*/</comment>
      <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>OutCpltCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/*Call legacy weak Output complete callback*/</comment>
      <expr_stmt><expr><call><name>HAL_CRYP_OutCpltCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/*AES*/</comment>
    
    <comment type="block">/* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer*/</comment> 
    <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator><operator>)</operator> <operator>=</operator><name>temp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator>   <operator>=</operator><name>temp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>    
    <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>      
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt> 
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator>   <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt> 
    
    <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name> <operator>==</operator>  <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable Computation Complete flag and errors interrupts */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_IT_CCFIE</name><operator>|</operator><name>CRYP_IT_ERRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Change the CRYP state */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
      
      <comment type="block">/* Disable CRYP */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Process Unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Call Output transfer complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
      <comment type="block">/*Call registered Output complete callback*/</comment>
      <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>OutCpltCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/*Call legacy weak Output complete callback*/</comment>
      <expr_stmt><expr><call><name>HAL_CRYP_OutCpltCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>  
      <comment type="block">/* Write the input block in the IN FIFO */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>   
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>      
      
      <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>==</operator>  <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator></expr>)</condition> 
      <block>{<block_content>    
        <comment type="block">/* Call Input transfer complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if> 
        <comment type="block">/*Call registered Input complete callback*/</comment>
        <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>InCpltCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <comment type="block">/*Call legacy weak Input complete callback*/</comment>
        <expr_stmt><expr><call><name>HAL_CRYP_InCpltCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment>
      </block_content>}</block></if></if_stmt>   
    </block_content>}</block></else></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP  */</comment>
   
  </block_content>}</block></if> 
  <else>else
  <block>{<block_content>
    <comment type="block">/* Busy error code field */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_BUSY</name></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
    <comment type="block">/*Call registered error callback*/</comment>
    <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/*Call legacy weak error callback*/</comment>
    <expr_stmt><expr><call><name>HAL_CRYP_ErrorCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment> 
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function> 

<comment type="block" format="doxygen">/**
  * @brief  Writes Key in Key registers. 
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @param  KeySize: Size of Key
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_SetKey</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>KeySize</name></decl></parameter>)</parameter_list>
<block>{<block_content>  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
  
  <switch>switch<condition>(<expr><name>KeySize</name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>CRYP_KEYSIZE_256B</name></expr>:</case>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K0LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K0RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K1LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K1RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K2LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K2RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K3LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K3RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt> 
    <break>break;</break>
  <case>case <expr><name>CRYP_KEYSIZE_192B</name></expr>:</case>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K1LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K1RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K2LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K2RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K3LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K3RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt> 
    <break>break;</break>
  <case>case <expr><name>CRYP_KEYSIZE_128B</name></expr>:</case>         
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K2LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K2RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K3LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>K3RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt> 
    
    <break>break;</break>
  <default>default:</default>
    <break>break;</break>
  </block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/*AES*/</comment>
  <switch>switch<condition>(<expr><name>KeySize</name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>CRYP_KEYSIZE_256B</name></expr>:</case>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>KEYR7</name></name> <operator>=</operator><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>)</operator></expr>;</expr_stmt>   
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>KEYR6</name></name> <operator>=</operator><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>KEYR5</name></name> <operator>=</operator><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>KEYR4</name></name> <operator>=</operator><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>KEYR3</name></name> <operator>=</operator><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>   
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>KEYR2</name></name> <operator>=</operator><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>KEYR1</name></name> <operator>=</operator><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>KEYR0</name></name> <operator>=</operator><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>CRYP_KEYSIZE_128B</name></expr>:</case>   
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>KEYR3</name></name> <operator>=</operator><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>)</operator></expr>;</expr_stmt>   
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>KEYR2</name></name> <operator>=</operator><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>KEYR1</name></name> <operator>=</operator><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>KEYR0</name></name> <operator>=</operator><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pKey</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>   
    
    <break>break;</break>
  <default>default:</default>
    <break>break;</break>
  </block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP  */</comment>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP_CR_ALGOMODE_AES_GCM</name></expr></argument>)</argument_list></call><operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Encryption/Decryption process in AES GCM mode and prepare the authentication TAG 
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AESGCM_Process</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>wordsize</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator><operator>/</operator><literal type="number">4U</literal></expr></init></decl> ;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>outcount</name></decl>;</decl_stmt>  <comment type="block">/* Temporary CrypOutCount Value */</comment>
    
  <comment type="block">/*  Reset CrypHeaderCount */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt> 
  
  <comment type="block" format="doxygen">/****************************** Init phase **********************************/</comment>
  
  <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_PHASE_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Set the key */</comment>
  <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>  
  
  <comment type="block">/* Set the initialization vector and the counter : Initial Counter Block (ICB)*/</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Enable the CRYP peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/*Wait for the CRYPEN bit to be cleared*/</comment>
  <while>while<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>CRYP_CR_CRYPEN</name><operator>)</operator> <operator>==</operator> <name>CRYP_CR_CRYPEN</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator><operator>||</operator><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Disable the CRYP peripheral clock */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Change state */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
        
        <comment type="block">/* Process unlocked */</comment>          
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment>
  <comment type="block">/* Workaround 1 : only AES.
  Datatype configuration must be 32 bits during Init phase. Only, after Init, and before re
  enabling the IP, datatype different from 32 bits can be configured.*/</comment>
  <comment type="block">/* Select DATATYPE 32  */</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_DATATYPE</name></expr></argument>, <argument><expr><name>CRYP_DATATYPE_32B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
  
  <comment type="block">/* Set the initialization vector and the counter : Initial Counter Block (ICB)*/</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR3</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR2</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR1</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR0</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Enable the CRYP peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* just wait for hash computation */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnCCFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
  <block>{<block_content> 
    <comment type="block">/* Change state */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>          
    
    <comment type="block">/* Process unlocked &amp; return error */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>          
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Clear CCF flag */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP  */</comment>  
  
  <comment type="block" format="doxygen">/************************ Header phase *************************************/</comment>
  
  <if_stmt><if>if<condition>(<expr><call><name>CRYP_GCMCCM_SetHeaderPhase</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,  <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block" format="doxygen">/*************************Payload phase ************************************/</comment>   
  
  <comment type="block">/* Set the phase */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>  
  
  <comment type="block">/* Disable the CRYP peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Select payload phase once the header phase is performed */</comment>
  <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_PHASE_PAYLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <comment type="block">/* Enable the CRYP peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment>
  
  <comment type="block">/* Select payload phase once the header phase is performed */</comment>
  <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_PHASE_PAYLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP  */</comment> 
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>%</operator> <literal type="number">16U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition> 
  <block>{<block_content>
    <comment type="block">/* recalculate  wordsize */</comment> 
    <expr_stmt><expr><name>wordsize</name> <operator>=</operator>  <operator>(</operator><operator>(</operator><name>wordsize</name><operator>/</operator><literal type="number">4U</literal><operator>)</operator><operator>*</operator><literal type="number">4U</literal><operator>)</operator></expr> ;</expr_stmt> 
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/*Temporary CrypOutCount Value*/</comment>
  <expr_stmt><expr><name>outcount</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* Write input data and get output Data */</comment>
  <while>while<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>&lt;</operator> <name>wordsize</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>outcount</name> <operator>&lt;</operator> <name>wordsize</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>      
    <comment type="block">/* Write plain data and get cipher data */</comment>
    <expr_stmt><expr><call><name>CRYP_AES_ProcessData</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/*Temporary CrypOutCount Value*/</comment>
    <expr_stmt><expr><name>outcount</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name></expr>;</expr_stmt> 
    
    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator><operator>||</operator><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Disable the CRYP peripheral clock */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Change state &amp; error code */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
        
        <comment type="block">/* Process unlocked */</comment>          
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>%</operator> <literal type="number">16U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition> 
  <block>{<block_content>
    <comment type="block">/*  Workaround 2 :  CRYP1 &amp; AES generates correct TAG for GCM mode only when input block size is multiple of
    128 bits. If lthe size of the last block of payload is inferior to 128 bits, when GCM encryption
    is selected, then the TAG message will be wrong.*/</comment>   
    <expr_stmt><expr><call><name>CRYP_Workaround</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Encryption/Decryption process in AES GCM mode and prepare the authentication TAG in interrupt mode
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AESGCM_Process_IT</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if> 
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>loopcounter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>lastwordsize</name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>npblb</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AES */</comment> 
  
  <comment type="block">/*  Reset CrypHeaderCount */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name> <operator>=</operator><literal type="number">0U</literal></expr>;</expr_stmt>
  
  <comment type="block" format="doxygen">/******************************* Init phase *********************************/</comment>
  
  <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_PHASE_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Set the key */</comment>
  <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>     
  <comment type="block">/* Set the initialization vector and the counter : Initial Counter Block (ICB)*/</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Enable the CRYP peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/*Wait for the CRYPEN bit to be cleared*/</comment>
  <expr_stmt><expr><name>count</name> <operator>=</operator> <name>CRYP_TIMEOUT_GCMCCMINITPHASE</name></expr>;</expr_stmt>
  <do>do
  <block>{<block_content>
    <expr_stmt><expr><name>count</name><operator>--</operator></expr> ;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the CRYP peripheral clock */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Change state */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt> 
      
      <comment type="block">/* Process unlocked */</comment>          
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  while<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>CRYP_CR_CRYPEN</name><operator>)</operator> <operator>==</operator> <name>CRYP_CR_CRYPEN</name></expr>)</condition>;</do>
  
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment>
  
  <comment type="block">/* Workaround 1 : only AES
  Datatype configuration must be 32 bits during INIT phase. Only, after INIT, and before re
  enabling the IP, datatype different from 32 bits can be configured.*/</comment>
  <comment type="block">/* Select DATATYPE 32  */</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_DATATYPE</name></expr></argument>, <argument><expr><name>CRYP_DATATYPE_32B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
  
  <comment type="block">/* Set the initialization vector and the counter : Initial Counter Block (ICB)*/</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR3</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR2</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR1</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR0</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>    
  
  <comment type="block">/* Enable the CRYP peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* just wait for hash computation */</comment>
  <expr_stmt><expr><name>count</name> <operator>=</operator> <name>CRYP_TIMEOUT_GCMCCMINITPHASE</name></expr>;</expr_stmt>
  <do>do
  <block>{<block_content>
    <expr_stmt><expr><name>count</name><operator>--</operator></expr> ;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the CRYP peripheral clock */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Change state */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
      
      <comment type="block">/* Process unlocked */</comment>          
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  while<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>AES_SR_CCF</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
  
  <comment type="block">/* Clear CCF flag */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment>
  
  <comment type="block" format="doxygen">/***************************** Header phase *********************************/</comment>   
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>  
  
  <comment type="block">/* Select header phase */</comment>
  <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_PHASE_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  
  <comment type="block">/* Enable interrupts */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_INI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Enable CRYP */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment>
  
  <comment type="block">/* Workaround 1: only AES , before re-enabling the IP, datatype can be configured*/</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_DATATYPE</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <comment type="block">/* Select header phase */</comment>
  <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_PHASE_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <comment type="block">/* Enable computation complete flag and error interrupts */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_IT_CCFIE</name> <operator>|</operator> <name>CRYP_IT_ERRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
  
  <comment type="block">/* Enable the CRYP peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition> <comment type="block">/*header phase is  skipped*/</comment>
  <block>{<block_content>
    <comment type="block">/* Set the phase */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>
    
    <comment type="block">/* Select payload phase once the header phase is performed */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_GCMPH</name></expr></argument>, <argument><expr><name>CRYP_PHASE_PAYLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Write the payload Input block in the IN FIFO */</comment> 
    <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>     
      <comment type="block">/* Disable interrupts */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_CCFIE</name><operator>|</operator> <name>CRYP_IT_ERRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Change the CRYP state */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
      
      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>            
    <if type="elseif">else if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>&gt;=</operator> <literal type="number">16U</literal></expr>)</condition>
    <block>{<block_content>       
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>   
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>==</operator> <operator>(</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator></expr>)</condition>   
      <block>{<block_content>   
        <comment type="block">/* Call Input transfer complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
        <comment type="block">/*Call registered Input complete callback*/</comment>
        <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>InCpltCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <comment type="block">/*Call legacy weak Input complete callback*/</comment>
        <expr_stmt><expr><call><name>HAL_CRYP_InCpltCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment>
      </block_content>}</block></if></if_stmt> 
    </block_content>}</block></if>
    <else>else <comment type="block">/* Size &lt; 16Bytes  : first block is the last block*/</comment>
    <block>{<block_content>
      <comment type="block">/* Workaround not implemented*/</comment>  
      <comment type="block">/* Size should be %4  otherwise Tag will  be incorrectly generated for GCM Encryption:
      Workaround is implemented in polling mode, so if last block of 
      payload &lt;128bit don't use CRYP_Encrypt_IT otherwise TAG is incorrectly generated for GCM Encryption. */</comment>
      
      <comment type="block">/* Compute the number of padding bytes in last block of payload */</comment>
      <expr_stmt><expr><name>npblb</name> <operator>=</operator> <literal type="number">16U</literal><operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator></expr>;</expr_stmt> 
      
      <comment type="block">/* Number of valid words (lastwordsize) in last block */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>npblb</name> <operator>%</operator> <literal type="number">4U</literal><operator>)</operator> <operator>==</operator><literal type="number">0U</literal></expr>)</condition> 
      <block>{<block_content> 
        <expr_stmt><expr><name>lastwordsize</name> <operator>=</operator> <operator>(</operator><literal type="number">16U</literal><operator>-</operator><name>npblb</name><operator>)</operator><operator>/</operator><literal type="number">4U</literal></expr>;</expr_stmt>		
      </block_content>}</block></if>
      <else>else 
      <block>{<block_content>
        <expr_stmt><expr><name>lastwordsize</name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">16U</literal><operator>-</operator><name>npblb</name><operator>)</operator><operator>/</operator><literal type="number">4U</literal><operator>)</operator> <operator>+</operator><literal type="number">1U</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      
      <comment type="block">/*  last block optionally pad the data with zeros*/</comment>
      <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>loopcounter</name> <operator>&lt;</operator> <name>lastwordsize</name></expr> ;</condition> <incr><expr><name>loopcounter</name><operator>++</operator></expr></incr>)</control>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      <while>while<condition>(<expr><name>loopcounter</name> <operator>&lt;</operator> <literal type="number">4U</literal></expr> )</condition>
      <block>{<block_content> 
        <comment type="block">/* pad the data with zeros to have a complete block */</comment>     
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <literal type="number">0x0U</literal></expr>;</expr_stmt>         
        <expr_stmt><expr><name>loopcounter</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">4U</literal></expr>)</condition>
  <block>{<block_content>
    <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>loopcounter</name> <operator>&lt;</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name></expr> ;</condition> <incr><expr><name>loopcounter</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>  
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <while>while<condition>(<expr><name>loopcounter</name> <operator>&lt;</operator> <literal type="number">4U</literal></expr> )</condition>
    <block>{<block_content> 
      <comment type="block">/* pad the data with zeros to have a complete block */</comment>     
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <literal type="number">0x0U</literal></expr>;</expr_stmt>         
      <expr_stmt><expr><name>loopcounter</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <comment type="block">/* Set the phase */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>
    
    <comment type="block">/* Select payload phase once the header phase is performed */</comment>
    <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_PHASE_PAYLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Call Input transfer complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
    <comment type="block">/*Call registered Input complete callback*/</comment>
    <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>InCpltCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/*Call legacy weak Input complete callback*/</comment>
    <expr_stmt><expr><call><name>HAL_CRYP_InCpltCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment>  
  </block_content>}</block></if> 
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">4U</literal></expr>)</condition>
  <block>{<block_content>  
    <comment type="block">/* Write the input block in the IN FIFO */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr>;</expr_stmt>   
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr>;</expr_stmt>  
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Nothing to do */</comment>
  </block_content>}</block></else></if_stmt>  
  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment>      
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  Encryption/Decryption process in AES GCM mode and prepare the authentication TAG using DMA
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AESGCM_Process_DMA</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>wordsize</name></decl>;</decl_stmt>
  
  <comment type="block">/*  Reset CrypHeaderCount */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  
  <comment type="block" format="doxygen">/*************************** Init phase ************************************/</comment>
  
  <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_PHASE_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Set the key */</comment>
  <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>     
  <comment type="block">/* Set the initialization vector and the counter : Initial Counter Block (ICB)*/</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1LR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1RR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Enable the CRYP peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/*Wait for the CRYPEN bit to be cleared*/</comment>
  <expr_stmt><expr><name>count</name> <operator>=</operator> <name>CRYP_TIMEOUT_GCMCCMINITPHASE</name></expr>;</expr_stmt>
  <do>do
  <block>{<block_content>
    <expr_stmt><expr><name>count</name><operator>--</operator></expr> ;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the CRYP peripheral clock */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Change state */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt> 
      
      <comment type="block">/* Process unlocked */</comment>          
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  while<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>CRYP_CR_CRYPEN</name><operator>)</operator> <operator>==</operator> <name>CRYP_CR_CRYPEN</name></expr>)</condition>;</do>
  
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment>
  
  <comment type="block">/*Workaround 1 : only AES
  Datatype configuration must be 32 bits during Init phase. Only, after Init, and before re
  enabling the IP, datatype different from 32 bits can be configured.*/</comment>
  <comment type="block">/* Select DATATYPE 32  */</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_DATATYPE</name></expr></argument>, <argument><expr><name>CRYP_DATATYPE_32B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
  
  <comment type="block">/* Set the initialization vector and the counter : Initial Counter Block (ICB)*/</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR3</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR2</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR1</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR0</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>pInitVect</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>  
  
  <comment type="block">/* Enable the CRYP peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* just wait for hash computation */</comment>
  <expr_stmt><expr><name>count</name> <operator>=</operator> <name>CRYP_TIMEOUT_GCMCCMINITPHASE</name></expr>;</expr_stmt>
  <do>do
  <block>{<block_content>
    <expr_stmt><expr><name>count</name><operator>--</operator></expr> ;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the CRYP peripheral clock */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Change state */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt> 
      
      <comment type="block">/* Process unlocked */</comment>          
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  while<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>AES_SR_CCF</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
  
  <comment type="block">/* Clear CCF flag */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment>
  
  <comment type="block" format="doxygen">/************************ Header phase *************************************/</comment>
  
  <if_stmt><if>if<condition>(<expr><call><name>CRYP_GCMCCM_SetHeaderPhase_DMA</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block" format="doxygen">/************************ Payload phase ************************************/</comment>   
  
  <comment type="block">/* Set the phase */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>  
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
  
  <comment type="block">/* Disable the CRYP peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CRYP */</comment> 
  
  <comment type="block">/* Select payload phase once the header phase is performed */</comment>
  <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_PHASE_PAYLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content> 
    <comment type="block">/* CRYP1 IP V &lt; 2.2.1  Size should be %4  otherwise Tag will  be incorrectly generated for GCM Encryption:
    Workaround is implemented in polling mode, so if last block of 
    payload &lt;128bit don't use DMA mode otherwise TAG is incorrectly generated . */</comment>
    <comment type="block">/* Set the input and output addresses and start DMA transfer */</comment> 
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>%</operator> <literal type="number">16U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition> 
    <block>{<block_content>  
      <expr_stmt><expr><call><name>CRYP_SetDMAConfig</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if>
    <else>else <comment type="block">/*to compute last word&lt;128bits, otherwise it will not be encrypted/decrypted */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name>wordsize</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator><operator>+</operator><operator>(</operator><literal type="number">16U</literal><operator>-</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator><operator>%</operator><literal type="number">16U</literal><operator>)</operator><operator>)</operator></expr> ;</expr_stmt>
      
      <comment type="block">/* Set the input and output addresses and start DMA transfer, pCrypOutBuffPtr size should be %4 */</comment> 
      <expr_stmt><expr><call><name>CRYP_SetDMAConfig</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name>wordsize</name><operator>/</operator><literal type="number">4U</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>   
  </block_content>}</block></if>
  <else>else 
  <block>{<block_content>
    <comment type="block">/* Process unLocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Change the CRYP state and phase */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt> 
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  AES CCM encryption/decryption processing in polling mode 
  *         for TinyAES IP, no encrypt/decrypt performed, only authentication preparation.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AESCCM_Process</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>wordsize</name><init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator><operator>/</operator><literal type="number">4U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>outcount</name></decl>;</decl_stmt>  <comment type="block">/* Temporary CrypOutCount Value */</comment>  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if> 
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>loopcounter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>npblb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>lastwordsize</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AES */</comment>
  
  <comment type="block">/*  Reset CrypHeaderCount */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>     
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if> 
  
  <comment type="block" format="doxygen">/********************** Init phase ******************************************/</comment>
  
  <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_PHASE_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Set the key */</comment>
  <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Set the initialization vector (IV) with CTR1 information */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0LR</name></name> <operator>=</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>CRYP_CCM_CTR1_0</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0RR</name></name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1LR</name></name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1RR</name></name> <operator>=</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name>CRYP_CCM_CTR1_1</name><operator>)</operator><operator>|</operator>  <name>CRYP_CCM_CTR1_2</name></expr>;</expr_stmt>
  
  
  <comment type="block">/* Enable the CRYP peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/*Write  B0 packet into CRYP_DIN Register*/</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_8B</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_16B</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_1B</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/*Wait for the CRYPEN bit to be cleared*/</comment>
  <while>while<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>CRYP_CR_CRYPEN</name><operator>)</operator> <operator>==</operator> <name>CRYP_CR_CRYPEN</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator><operator>||</operator><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Disable the CRYP peripheral clock */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Change state */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
        
        <comment type="block">/* Process unlocked */</comment>          
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>  
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment> 
  <comment type="block">/*AES2v1.1.1 : CCM authentication : no init phase, only header and final phase */</comment> 
  <comment type="block">/* Select header phase */</comment>
  <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_PHASE_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <comment type="block">/* configured encryption mode */</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_MODE</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <comment type="block">/* Set the key */</comment>
  <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     
  
  <comment type="block">/* Set the initialization vector with zero values*/</comment> 
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR3</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR2</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR1</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR0</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Enable the CRYP peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/*Write the B0 packet into CRYP_DIN*/</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt> 
  
  <comment type="block">/*  wait until the end of computation */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnCCFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
  <block>{<block_content> 
    <comment type="block">/* Change state */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>          
    
    <comment type="block">/* Process unlocked &amp; return error */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>          
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Clear CCF flag */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Set the phase */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>
  
  <comment type="block">/* From that point the whole message must be processed, first the Header then the payload.
  First the  Header block(B1) : associated data length expressed in bytes concatenated with Associated Data (A)*/</comment>
  
  <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>%</operator><literal type="number">4U</literal> <operator>)</operator><operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>     
      <comment type="block">/* HeaderSize %4, no padding */</comment> 
      <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><operator>(</operator><name>loopcounter</name> <operator>&lt;</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>loopcounter</name><operator>+=</operator><literal type="number">4U</literal></expr></incr>)</control>
      <block>{<block_content>       
        <comment type="block">/* Write the Input block in the Data Input register */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        
        <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnCCFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
        <block>{<block_content> 
          <comment type="block">/* Disable the CRYP peripheral clock */</comment>
          <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="block">/* Change state */</comment>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
          
          <comment type="block">/* Process unlocked */</comment>          
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Clear CCF Flag */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>         
      </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>   
      <comment type="block">/*Write Header block in the IN FIFO without last block */</comment>
      <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><operator>(</operator><name>loopcounter</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name><operator>)</operator><operator>-</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>%</operator><literal type="number">4U</literal> <operator>)</operator><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>loopcounter</name><operator>+=</operator><literal type="number">4U</literal></expr></incr>)</control>
      <block>{<block_content>
        <comment type="block">/* Write the input block in the data input register */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt> 
        
        <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnCCFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
        <block>{<block_content> 
          <comment type="block">/* Disable the CRYP peripheral clock */</comment>
          <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="block">/* Change state */</comment>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt> 
          
          <comment type="block">/* Process unlocked */</comment>          
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Clear CCF Flag */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
      </block_content>}</block></for>
      <comment type="block">/*  Last block optionally pad the data with zeros*/</comment>
      <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><operator>(</operator><name>loopcounter</name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>%</operator><literal type="number">4U</literal> <operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>loopcounter</name><operator>++</operator></expr></incr>)</control>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>       
      </block_content>}</block></for>
      <while>while<condition>(<expr><name>loopcounter</name> <operator>&lt;</operator><literal type="number">4U</literal></expr> )</condition>
      <block>{<block_content> 
        <comment type="block">/* Pad the data with zeros to have a complete block */</comment>      
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <literal type="number">0x0U</literal></expr>;</expr_stmt>              
        <expr_stmt><expr><name>loopcounter</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>    
      
      <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnCCFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
      <block>{<block_content> 
        <comment type="block">/* Disable the CRYP peripheral clock */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Change state */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
        
        <comment type="block">/* Process unlocked */</comment>          
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* Clear CCF flag */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Then the payload: cleartext payload (not the ciphertext payload).
  Write input Data, no output Data to get */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>%</operator> <literal type="number">16U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition> 
    <block>{<block_content>
      <comment type="block">/* recalculate  wordsize */</comment> 
      <expr_stmt><expr><name>wordsize</name> <operator>=</operator>  <operator>(</operator><operator>(</operator><name>wordsize</name><operator>/</operator><literal type="number">4U</literal><operator>)</operator><operator>*</operator><literal type="number">4U</literal><operator>)</operator></expr> ;</expr_stmt> 
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Get tick */</comment>
    <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*Temporary CrypOutCount Value*/</comment>
    <expr_stmt><expr><name>outcount</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name></expr>;</expr_stmt>
    
    <while>while<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>&lt;</operator> <name>wordsize</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>outcount</name> <operator>&lt;</operator> <name>wordsize</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>      
      <comment type="block">/* Write plain data and get cipher data */</comment>
      <expr_stmt><expr><call><name>CRYP_AES_ProcessData</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
    <comment type="block">/*Temporary CrypOutCount Value*/</comment>
    <expr_stmt><expr><name>outcount</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name></expr>;</expr_stmt> 
    
      <comment type="block">/* Check for the Timeout */</comment>
      <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator><operator>||</operator><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Disable the CRYP peripheral clock */</comment>
          <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="block">/* Change state */</comment>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
          
          <comment type="block">/* Process unlocked */</comment>          
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>%</operator> <literal type="number">16U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>  
    <block>{<block_content> 
      <comment type="block">/* Compute the number of padding bytes in last block of payload */</comment>
      <expr_stmt><expr><name>npblb</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator><operator>/</operator><literal type="number">16U</literal><operator>)</operator><operator>+</operator><literal type="number">1U</literal><operator>)</operator><operator>*</operator><literal type="number">16U</literal><operator>)</operator><operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator></expr>;</expr_stmt> 
      
      <comment type="block">/* Number of valid words (lastwordsize) in last block */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>npblb</name><operator>%</operator><literal type="number">4U</literal><operator>)</operator> <operator>==</operator><literal type="number">0U</literal></expr>)</condition> 
      <block>{<block_content> 
        <expr_stmt><expr><name>lastwordsize</name> <operator>=</operator> <operator>(</operator><literal type="number">16U</literal><operator>-</operator><name>npblb</name><operator>)</operator><operator>/</operator><literal type="number">4U</literal></expr>;</expr_stmt>		
      </block_content>}</block></if>
      <else>else 
      <block>{<block_content>
        <expr_stmt><expr><name>lastwordsize</name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">16U</literal><operator>-</operator><name>npblb</name><operator>)</operator><operator>/</operator><literal type="number">4U</literal><operator>)</operator> <operator>+</operator><literal type="number">1U</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>   
      <comment type="block">/*  Last block optionally pad the data with zeros*/</comment>    
      <for>for<control>(<init><expr><name>loopcounter</name><operator>=</operator><literal type="number">0U</literal></expr>;</init> <condition><expr><name>loopcounter</name> <operator>&lt;</operator> <name>lastwordsize</name></expr>;</condition> <incr><expr><name>loopcounter</name> <operator>++</operator></expr></incr>)</control>        
      <block>{<block_content>
        <comment type="block">/* Write the last input block in the IN FIFO */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>    
      <while>while<condition>(<expr><name>loopcounter</name> <operator>&lt;</operator> <literal type="number">4U</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Pad the data with zeros to have a complete block */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>loopcounter</name><operator>++</operator></expr>;</expr_stmt> 
      </block_content>}</block></while>   
      <comment type="block">/* Wait for CCF flag to be raised */</comment>
      <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnCCFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
      <block>{<block_content> 
        <comment type="block">/* Disable the CRYP peripheral clock */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Change state */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
        
        <comment type="block">/* Process unlocked */</comment>          
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>         
      </block_content>}</block></if></if_stmt> 
      <comment type="block">/* Clear CCF flag */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>       
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>  
  
  <comment type="block" format="doxygen">/************************* Header phase *************************************/</comment>
  <comment type="block">/* Header block(B1) : associated data length expressed in bytes concatenated
  with Associated Data (A)*/</comment>
  
  <if_stmt><if>if<condition>(<expr><call><name>CRYP_GCMCCM_SetHeaderPhase</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>  
  
  <comment type="block" format="doxygen">/********************** Payload phase ***************************************/</comment>   
  
  <comment type="block">/* Set the phase */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>
  
  <comment type="block">/* Disable the CRYP peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Select payload phase once the header phase is performed */</comment>
  <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_PHASE_PAYLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <comment type="block">/* Enable the CRYP peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>%</operator> <literal type="number">16U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition> 
  <block>{<block_content>
    <comment type="block">/* recalculate  wordsize */</comment> 
    <expr_stmt><expr><name>wordsize</name> <operator>=</operator>  <operator>(</operator><operator>(</operator><name>wordsize</name><operator>/</operator><literal type="number">4U</literal><operator>)</operator><operator>*</operator><literal type="number">4U</literal><operator>)</operator></expr> ;</expr_stmt> 
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Get tick */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/*Temporary CrypOutCount Value*/</comment>
  <expr_stmt><expr><name>outcount</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* Write input data and get output data */</comment>
  <while>while<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>&lt;</operator> <name>wordsize</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>outcount</name> <operator>&lt;</operator> <name>wordsize</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>      
    <comment type="block">/* Write plain data and get cipher data */</comment>
    <expr_stmt><expr><call><name>CRYP_AES_ProcessData</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator><operator>||</operator><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Disable the CRYP peripheral clock */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Change state */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt> 
        
        <comment type="block">/* Process unlocked */</comment>          
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>%</operator> <literal type="number">16U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>  
  <block>{<block_content>  
    <comment type="block">/* CRYP Workaround :  CRYP1 generates correct TAG  during CCM decryption only when ciphertext blocks size is multiple of
    128 bits. If lthe size of the last block of payload is inferior to 128 bits, when CCM decryption
    is selected, then the TAG message will be wrong.*/</comment>   
    <expr_stmt><expr><call><name>CRYP_Workaround</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CRYP */</comment>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  AES CCM encryption/decryption process in interrupt mode 
  *         for TinyAES IP, no encrypt/decrypt performed, only authentication preparation.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AESCCM_Process_IT</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CRYP */</comment>
  
  <comment type="block">/*  Reset CrypHeaderCount */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
  
  <comment type="block" format="doxygen">/************ Init phase ************/</comment>
  
  <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_PHASE_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Set the key */</comment>
  <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Set the initialization vector (IV) with CTR1 information */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0LR</name></name> <operator>=</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>CRYP_CCM_CTR1_0</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0RR</name></name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1LR</name></name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1RR</name></name> <operator>=</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name>CRYP_CCM_CTR1_1</name><operator>)</operator><operator>|</operator>  <name>CRYP_CCM_CTR1_2</name></expr>;</expr_stmt>
  
  <comment type="block">/* Enable the CRYP peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/*Write the B0 packet into CRYP_DIN Register*/</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_8B</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_16B</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_1B</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/*Wait for the CRYPEN bit to be cleared*/</comment>
  <expr_stmt><expr><name>count</name> <operator>=</operator> <name>CRYP_TIMEOUT_GCMCCMINITPHASE</name></expr>;</expr_stmt>
  <do>do
  <block>{<block_content>
    <expr_stmt><expr><name>count</name><operator>--</operator></expr> ;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the CRYP peripheral clock */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Change state */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
      
      <comment type="block">/* Process unlocked */</comment>          
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  while<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>CRYP_CR_CRYPEN</name><operator>)</operator> <operator>==</operator> <name>CRYP_CR_CRYPEN</name></expr>)</condition>;</do>
  
  <comment type="block">/* Select header phase */</comment>
  <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_PHASE_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <comment type="block">/* Enable interrupts */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_INI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Enable CRYP */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment> 
  
  <comment type="block">/*AES2v1.1.1 : CCM authentication : no init phase, only header and final phase */</comment> 
  <comment type="block">/* Select header phase */</comment>
  <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_PHASE_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <comment type="block">/* configured mode and encryption mode */</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_MODE</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <comment type="block">/* Set the key */</comment>
  <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     
  
  <comment type="block">/* Set the initialization vector with zero values*/</comment> 
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR3</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR2</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR1</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR0</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Enable interrupts */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_IT_CCFIE</name> <operator>|</operator> <name>CRYP_IT_ERRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <comment type="block">/* Enable the CRYP peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/*Write the B0 packet into CRYP_DIN*/</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt> 
  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment>
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>  
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @brief  AES CCM encryption/decryption process in DMA mode 
  *         for TinyAES IP, no encrypt/decrypt performed, only authentication preparation.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_AESCCM_Process_DMA</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>  
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>wordsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/*  Reset CrypHeaderCount */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>  
  
  <comment type="block" format="doxygen">/************************** Init phase **************************************/</comment>
  
  <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_PHASE_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Set the key */</comment>
  <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  
  <comment type="block">/* Set the initialization vector (IV) with CTR1 information */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0LR</name></name> <operator>=</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>CRYP_CCM_CTR1_0</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV0RR</name></name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1LR</name></name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1RR</name></name> <operator>=</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name>CRYP_CCM_CTR1_1</name><operator>)</operator><operator>|</operator>  <name>CRYP_CCM_CTR1_2</name></expr>;</expr_stmt>
  
  <comment type="block">/* Enable the CRYP peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/*Write the B0 packet into CRYP_DIN Register*/</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_8B</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__REV</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_16B</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__ROR</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name> <operator>==</operator> <name>CRYP_DATATYPE_1B</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <call><name>__RBIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <comment type="block">/*Wait for the CRYPEN bit to be cleared*/</comment>
  <expr_stmt><expr><name>count</name> <operator>=</operator> <name>CRYP_TIMEOUT_GCMCCMINITPHASE</name></expr>;</expr_stmt>
  <do>do
  <block>{<block_content>
    <expr_stmt><expr><name>count</name><operator>--</operator></expr> ;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Disable the CRYP peripheral clock */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Change state */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
      
      <comment type="block">/* Process unlocked */</comment>          
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  while<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>CRYP_CR_CRYPEN</name><operator>)</operator> <operator>==</operator> <name>CRYP_CR_CRYPEN</name></expr>)</condition>;</do>
  
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment> 
  
  <comment type="block">/*AES2v1.1.1 : CCM authentication : no init phase, only header and final phase */</comment> 
  <comment type="block">/* Select header phase */</comment>
  <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_PHASE_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <comment type="block">/* configured CCM chaining mode and encryption mode */</comment>
  <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_MODE</name></expr></argument>, <argument><expr><name>CRYP_OPERATINGMODE_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Set the key */</comment>
  <expr_stmt><expr><call><name>CRYP_SetKey</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>KeySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     
  
  <comment type="block">/* Set the initialization vector with zero values*/</comment> 
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR3</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR2</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR1</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IVR0</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Enable the CRYP peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/*Write the B0 packet into CRYP_DIN*/</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>B0</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt> 
  
  <comment type="block">/*  wait until the end of computation */</comment>
  <expr_stmt><expr><name>count</name> <operator>=</operator> <name>CRYP_TIMEOUT_GCMCCMINITPHASE</name></expr>;</expr_stmt>
  <do>do
  <block>{<block_content>
    <expr_stmt><expr><name>count</name><operator>--</operator></expr> ;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
<block>{<block_content>
  <comment type="block">/* Disable the CRYP peripheral clock */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Change state */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
  
  <comment type="block">/* Process Unlocked */</comment>          
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <return>return <expr><name>HAL_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
  </block_content>}</block>
  while<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>AES_SR_CCF</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
  
  <comment type="block">/* Clear CCF flag */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AES */</comment>
  
  <comment type="block" format="doxygen">/********************* Header phase *****************************************/</comment>
  
  <if_stmt><if>if<condition>(<expr><call><name>CRYP_GCMCCM_SetHeaderPhase_DMA</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block" format="doxygen">/******************** Payload phase *****************************************/</comment>   
  
  <comment type="block">/* Set the phase */</comment>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>  
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>  
  
  <comment type="block">/* Disable the CRYP peripheral */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Select payload phase once the header phase is performed */</comment>
  <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_PHASE_PAYLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CRYP */</comment>   
  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content> 
    <comment type="block">/* Size should be %4  otherwise Tag will  be incorrectly generated for GCM Encryption &amp; CCM Decryption
    Workaround is implemented in polling mode, so if last block of 
    payload &lt;128bit don't use HAL_CRYP_AESGCM_DMA otherwise TAG is incorrectly generated for GCM Encryption. */</comment>
    <comment type="block">/* Set the input and output addresses and start DMA transfer */</comment> 
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>%</operator> <literal type="number">16U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition> 
    <block>{<block_content>  
      <expr_stmt><expr><call><name>CRYP_SetDMAConfig</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>wordsize</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator><operator>+</operator><literal type="number">16U</literal><operator>-</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator> <operator>%</operator><literal type="number">16U</literal><operator>)</operator></expr> ;</expr_stmt> 
      
      <comment type="block">/* Set the input and output addresses and start DMA transfer, pCrypOutBuffPtr size should be %4*/</comment> 
      <expr_stmt><expr><call><name>CRYP_SetDMAConfig</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>wordsize</name><operator>/</operator><literal type="number">4U</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>   
  </block_content>}</block></if>
  <else>else <comment type="block">/*Size = 0*/</comment>
  <block>{<block_content>
    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Change the CRYP state and phase */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>         
  
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sets the payload phase in iterrupt mode
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module  
  * @retval state
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_GCMCCM_SetPayloadPhase_IT</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>  
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>loopcounter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>temp</name></decl>;</decl_stmt>  <comment type="block">/* Temporary CrypOutBuff */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>lastwordsize</name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>npblb</name></decl>;</decl_stmt>	
 <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if> 
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>outcount</name></decl>;</decl_stmt>  <comment type="block">/* Temporary CrypOutCount Value */</comment> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AES */</comment> 
  
  <comment type="block" format="doxygen">/***************************** Payload phase *******************************/</comment>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>     
    <comment type="block">/* Disable interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_INI</name><operator>|</operator> <name>CRYP_IT_OUTI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Change the CRYP state */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>      
  </block_content>}</block></if>    
  
  <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <literal type="number">4U</literal></expr>)</condition>
  <block>{<block_content> 
    <comment type="block">/* Write the input block in the IN FIFO */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>   
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt> 
    <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator> <operator>==</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>)</operator> <operator>&amp;&amp;</operator><operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>%</operator><literal type="number">16U</literal> <operator>)</operator><operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>     
      <comment type="block">/* Disable interrupts */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_INI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Call the input data transfer complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if> 
      <comment type="block">/*Call registered Input complete callback*/</comment>
      <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>InCpltCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/*Call legacy weak Input complete callback*/</comment>
      <expr_stmt><expr><call><name>HAL_CRYP_InCpltCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment>
    </block_content>}</block></if></if_stmt>    
    <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator></expr>)</condition>        
    <block>{<block_content>
      <comment type="block">/* Read the output block from the Output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer  */</comment> 
      <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>      
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>    
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>    
      <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>    
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>      
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>   
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator> <operator>==</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>%</operator><literal type="number">16U</literal> <operator>)</operator><operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>     
        <comment type="block">/* Disable interrupts */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_OUTI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Change the CRYP state */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
        
        <comment type="block">/* Disable CRYP */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Process unlocked */</comment>
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Call output transfer complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
        <comment type="block">/*Call registered Output complete callback*/</comment>
        <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>OutCpltCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <comment type="block">/*Call legacy weak Output complete callback*/</comment>
        <expr_stmt><expr><call><name>HAL_CRYP_OutCpltCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment>  
      </block_content>}</block></if></if_stmt>    
    </block_content>}</block></if></if_stmt>      
  </block_content>}</block></if>   
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>%</operator><literal type="number">16U</literal> <operator>)</operator><operator>!=</operator> <literal type="number">0U</literal></expr>)</condition>
  <block>{<block_content>   
    <comment type="block">/* Size should be %4 in word and %16 in byte  otherwise TAG will  be incorrectly generated for GCM Encryption &amp; CCM Decryption
    Workaround is implemented in polling mode, so if last block of 
    payload &lt;128bit don't use CRYP_AESGCM_Encrypt_IT otherwise TAG is incorrectly generated. */</comment>
    
       <comment type="block">/* Compute the number of padding bytes in last block of payload */</comment>
    <expr_stmt><expr><name>npblb</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator><operator>/</operator><literal type="number">16U</literal><operator>)</operator><operator>+</operator><literal type="number">1U</literal><operator>)</operator><operator>*</operator><literal type="number">16U</literal><operator>)</operator><operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator></expr>;</expr_stmt>
    
    <comment type="block">/* Number of valid words (lastwordsize) in last block */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>npblb</name><operator>%</operator><literal type="number">4U</literal><operator>)</operator> <operator>==</operator><literal type="number">0U</literal></expr>)</condition> 
    <block>{<block_content> 
      <expr_stmt><expr><name>lastwordsize</name> <operator>=</operator> <operator>(</operator><literal type="number">16U</literal><operator>-</operator><name>npblb</name><operator>)</operator><operator>/</operator><literal type="number">4U</literal></expr>;</expr_stmt>		
    </block_content>}</block></if>
    <else>else 
    <block>{<block_content>
      <expr_stmt><expr><name>lastwordsize</name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">16U</literal><operator>-</operator><name>npblb</name><operator>)</operator><operator>/</operator><literal type="number">4U</literal><operator>)</operator> <operator>+</operator><literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>	
    
    <comment type="block">/*  Last block optionally pad the data with zeros*/</comment>
    <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>loopcounter</name> <operator>&lt;</operator> <name>lastwordsize</name></expr>;</condition> <incr><expr><name>loopcounter</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <while>while<condition>(<expr><name>loopcounter</name> <operator>&lt;</operator> <literal type="number">4U</literal></expr> )</condition>
    <block>{<block_content> 
      <comment type="block">/* Pad the data with zeros to have a complete block */</comment>     
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <literal type="number">0x0U</literal></expr>;</expr_stmt>         
      <expr_stmt><expr><name>loopcounter</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_INI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name> <operator>&amp;</operator> <name>CRYP_FLAG_OFNE</name> <operator>)</operator> <operator>!=</operator> <literal type="number">0x0U</literal></expr>)</condition> 
    <block>{<block_content>
      <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>loopcounter</name> <operator>&lt;</operator> <literal type="number">4U</literal></expr>;</condition> <incr><expr><name>loopcounter</name><operator>++</operator></expr></incr>)</control>        
      <block>{<block_content>  
        <comment type="block">/* Read the output block from the output FIFO and put them in temporary buffer */</comment>
        <expr_stmt><expr><name>temp</name><operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt> 
        
        <comment type="block">/*get CrypOutBuff from temporary buffer  */</comment>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator><operator>)</operator><operator>=</operator><name>temp</name></expr>;</expr_stmt> 
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>   
      </block_content>}</block></for>     
    </block_content>}</block></if></if_stmt>         
    <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name> <operator>&gt;=</operator>  <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>              
      <comment type="block">/* Disable interrupts */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_OUTI</name><operator>|</operator><name>CRYP_IT_INI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Change the CRYP peripheral state */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
      
      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Call output transfer complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
      <comment type="block">/*Call registered Output complete callback*/</comment>
      <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>OutCpltCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/*Call legacy weak Output complete callback*/</comment>
      <expr_stmt><expr><call><name>HAL_CRYP_OutCpltCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment>  
    </block_content>}</block></if></if_stmt>   
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* Nothing to do */</comment>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment>
  
  <comment type="block">/* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer*/</comment> 
  <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator><operator>)</operator> <operator>=</operator><name>temp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator>   <operator>=</operator><name>temp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>    
  <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>      
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>temp</name>  <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt> 
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator>   <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt> 
  <comment type="block">/*Temporary CrypOutCount Value*/</comment>
  <expr_stmt><expr><name>outcount</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name></expr>;</expr_stmt>
  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name> <operator>&gt;=</operator>  <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>outcount</name><operator>*</operator><literal type="number">4U</literal><operator>)</operator> <operator>&gt;=</operator>  <name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator></expr> )</condition>
  <block>{<block_content>
    <comment type="block">/* Disable computation complete flag and errors interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>,<argument><expr><name>CRYP_IT_CCFIE</name><operator>|</operator><name>CRYP_IT_ERRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Change the CRYP state */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
    
    <comment type="block">/* Process unlocked */</comment>
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        <comment type="block">/* Call output transfer complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
        <comment type="block">/*Call registered Output complete callback*/</comment>
        <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>OutCpltCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <comment type="block">/*Call legacy weak Output complete callback*/</comment>
        <expr_stmt><expr><call><name>HAL_CRYP_OutCpltCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment>  
  </block_content>}</block></if>   
  
  <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <literal type="number">4U</literal></expr>)</condition>
  <block>{<block_content> 
    <comment type="block">/* Write the input block in the IN FIFO */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>   
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>  
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>==</operator>  <name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_AES_GCM_GMAC</name><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
      <comment type="block">/* Call Input transfer complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
      <comment type="block">/*Call registered Input complete callback*/</comment>
      <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>InCpltCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/*Call legacy weak Input complete callback*/</comment>
      <expr_stmt><expr><call><name>HAL_CRYP_InCpltCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment>      
    </block_content>}</block></if></if_stmt> 
  </block_content>}</block></if>
  <else>else <comment type="block">/* Last block of payload &lt; 128bit*/</comment>
  <block>{<block_content>    
    <comment type="block">/* Workaround not implemented, Size should be %4  otherwise Tag will  be incorrectly
    generated for GCM Encryption &amp; CCM Decryption. Workaround is implemented in polling mode, so if last block of 
    payload &lt;128bit don't use CRYP_Encrypt_IT otherwise TAG is incorrectly generated for GCM Encryption &amp; CCM Decryption. */</comment>  
    
    <comment type="block">/* Compute the number of padding bytes in last block of payload */</comment>
    <expr_stmt><expr><name>npblb</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator><operator>/</operator><literal type="number">16U</literal><operator>)</operator><operator>+</operator><literal type="number">1U</literal><operator>)</operator><operator>*</operator><literal type="number">16U</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator></expr>;</expr_stmt>
 
        <comment type="block">/* Number of valid words (lastwordsize) in last block */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>npblb</name><operator>%</operator><literal type="number">4U</literal><operator>)</operator> <operator>==</operator><literal type="number">0U</literal></expr>)</condition> 
    <block>{<block_content> 
      <expr_stmt><expr><name>lastwordsize</name> <operator>=</operator> <operator>(</operator><literal type="number">16U</literal><operator>-</operator><name>npblb</name><operator>)</operator><operator>/</operator><literal type="number">4U</literal></expr>;</expr_stmt>		
    </block_content>}</block></if>
    <else>else 
    <block>{<block_content>
      <expr_stmt><expr><name>lastwordsize</name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">16U</literal><operator>-</operator><name>npblb</name><operator>)</operator><operator>/</operator><literal type="number">4U</literal><operator>)</operator> <operator>+</operator><literal type="number">1U</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>	
    
    <comment type="block">/*  Last block optionally pad the data with zeros*/</comment>
    <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>loopcounter</name> <operator>&lt;</operator> <name>lastwordsize</name></expr>;</condition> <incr><expr><name>loopcounter</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <while>while<condition>(<expr><name>loopcounter</name> <operator>&lt;</operator> <literal type="number">4U</literal></expr> )</condition>
    <block>{<block_content> 
      <comment type="block">/* pad the data with zeros to have a complete block */</comment>     
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <literal type="number">0x0U</literal></expr>;</expr_stmt>         
      <expr_stmt><expr><name>loopcounter</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AES */</comment> 

</block_content>}</block></function> 


<comment type="block" format="doxygen">/**
  * @brief  Sets the header phase in polling mode
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module(Header &amp; HeaderSize)
  * @param  Timeout: Timeout value   
  * @retval state
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_GCMCCM_SetHeaderPhase</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>loopcounter</name></decl>;</decl_stmt>
  
  <comment type="block" format="doxygen">/***************************** Header phase for GCM/GMAC or CCM *********************************/</comment>
  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>  
    
    <comment type="block">/* Select header phase */</comment>
    <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_PHASE_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    
    <comment type="block">/* Enable the CRYP peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>%</operator><literal type="number">4U</literal> <operator>)</operator><operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content> 
      <comment type="block">/* HeaderSize %4, no padding */</comment> 
      <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><operator>(</operator><name>loopcounter</name> <operator>&lt;</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>loopcounter</name><operator>+=</operator><literal type="number">4U</literal></expr></incr>)</control>
      <block>{<block_content>      
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>
        
        <comment type="block">/* Wait for IFEM to be raised */</comment>
        <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnIFEMFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
        <block>{<block_content> 
          <comment type="block">/* Disable the CRYP peripheral clock */</comment>
          <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="block">/* Change state */</comment>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt> 
          
          <comment type="block">/* Process unlocked */</comment>          
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>          
      </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>   
      <comment type="block">/*Write header block in the IN FIFO without last block */</comment>
      <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><operator>(</operator><name>loopcounter</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name><operator>)</operator><operator>-</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>%</operator><literal type="number">4U</literal> <operator>)</operator><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>loopcounter</name><operator>+=</operator> <literal type="number">4U</literal></expr></incr>)</control>
      <block>{<block_content>    
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt> 
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>
        
        <comment type="block">/* Wait for IFEM to be raised */</comment>
        <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnIFEMFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
        <block>{<block_content> 
          <comment type="block">/* Disable the CRYP peripheral clock */</comment>
          <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="block">/* Change state */</comment>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt> 
          
          <comment type="block">/* Process unlocked */</comment>          
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <comment type="block">/*  Last block optionally pad the data with zeros*/</comment>
      <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><operator>(</operator><name>loopcounter</name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>%</operator><literal type="number">4U</literal> <operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>loopcounter</name><operator>++</operator></expr></incr>)</control>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>    
      </block_content>}</block></for>
      <while>while<condition>(<expr><name>loopcounter</name> <operator>&lt;</operator><literal type="number">4U</literal></expr> )</condition>
      <block>{<block_content> 
        <comment type="block">/* pad the data with zeros to have a complete block */</comment>     
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <literal type="number">0x0U</literal></expr>;</expr_stmt>         
        <expr_stmt><expr><name>loopcounter</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
      <comment type="block">/* Wait for CCF IFEM to be raised */</comment>
      <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnIFEMFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
      <block>{<block_content> 
        <comment type="block">/* Disable the CRYP peripheral clock */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Change state */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
        
        <comment type="block">/* Process unlocked */</comment>          
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>          
    </block_content>}</block></else></if_stmt>     
    <comment type="block">/* Wait until the complete message has been processed */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnBUSYFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
    <block>{<block_content> 
      <comment type="block">/* Disable the CRYP peripheral clock */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Change state */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
      
      <comment type="block">/* Process unlocked &amp; return error */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>          
      <return>return <expr><name>HAL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment> 
    
    <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_AES_GCM_GMAC</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Workaround 1 :only AES before re-enabling the IP, datatype can be configured.*/</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_DATATYPE</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      
      <comment type="block">/* Select header phase */</comment>
      <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_PHASE_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Enable the CRYP peripheral */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>%</operator><literal type="number">4U</literal> <operator>)</operator><operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>     
      <comment type="block">/* HeaderSize %4, no padding */</comment> 
      <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><operator>(</operator><name>loopcounter</name> <operator>&lt;</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>loopcounter</name><operator>+=</operator> <literal type="number">4U</literal></expr></incr>)</control>
      <block>{<block_content>       
        <comment type="block">/* Write the input block in the data input register */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        
        <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnCCFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
        <block>{<block_content> 
          <comment type="block">/* Disable the CRYP peripheral clock */</comment>
          <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="block">/* Change state */</comment>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
          
          <comment type="block">/* Process unlocked */</comment>          
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Clear CCF flag */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>         
      </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>   
      <comment type="block">/*Write header block in the IN FIFO without last block */</comment>
      <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><operator>(</operator><name>loopcounter</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name><operator>)</operator><operator>-</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>%</operator><literal type="number">4U</literal> <operator>)</operator><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>loopcounter</name><operator>+=</operator><literal type="number">4U</literal></expr></incr>)</control>
      <block>{<block_content>
        <comment type="block">/* Write the input block in the data input register */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt> 
        
        <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnCCFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
        <block>{<block_content> 
          <comment type="block">/* Disable the CRYP peripheral clock */</comment>
          <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="block">/* Change state */</comment>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
          
          <comment type="block">/* Process unlocked */</comment>          
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Clear CCF flag */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
      </block_content>}</block></for>
      <comment type="block">/*  Last block optionally pad the data with zeros*/</comment>
      <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><operator>(</operator><name>loopcounter</name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>%</operator><literal type="number">4U</literal> <operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>loopcounter</name><operator>++</operator></expr></incr>)</control>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>       
      </block_content>}</block></for>
      <while>while<condition>(<expr><name>loopcounter</name> <operator>&lt;</operator> <literal type="number">4U</literal></expr> )</condition>
      <block>{<block_content> 
        <comment type="block">/*Pad the data with zeros to have a complete block */</comment>      
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <literal type="number">0x0U</literal></expr>;</expr_stmt>              
        <expr_stmt><expr><name>loopcounter</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>    
      
      <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnCCFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
      <block>{<block_content> 
        <comment type="block">/* Disable the CRYP peripheral clock */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Change state */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt> 
        
        <comment type="block">/* Process unlocked */</comment>          
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* Clear CCF flag */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    </block_content>}</block></else></if_stmt>      
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment> 
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if> 
    <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_AES_GCM_GMAC</name></expr>)</condition>
    <block>{<block_content> 
      <comment type="block">/*Workaround 1: only AES, before re-enabling the IP, datatype can be configured.*/</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_DATATYPE</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      
      <comment type="block">/* Select header phase */</comment>
      <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_PHASE_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      
      <comment type="block">/* Enable the CRYP peripheral */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AES */</comment>     
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sets the header phase when using DMA in process
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module(Header &amp; HeaderSize)  
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_GCMCCM_SetHeaderPhase_DMA</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>count</name>  <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>loopcounter</name></decl>;</decl_stmt>
  
  <comment type="block" format="doxygen">/***************************** Header phase for GCM/GMAC or CCM *********************************/</comment>  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>  
    
    <comment type="block">/* Select header phase */</comment>
    <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_PHASE_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    
    <comment type="block">/* Enable the CRYP peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>%</operator><literal type="number">4U</literal> <operator>)</operator><operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content> 
      <comment type="block">/* HeaderSize %4, no padding */</comment> 
      <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><operator>(</operator><name>loopcounter</name> <operator>&lt;</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>loopcounter</name><operator>+=</operator><literal type="number">4U</literal></expr></incr>)</control>
      <block>{<block_content>      
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>
        
        <comment type="block">/* Wait for IFEM to be raised */</comment>
        <expr_stmt><expr><name>count</name> <operator>=</operator> <name>CRYP_TIMEOUT_GCMCCMHEADERPHASE</name></expr>;</expr_stmt>
        <do>do
        <block>{<block_content>
          <expr_stmt><expr><name>count</name><operator>--</operator></expr> ;</expr_stmt>
          <if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Disable the CRYP peripheral clock */</comment>
            <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <comment type="block">/* Change state */</comment>
            <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
            
            <comment type="block">/* Process unlocked */</comment>          
            <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <return>return <expr><name>HAL_ERROR</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        while<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>CRYP_FLAG_IFEM</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>        
      </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>   
      <comment type="block">/*Write header block in the IN FIFO without last block */</comment>
      <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><operator>(</operator><name>loopcounter</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name><operator>)</operator><operator>-</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>%</operator><literal type="number">4U</literal> <operator>)</operator><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>loopcounter</name><operator>+=</operator><literal type="number">4U</literal></expr></incr>)</control>
      <block>{<block_content>    
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt> 
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>
        
        <comment type="block">/* Wait for IFEM to be raised */</comment>
        <expr_stmt><expr><name>count</name> <operator>=</operator> <name>CRYP_TIMEOUT_GCMCCMHEADERPHASE</name></expr>;</expr_stmt>
        <do>do
        <block>{<block_content>
          <expr_stmt><expr><name>count</name><operator>--</operator></expr> ;</expr_stmt>
          <if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Disable the CRYP peripheral clock */</comment>
            <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <comment type="block">/* Change state */</comment>
            <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
            
            <comment type="block">/* Process unlocked */</comment>          
            <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <return>return <expr><name>HAL_ERROR</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        while<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>CRYP_FLAG_IFEM</name></expr></argument>)</argument_list></call></expr>)</condition>;</do> 
      </block_content>}</block></for>
      <comment type="block">/*  Last block optionally pad the data with zeros*/</comment>
      <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><operator>(</operator><name>loopcounter</name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>%</operator><literal type="number">4U</literal> <operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>loopcounter</name><operator>++</operator></expr></incr>)</control>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>    
      </block_content>}</block></for>
      <while>while<condition>(<expr><name>loopcounter</name> <operator>&lt;</operator> <literal type="number">4U</literal></expr> )</condition>
      <block>{<block_content> 
        <comment type="block">/* Pad the data with zeros to have a complete block */</comment>     
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <literal type="number">0x0U</literal></expr>;</expr_stmt>         
        <expr_stmt><expr><name>loopcounter</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
      <comment type="block">/* Wait for IFEM to be raised */</comment>
      <expr_stmt><expr><name>count</name> <operator>=</operator> <name>CRYP_TIMEOUT_GCMCCMHEADERPHASE</name></expr>;</expr_stmt>
      <do>do
      <block>{<block_content>
        <expr_stmt><expr><name>count</name><operator>--</operator></expr> ;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Disable the CRYP peripheral clock */</comment>
          <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="block">/* Change state */</comment>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt> 
          
          <comment type="block">/* Process unlocked */</comment>          
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block>
      while<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>CRYP_FLAG_IFEM</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>         
    </block_content>}</block></else></if_stmt>     
    <comment type="block">/* Wait until the complete message has been processed */</comment>
    <expr_stmt><expr><name>count</name> <operator>=</operator> <name>CRYP_TIMEOUT_GCMCCMHEADERPHASE</name></expr>;</expr_stmt>
    <do>do
    <block>{<block_content>
      <expr_stmt><expr><name>count</name><operator>--</operator></expr> ;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* Disable the CRYP peripheral clock */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Change state */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt> 
        
        <comment type="block">/* Process unlocked */</comment>          
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    while<condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>CRYP_FLAG_BUSY</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>     
    
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment> 
    
    <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_AES_GCM_GMAC</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Workaround 1: only AES, before re-enabling the IP, datatype can be configured.*/</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_DATATYPE</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      
      <comment type="block">/* Select header phase */</comment>
      <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_PHASE_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      
      <comment type="block">/* Enable the CRYP peripheral */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>%</operator><literal type="number">4U</literal> <operator>)</operator><operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>     
      <comment type="block">/* HeaderSize %4, no padding */</comment> 
      <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><operator>(</operator><name>loopcounter</name> <operator>&lt;</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>loopcounter</name><operator>+=</operator><literal type="number">4U</literal></expr></incr>)</control>
      <block>{<block_content>       
        <comment type="block">/* Write the input block in the data input register */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        
        <comment type="block">/*Wait on CCF flag*/</comment> 
        <expr_stmt><expr><name>count</name> <operator>=</operator> <name>CRYP_TIMEOUT_GCMCCMHEADERPHASE</name></expr>;</expr_stmt>
        <do>do
        <block>{<block_content>
          <expr_stmt><expr><name>count</name><operator>--</operator></expr> ;</expr_stmt>
          <if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Disable the CRYP peripheral clock */</comment>
            <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <comment type="block">/* Change state */</comment>
            <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt> 
            
            <comment type="block">/* Process unlocked */</comment>          
            <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <return>return <expr><name>HAL_ERROR</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        while<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>AES_SR_CCF</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        
        <comment type="block">/* Clear CCF flag */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>         
      </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>   
      <comment type="block">/*Write header block in the IN FIFO without last block */</comment>
      <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><operator>(</operator><name>loopcounter</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name><operator>)</operator><operator>-</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>%</operator><literal type="number">4U</literal> <operator>)</operator><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>loopcounter</name><operator>+=</operator><literal type="number">4U</literal></expr></incr>)</control>
      <block>{<block_content>
        <comment type="block">/* Write the Input block in the Data Input register */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>  
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt> 
        
        <comment type="block">/*Wait on CCF flag*/</comment> 
        <expr_stmt><expr><name>count</name> <operator>=</operator> <name>CRYP_TIMEOUT_GCMCCMHEADERPHASE</name></expr>;</expr_stmt>
        <do>do
        <block>{<block_content>
          <expr_stmt><expr><name>count</name><operator>--</operator></expr> ;</expr_stmt>
          <if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
          <block>{<block_content>
            <comment type="block">/* Disable the CRYP peripheral clock */</comment>
            <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <comment type="block">/* Change state */</comment>
            <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt> 
            
            <comment type="block">/* Process unlocked */</comment>          
            <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <return>return <expr><name>HAL_ERROR</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        while<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>AES_SR_CCF</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        
        <comment type="block">/* Clear CCF flag */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
      </block_content>}</block></for>
      <comment type="block">/*  Last block optionally pad the data with zeros*/</comment>
      <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><operator>(</operator><name>loopcounter</name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>%</operator><literal type="number">4U</literal> <operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>loopcounter</name><operator>++</operator></expr></incr>)</control>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>       
      </block_content>}</block></for>
      <while>while<condition>(<expr><name>loopcounter</name> <operator>&lt;</operator><literal type="number">4U</literal></expr> )</condition>
      <block>{<block_content> 
        <comment type="block">/* Pad the data with zeros to have a complete block */</comment>      
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <literal type="number">0x0U</literal></expr>;</expr_stmt>              
        <expr_stmt><expr><name>loopcounter</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>    
      
      <comment type="block">/*Wait on CCF flag*/</comment> 
      <expr_stmt><expr><name>count</name> <operator>=</operator> <name>CRYP_TIMEOUT_GCMCCMHEADERPHASE</name></expr>;</expr_stmt>
      <do>do
      <block>{<block_content>
        <expr_stmt><expr><name>count</name><operator>--</operator></expr> ;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Disable the CRYP peripheral clock */</comment>
          <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <comment type="block">/* Change state */</comment>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
          
          <comment type="block">/* Process unlocked */</comment>          
          <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
          <return>return <expr><name>HAL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block>
      while<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>AES_SR_CCF</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
      
      <comment type="block">/* Clear CCF flag */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    </block_content>}</block></else></if_stmt>      
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP  */</comment> 
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if> 
    <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_AES_GCM_GMAC</name></expr>)</condition>
    <block>{<block_content> 
      <comment type="block">/*Workaround 1: only AES, before re-enabling the IP, datatype can be configured.*/</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_DATATYPE</name></expr></argument>, <argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>DataType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      
      <comment type="block">/* Select header phase */</comment>
      <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_PHASE_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      
      <comment type="block">/* Enable the CRYP peripheral */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AES */</comment>     
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Return function status */</comment>
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Sets the header phase in interrupt mode
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module(Header &amp; HeaderSize)
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_GCMCCM_SetHeaderPhase_IT</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>loopcounter</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AES</name></expr></argument>)</argument_list></call></expr></cpp:if> 
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>lastwordsize</name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>npblb</name></decl>;</decl_stmt>	
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
  <comment type="block" format="doxygen">/***************************** Header phase *********************************/</comment>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>==</operator>  <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name></expr>)</condition>
  <block>{<block_content>     
    <comment type="block">/* Disable interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_INI</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Disable the CRYP peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Set the phase */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>
    
    <comment type="block">/* Select payload phase once the header phase is performed */</comment>
    <expr_stmt><expr><call><name>CRYP_SET_PHASE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_PHASE_PAYLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    
    <comment type="block">/* Enable Interrupts */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_INI</name> <operator>|</operator> <name>CRYP_IT_OUTI</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Enable the CRYP peripheral */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  </block_content>}</block></if>    
  <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <literal type="number">4U</literal></expr>)</condition>
    
  <block>{<block_content> <comment type="block">/* HeaderSize %4, no padding */</comment>     
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>       
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr>  ;</expr_stmt>       
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>           
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>      
    <comment type="block">/*  Last block optionally pad the data with zeros*/</comment>
    <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>loopcounter</name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>%</operator><literal type="number">4U</literal> <operator>)</operator></expr>;</condition> <incr><expr><name>loopcounter</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name><operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>    
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <while>while<condition>(<expr><name>loopcounter</name> <operator>&lt;</operator><literal type="number">4U</literal></expr> )</condition>
    <block>{<block_content> 
      <comment type="block">/* Pad the data with zeros to have a complete block */</comment>     
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name> <operator>=</operator> <literal type="number">0x0U</literal></expr>;</expr_stmt>         
      <expr_stmt><expr><name>loopcounter</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>         
  </block_content>}</block></else></if_stmt>          
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment>  
  
  <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>==</operator>  <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Set the phase */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Phase</name></name> <operator>=</operator> <name>CRYP_PHASE_PROCESS</name></expr>;</expr_stmt>
    
    <comment type="block">/*  Payload phase not supported in CCM AES2  */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_AES_GCM_GMAC</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Select payload phase once the header phase is performed */</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_GCMPH</name></expr></argument>, <argument><expr><name>CRYP_PHASE_PAYLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_AES_CCM</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Increment CrypHeaderCount to pass in CRYP_GCMCCM_SetPayloadPhase_IT */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr>;</expr_stmt>    
    </block_content>}</block></if></if_stmt>            
    <comment type="block">/* Write the payload Input block in the IN FIFO */</comment> 
    <if_stmt><if>if<condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition>
    <block>{<block_content>     
      <comment type="block">/* Disable interrupts */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE_IT</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_IT_CCFIE</name><operator>|</operator> <name>CRYP_IT_ERRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Change the CRYP state */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
      
      <comment type="block">/* Process unlocked */</comment>
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>            
    <if type="elseif">else if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>&gt;=</operator> <literal type="number">16U</literal></expr>)</condition>
    <block>{<block_content>       
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>   
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
      
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>==</operator>  <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>/</operator><literal type="number">4U</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator><operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name> <operator>%</operator><literal type="number">16U</literal> <operator>)</operator><operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>       
      <block>{<block_content>    
        <comment type="block">/* Call the input data transfer complete callback */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
        <comment type="block">/*Call registered Input complete callback*/</comment>
        <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>InCpltCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <comment type="block">/*Call legacy weak Input complete callback*/</comment>
        <expr_stmt><expr><call><name>HAL_CRYP_InCpltCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment>
      </block_content>}</block></if></if_stmt> 
    </block_content>}</block></if>
    <else>else <comment type="block">/* Size &lt; 4 words  : first block is the last block*/</comment>
    <block>{<block_content>
      <comment type="block">/* Workaround not implemented, Size should be %4  otherwise Tag will  be incorrectly
      generated for GCM Encryption. Workaround is implemented in polling mode, so if last block of 
      payload &lt;128bit don't use CRYP_Encrypt_IT otherwise TAG is incorrectly generated for GCM Encryption. */</comment>
      
      <comment type="block">/* Compute the number of padding bytes in last block of payload */</comment>
      <expr_stmt><expr><name>npblb</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator><operator>/</operator><literal type="number">16U</literal><operator>)</operator><operator>+</operator><literal type="number">1U</literal><operator>)</operator><operator>*</operator><literal type="number">16U</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator></expr>;</expr_stmt>
      
      <comment type="block">/* Number of valid words (lastwordsize) in last block */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>npblb</name> <operator>%</operator> <literal type="number">4U</literal><operator>)</operator> <operator>==</operator><literal type="number">0U</literal></expr>)</condition> 
      <block>{<block_content> 
        <expr_stmt><expr><name>lastwordsize</name> <operator>=</operator> <operator>(</operator><literal type="number">16U</literal><operator>-</operator><name>npblb</name><operator>)</operator><operator>/</operator><literal type="number">4U</literal></expr>;</expr_stmt>		
      </block_content>}</block></if>
      <else>else 
      <block>{<block_content>
        <expr_stmt><expr><name>lastwordsize</name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">16U</literal><operator>-</operator><name>npblb</name><operator>)</operator><operator>/</operator><literal type="number">4U</literal><operator>)</operator> <operator>+</operator><literal type="number">1U</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>	
      
      <comment type="block">/*  Last block optionally pad the data with zeros*/</comment>
      <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>loopcounter</name> <operator>&lt;</operator> <name>lastwordsize</name></expr>;</condition> <incr><expr><name>loopcounter</name><operator>++</operator></expr></incr>)</control>
      <block>{<block_content>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      <while>while<condition>(<expr><name>loopcounter</name> <operator>&lt;</operator><literal type="number">4U</literal></expr> )</condition>
      <block>{<block_content> 
        <comment type="block">/* Pad the data with zeros to have a complete block */</comment>     
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <literal type="number">0x0U</literal></expr>;</expr_stmt>         
        <expr_stmt><expr><name>loopcounter</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>  
  <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <literal type="number">4U</literal></expr>)</condition>
  <block>{<block_content> 
    <comment type="block">/* Write the input block in the IN FIFO */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr>;</expr_stmt>   
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr>;</expr_stmt>         
  </block_content>}</block></if>
  <else>else <comment type="block">/*HeaderSize &lt; 4 or HeaderSize &gt;4 &amp; HeaderSize %4 != 0*/</comment>
  <block>{<block_content> 
    <comment type="block">/*  Last block optionally pad the data with zeros*/</comment>
    <for>for<control>(<init><expr><name>loopcounter</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>loopcounter</name> <operator>&lt;</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>HeaderSize</name></name> <operator>%</operator><literal type="number">4U</literal> <operator>)</operator></expr>;</condition> <incr><expr><name>loopcounter</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Header</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>)</operator></expr>;</expr_stmt>   
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypHeaderCount</name></name><operator>++</operator></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <while>while<condition>(<expr><name>loopcounter</name> <operator>&lt;</operator><literal type="number">4U</literal></expr> )</condition>
    <block>{<block_content> 
      <comment type="block">/* pad the data with zeros to have a complete block */</comment>     
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <literal type="number">0x0U</literal></expr>;</expr_stmt>         
      <expr_stmt><expr><name>loopcounter</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>      
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment> 
</block_content>}</block></function>           


<comment type="block" format="doxygen">/**
  * @brief  Workaround used for GCM/CCM mode. 
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @param  Timeout: specify Timeout value 
  * @retval None
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CRYP_Workaround</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter> )</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>lastwordsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>npblb</name></decl>;</decl_stmt>	  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if> 
  <decl_stmt><decl><type><name>uint32_t</name></type>  <name>iv1temp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>  <name><name>temp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>  <name><name>temp2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CRYP */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>intermediate_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>index</name></decl>;</decl_stmt>
  
  <comment type="block">/* Compute the number of padding bytes in last block of payload */</comment> 
  <expr_stmt><expr><name>npblb</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator><operator>/</operator><literal type="number">16U</literal><operator>)</operator><operator>+</operator><literal type="number">1U</literal><operator>)</operator><operator>*</operator><literal type="number">16U</literal><operator>)</operator><operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Number of valid words (lastwordsize) in last block */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>npblb</name><operator>%</operator><literal type="number">4U</literal><operator>)</operator> <operator>==</operator><literal type="number">0U</literal></expr>)</condition> 
  <block>{<block_content> <expr_stmt><expr><name>lastwordsize</name> <operator>=</operator> <operator>(</operator><literal type="number">16U</literal><operator>-</operator><name>npblb</name><operator>)</operator><operator>/</operator><literal type="number">4U</literal></expr>;</expr_stmt>		
  </block_content>}</block></if>
  <else>else 
  <block>{<block_content><expr_stmt><expr><name>lastwordsize</name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">16U</literal><operator>-</operator><name>npblb</name><operator>)</operator><operator>/</operator><literal type="number">4U</literal><operator>)</operator> <operator>+</operator><literal type="number">1U</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>    	
  
  <comment type="block">/* Workaround 2, case GCM encryption */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hcryp</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>Algorithm</name></name> <operator>==</operator> <name>CRYP_AES_GCM</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>CRYP_CR_ALGODIR</name><operator>)</operator> <operator>==</operator> <name>CRYP_OPERATINGMODE_ENCRYPT</name></expr>)</condition>
    <block>{<block_content><comment type="block">/*Workaround in order to properly compute authentication tags while doing
      a GCM encryption with the last block of payload size inferior to 128 bits*/</comment>
      <comment type="block">/* Disable CRYP to start the final phase */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/*Load CRYP_IV1R register content in a temporary variable. Decrement the value
      by 1 and reinsert the result in CRYP_IV1R register*/</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1RR</name></name> <operator>=</operator> <literal type="number">0x5U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_ALGOMODE</name></expr></argument>, <argument><expr><name>CRYP_AES_CTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      
      <comment type="block">/* Enable CRYP to start the final phase */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*  Last block optionally pad the data with zeros*/</comment>    
    <for>for<control>(<init><expr><name>index</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>lastwordsize</name></expr>;</condition> <incr><expr><name>index</name> <operator>++</operator></expr></incr>)</control>        
    <block>{<block_content>
      <comment type="block">/* Write the last input block in the IN FIFO */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>    
    <while>while<condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">4U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Pad the data with zeros to have a complete block */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt> 
    </block_content>}</block></while>   
    <comment type="block">/* Wait for OFNE flag to be raised */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnOFNEFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
    <block>{<block_content> 
      <comment type="block">/* Disable the CRYP peripheral clock */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Change state */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
      
      <comment type="block">/* Process Unlocked */</comment>          
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
      <comment type="block">/*Call registered error callback*/</comment>
      <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/*Call legacy weak error callback*/</comment>
      <expr_stmt><expr><call><name>HAL_CRYP_ErrorCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment> 
    </block_content>}</block></if></if_stmt>    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name> <operator>&amp;</operator> <name>CRYP_FLAG_OFNE</name> <operator>)</operator> <operator>!=</operator> <literal type="number">0x0U</literal></expr>)</condition>
    <block>{<block_content>
      <for>for<control>(<init><expr><name>index</name><operator>=</operator><literal type="number">0U</literal></expr>;</init> <condition><expr><name>index</name><operator>&lt;</operator> <literal type="number">4U</literal></expr>;</condition><incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>        
      <block>{<block_content> 
        <comment type="block">/* Read the output block from the output FIFO */</comment>
        <expr_stmt><expr><name><name>intermediate_data</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt> 
        
        <comment type="block">/* Intermediate data buffer to be used in for the workaround*/</comment>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator><operator>)</operator><operator>=</operator><name><name>intermediate_data</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>   
      </block_content>}</block></for>     
    </block_content>}</block></if></if_stmt>  
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>CRYP_CR_ALGODIR</name><operator>)</operator> <operator>==</operator> <name>CRYP_OPERATINGMODE_ENCRYPT</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/*workaround in order to properly compute authentication tags while doing
      a GCM encryption with the last block of payload size inferior to 128 bits*/</comment>
      <comment type="block">/* Change the AES mode to GCM mode and Select Final phase */</comment>
      <comment type="block">/* configured  CHMOD GCM   */</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_ALGOMODE</name></expr></argument>, <argument><expr><name>CRYP_AES_GCM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      
      <comment type="block">/* configured  final phase  */</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_GCM_CCMPH</name></expr></argument>, <argument><expr><name>CRYP_PHASE_FINAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      
      <for>for <control>(<init><expr><name>index</name><operator>=</operator><literal type="number">0U</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>lastwordsize</name></expr>;</condition> <incr><expr><name>index</name> <operator>++</operator></expr></incr>)</control>
      <block>{<block_content>
        <comment type="block">/*Write the intermediate_data in the IN FIFO */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name><operator>=</operator><name><name>intermediate_data</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>    
      <while>while<condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">4U</literal></expr>)</condition>          
      <block>{<block_content>
        <comment type="block">/* Pad the data with zeros to have a complete block */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <literal type="number">0x0U</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt> 
      </block_content>}</block></while>      
      <comment type="block">/* Wait for OFNE flag to be raised */</comment>
      <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnOFNEFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
      <block>{<block_content> 
        <comment type="block">/* Disable the CRYP peripheral clock */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Change state */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
        
        <comment type="block">/* Process unlocked */</comment>          
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if> 
      <comment type="block">/*Call registered error callback*/</comment>
      <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/*Call legacy weak error callback*/</comment>
      <expr_stmt><expr><call><name>HAL_CRYP_ErrorCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment> 
      </block_content>}</block></if></if_stmt> 
      
      <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name> <operator>&amp;</operator> <name>CRYP_FLAG_OFNE</name> <operator>)</operator> <operator>!=</operator> <literal type="number">0x0U</literal></expr>)</condition> 
      <block>{<block_content>  
        <for>for<control>( <init><expr><name>index</name><operator>=</operator><literal type="number">0U</literal></expr>;</init> <condition><expr><name>index</name><operator>&lt;</operator> <literal type="number">4U</literal></expr>;</condition><incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
          <expr_stmt><expr><name><name>intermediate_data</name><index>[<expr><name>index</name></expr>]</index></name><operator>=</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt>
        </block_content>}</block></for>    
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <comment type="block">/* End of GCM encryption */</comment>
  <else>else<block>{<block_content>    <comment type="block">/* Workaround 2, case CCM decryption, in order to properly compute
    authentication tags while doing a CCM decryption with the last block
    of payload size inferior to 128 bits*/</comment>
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>CRYP_CR_ALGODIR</name><operator>)</operator> <operator>==</operator> <name>CRYP_OPERATINGMODE_DECRYPT</name></expr>)</condition>      
    <block>{<block_content>
      <expr_stmt><expr><name>iv1temp</name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CSGCMCCM7R</name></name></expr>;</expr_stmt> 
      
      <comment type="block">/* Disable CRYP to start the final phase */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator>  <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CSGCMCCM0R</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator>  <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CSGCMCCM1R</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator>  <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CSGCMCCM2R</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator>  <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CSGCMCCM3R</name></name></expr>;</expr_stmt>
      
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>IV1RR</name></name><operator>=</operator> <name>iv1temp</name></expr>;</expr_stmt>
      
      <comment type="block">/* Configured  CHMOD CTR   */</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_ALGOMODE</name></expr></argument>, <argument><expr><name>CRYP_AES_CTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
      
      <comment type="block">/* Enable CRYP to start the final phase */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_ENABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*  Last block optionally pad the data with zeros*/</comment> 
    <for>for<control>(<init><expr><name>index</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>lastwordsize</name></expr>;</condition> <incr><expr><name>index</name> <operator>++</operator></expr></incr>)</control>        
    <block>{<block_content>
      <comment type="block">/* Write the last Input block in the IN FIFO */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>    
    <while>while<condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">4U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Pad the data with zeros to have a complete block */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt> 
    </block_content>}</block></while>
    <comment type="block">/* Wait for OFNE flag to be raised */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnOFNEFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
    <block>{<block_content> 
      <comment type="block">/* Disable the CRYP peripheral clock */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Change state */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt> 
      
      <comment type="block">/* Process Unlocked */</comment>          
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if> 
      <comment type="block">/*Call registered error callback*/</comment>
      <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/*Call legacy weak error callback*/</comment>
      <expr_stmt><expr><call><name>HAL_CRYP_ErrorCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment> 
    </block_content>}</block></if></if_stmt>    
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name> <operator>&amp;</operator> <name>CRYP_FLAG_OFNE</name> <operator>)</operator> <operator>!=</operator> <literal type="number">0x0U</literal></expr>)</condition>
    <block>{<block_content>
      <for>for<control>(<init><expr><name>index</name><operator>=</operator><literal type="number">0U</literal></expr>;</init> <condition><expr><name>index</name><operator>&lt;</operator> <literal type="number">4U</literal></expr>;</condition><incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>        
      <block>{<block_content>  
        <comment type="block">/* Read the Output block from the Output FIFO */</comment>
        <expr_stmt><expr><name><name>intermediate_data</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUT</name></name></expr>;</expr_stmt> 
        
        <comment type="block">/*intermediate data buffer to be used in for the workaround*/</comment>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator><operator>)</operator><operator>=</operator><name><name>intermediate_data</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt>   
      </block_content>}</block></for>     
    </block_content>}</block></if></if_stmt> 
    
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>CRYP_CR_ALGODIR</name><operator>)</operator> <operator>==</operator> <name>CRYP_OPERATINGMODE_DECRYPT</name></expr>)</condition>      
    <block>{<block_content>     
      <expr_stmt><expr><name><name>temp2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator>  <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CSGCMCCM0R</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>temp2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator>  <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CSGCMCCM1R</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>temp2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator>  <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CSGCMCCM2R</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>temp2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator>  <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CSGCMCCM3R</name></name></expr>;</expr_stmt>
      
      <comment type="block">/* configured  CHMOD CCM   */</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_ALGOMODE</name></expr></argument>, <argument><expr><name>CRYP_AES_CCM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      
      <comment type="block">/* configured  Header phase  */</comment>
      <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>CRYP_CR_GCM_CCMPH</name></expr></argument>, <argument><expr><name>CRYP_PHASE_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      
      <comment type="block">/*set to zero the bits corresponding to the padded bits*/</comment>
      <for>for<control>(<init><expr><name>index</name> <operator>=</operator> <name>lastwordsize</name></expr>;</init> <condition><expr><name>index</name><operator>&lt;</operator><literal type="number">4U</literal></expr>;</condition> <incr><expr><name>index</name> <operator>++</operator></expr></incr>)</control>        
      <block>{<block_content>
        <expr_stmt><expr><name><name>intermediate_data</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator><literal type="number">0U</literal></expr>;</expr_stmt>
      </block_content>}</block></for>     
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>npblb</name> <operator>%</operator><literal type="number">4U</literal><operator>)</operator><operator>==</operator><literal type="number">1U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>intermediate_data</name><index>[<expr><name>lastwordsize</name><operator>-</operator><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFFFFFF00U</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>npblb</name> <operator>%</operator><literal type="number">4U</literal><operator>)</operator><operator>==</operator><literal type="number">2U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>intermediate_data</name><index>[<expr><name>lastwordsize</name><operator>-</operator><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFFFF0000U</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>npblb</name> <operator>%</operator><literal type="number">4U</literal><operator>)</operator><operator>==</operator><literal type="number">3U</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>intermediate_data</name><index>[<expr><name>lastwordsize</name><operator>-</operator><literal type="number">1U</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFF000000U</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <for>for<control>(<init><expr><name>index</name><operator>=</operator><literal type="number">0U</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <literal type="number">4U</literal></expr> ;</condition> <incr><expr><name>index</name> <operator>++</operator></expr></incr>)</control>        
      <block>{<block_content>               
        <expr_stmt><expr><name><name>intermediate_data</name><index>[<expr><name>index</name></expr>]</index></name> <operator>^=</operator>  <name><name>temp</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>intermediate_data</name><index>[<expr><name>index</name></expr>]</index></name> <operator>^=</operator>  <name><name>temp2</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt> 
      </block_content>}</block></for>
      <for>for<control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <literal type="number">4U</literal></expr>;</condition> <incr><expr><name>index</name> <operator>++</operator></expr></incr>)</control>        
      <block>{<block_content>
        <comment type="block">/* Write the last Input block in the IN FIFO */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DIN</name></name>  <operator>=</operator> <name><name>intermediate_data</name><index>[<expr><name>index</name></expr>]</index></name></expr> ;</expr_stmt>
      </block_content>}</block></for> 
      
      <comment type="block">/* Wait for BUSY flag to be raised */</comment>
      <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnBUSYFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
      <block>{<block_content> 
        <comment type="block">/* Disable the CRYP peripheral clock */</comment>
        <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Change state */</comment>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>
        
        <comment type="block">/* Process Unlocked */</comment>          
        <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if> 
      <comment type="block">/*Call registered error callback*/</comment>
      <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/*Call legacy weak error callback*/</comment>
      <expr_stmt><expr><call><name>HAL_CRYP_ErrorCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment> 
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt> <comment type="block">/* End of CCM WKA*/</comment>  
  
  <comment type="block">/* Process Unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment>
  
  <comment type="block">/*Workaround 2: case GCM encryption, during payload phase and before inserting 
  the last block of paylaod, which size is inferior to  128 bits  */</comment>   
  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>AES_CR_MODE</name><operator>)</operator> <operator>==</operator> <name>CRYP_OPERATINGMODE_ENCRYPT</name></expr>)</condition>    
  <block>{<block_content>
    <comment type="block">/* configured  CHMOD CTR   */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_CHMOD</name></expr></argument>, <argument><expr><name>CRYP_AES_CTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  </block_content>}</block></if></if_stmt> 
  <comment type="block">/*  last block optionally pad the data with zeros*/</comment>    
  <for>for<control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>lastwordsize</name></expr>;</condition> <incr><expr><name>index</name> <operator>++</operator></expr></incr>)</control>        
  <block>{<block_content>
    <comment type="block">/* Write the last Input block in the IN FIFO */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypInBuffPtr</name></name> <operator>+</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypInCount</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>    
  <while>while<condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">4U</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* pad the data with zeros to have a complete block */</comment>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt> 
  </block_content>}</block></while>   
  <comment type="block">/* Wait for CCF flag to be raised */</comment>
  <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnCCFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
  <block>{<block_content> 
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>        
    <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if> 
      <comment type="block">/*Call registered error callback*/</comment>
      <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/*Call legacy weak error callback*/</comment>
      <expr_stmt><expr><call><name>HAL_CRYP_ErrorCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment> 
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Clear CCF Flag */</comment>
  <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <for>for<control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>index</name><operator>&lt;</operator> <literal type="number">4U</literal></expr>;</condition><incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>        
  <block>{<block_content>  
    <comment type="block">/* Read the Output block from the Output FIFO */</comment>  
    <expr_stmt><expr><name><name>intermediate_data</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt> 
    
    <comment type="block">/*intermediate data buffer to be used in  the workaround*/</comment>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>pCrypOutBuffPtr</name></name> <operator>+</operator> <operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>)</operator><operator>)</operator><operator>=</operator> <name><name>intermediate_data</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>CrypOutCount</name></name><operator>++</operator></expr>;</expr_stmt> 
  </block_content>}</block></for>  
  
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;</operator> <name>AES_CR_MODE</name><operator>)</operator> <operator>==</operator> <name>CRYP_OPERATINGMODE_ENCRYPT</name></expr>)</condition> 
  <block>{<block_content>    
    <comment type="block">/* configured  CHMOD GCM   */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_CHMOD</name></expr></argument>, <argument><expr><name>CRYP_AES_GCM_GMAC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Select final phase */</comment>
    <expr_stmt><expr><call><name>MODIFY_REG</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>CR</name></name></expr></argument>, <argument><expr><name>AES_CR_GCMPH</name></expr></argument>, <argument><expr><name>CRYP_PHASE_FINAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       
    
    <comment type="block">/*Write the intermediate_data in the IN FIFO */</comment>   
    <for>for<control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>lastwordsize</name></expr>;</condition> <incr><expr><name>index</name> <operator>++</operator></expr></incr>)</control>        
    <block>{<block_content>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name>  <operator>=</operator> <name><name>intermediate_data</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>    
    <while>while<condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">4U</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* pad the data with zeros to have a complete block */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DINR</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt> 
    </block_content>}</block></while>
    <comment type="block">/* Wait for CCF flag to be raised */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>CRYP_WaitOnCCFlag</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>Timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>  
    <block>{<block_content> 
      <comment type="block">/* Disable the CRYP peripheral clock */</comment>
      <expr_stmt><expr><call><name>__HAL_CRYP_DISABLE</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Change state */</comment>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCode</name></name> <operator>|=</operator> <name>HAL_CRYP_ERROR_TIMEOUT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hcryp</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_CRYP_STATE_READY</name></expr>;</expr_stmt>  
      
      <comment type="block">/* Process Unlocked */</comment>          
      <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_CRYP_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1U</literal><operator>)</operator></expr></cpp:if> 
      <comment type="block">/*Call registered error callback*/</comment>
      <expr_stmt><expr><call><name><name>hcryp</name><operator>-&gt;</operator><name>ErrorCallback</name></name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/*Call legacy weak error callback*/</comment>
      <expr_stmt><expr><call><name>HAL_CRYP_ErrorCallback</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_HAL_CRYP_REGISTER_CALLBACKS */</comment> 
    </block_content>}</block></if></if_stmt>      
    <comment type="block">/* Clear CCF Flag */</comment>
    <expr_stmt><expr><call><name>__HAL_CRYP_CLEAR_FLAG</name><argument_list>(<argument><expr><name>hcryp</name></expr></argument>, <argument><expr><name>CRYP_CCF_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <for>for<control>( <init><expr><name>index</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</init> <condition><expr><name>index</name><operator>&lt;</operator> <literal type="number">4U</literal></expr>;</condition><incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
      <expr_stmt><expr><name><name>intermediate_data</name><index>[<expr><name>index</name></expr>]</index></name><operator>=</operator><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>DOUTR</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt><comment type="block">/*End of Workaround 2*/</comment> 
  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP */</comment>      
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AES or GCM CCM defined*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CRYP_CR_ALGOMODE_AES_GCM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Handle CRYP hardware block Timeout when waiting for IFEM flag to be raised.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.      
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_WaitOnIFEMFlag</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  
  <comment type="block">/* Get timeout */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
  <while>while<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>CRYP_FLAG_IFEM</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator><operator>||</operator><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content> 
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>  
  <return>return <expr><name>HAL_OK</name></expr>;</return> 
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* GCM CCM defined*/</comment>
<comment type="block" format="doxygen">/**
  * @brief  Handle CRYP hardware block Timeout when waiting for BUSY flag to be raised.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.      
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_WaitOnBUSYFlag</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  
  <comment type="block">/* Get timeout */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
  <while>while<condition>(<expr><call><name>HAL_IS_BIT_SET</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>CRYP_FLAG_BUSY</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator><operator>||</operator><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>      
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>HAL_OK</name></expr>;</return> 
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
  * @brief  Handle CRYP hardware block Timeout when waiting for OFNE flag to be raised.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.      
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_WaitOnOFNEFlag</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  
  <comment type="block">/* Get timeout */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
  <while>while<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>CRYP_FLAG_OFNE</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator><operator>||</operator><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>       
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>HAL_OK</name></expr>;</return> 
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AES */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Handle CRYP hardware block Timeout when waiting for CCF flag to be raised.
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.      
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */</comment>
<function><type><specifier>static</specifier> <name>HAL_StatusTypeDef</name></type> <name>CRYP_WaitOnCCFlag</name><parameter_list>(<parameter><decl><type><name>CRYP_HandleTypeDef</name> <modifier>*</modifier></type><name>hcryp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tickstart</name></decl>;</decl_stmt>
  
  <comment type="block">/* Get timeout */</comment>
  <expr_stmt><expr><name>tickstart</name> <operator>=</operator> <call><name>HAL_GetTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
  <while>while<condition>(<expr><call><name>HAL_IS_BIT_CLR</name><argument_list>(<argument><expr><name><name>hcryp</name><operator>-&gt;</operator><name>Instance</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>, <argument><expr><name>AES_SR_CCF</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>    
    <comment type="block">/* Check for the Timeout */</comment>
    <if_stmt><if>if<condition>(<expr><name>Timeout</name> <operator>!=</operator> <name>HAL_MAX_DELAY</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>HAL_GetTick</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tickstart</name> <operator>)</operator> <operator>&gt;</operator> <name>Timeout</name><operator>)</operator><operator>||</operator><operator>(</operator><name>Timeout</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr> )</condition>
      <block>{<block_content>    
        <return>return <expr><name>HAL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>HAL_OK</name></expr>;</return> 
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* End AES or CRYP  */</comment>


<comment type="block" format="doxygen">/**
  * @}
  */</comment> 
  


<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_CRYP_MODULE_ENABLED */</comment>


<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TinyAES or CRYP*/</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
