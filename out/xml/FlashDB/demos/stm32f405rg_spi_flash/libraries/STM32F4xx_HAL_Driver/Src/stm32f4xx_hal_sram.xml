<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_sram.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    stm32f4xx_hal_sram.c
  * @author  MCD Application Team
  * @brief   SRAM HAL module driver.
  *          This file provides a generic firmware to drive SRAM memories  
  *          mounted as external device.
  *         
  @verbatim
  ==============================================================================
                          ##### How to use this driver #####
  ==============================================================================  
  [..]
    This driver is a generic layered driver which contains a set of APIs used to 
    control SRAM memories. It uses the FMC layer functions to interface 
    with SRAM devices.  
    The following sequence should be followed to configure the FMC/FSMC to interface
    with SRAM/PSRAM memories: 
      
   (#) Declare a SRAM_HandleTypeDef handle structure, for example:
          SRAM_HandleTypeDef  hsram; and: 
          
       (++) Fill the SRAM_HandleTypeDef handle "Init" field with the allowed 
            values of the structure member.
            
       (++) Fill the SRAM_HandleTypeDef handle "Instance" field with a predefined 
            base register instance for NOR or SRAM device 
                         
       (++) Fill the SRAM_HandleTypeDef handle "Extended" field with a predefined
            base register instance for NOR or SRAM extended mode 
             
   (#) Declare two FMC_NORSRAM_TimingTypeDef structures, for both normal and extended 
       mode timings; for example:
          FMC_NORSRAM_TimingTypeDef  Timing and FMC_NORSRAM_TimingTypeDef  ExTiming;
      and fill its fields with the allowed values of the structure member.
      
   (#) Initialize the SRAM Controller by calling the function HAL_SRAM_Init(). This function
       performs the following sequence:
          
       (##) MSP hardware layer configuration using the function HAL_SRAM_MspInit()
       (##) Control register configuration using the FMC NORSRAM interface function 
            FMC_NORSRAM_Init()
       (##) Timing register configuration using the FMC NORSRAM interface function 
            FMC_NORSRAM_Timing_Init()
       (##) Extended mode Timing register configuration using the FMC NORSRAM interface function 
            FMC_NORSRAM_Extended_Timing_Init()
       (##) Enable the SRAM device using the macro __FMC_NORSRAM_ENABLE()    

   (#) At this stage you can perform read/write accesses from/to the memory connected 
       to the NOR/SRAM Bank. You can perform either polling or DMA transfer using the
       following APIs:
       (++) HAL_SRAM_Read()/HAL_SRAM_Write() for polling read/write access
       (++) HAL_SRAM_Read_DMA()/HAL_SRAM_Write_DMA() for DMA read/write transfer
       
   (#) You can also control the SRAM device by calling the control APIs HAL_SRAM_WriteOperation_Enable()/
       HAL_SRAM_WriteOperation_Disable() to respectively enable/disable the SRAM write operation  
       
   (#) You can continuously monitor the SRAM device HAL state by calling the function
       HAL_SRAM_GetState()

       *** Callback registration ***
    =============================================
    [..]
      The compilation define  USE_HAL_SRAM_REGISTER_CALLBACKS when set to 1
      allows the user to configure dynamically the driver callbacks.

      Use Functions @ref HAL_SRAM_RegisterCallback() to register a user callback,
      it allows to register following callbacks:
        (+) MspInitCallback    : SRAM MspInit.
        (+) MspDeInitCallback  : SRAM MspDeInit.
      This function takes as parameters the HAL peripheral handle, the Callback ID
      and a pointer to the user callback function.

      Use function @ref HAL_SRAM_UnRegisterCallback() to reset a callback to the default
      weak (surcharged) function. It allows to reset following callbacks:
        (+) MspInitCallback    : SRAM MspInit.
        (+) MspDeInitCallback  : SRAM MspDeInit.
      This function) takes as parameters the HAL peripheral handle and the Callback ID.

      By default, after the @ref HAL_SRAM_Init and if the state is HAL_SRAM_STATE_RESET
      all callbacks are reset to the corresponding legacy weak (surcharged) functions.
      Exception done for MspInit and MspDeInit callbacks that are respectively
      reset to the legacy weak (surcharged) functions in the @ref HAL_SRAM_Init
      and @ref  HAL_SRAM_DeInit only when these callbacks are null (not registered beforehand).
      If not, MspInit or MspDeInit are not null, the @ref HAL_SRAM_Init and @ref HAL_SRAM_DeInit
      keep and use the user MspInit/MspDeInit callbacks (registered beforehand)

      Callbacks can be registered/unregistered in READY state only.
      Exception done for MspInit/MspDeInit callbacks that can be registered/unregistered
      in READY or RESET state, thus registered (user) MspInit/DeInit callbacks can be used
      during the Init/DeInit.
      In that case first register the MspInit/MspDeInit user callbacks
      using @ref HAL_SRAM_RegisterCallback before calling @ref HAL_SRAM_DeInit
      or @ref HAL_SRAM_Init function.

      When The compilation define USE_HAL_SRAM_REGISTER_CALLBACKS is set to 0 or
      not defined, the callback registering feature is not available
      and weak (surcharged) callbacks are used.

  @endverbatim
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment> 

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_HAL_Driver
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @defgroup SRAM SRAM
  * @brief SRAM driver modules
  * @{
  */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAL_SRAM_MODULE_ENABLED</name></cpp:ifdef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F405xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F415xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F407xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F417xx</name></expr></argument>)</argument_list></call> <operator>||</operator>\
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call> <operator>||</operator>\
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator>\
    <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Rx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F413xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F423xx</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>    
<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* Private functions ---------------------------------------------------------*/</comment>

<comment type="block">/* Exported functions --------------------------------------------------------*/</comment>
<comment type="block" format="doxygen">/** @defgroup SRAM_Exported_Functions SRAM Exported Functions
  * @{
  */</comment>
<comment type="block" format="doxygen">/** @defgroup SRAM_Exported_Functions_Group1 Initialization and de-initialization functions 
  * @brief    Initialization and Configuration functions 
  *
  @verbatim    
  ==============================================================================
           ##### SRAM Initialization and de_initialization functions #####
  ==============================================================================
    [..]  This section provides functions allowing to initialize/de-initialize
          the SRAM memory
  
@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Performs the SRAM device initialization sequence
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SRAM_Init</name><parameter_list>(<parameter><decl><type><name>SRAM_HandleTypeDef</name> <modifier>*</modifier></type><name>hsram</name></decl></parameter>, <parameter><decl><type><name>FMC_NORSRAM_TimingTypeDef</name> <modifier>*</modifier></type><name>Timing</name></decl></parameter>, <parameter><decl><type><name>FMC_NORSRAM_TimingTypeDef</name> <modifier>*</modifier></type><name>ExtTiming</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
  <comment type="block">/* Check the SRAM handle parameter */</comment>
  <if_stmt><if>if<condition>(<expr><name>hsram</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
     <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if<condition>(<expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SRAM_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>  
    <comment type="block">/* Allocate lock resource and initialize it */</comment>
    <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>Lock</name></name> <operator>=</operator> <name>HAL_UNLOCKED</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SRAM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <if_stmt><if>if<condition>(<expr><name><name>hsram</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_SRAM_MspInit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>DmaXferCpltCallback</name></name> <operator>=</operator> <name>HAL_SRAM_DMA_XferCpltCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>DmaXferErrorCallback</name></name> <operator>=</operator> <name>HAL_SRAM_DMA_XferErrorCallback</name></expr>;</expr_stmt>

    <comment type="block">/* Init the low level hardware */</comment>
    <expr_stmt><expr><call><name><name>hsram</name><operator>-&gt;</operator><name>MspInitCallback</name></name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Initialize the low level hardware (MSP) */</comment>
    <expr_stmt><expr><call><name>HAL_SRAM_MspInit</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Initialize SRAM control Interface */</comment>
  <expr_stmt><expr><call><name>FMC_NORSRAM_Init</name><argument_list>(<argument><expr><name><name>hsram</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>hsram</name><operator>-&gt;</operator><name>Init</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize SRAM timing Interface */</comment>
  <expr_stmt><expr><call><name>FMC_NORSRAM_Timing_Init</name><argument_list>(<argument><expr><name><name>hsram</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name>Timing</name></expr></argument>, <argument><expr><name><name>hsram</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

  <comment type="block">/* Initialize SRAM extended mode timing Interface */</comment>
  <expr_stmt><expr><call><name>FMC_NORSRAM_Extended_Timing_Init</name><argument_list>(<argument><expr><name><name>hsram</name><operator>-&gt;</operator><name>Extended</name></name></expr></argument>, <argument><expr><name>ExtTiming</name></expr></argument>, <argument><expr><name><name>hsram</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name></expr></argument>,  <argument><expr><name><name>hsram</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>ExtendedMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  
  <comment type="block">/* Enable the NORSRAM device */</comment>
  <expr_stmt><expr><call><name>__FMC_NORSRAM_ENABLE</name><argument_list>(<argument><expr><name><name>hsram</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name><name>hsram</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Performs the SRAM device De-initialization sequence.
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type>  <name>HAL_SRAM_DeInit</name><parameter_list>(<parameter><decl><type><name>SRAM_HandleTypeDef</name> <modifier>*</modifier></type><name>hsram</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SRAM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if<condition>(<expr><name><name>hsram</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_SRAM_MspDeInit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* DeInit the low level hardware */</comment>
  <expr_stmt><expr><call><name><name>hsram</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* De-Initialize the low level hardware (MSP) */</comment>
  <expr_stmt><expr><call><name>HAL_SRAM_MspDeInit</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Configure the SRAM registers with their reset values */</comment>
  <expr_stmt><expr><call><name>FMC_NORSRAM_DeInit</name><argument_list>(<argument><expr><name><name>hsram</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name><name>hsram</name><operator>-&gt;</operator><name>Extended</name></name></expr></argument>, <argument><expr><name><name>hsram</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_RESET</name></expr>;</expr_stmt>
  
  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  SRAM MSP Init.
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SRAM_MspInit</name><parameter_list>(<parameter><decl><type><name>SRAM_HandleTypeDef</name> <modifier>*</modifier></type><name>hsram</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_MspInit could be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  SRAM MSP DeInit.
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SRAM_MspDeInit</name><parameter_list>(<parameter><decl><type><name>SRAM_HandleTypeDef</name> <modifier>*</modifier></type><name>hsram</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_MspDeInit could be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SRAM_DMA_XferCpltCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferCpltCallback could be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  DMA transfer complete error callback.
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */</comment>
<function><type><specifier>__weak</specifier> <name>void</name></type> <name>HAL_SRAM_DMA_XferErrorCallback</name><parameter_list>(<parameter><decl><type><name>DMA_HandleTypeDef</name> <modifier>*</modifier></type><name>hdma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Prevent unused argument(s) compilation warning */</comment>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferErrorCallback could be implemented in the user file
   */</comment> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup SRAM_Exported_Functions_Group2 Input and Output functions 
  * @brief    Input Output and memory control functions 
  *
  @verbatim    
  ==============================================================================
                  ##### SRAM Input and Output functions #####
  ==============================================================================
  [..]  
    This section provides functions allowing to use and control the SRAM memory
  
@endverbatim
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Reads 8-bit buffer from SRAM memory. 
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @param  pAddress Pointer to read start address
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SRAM_Read_8b</name><parameter_list>(<parameter><decl><type><name>SRAM_HandleTypeDef</name> <modifier>*</modifier></type><name>hsram</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pAddress</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pDstBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BufferSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint8_t</name> <modifier>*</modifier></type> <name>pSramAddress</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>pAddress</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Update the SRAM controller state */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_BUSY</name></expr>;</expr_stmt>  
  
  <comment type="block">/* Read data from memory */</comment>
  <for>for<control>(<init>;</init> <condition><expr><name>BufferSize</name> <operator>!=</operator> <literal type="number">0U</literal></expr>;</condition> <incr><expr><name>BufferSize</name><operator>--</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pDstBuffer</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>pSramAddress</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pDstBuffer</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pSramAddress</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  
  <comment type="block">/* Update the SRAM controller state */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_READY</name></expr>;</expr_stmt>    

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    
  <return>return <expr><name>HAL_OK</name></expr>;</return>   
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Writes 8-bit buffer to SRAM memory. 
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @param  pAddress Pointer to write start address
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SRAM_Write_8b</name><parameter_list>(<parameter><decl><type><name>SRAM_HandleTypeDef</name> <modifier>*</modifier></type><name>hsram</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pAddress</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pSrcBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BufferSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint8_t</name> <modifier>*</modifier></type> <name>pSramAddress</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>pAddress</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Check the SRAM controller state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SRAM_STATE_PROTECTED</name></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return> 
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Update the SRAM controller state */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_BUSY</name></expr>;</expr_stmt> 

  <comment type="block">/* Write data to memory */</comment>
  <for>for<control>(<init>;</init> <condition><expr><name>BufferSize</name> <operator>!=</operator> <literal type="number">0U</literal></expr>;</condition> <incr><expr><name>BufferSize</name><operator>--</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>pSramAddress</name> <operator>=</operator> <operator>*</operator><name>pSrcBuffer</name></expr>;</expr_stmt> 
    <expr_stmt><expr><name>pSrcBuffer</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pSramAddress</name><operator>++</operator></expr>;</expr_stmt>    
  </block_content>}</block></for>    

  <comment type="block">/* Update the SRAM controller state */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_READY</name></expr>;</expr_stmt> 
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
  <return>return <expr><name>HAL_OK</name></expr>;</return>   
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Reads 16-bit buffer from SRAM memory. 
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @param  pAddress Pointer to read start address
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SRAM_Read_16b</name><parameter_list>(<parameter><decl><type><name>SRAM_HandleTypeDef</name> <modifier>*</modifier></type><name>hsram</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pDstBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BufferSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint16_t</name> <modifier>*</modifier></type> <name>pSramAddress</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>pAddress</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Update the SRAM controller state */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_BUSY</name></expr>;</expr_stmt>  
  
  <comment type="block">/* Read data from memory */</comment>
  <for>for<control>(<init>;</init> <condition><expr><name>BufferSize</name> <operator>!=</operator> <literal type="number">0U</literal></expr>;</condition> <incr><expr><name>BufferSize</name><operator>--</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pDstBuffer</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>pSramAddress</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pDstBuffer</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pSramAddress</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  
  <comment type="block">/* Update the SRAM controller state */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_READY</name></expr>;</expr_stmt>    

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    
  <return>return <expr><name>HAL_OK</name></expr>;</return>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Writes 16-bit buffer to SRAM memory. 
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @param  pAddress Pointer to write start address
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SRAM_Write_16b</name><parameter_list>(<parameter><decl><type><name>SRAM_HandleTypeDef</name> <modifier>*</modifier></type><name>hsram</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pAddress</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pSrcBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BufferSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint16_t</name> <modifier>*</modifier></type> <name>pSramAddress</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>pAddress</name></expr></init></decl>;</decl_stmt> 
  
  <comment type="block">/* Check the SRAM controller state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SRAM_STATE_PROTECTED</name></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return> 
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Update the SRAM controller state */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_BUSY</name></expr>;</expr_stmt> 

  <comment type="block">/* Write data to memory */</comment>
  <for>for<control>(<init>;</init> <condition><expr><name>BufferSize</name> <operator>!=</operator> <literal type="number">0U</literal></expr>;</condition> <incr><expr><name>BufferSize</name><operator>--</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>pSramAddress</name> <operator>=</operator> <operator>*</operator><name>pSrcBuffer</name></expr>;</expr_stmt> 
    <expr_stmt><expr><name>pSrcBuffer</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pSramAddress</name><operator>++</operator></expr>;</expr_stmt>    
  </block_content>}</block></for>    

  <comment type="block">/* Update the SRAM controller state */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_READY</name></expr>;</expr_stmt> 
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
  <return>return <expr><name>HAL_OK</name></expr>;</return>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Reads 32-bit buffer from SRAM memory. 
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @param  pAddress Pointer to read start address
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SRAM_Read_32b</name><parameter_list>(<parameter><decl><type><name>SRAM_HandleTypeDef</name> <modifier>*</modifier></type><name>hsram</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pDstBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BufferSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Update the SRAM controller state */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_BUSY</name></expr>;</expr_stmt>  
  
  <comment type="block">/* Read data from memory */</comment>
  <for>for<control>(<init>;</init> <condition><expr><name>BufferSize</name> <operator>!=</operator> <literal type="number">0U</literal></expr>;</condition> <incr><expr><name>BufferSize</name><operator>--</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pDstBuffer</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>__IO</name> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>pAddress</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pDstBuffer</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pAddress</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  
  <comment type="block">/* Update the SRAM controller state */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_READY</name></expr>;</expr_stmt>    

  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    
  <return>return <expr><name>HAL_OK</name></expr>;</return>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Writes 32-bit buffer to SRAM memory. 
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @param  pAddress Pointer to write start address
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SRAM_Write_32b</name><parameter_list>(<parameter><decl><type><name>SRAM_HandleTypeDef</name> <modifier>*</modifier></type><name>hsram</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pSrcBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BufferSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the SRAM controller state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SRAM_STATE_PROTECTED</name></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return> 
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Update the SRAM controller state */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_BUSY</name></expr>;</expr_stmt> 

  <comment type="block">/* Write data to memory */</comment>
  <for>for<control>(<init>;</init> <condition><expr><name>BufferSize</name> <operator>!=</operator> <literal type="number">0U</literal></expr>;</condition> <incr><expr><name>BufferSize</name><operator>--</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>__IO</name> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>pAddress</name> <operator>=</operator> <operator>*</operator><name>pSrcBuffer</name></expr>;</expr_stmt> 
    <expr_stmt><expr><name>pSrcBuffer</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pAddress</name><operator>++</operator></expr>;</expr_stmt>    
  </block_content>}</block></for>    

  <comment type="block">/* Update the SRAM controller state */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_READY</name></expr>;</expr_stmt> 
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
  <return>return <expr><name>HAL_OK</name></expr>;</return>   
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Reads a Words data from the SRAM memory using DMA transfer.
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @param  pAddress Pointer to read start address
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SRAM_Read_DMA</name><parameter_list>(<parameter><decl><type><name>SRAM_HandleTypeDef</name> <modifier>*</modifier></type><name>hsram</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pDstBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BufferSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  
  <comment type="block">/* Update the SRAM controller state */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_BUSY</name></expr>;</expr_stmt>   
  
  <comment type="block">/* Configure DMA user callbacks */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>XferCpltCallback</name></name>  <operator>=</operator> <name>HAL_SRAM_DMA_XferCpltCallback</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>HAL_SRAM_DMA_XferErrorCallback</name></expr>;</expr_stmt>

  <comment type="block">/* Enable the DMA Stream */</comment>
  <expr_stmt><expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hsram</name><operator>-&gt;</operator><name>hdma</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pDstBuffer</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>BufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Update the SRAM controller state */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_READY</name></expr>;</expr_stmt> 
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  
  <return>return <expr><name>HAL_OK</name></expr>;</return> 
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Writes a Words data buffer to SRAM memory using DMA transfer.
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @param  pAddress Pointer to write start address
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SRAM_Write_DMA</name><parameter_list>(<parameter><decl><type><name>SRAM_HandleTypeDef</name> <modifier>*</modifier></type><name>hsram</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pAddress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pSrcBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BufferSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check the SRAM controller state */</comment>
  <if_stmt><if>if<condition>(<expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>==</operator> <name>HAL_SRAM_STATE_PROTECTED</name></expr>)</condition>
  <block>{<block_content>
    <return>return  <expr><name>HAL_ERROR</name></expr>;</return> 
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Update the SRAM controller state */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_BUSY</name></expr>;</expr_stmt> 
  
  <comment type="block">/* Configure DMA user callbacks */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>XferCpltCallback</name></name>  <operator>=</operator> <name>HAL_SRAM_DMA_XferCpltCallback</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>hdma</name><operator>-&gt;</operator><name>XferErrorCallback</name></name> <operator>=</operator> <name>HAL_SRAM_DMA_XferErrorCallback</name></expr>;</expr_stmt>

  <comment type="block">/* Enable the DMA Stream */</comment>
  <expr_stmt><expr><call><name>HAL_DMA_Start_IT</name><argument_list>(<argument><expr><name><name>hsram</name><operator>-&gt;</operator><name>hdma</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pSrcBuffer</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pAddress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>BufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Update the SRAM controller state */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_READY</name></expr>;</expr_stmt>  
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_HAL_SRAM_REGISTER_CALLBACKS</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Register a User SRAM Callback
  *         To be used instead of the weak (surcharged) predefined callback
  * @param hsram : SRAM handle
  * @param CallbackId : ID of the callback to be registered
  *        This parameter can be one of the following values:
  *          @arg @ref HAL_SRAM_MSP_INIT_CB_ID       SRAM MspInit callback ID
  *          @arg @ref HAL_SRAM_MSP_DEINIT_CB_ID     SRAM MspDeInit callback ID
  * @param pCallback : pointer to the Callback function
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SRAM_RegisterCallback</name> <parameter_list>(<parameter><decl><type><name>SRAM_HandleTypeDef</name> <modifier>*</modifier></type><name>hsram</name></decl></parameter>, <parameter><decl><type><name>HAL_SRAM_CallbackIDTypeDef</name></type> <name>CallbackId</name></decl></parameter>, <parameter><decl><type><name>pSRAM_CallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_SRAM_StateTypeDef</name></type> <name>state</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>hsram</name><operator>-&gt;</operator><name>State</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_SRAM_STATE_READY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_SRAM_STATE_RESET</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_SRAM_STATE_PROTECTED</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackId</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_SRAM_MSP_INIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_SRAM_MSP_DEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Unregister a User SRAM Callback
  *         SRAM Callback is redirected to the weak (surcharged) predefined callback
  * @param hsram : SRAM handle
  * @param CallbackId : ID of the callback to be unregistered
  *        This parameter can be one of the following values:
  *          @arg @ref HAL_SRAM_MSP_INIT_CB_ID       SRAM MspInit callback ID
  *          @arg @ref HAL_SRAM_MSP_DEINIT_CB_ID     SRAM MspDeInit callback ID
  *          @arg @ref HAL_SRAM_DMA_XFER_CPLT_CB_ID  SRAM DMA Xfer Complete callback ID
  *          @arg @ref HAL_SRAM_DMA_XFER_ERR_CB_ID   SRAM DMA Xfer Error callback ID
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SRAM_UnRegisterCallback</name> <parameter_list>(<parameter><decl><type><name>SRAM_HandleTypeDef</name> <modifier>*</modifier></type><name>hsram</name></decl></parameter>, <parameter><decl><type><name>HAL_SRAM_CallbackIDTypeDef</name></type> <name>CallbackId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_SRAM_StateTypeDef</name></type> <name>state</name></decl>;</decl_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>hsram</name><operator>-&gt;</operator><name>State</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_SRAM_STATE_READY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_SRAM_STATE_PROTECTED</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackId</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_SRAM_MSP_INIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_SRAM_MspInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_SRAM_MSP_DEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_SRAM_MspDeInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_SRAM_DMA_XFER_CPLT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>DmaXferCpltCallback</name></name> <operator>=</operator> <name>HAL_SRAM_DMA_XferCpltCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_SRAM_DMA_XFER_ERR_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>DmaXferErrorCallback</name></name> <operator>=</operator> <name>HAL_SRAM_DMA_XferErrorCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>(<expr><name>state</name> <operator>==</operator> <name>HAL_SRAM_STATE_RESET</name></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackId</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_SRAM_MSP_INIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>MspInitCallback</name></name> <operator>=</operator> <name>HAL_SRAM_MspInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_SRAM_MSP_DEINIT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>MspDeInitCallback</name></name> <operator>=</operator> <name>HAL_SRAM_MspDeInit</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Register a User SRAM Callback for DMA transfers
  *         To be used instead of the weak (surcharged) predefined callback
  * @param hsram : SRAM handle
  * @param CallbackId : ID of the callback to be registered
  *        This parameter can be one of the following values:
  *          @arg @ref HAL_SRAM_DMA_XFER_CPLT_CB_ID  SRAM DMA Xfer Complete callback ID
  *          @arg @ref HAL_SRAM_DMA_XFER_ERR_CB_ID   SRAM DMA Xfer Error callback ID
  * @param pCallback : pointer to the Callback function
  * @retval status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SRAM_RegisterDmaCallback</name><parameter_list>(<parameter><decl><type><name>SRAM_HandleTypeDef</name> <modifier>*</modifier></type><name>hsram</name></decl></parameter>, <parameter><decl><type><name>HAL_SRAM_CallbackIDTypeDef</name></type> <name>CallbackId</name></decl></parameter>, <parameter><decl><type><name>pSRAM_DmaCallbackTypeDef</name></type> <name>pCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>status</name> <init>= <expr><name>HAL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HAL_SRAM_StateTypeDef</name></type> <name>state</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>pCallback</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>HAL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>hsram</name><operator>-&gt;</operator><name>State</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_SRAM_STATE_READY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>HAL_SRAM_STATE_PROTECTED</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <switch>switch <condition>(<expr><name>CallbackId</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>HAL_SRAM_DMA_XFER_CPLT_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>DmaXferCpltCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAL_SRAM_DMA_XFER_ERR_CB_ID</name></expr> :</case>
      <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>DmaXferErrorCallback</name></name> <operator>=</operator> <name>pCallback</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default :</default>
      <comment type="block">/* update return status */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="block">/* update return status */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator>  <name>HAL_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Release Lock */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>
  
<comment type="block" format="doxygen">/** @defgroup SRAM_Exported_Functions_Group3 Control functions 
 *  @brief   management functions 
 *
@verbatim   
  ==============================================================================
                        ##### SRAM Control functions #####
  ==============================================================================  
  [..]
    This subsection provides a set of functions allowing to control dynamically
    the SRAM interface.

@endverbatim
  * @{
  */</comment>
    
<comment type="block" format="doxygen">/**
  * @brief  Enables dynamically SRAM write operation.
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SRAM_WriteOperation_Enable</name><parameter_list>(<parameter><decl><type><name>SRAM_HandleTypeDef</name> <modifier>*</modifier></type><name>hsram</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable write operation */</comment>
  <expr_stmt><expr><call><name>FMC_NORSRAM_WriteOperation_Enable</name><argument_list>(<argument><expr><name><name>hsram</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name><name>hsram</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <comment type="block">/* Update the SRAM controller state */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_READY</name></expr>;</expr_stmt>
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @brief  Disables dynamically SRAM write operation.
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */</comment>
<function><type><name>HAL_StatusTypeDef</name></type> <name>HAL_SRAM_WriteOperation_Disable</name><parameter_list>(<parameter><decl><type><name>SRAM_HandleTypeDef</name> <modifier>*</modifier></type><name>hsram</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Process Locked */</comment>
  <expr_stmt><expr><call><name>__HAL_LOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Update the SRAM controller state */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_BUSY</name></expr>;</expr_stmt>
    
  <comment type="block">/* Disable write operation */</comment>
  <expr_stmt><expr><call><name>FMC_NORSRAM_WriteOperation_Disable</name><argument_list>(<argument><expr><name><name>hsram</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>, <argument><expr><name><name>hsram</name><operator>-&gt;</operator><name>Init</name><operator>.</operator><name>NSBank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <comment type="block">/* Update the SRAM controller state */</comment>
  <expr_stmt><expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name> <operator>=</operator> <name>HAL_SRAM_STATE_PROTECTED</name></expr>;</expr_stmt>
  
  <comment type="block">/* Process unlocked */</comment>
  <expr_stmt><expr><call><name>__HAL_UNLOCK</name><argument_list>(<argument><expr><name>hsram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <return>return <expr><name>HAL_OK</name></expr>;</return>  
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @defgroup SRAM_Exported_Functions_Group4 State functions 
 *  @brief   Peripheral State functions 
 *
@verbatim   
  ==============================================================================
                      ##### SRAM State functions #####
  ==============================================================================  
  [..]
    This subsection permits to get in run-time the status of the SRAM controller 
    and the data flow.

@endverbatim
  * @{
  */</comment>
  
<comment type="block" format="doxygen">/**
  * @brief  Returns the SRAM controller state
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL state
  */</comment>
<function><type><name>HAL_SRAM_StateTypeDef</name></type> <name>HAL_SRAM_GetState</name><parameter_list>(<parameter><decl><type><name>SRAM_HandleTypeDef</name> <modifier>*</modifier></type><name>hsram</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>hsram</name><operator>-&gt;</operator><name>State</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx || STM32F427xx || STM32F437xx ||\
          STM32F429xx || STM32F439xx || STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx ||\
          STM32F412Vx || STM32F412Rx || STM32F412Cx || STM32F413xx || STM32F423xx */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAL_SRAM_MODULE_ENABLED */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
