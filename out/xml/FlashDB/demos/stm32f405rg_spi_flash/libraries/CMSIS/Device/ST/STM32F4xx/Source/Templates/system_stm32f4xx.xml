<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/system_stm32f4xx.c"><comment type="block" format="doxygen">/**
  ******************************************************************************
  * @file    system_stm32f4xx.c
  * @author  MCD Application Team
  * @brief   CMSIS Cortex-M4 Device Peripheral Access Layer System Source File.
  *
  *   This file provides two functions and one global variable to be called from 
  *   user application:
  *      - SystemInit(): This function is called at startup just after reset and 
  *                      before branch to main program. This call is made inside
  *                      the "startup_stm32f4xx.s" file.
  *
  *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  *                                  by the user application to setup the SysTick 
  *                                  timer or configure other parameters.
  *                                     
  *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  *                                 be called whenever the core clock is changed
  *                                 during program execution.
  *
  *
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; COPYRIGHT 2017 STMicroelectronics&lt;/center&gt;&lt;/h2&gt;
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup CMSIS
  * @{
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup stm32f4xx_system
  * @{
  */</comment>  
  
<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_System_Private_Includes
  * @{
  */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name>  <argument_list>(<argument><expr><name>HSE_VALUE</name></expr></argument>)</argument_list></call></expr></cpp:if> 
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_VALUE</name></cpp:macro>    <cpp:value>((uint32_t)25000000)</cpp:value></cpp:define> <comment type="block" format="doxygen">/*!&lt; Default value of the External oscillator in Hz */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HSE_VALUE */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name>  <argument_list>(<argument><expr><name>HSI_VALUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSI_VALUE</name></cpp:macro>    <cpp:value>((uint32_t)16000000)</cpp:value></cpp:define> <comment type="block" format="doxygen">/*!&lt; Value of the Internal oscillator in Hz*/</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HSI_VALUE */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_System_Private_TypesDefinitions
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_System_Private_Defines
  * @{
  */</comment>

<comment type="block" format="doxygen">/************************* Miscellaneous Configuration ************************/</comment>
<comment type="block" format="doxygen">/*!&lt; Uncomment the following line if you need to use external SRAM or SDRAM as data memory  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F405xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F415xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F407xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F417xx</name></expr></argument>)</argument_list></call>\
 <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call>\
 <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* #define DATA_IN_ExtSRAM */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F40xxx || STM32F41xxx || STM32F42xxx || STM32F43xxx || STM32F469xx || STM32F479xx ||\
          STM32F412Zx || STM32F412Vx */</comment>
 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call>\
 <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* #define DATA_IN_ExtSDRAM */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F446xx || STM32F469xx ||\
          STM32F479xx */</comment>

<comment type="block" format="doxygen">/*!&lt; Uncomment the following line if you need to relocate your vector Table in
     Internal SRAM. */</comment>
<comment type="block">/* #define VECT_TAB_SRAM */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VECT_TAB_OFFSET</name></cpp:macro>  <cpp:value>0x00</cpp:value></cpp:define> <comment type="block" format="doxygen">/*!&lt; Vector Table base offset field. 
                                   This value must be a multiple of 0x200. */</comment>
<comment type="block" format="doxygen">/******************************************************************************/</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_System_Private_Macros
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_System_Private_Variables
  * @{
  */</comment>
  <comment type="block">/* This variable is updated in three ways:
      1) by calling CMSIS function SystemCoreClockUpdate()
      2) by calling HAL API function HAL_RCC_GetHCLKFreq()
      3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency 
         Note: If you use this function to configure the system clock; then there
               is no need to call the 2 first functions listed above, since SystemCoreClock
               variable is updated automatically.
  */</comment>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>SystemCoreClock</name> <init>= <expr><literal type="number">16000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>AHBPrescTable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>APBPrescTable</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>  <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_System_Private_FunctionPrototypes
  * @{
  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>DATA_IN_ExtSRAM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>DATA_IN_ExtSDRAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SystemInit_ExtMemCtl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/** @addtogroup STM32F4xx_System_Private_Functions
  * @{
  */</comment>

<comment type="block" format="doxygen">/**
  * @brief  Setup the microcontroller system
  *         Initialize the FPU setting, vector table location and External memory 
  *         configuration.
  * @param  None
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>SystemInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* FPU settings ------------------------------------------------------------*/</comment>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__FPU_PRESENT</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>__FPU_USED</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><name><name>SCB</name><operator>-&gt;</operator><name>CPACR</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><literal type="number">3UL</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>|</operator><operator>(</operator><literal type="number">3UL</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>  <comment type="block">/* set CP10 and CP11 Full Access */</comment>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="block">/* Reset the RCC clock configuration to the default reset state ------------*/</comment>
  <comment type="block">/* Set HSION bit */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x00000001</literal></expr>;</expr_stmt>

  <comment type="block">/* Reset CFGR register */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>

  <comment type="block">/* Reset HSEON, CSSON and PLLON bits */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xFEF6FFFF</literal></expr>;</expr_stmt>

  <comment type="block">/* Reset PLLCFGR register */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>=</operator> <literal type="number">0x24003010</literal></expr>;</expr_stmt>

  <comment type="block">/* Reset HSEBYP bit */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>CR</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xFFFBFFFF</literal></expr>;</expr_stmt>

  <comment type="block">/* Disable all interrupts */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>CIR</name></name> <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>DATA_IN_ExtSRAM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>DATA_IN_ExtSDRAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>SystemInit_ExtMemCtl</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */</comment>

  <comment type="block">/* Configure the Vector Table location add offset address ------------------*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VECT_TAB_SRAM</name></cpp:ifdef>
  <expr_stmt><expr><name><name>SCB</name><operator>-&gt;</operator><name>VTOR</name></name> <operator>=</operator> <name>SRAM_BASE</name> <operator>|</operator> <name>VECT_TAB_OFFSET</name></expr>;</expr_stmt> <comment type="block">/* Vector Table Relocation in Internal SRAM */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name><name>SCB</name><operator>-&gt;</operator><name>VTOR</name></name> <operator>=</operator> <name>FLASH_BASE</name> <operator>|</operator> <name>VECT_TAB_OFFSET</name></expr>;</expr_stmt> <comment type="block">/* Vector Table Relocation in Internal FLASH */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
   * @brief  Update SystemCoreClock variable according to Clock Register Values.
  *         The SystemCoreClock variable contains the core clock (HCLK), it can
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  *           
  * @note   Each time the core clock (HCLK) changes, this function must be called
  *         to update SystemCoreClock variable value. Otherwise, any configuration
  *         based on this variable will be incorrect.         
  *     
  * @note   - The system frequency computed by this function is not the real 
  *           frequency in the chip. It is calculated based on the predefined 
  *           constant and the selected clock source:
  *             
  *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
  *                                              
  *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
  *                          
  *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
  *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
  *         
  *         (*) HSI_VALUE is a constant defined in stm32f4xx_hal_conf.h file (default value
  *             16 MHz) but the real value may vary depending on the variations
  *             in voltage and temperature.   
  *    
  *         (**) HSE_VALUE is a constant defined in stm32f4xx_hal_conf.h file (its value
  *              depends on the application requirements), user has to ensure that HSE_VALUE
  *              is same as the real frequency of the crystal used. Otherwise, this function
  *              may have wrong result.
  *                
  *         - The result of this function could be not correct when using fractional
  *           value for HSE crystal.
  *     
  * @param  None
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>SystemCoreClockUpdate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pllvco</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pllp</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>pllsource</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pllm</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Get SYSCLK source -------------------------------------------------------*/</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_SWS</name></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>tmp</name></expr>)</condition>
  <block>{<block_content>
    <case>case <expr><literal type="number">0x00</literal></expr>:</case>  <comment type="block">/* HSI used as system clock source */</comment>
      <expr_stmt><expr><name>SystemCoreClock</name> <operator>=</operator> <name>HSI_VALUE</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">0x04</literal></expr>:</case>  <comment type="block">/* HSE used as system clock source */</comment>
      <expr_stmt><expr><name>SystemCoreClock</name> <operator>=</operator> <name>HSE_VALUE</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">0x08</literal></expr>:</case>  <comment type="block">/* PLL used as system clock source */</comment>

      <comment type="block">/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */</comment>    
      <expr_stmt><expr><name>pllsource</name> <operator>=</operator> <operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLSRC</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>pllm</name> <operator>=</operator> <name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLM</name></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>pllsource</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="block">/* HSE used as PLL clock source */</comment>
        <expr_stmt><expr><name>pllvco</name> <operator>=</operator> <operator>(</operator><name>HSE_VALUE</name> <operator>/</operator> <name>pllm</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <comment type="block">/* HSI used as PLL clock source */</comment>
        <expr_stmt><expr><name>pllvco</name> <operator>=</operator> <operator>(</operator><name>HSI_VALUE</name> <operator>/</operator> <name>pllm</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLN</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name>pllp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>PLLCFGR</name></name> <operator>&amp;</operator> <name>RCC_PLLCFGR_PLLP</name><operator>)</operator> <operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>SystemCoreClock</name> <operator>=</operator> <name>pllvco</name><operator>/</operator><name>pllp</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>SystemCoreClock</name> <operator>=</operator> <name>HSI_VALUE</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <comment type="block">/* Compute HCLK frequency --------------------------------------------------*/</comment>
  <comment type="block">/* Get HCLK prescaler */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>AHBPrescTable</name><index>[<expr><operator>(</operator><operator>(</operator><name><name>RCC</name><operator>-&gt;</operator><name>CFGR</name></name> <operator>&amp;</operator> <name>RCC_CFGR_HPRE</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
  <comment type="block">/* HCLK frequency */</comment>
  <expr_stmt><expr><name>SystemCoreClock</name> <operator>&gt;&gt;=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>DATA_IN_ExtSRAM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>DATA_IN_ExtSDRAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call>\
 <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
  * @brief  Setup the external memory controller.
  *         Called in startup_stm32f4xx.s before jump to main.
  *         This function configures the external memories (SRAM/SDRAM)
  *         This SRAM/SDRAM will be used as program data memory (including heap and stack).
  * @param  None
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>SystemInit_ExtMemCtl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>register</specifier> <name>uint32_t</name></type> <name>tmpreg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>timeout</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>register</specifier> <name>__IO</name> <name>uint32_t</name></type> <name>index</name></decl>;</decl_stmt>

  <comment type="block">/* Enable GPIOC, GPIOD, GPIOE, GPIOF, GPIOG, GPIOH and GPIOI interface clock */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>AHB1ENR</name></name> <operator>|=</operator> <literal type="number">0x000001F8</literal></expr>;</expr_stmt>

  <comment type="block">/* Delay after an RCC peripheral clock enabling */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>AHB1ENR</name></name></expr></argument>, <argument><expr><name>RCC_AHB1ENR_GPIOCEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Connect PDx pins to FMC Alternate function */</comment>
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x00CCC0CC</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xCCCCCCCC</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PDx pins in Alternate function mode */</comment>  
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>MODER</name></name>   <operator>=</operator> <literal type="number">0xAAAA0A8A</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PDx pins speed to 100 MHz */</comment>  
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>OSPEEDR</name></name> <operator>=</operator> <literal type="number">0xFFFF0FCF</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PDx pins Output type to push-pull */</comment>  
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>OTYPER</name></name>  <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* No pull-up, pull-down for PDx pins */</comment> 
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>PUPDR</name></name>   <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>

  <comment type="block">/* Connect PEx pins to FMC Alternate function */</comment>
  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xC00CC0CC</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xCCCCCCCC</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PEx pins in Alternate function mode */</comment> 
  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>MODER</name></name>   <operator>=</operator> <literal type="number">0xAAAA828A</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PEx pins speed to 100 MHz */</comment> 
  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>OSPEEDR</name></name> <operator>=</operator> <literal type="number">0xFFFFC3CF</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PEx pins Output type to push-pull */</comment>  
  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>OTYPER</name></name>  <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* No pull-up, pull-down for PEx pins */</comment> 
  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>PUPDR</name></name>   <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Connect PFx pins to FMC Alternate function */</comment>
  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xCCCCCCCC</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xCCCCCCCC</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PFx pins in Alternate function mode */</comment>   
  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>MODER</name></name>   <operator>=</operator> <literal type="number">0xAA800AAA</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PFx pins speed to 50 MHz */</comment> 
  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>OSPEEDR</name></name> <operator>=</operator> <literal type="number">0xAA800AAA</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PFx pins Output type to push-pull */</comment>  
  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>OTYPER</name></name>  <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* No pull-up, pull-down for PFx pins */</comment> 
  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>PUPDR</name></name>   <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>

  <comment type="block">/* Connect PGx pins to FMC Alternate function */</comment>
  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xCCCCCCCC</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xCCCCCCCC</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PGx pins in Alternate function mode */</comment> 
  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>MODER</name></name>   <operator>=</operator> <literal type="number">0xAAAAAAAA</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PGx pins speed to 50 MHz */</comment> 
  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>OSPEEDR</name></name> <operator>=</operator> <literal type="number">0xAAAAAAAA</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PGx pins Output type to push-pull */</comment>  
  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>OTYPER</name></name>  <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* No pull-up, pull-down for PGx pins */</comment> 
  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>PUPDR</name></name>   <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Connect PHx pins to FMC Alternate function */</comment>
  <expr_stmt><expr><name><name>GPIOH</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x00C0CC00</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>GPIOH</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xCCCCCCCC</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PHx pins in Alternate function mode */</comment> 
  <expr_stmt><expr><name><name>GPIOH</name><operator>-&gt;</operator><name>MODER</name></name>   <operator>=</operator> <literal type="number">0xAAAA08A0</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PHx pins speed to 50 MHz */</comment> 
  <expr_stmt><expr><name><name>GPIOH</name><operator>-&gt;</operator><name>OSPEEDR</name></name> <operator>=</operator> <literal type="number">0xAAAA08A0</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PHx pins Output type to push-pull */</comment>  
  <expr_stmt><expr><name><name>GPIOH</name><operator>-&gt;</operator><name>OTYPER</name></name>  <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* No pull-up, pull-down for PHx pins */</comment> 
  <expr_stmt><expr><name><name>GPIOH</name><operator>-&gt;</operator><name>PUPDR</name></name>   <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Connect PIx pins to FMC Alternate function */</comment>
  <expr_stmt><expr><name><name>GPIOI</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xCCCCCCCC</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>GPIOI</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x00000CC0</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PIx pins in Alternate function mode */</comment> 
  <expr_stmt><expr><name><name>GPIOI</name><operator>-&gt;</operator><name>MODER</name></name>   <operator>=</operator> <literal type="number">0x0028AAAA</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PIx pins speed to 50 MHz */</comment> 
  <expr_stmt><expr><name><name>GPIOI</name><operator>-&gt;</operator><name>OSPEEDR</name></name> <operator>=</operator> <literal type="number">0x0028AAAA</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PIx pins Output type to push-pull */</comment>  
  <expr_stmt><expr><name><name>GPIOI</name><operator>-&gt;</operator><name>OTYPER</name></name>  <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* No pull-up, pull-down for PIx pins */</comment> 
  <expr_stmt><expr><name><name>GPIOI</name><operator>-&gt;</operator><name>PUPDR</name></name>   <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  
<comment type="block">/*-- FMC Configuration -------------------------------------------------------*/</comment>
  <comment type="block">/* Enable the FMC interface clock */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>AHB3ENR</name></name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
  <comment type="block">/* Delay after an RCC peripheral clock enabling */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>AHB3ENR</name></name></expr></argument>, <argument><expr><name>RCC_AHB3ENR_FMCEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDCR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x000019E4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDTR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01115351</literal></expr>;</expr_stmt>      
  
  <comment type="block">/* SDRAM initialization sequence */</comment>
  <comment type="block">/* Clock enable command */</comment>
  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDCMR</name></name> <operator>=</operator> <literal type="number">0x00000011</literal></expr>;</expr_stmt> 
  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDSR</name></name> <operator>&amp;</operator> <literal type="number">0x00000020</literal></expr>;</expr_stmt> 
  <while>while<condition>(<expr><operator>(</operator><name>tmpreg</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>timeout</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDSR</name></name> <operator>&amp;</operator> <literal type="number">0x00000020</literal></expr>;</expr_stmt> 
  </block_content>}</block></while>

  <comment type="block">/* Delay */</comment>
  <for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name><operator>&lt;</operator><literal type="number">1000</literal></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
  
  <comment type="block">/* PALL command */</comment>
  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDCMR</name></name> <operator>=</operator> <literal type="number">0x00000012</literal></expr>;</expr_stmt>           
  <expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
  <while>while<condition>(<expr><operator>(</operator><name>tmpreg</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>timeout</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDSR</name></name> <operator>&amp;</operator> <literal type="number">0x00000020</literal></expr>;</expr_stmt> 
  </block_content>}</block></while>
  
  <comment type="block">/* Auto refresh command */</comment>
  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDCMR</name></name> <operator>=</operator> <literal type="number">0x00000073</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
  <while>while<condition>(<expr><operator>(</operator><name>tmpreg</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>timeout</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDSR</name></name> <operator>&amp;</operator> <literal type="number">0x00000020</literal></expr>;</expr_stmt> 
  </block_content>}</block></while>
 
  <comment type="block">/* MRD register program */</comment>
  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDCMR</name></name> <operator>=</operator> <literal type="number">0x00046014</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
  <while>while<condition>(<expr><operator>(</operator><name>tmpreg</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>timeout</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDSR</name></name> <operator>&amp;</operator> <literal type="number">0x00000020</literal></expr>;</expr_stmt> 
  </block_content>}</block></while> 
  
  <comment type="block">/* Set refresh count */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDRTR</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDRTR</name></name> <operator>=</operator> <operator>(</operator><name>tmpreg</name> <operator>|</operator> <operator>(</operator><literal type="number">0x0000027C</literal><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Disable write protection */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDCR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 
  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDCR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <literal type="number">0xFFFFFDFF</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Configure and enable Bank1_SRAM2 */</comment>
  <expr_stmt><expr><name><name>FMC_Bank1</name><operator>-&gt;</operator><name>BTCR</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x00001011</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>FMC_Bank1</name><operator>-&gt;</operator><name>BTCR</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x00000201</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>FMC_Bank1E</name><operator>-&gt;</operator><name>BWTR</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0fffffff</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx */</comment> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Configure and enable Bank1_SRAM2 */</comment>
  <expr_stmt><expr><name><name>FMC_Bank1</name><operator>-&gt;</operator><name>BTCR</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x00001091</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>FMC_Bank1</name><operator>-&gt;</operator><name>BTCR</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x00110212</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>FMC_Bank1E</name><operator>-&gt;</operator><name>BWTR</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0fffffff</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F469xx || STM32F479xx */</comment>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>(</operator><name>tmp</name><operator>)</operator></expr>;</expr_stmt> 
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>DATA_IN_ExtSRAM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>DATA_IN_ExtSDRAM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<comment type="block" format="doxygen">/**
  * @brief  Setup the external memory controller.
  *         Called in startup_stm32f4xx.s before jump to main.
  *         This function configures the external memories (SRAM/SDRAM)
  *         This SRAM/SDRAM will be used as program data memory (including heap and stack).
  * @param  None
  * @retval None
  */</comment>
<function><type><name>void</name></type> <name>SystemInit_ExtMemCtl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>__IO</name> <name>uint32_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call>\
 <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>DATA_IN_ExtSDRAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><specifier>register</specifier> <name>uint32_t</name></type> <name>tmpreg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>timeout</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>register</specifier> <name>__IO</name> <name>uint32_t</name></type> <name>index</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Enable GPIOA, GPIOC, GPIOD, GPIOE, GPIOF, GPIOG interface
      clock */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>AHB1ENR</name></name> <operator>|=</operator> <literal type="number">0x0000007D</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Enable GPIOC, GPIOD, GPIOE, GPIOF, GPIOG, GPIOH and GPIOI interface 
      clock */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>AHB1ENR</name></name> <operator>|=</operator> <literal type="number">0x000001F8</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F446xx */</comment>  
  <comment type="block">/* Delay after an RCC peripheral clock enabling */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>AHB1ENR</name></name></expr></argument>, <argument><expr><name>RCC_AHB1ENR_GPIOCEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Connect PAx pins to FMC Alternate function */</comment>
  <expr_stmt><expr><name><name>GPIOA</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>|=</operator> <literal type="number">0xC0000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>GPIOA</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>|=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PDx pins in Alternate function mode */</comment>
  <expr_stmt><expr><name><name>GPIOA</name><operator>-&gt;</operator><name>MODER</name></name>   <operator>|=</operator> <literal type="number">0x00008000</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PDx pins speed to 50 MHz */</comment>
  <expr_stmt><expr><name><name>GPIOA</name><operator>-&gt;</operator><name>OSPEEDR</name></name> <operator>|=</operator> <literal type="number">0x00008000</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PDx pins Output type to push-pull */</comment>
  <expr_stmt><expr><name><name>GPIOA</name><operator>-&gt;</operator><name>OTYPER</name></name>  <operator>|=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* No pull-up, pull-down for PDx pins */</comment>
  <expr_stmt><expr><name><name>GPIOA</name><operator>-&gt;</operator><name>PUPDR</name></name>   <operator>|=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>

  <comment type="block">/* Connect PCx pins to FMC Alternate function */</comment>
  <expr_stmt><expr><name><name>GPIOC</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>|=</operator> <literal type="number">0x00CC0000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>GPIOC</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>|=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PDx pins in Alternate function mode */</comment>
  <expr_stmt><expr><name><name>GPIOC</name><operator>-&gt;</operator><name>MODER</name></name>   <operator>|=</operator> <literal type="number">0x00000A00</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PDx pins speed to 50 MHz */</comment>
  <expr_stmt><expr><name><name>GPIOC</name><operator>-&gt;</operator><name>OSPEEDR</name></name> <operator>|=</operator> <literal type="number">0x00000A00</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PDx pins Output type to push-pull */</comment>
  <expr_stmt><expr><name><name>GPIOC</name><operator>-&gt;</operator><name>OTYPER</name></name>  <operator>|=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* No pull-up, pull-down for PDx pins */</comment>
  <expr_stmt><expr><name><name>GPIOC</name><operator>-&gt;</operator><name>PUPDR</name></name>   <operator>|=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F446xx */</comment>

  <comment type="block">/* Connect PDx pins to FMC Alternate function */</comment>
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x000000CC</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xCC000CCC</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PDx pins in Alternate function mode */</comment>  
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>MODER</name></name>   <operator>=</operator> <literal type="number">0xA02A000A</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PDx pins speed to 50 MHz */</comment>  
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>OSPEEDR</name></name> <operator>=</operator> <literal type="number">0xA02A000A</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PDx pins Output type to push-pull */</comment>  
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>OTYPER</name></name>  <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* No pull-up, pull-down for PDx pins */</comment> 
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>PUPDR</name></name>   <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>

  <comment type="block">/* Connect PEx pins to FMC Alternate function */</comment>
  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xC00000CC</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xCCCCCCCC</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PEx pins in Alternate function mode */</comment> 
  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>MODER</name></name>   <operator>=</operator> <literal type="number">0xAAAA800A</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PEx pins speed to 50 MHz */</comment> 
  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>OSPEEDR</name></name> <operator>=</operator> <literal type="number">0xAAAA800A</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PEx pins Output type to push-pull */</comment>  
  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>OTYPER</name></name>  <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* No pull-up, pull-down for PEx pins */</comment> 
  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>PUPDR</name></name>   <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>

  <comment type="block">/* Connect PFx pins to FMC Alternate function */</comment>
  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xCCCCCCCC</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xCCCCCCCC</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PFx pins in Alternate function mode */</comment>   
  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>MODER</name></name>   <operator>=</operator> <literal type="number">0xAA800AAA</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PFx pins speed to 50 MHz */</comment> 
  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>OSPEEDR</name></name> <operator>=</operator> <literal type="number">0xAA800AAA</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PFx pins Output type to push-pull */</comment>  
  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>OTYPER</name></name>  <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* No pull-up, pull-down for PFx pins */</comment> 
  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>PUPDR</name></name>   <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>

  <comment type="block">/* Connect PGx pins to FMC Alternate function */</comment>
  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xCCCCCCCC</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xCCCCCCCC</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PGx pins in Alternate function mode */</comment> 
  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>MODER</name></name>   <operator>=</operator> <literal type="number">0xAAAAAAAA</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PGx pins speed to 50 MHz */</comment> 
  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>OSPEEDR</name></name> <operator>=</operator> <literal type="number">0xAAAAAAAA</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PGx pins Output type to push-pull */</comment>  
  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>OTYPER</name></name>  <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* No pull-up, pull-down for PGx pins */</comment> 
  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>PUPDR</name></name>   <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call>\
 <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call></expr></cpp:if>  
  <comment type="block">/* Connect PHx pins to FMC Alternate function */</comment>
  <expr_stmt><expr><name><name>GPIOH</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x00C0CC00</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>GPIOH</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xCCCCCCCC</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PHx pins in Alternate function mode */</comment> 
  <expr_stmt><expr><name><name>GPIOH</name><operator>-&gt;</operator><name>MODER</name></name>   <operator>=</operator> <literal type="number">0xAAAA08A0</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PHx pins speed to 50 MHz */</comment> 
  <expr_stmt><expr><name><name>GPIOH</name><operator>-&gt;</operator><name>OSPEEDR</name></name> <operator>=</operator> <literal type="number">0xAAAA08A0</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PHx pins Output type to push-pull */</comment>  
  <expr_stmt><expr><name><name>GPIOH</name><operator>-&gt;</operator><name>OTYPER</name></name>  <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* No pull-up, pull-down for PHx pins */</comment> 
  <expr_stmt><expr><name><name>GPIOH</name><operator>-&gt;</operator><name>PUPDR</name></name>   <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  
  <comment type="block">/* Connect PIx pins to FMC Alternate function */</comment>
  <expr_stmt><expr><name><name>GPIOI</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xCCCCCCCC</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>GPIOI</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x00000CC0</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PIx pins in Alternate function mode */</comment> 
  <expr_stmt><expr><name><name>GPIOI</name><operator>-&gt;</operator><name>MODER</name></name>   <operator>=</operator> <literal type="number">0x0028AAAA</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PIx pins speed to 50 MHz */</comment> 
  <expr_stmt><expr><name><name>GPIOI</name><operator>-&gt;</operator><name>OSPEEDR</name></name> <operator>=</operator> <literal type="number">0x0028AAAA</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PIx pins Output type to push-pull */</comment>  
  <expr_stmt><expr><name><name>GPIOI</name><operator>-&gt;</operator><name>OTYPER</name></name>  <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* No pull-up, pull-down for PIx pins */</comment> 
  <expr_stmt><expr><name><name>GPIOI</name><operator>-&gt;</operator><name>PUPDR</name></name>   <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx */</comment>
  
<comment type="block">/*-- FMC Configuration -------------------------------------------------------*/</comment>
  <comment type="block">/* Enable the FMC interface clock */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>AHB3ENR</name></name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
  <comment type="block">/* Delay after an RCC peripheral clock enabling */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>AHB3ENR</name></name></expr></argument>, <argument><expr><name>RCC_AHB3ENR_FMCEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Configure and enable SDRAM bank1 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDCR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00001954</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  
  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDCR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x000019E4</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F446xx */</comment>
  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDTR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01115351</literal></expr>;</expr_stmt>      
  
  <comment type="block">/* SDRAM initialization sequence */</comment>
  <comment type="block">/* Clock enable command */</comment>
  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDCMR</name></name> <operator>=</operator> <literal type="number">0x00000011</literal></expr>;</expr_stmt> 
  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDSR</name></name> <operator>&amp;</operator> <literal type="number">0x00000020</literal></expr>;</expr_stmt> 
  <while>while<condition>(<expr><operator>(</operator><name>tmpreg</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>timeout</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDSR</name></name> <operator>&amp;</operator> <literal type="number">0x00000020</literal></expr>;</expr_stmt> 
  </block_content>}</block></while>

  <comment type="block">/* Delay */</comment>
  <for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name><operator>&lt;</operator><literal type="number">1000</literal></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
  
  <comment type="block">/* PALL command */</comment>
  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDCMR</name></name> <operator>=</operator> <literal type="number">0x00000012</literal></expr>;</expr_stmt>           
  <expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
  <while>while<condition>(<expr><operator>(</operator><name>tmpreg</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>timeout</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDSR</name></name> <operator>&amp;</operator> <literal type="number">0x00000020</literal></expr>;</expr_stmt> 
  </block_content>}</block></while>
  
  <comment type="block">/* Auto refresh command */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDCMR</name></name> <operator>=</operator> <literal type="number">0x000000F3</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  
  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDCMR</name></name> <operator>=</operator> <literal type="number">0x00000073</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F446xx */</comment>
  <expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
  <while>while<condition>(<expr><operator>(</operator><name>tmpreg</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>timeout</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDSR</name></name> <operator>&amp;</operator> <literal type="number">0x00000020</literal></expr>;</expr_stmt> 
  </block_content>}</block></while>
 
  <comment type="block">/* MRD register program */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDCMR</name></name> <operator>=</operator> <literal type="number">0x00044014</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  
  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDCMR</name></name> <operator>=</operator> <literal type="number">0x00046014</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F446xx */</comment>
  <expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
  <while>while<condition>(<expr><operator>(</operator><name>tmpreg</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>timeout</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDSR</name></name> <operator>&amp;</operator> <literal type="number">0x00000020</literal></expr>;</expr_stmt> 
  </block_content>}</block></while> 
  
  <comment type="block">/* Set refresh count */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDRTR</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F446xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDRTR</name></name> <operator>=</operator> <operator>(</operator><name>tmpreg</name> <operator>|</operator> <operator>(</operator><literal type="number">0x0000050C</literal><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>    
  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDRTR</name></name> <operator>=</operator> <operator>(</operator><name>tmpreg</name> <operator>|</operator> <operator>(</operator><literal type="number">0x0000027C</literal><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F446xx */</comment>
  
  <comment type="block">/* Disable write protection */</comment>
  <expr_stmt><expr><name>tmpreg</name> <operator>=</operator> <name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDCR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 
  <expr_stmt><expr><name><name>FMC_Bank5_6</name><operator>-&gt;</operator><name>SDCR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmpreg</name> <operator>&amp;</operator> <literal type="number">0xFFFFFDFF</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DATA_IN_ExtSDRAM */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F446xx || STM32F469xx || STM32F479xx */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F405xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F415xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F407xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F417xx</name></expr></argument>)</argument_list></call>\
 <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call>\
 <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DATA_IN_ExtSRAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*-- GPIOs Configuration -----------------------------------------------------*/</comment>
   <comment type="block">/* Enable GPIOD, GPIOE, GPIOF and GPIOG interface clock */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>AHB1ENR</name></name>   <operator>|=</operator> <literal type="number">0x00000078</literal></expr>;</expr_stmt>
  <comment type="block">/* Delay after an RCC peripheral clock enabling */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>AHB1ENR</name></name></expr></argument>, <argument><expr><name>RCC_AHB1ENR_GPIODEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Connect PDx pins to FMC Alternate function */</comment>
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x00CCC0CC</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xCCCCCCCC</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PDx pins in Alternate function mode */</comment>  
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>MODER</name></name>   <operator>=</operator> <literal type="number">0xAAAA0A8A</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PDx pins speed to 100 MHz */</comment>  
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>OSPEEDR</name></name> <operator>=</operator> <literal type="number">0xFFFF0FCF</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PDx pins Output type to push-pull */</comment>  
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>OTYPER</name></name>  <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* No pull-up, pull-down for PDx pins */</comment> 
  <expr_stmt><expr><name><name>GPIOD</name><operator>-&gt;</operator><name>PUPDR</name></name>   <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>

  <comment type="block">/* Connect PEx pins to FMC Alternate function */</comment>
  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xC00CC0CC</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xCCCCCCCC</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PEx pins in Alternate function mode */</comment> 
  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>MODER</name></name>   <operator>=</operator> <literal type="number">0xAAAA828A</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PEx pins speed to 100 MHz */</comment> 
  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>OSPEEDR</name></name> <operator>=</operator> <literal type="number">0xFFFFC3CF</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PEx pins Output type to push-pull */</comment>  
  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>OTYPER</name></name>  <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* No pull-up, pull-down for PEx pins */</comment> 
  <expr_stmt><expr><name><name>GPIOE</name><operator>-&gt;</operator><name>PUPDR</name></name>   <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>

  <comment type="block">/* Connect PFx pins to FMC Alternate function */</comment>
  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x00CCCCCC</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0xCCCC0000</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PFx pins in Alternate function mode */</comment>   
  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>MODER</name></name>   <operator>=</operator> <literal type="number">0xAA000AAA</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PFx pins speed to 100 MHz */</comment> 
  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>OSPEEDR</name></name> <operator>=</operator> <literal type="number">0xFF000FFF</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PFx pins Output type to push-pull */</comment>  
  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>OTYPER</name></name>  <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* No pull-up, pull-down for PFx pins */</comment> 
  <expr_stmt><expr><name><name>GPIOF</name><operator>-&gt;</operator><name>PUPDR</name></name>   <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>

  <comment type="block">/* Connect PGx pins to FMC Alternate function */</comment>
  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x00CCCCCC</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>AFR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x000000C0</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PGx pins in Alternate function mode */</comment> 
  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>MODER</name></name>   <operator>=</operator> <literal type="number">0x00085AAA</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PGx pins speed to 100 MHz */</comment> 
  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>OSPEEDR</name></name> <operator>=</operator> <literal type="number">0x000CAFFF</literal></expr>;</expr_stmt>
  <comment type="block">/* Configure PGx pins Output type to push-pull */</comment>  
  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>OTYPER</name></name>  <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  <comment type="block">/* No pull-up, pull-down for PGx pins */</comment> 
  <expr_stmt><expr><name><name>GPIOG</name><operator>-&gt;</operator><name>PUPDR</name></name>   <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>
  
<comment type="block">/*-- FMC/FSMC Configuration --------------------------------------------------*/</comment>
  <comment type="block">/* Enable the FMC/FSMC interface clock */</comment>
  <expr_stmt><expr><name><name>RCC</name><operator>-&gt;</operator><name>AHB3ENR</name></name>         <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F427xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F437xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F429xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F439xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Delay after an RCC peripheral clock enabling */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>AHB3ENR</name></name></expr></argument>, <argument><expr><name>RCC_AHB3ENR_FMCEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Configure and enable Bank1_SRAM2 */</comment>
  <expr_stmt><expr><name><name>FMC_Bank1</name><operator>-&gt;</operator><name>BTCR</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x00001011</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>FMC_Bank1</name><operator>-&gt;</operator><name>BTCR</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x00000201</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>FMC_Bank1E</name><operator>-&gt;</operator><name>BWTR</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0fffffff</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx */</comment> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F469xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F479xx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Delay after an RCC peripheral clock enabling */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>AHB3ENR</name></name></expr></argument>, <argument><expr><name>RCC_AHB3ENR_FMCEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Configure and enable Bank1_SRAM2 */</comment>
  <expr_stmt><expr><name><name>FMC_Bank1</name><operator>-&gt;</operator><name>BTCR</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x00001091</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>FMC_Bank1</name><operator>-&gt;</operator><name>BTCR</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x00110212</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>FMC_Bank1E</name><operator>-&gt;</operator><name>BWTR</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0fffffff</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F469xx || STM32F479xx */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STM32F405xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F415xx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F407xx</name></expr></argument>)</argument_list></call><operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F417xx</name></expr></argument>)</argument_list></call>\
   <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Zx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STM32F412Vx</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Delay after an RCC peripheral clock enabling */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>READ_BIT</name><argument_list>(<argument><expr><name><name>RCC</name><operator>-&gt;</operator><name>AHB3ENR</name></name></expr></argument>, <argument><expr><name>RCC_AHB3ENR_FSMCEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Configure and enable Bank1_SRAM2 */</comment>
  <expr_stmt><expr><name><name>FSMC_Bank1</name><operator>-&gt;</operator><name>BTCR</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x00001011</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>FSMC_Bank1</name><operator>-&gt;</operator><name>BTCR</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">0x00000201</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>FSMC_Bank1E</name><operator>-&gt;</operator><name>BWTR</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0FFFFFFF</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx || STM32F412Zx || STM32F412Vx */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DATA_IN_ExtSRAM */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx || STM32F427xx || STM32F437xx ||\
          STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Vx  */</comment> 
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>(</operator><name>tmp</name><operator>)</operator></expr>;</expr_stmt> 
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DATA_IN_ExtSRAM &amp;&amp; DATA_IN_ExtSDRAM */</comment>
<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>

<comment type="block" format="doxygen">/**
  * @}
  */</comment>
<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
