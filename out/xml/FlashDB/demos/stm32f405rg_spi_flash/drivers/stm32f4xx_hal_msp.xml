<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/drivers/stm32f4xx_hal_msp.c"><comment type="block">/* USER CODE BEGIN Header */</comment>
<comment type="block" format="doxygen">/**
  ******************************************************************************
  * File Name          : stm32f4xx_hal_msp.c
  * Description        : This file provides code for the MSP Initialization 
  *                      and de-Initialization codes.
  ******************************************************************************
  * @attention
  *
  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */</comment>
<comment type="block">/* USER CODE END Header */</comment>

<comment type="block">/* Includes ------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stm32f4xx_hal.h"</cpp:file></cpp:include>
<comment type="block">/* USER CODE BEGIN Includes */</comment>

<comment type="block">/* USER CODE END Includes */</comment>

<comment type="block">/* Private typedef -----------------------------------------------------------*/</comment>
<comment type="block">/* USER CODE BEGIN TD */</comment>

<comment type="block">/* USER CODE END TD */</comment>

<comment type="block">/* Private define ------------------------------------------------------------*/</comment>
<comment type="block">/* USER CODE BEGIN Define */</comment>
 
<comment type="block">/* USER CODE END Define */</comment>

<comment type="block">/* Private macro -------------------------------------------------------------*/</comment>
<comment type="block">/* USER CODE BEGIN Macro */</comment>

<comment type="block">/* USER CODE END Macro */</comment>

<comment type="block">/* Private variables ---------------------------------------------------------*/</comment>
<comment type="block">/* USER CODE BEGIN PV */</comment>

<comment type="block">/* USER CODE END PV */</comment>

<comment type="block">/* Private function prototypes -----------------------------------------------*/</comment>
<comment type="block">/* USER CODE BEGIN PFP */</comment>

<comment type="block">/* USER CODE END PFP */</comment>

<comment type="block">/* External functions --------------------------------------------------------*/</comment>
<comment type="block">/* USER CODE BEGIN ExternalFunctions */</comment>

<comment type="block">/* USER CODE END ExternalFunctions */</comment>

<comment type="block">/* USER CODE BEGIN 0 */</comment>

<comment type="block">/* USER CODE END 0 */</comment>
<comment type="block" format="doxygen">/**
  * Initializes the Global MSP.
  */</comment>
<function><type><name>void</name></type> <name>HAL_MspInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* USER CODE BEGIN MspInit 0 */</comment>

  <comment type="block">/* USER CODE END MspInit 0 */</comment>

  <expr_stmt><expr><call><name>__HAL_RCC_SYSCFG_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>__HAL_RCC_PWR_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* System interrupt init*/</comment>

  <comment type="block">/* USER CODE BEGIN MspInit 1 */</comment>

  <comment type="block">/* USER CODE END MspInit 1 */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
* @brief SPI MSP Initialization
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/</comment>
<function><type><name>void</name></type> <name>HAL_SPI_MspInit</name><parameter_list>(<parameter><decl><type><name>SPI_HandleTypeDef</name><modifier>*</modifier></type> <name>hspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GPIO_InitTypeDef</name></type> <name>GPIO_InitStruct</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>(<expr><name><name>hspi</name><operator>-&gt;</operator><name>Instance</name></name><operator>==</operator><name>SPI2</name></expr>)</condition>
  <block>{<block_content>
  <comment type="block">/* USER CODE BEGIN SPI2_MspInit 0 */</comment>

  <comment type="block">/* USER CODE END SPI2_MspInit 0 */</comment>
    <comment type="block">/* Peripheral clock enable */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_SPI2_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
    <expr_stmt><expr><call><name>__HAL_RCC_GPIOB_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" format="doxygen">/**SPI2 GPIO Configuration
    PB13     ------&gt; SPI2_SCK
    PB14     ------&gt; SPI2_MISO
    PB15     ------&gt; SPI2_MOSI 
    */</comment>
    <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Pin</name></name> <operator>=</operator> <name>GPIO_PIN_13</name><operator>|</operator><name>GPIO_PIN_14</name><operator>|</operator><name>GPIO_PIN_15</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Mode</name></name> <operator>=</operator> <name>GPIO_MODE_AF_PP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Pull</name></name> <operator>=</operator> <name>GPIO_NOPULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Speed</name></name> <operator>=</operator> <name>GPIO_SPEED_FREQ_VERY_HIGH</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Alternate</name></name> <operator>=</operator> <name>GPIO_AF5_SPI2</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HAL_GPIO_Init</name><argument_list>(<argument><expr><name>GPIOB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GPIO_InitStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* USER CODE BEGIN SPI2_MspInit 1 */</comment>

  <comment type="block">/* USER CODE END SPI2_MspInit 1 */</comment>
  </block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<comment type="block" format="doxygen">/**
* @brief SPI MSP De-Initialization
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/</comment>
<function><type><name>void</name></type> <name>HAL_SPI_MspDeInit</name><parameter_list>(<parameter><decl><type><name>SPI_HandleTypeDef</name><modifier>*</modifier></type> <name>hspi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><name><name>hspi</name><operator>-&gt;</operator><name>Instance</name></name><operator>==</operator><name>SPI2</name></expr>)</condition>
  <block>{<block_content>
  <comment type="block">/* USER CODE BEGIN SPI2_MspDeInit 0 */</comment>

  <comment type="block">/* USER CODE END SPI2_MspDeInit 0 */</comment>
    <comment type="block">/* Peripheral clock disable */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_SPI2_CLK_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
    <comment type="block" format="doxygen">/**SPI2 GPIO Configuration    
    PB13     ------&gt; SPI2_SCK
    PB14     ------&gt; SPI2_MISO
    PB15     ------&gt; SPI2_MOSI 
    */</comment>
    <expr_stmt><expr><call><name>HAL_GPIO_DeInit</name><argument_list>(<argument><expr><name>GPIOB</name></expr></argument>, <argument><expr><name>GPIO_PIN_13</name><operator>|</operator><name>GPIO_PIN_14</name><operator>|</operator><name>GPIO_PIN_15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* USER CODE BEGIN SPI2_MspDeInit 1 */</comment>

  <comment type="block">/* USER CODE END SPI2_MspDeInit 1 */</comment>
  </block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<comment type="block" format="doxygen">/**
* @brief UART MSP Initialization
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/</comment>
<function><type><name>void</name></type> <name>HAL_UART_MspInit</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name><modifier>*</modifier></type> <name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GPIO_InitTypeDef</name></type> <name>GPIO_InitStruct</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name></name><operator>==</operator><name>USART1</name></expr>)</condition>
  <block>{<block_content>
  <comment type="block">/* USER CODE BEGIN USART1_MspInit 0 */</comment>

  <comment type="block">/* USER CODE END USART1_MspInit 0 */</comment>
    <comment type="block">/* Peripheral clock enable */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_USART1_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
    <expr_stmt><expr><call><name>__HAL_RCC_GPIOA_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" format="doxygen">/**USART1 GPIO Configuration    
    PA9     ------&gt; USART1_TX
    PA10     ------&gt; USART1_RX 
    */</comment>
    <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Pin</name></name> <operator>=</operator> <name>GPIO_PIN_9</name><operator>|</operator><name>GPIO_PIN_10</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Mode</name></name> <operator>=</operator> <name>GPIO_MODE_AF_PP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Pull</name></name> <operator>=</operator> <name>GPIO_PULLUP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Speed</name></name> <operator>=</operator> <name>GPIO_SPEED_FREQ_VERY_HIGH</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Alternate</name></name> <operator>=</operator> <name>GPIO_AF7_USART1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HAL_GPIO_Init</name><argument_list>(<argument><expr><name>GPIOA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GPIO_InitStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* USER CODE BEGIN USART1_MspInit 1 */</comment>

  <comment type="block">/* USER CODE END USART1_MspInit 1 */</comment>
  </block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<comment type="block" format="doxygen">/**
* @brief UART MSP De-Initialization
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/</comment>
<function><type><name>void</name></type> <name>HAL_UART_MspDeInit</name><parameter_list>(<parameter><decl><type><name>UART_HandleTypeDef</name><modifier>*</modifier></type> <name>huart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><name><name>huart</name><operator>-&gt;</operator><name>Instance</name></name><operator>==</operator><name>USART1</name></expr>)</condition>
  <block>{<block_content>
  <comment type="block">/* USER CODE BEGIN USART1_MspDeInit 0 */</comment>

  <comment type="block">/* USER CODE END USART1_MspDeInit 0 */</comment>
    <comment type="block">/* Peripheral clock disable */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_USART1_CLK_DISABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
    <comment type="block" format="doxygen">/**USART1 GPIO Configuration    
    PA9     ------&gt; USART1_TX
    PA10     ------&gt; USART1_RX 
    */</comment>
    <expr_stmt><expr><call><name>HAL_GPIO_DeInit</name><argument_list>(<argument><expr><name>GPIOA</name></expr></argument>, <argument><expr><name>GPIO_PIN_9</name><operator>|</operator><name>GPIO_PIN_10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* USER CODE BEGIN USART1_MspDeInit 1 */</comment>

  <comment type="block">/* USER CODE END USART1_MspDeInit 1 */</comment>
  </block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<comment type="block">/* USER CODE BEGIN 1 */</comment>

<comment type="block">/* USER CODE END 1 */</comment>

<comment type="block" format="doxygen">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</comment>
</unit>
