<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/drivers/drv_common.c"><comment type="block">/*
 * Copyright (c) 2006-2019, RT-Thread Development Team
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Change Logs:
 * Date           Author       Notes
 * 2020-04-20     chenyaxing   first version
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stm32f4xx.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>rt_hw_usart_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>system_clock_config</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>clock_information</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>clk_init</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>clk_source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>source_freq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target_freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>HAL_Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* disbale interrupt */</comment>
    <expr_stmt><expr><call><name>__set_PRIMASK</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* system clock config */</comment>
    <expr_stmt><expr><call><name>system_clock_config</name><argument_list>(<argument><expr><name>target_freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* init system tick to 1KHz */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>SOC_SERIES_STM32H7</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>HAL_SYSTICK_Config</name><argument_list>(<argument><expr><operator>(</operator><call><name>HAL_RCCEx_GetD1SysClockFreq</name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>HAL_SYSTICK_Config</name><argument_list>(<argument><expr><call><name>HAL_RCC_GetHCLKFreq</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>HAL_SYSTICK_CLKSourceConfig</name><argument_list>(<argument><expr><name>SYSTICK_CLKSOURCE_HCLK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HAL_NVIC_SetPriority</name><argument_list>(<argument><expr><name>SysTick_IRQn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* enable interrupt */</comment>
    <expr_stmt><expr><call><name>__set_PRIMASK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>uart_init</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>rt_hw_usart_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clock_information</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SysTick_Handler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>HAL_IncTick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_error_handler</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* USER CODE BEGIN Error_Handler */</comment>
    <comment type="block">/* User can add his own implementation to report the HAL error return state */</comment>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
    </block_content>}</block></while>
    <comment type="block">/* USER CODE END Error_Handler */</comment>
</block_content>}</block></function>
</unit>
