<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg_spi_flash/drivers/drv_clk.c"><comment type="block">/*
 * Copyright (c) 2006-2019, RT-Thread Development Team
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Change Logs:
 * Date           Author       Notes
 * 2019-10-26     ChenYong     first version
 * 2020-01-08     xiangxistu   add HSI configuration
 * 2020-04-20     chenyaxing   add system_clock_config frequency parameter
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stm32f4xx.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>_error_handler</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Error_Handler</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Error_Handler</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>_error_handler(__FILE__, __LINE__)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>system_clock_config</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>target_freq_mhz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>RCC_OscInitTypeDef</name></type> <name>RCC_OscInitStruct</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RCC_ClkInitTypeDef</name></type> <name>RCC_ClkInitStruct</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** Configure the main internal regulator output voltage
     */</comment>
    <expr_stmt><expr><call><name>__HAL_RCC_PWR_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>__HAL_PWR_VOLTAGESCALING_CONFIG</name><argument_list>(<argument><expr><name>PWR_REGULATOR_VOLTAGE_SCALE1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" format="doxygen">/** Initializes the CPU, AHB and APB busses clocks
     */</comment>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>.</operator><name>OscillatorType</name></name> <operator>=</operator> <name>RCC_OSCILLATORTYPE_HSI</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>.</operator><name>HSIState</name></name> <operator>=</operator> <name>RCC_HSI_ON</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>.</operator><name>HSICalibrationValue</name></name> <operator>=</operator> <name>RCC_HSICALIBRATION_DEFAULT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>.</operator><name>PLL</name><operator>.</operator><name>PLLState</name></name> <operator>=</operator> <name>RCC_PLL_ON</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>.</operator><name>PLL</name><operator>.</operator><name>PLLSource</name></name> <operator>=</operator> <name>RCC_PLLSOURCE_HSI</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>.</operator><name>PLL</name><operator>.</operator><name>PLLM</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>.</operator><name>PLL</name><operator>.</operator><name>PLLN</name></name> <operator>=</operator> <name>target_freq_mhz</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>.</operator><name>PLL</name><operator>.</operator><name>PLLP</name></name> <operator>=</operator> <name>RCC_PLLP_DIV2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>RCC_OscInitStruct</name><operator>.</operator><name>PLL</name><operator>.</operator><name>PLLQ</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>HAL_RCC_OscConfig</name><argument_list>(<argument><expr><operator>&amp;</operator><name>RCC_OscInitStruct</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Error_Handler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" format="doxygen">/** Initializes the CPU, AHB and APB busses clocks
     */</comment>
    <expr_stmt><expr><name><name>RCC_ClkInitStruct</name><operator>.</operator><name>ClockType</name></name> <operator>=</operator> <name>RCC_CLOCKTYPE_HCLK</name> <operator>|</operator> <name>RCC_CLOCKTYPE_SYSCLK</name> <operator>|</operator> <name>RCC_CLOCKTYPE_PCLK1</name> <operator>|</operator> <name>RCC_CLOCKTYPE_PCLK2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>RCC_ClkInitStruct</name><operator>.</operator><name>SYSCLKSource</name></name> <operator>=</operator> <name>RCC_SYSCLKSOURCE_PLLCLK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>RCC_ClkInitStruct</name><operator>.</operator><name>AHBCLKDivider</name></name> <operator>=</operator> <name>RCC_SYSCLK_DIV1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>RCC_ClkInitStruct</name><operator>.</operator><name>APB1CLKDivider</name></name> <operator>=</operator> <name>RCC_HCLK_DIV4</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>RCC_ClkInitStruct</name><operator>.</operator><name>APB2CLKDivider</name></name> <operator>=</operator> <name>RCC_HCLK_DIV2</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>HAL_RCC_ClockConfig</name><argument_list>(<argument><expr><operator>&amp;</operator><name>RCC_ClkInitStruct</name></expr></argument>, <argument><expr><name>FLASH_LATENCY_5</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Error_Handler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clock_information</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"System Clock information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SYSCLK_Frequency = %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>HAL_RCC_GetSysClockFreq</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"HCLK_Frequency   = %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>HAL_RCC_GetHCLKFreq</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"PCLK1_Frequency  = %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>HAL_RCC_GetPCLK1Freq</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"PCLK2_Frequency  = %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>HAL_RCC_GetPCLK2Freq</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>wait_ms</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ms_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>HAL_Delay</name><argument_list>(<argument><expr><name>ms_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
