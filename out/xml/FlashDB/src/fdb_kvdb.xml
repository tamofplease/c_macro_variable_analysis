<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/src/fdb_kvdb.c"><comment type="block">/*
 * Copyright (c) 2020, Armink, &lt;armink.ztl@gmail.com&gt;
 *
 * SPDX-License-Identifier: Apache-2.0
 */</comment>

<comment type="block" format="doxygen">/**
 * @file
 * @brief KVDB feature.
 *
 * Key-Value Database feature implement source file.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;flashdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fdb_low_lvl.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDB_LOG_TAG</name></cpp:macro> <cpp:value>"[kv]"</cpp:value></cpp:define>
<comment type="block">/* rewrite log prefix */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>FDB_LOG_PREFIX2</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDB_LOG_PREFIX2</name><parameter_list>()</parameter_list></cpp:macro>                         <cpp:value>FDB_PRINT("[%s] ", db_name(db))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FDB_USING_KVDB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FDB_WRITE_GRAN</name></cpp:ifndef>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Please configure flash write granularity (in fdb_cfg.h)"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FDB_WRITE_GRAN</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>FDB_WRITE_GRAN</name> <operator>!=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>FDB_WRITE_GRAN</name> <operator>!=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>FDB_WRITE_GRAN</name> <operator>!=</operator> <literal type="number">64</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"the write gran can be only setting as 1, 8, 32 and 64"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* magic word(`F`, `D`, `B`, `1`) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTOR_MAGIC_WORD</name></cpp:macro>                        <cpp:value>0x30424446</cpp:value></cpp:define>
<comment type="block">/* magic word(`K`, `V`, `0`, `0`) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KV_MAGIC_WORD</name></cpp:macro>                            <cpp:value>0x3030564B</cpp:value></cpp:define>

<comment type="block">/* the sector remain threshold before full status */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FDB_SEC_REMAIN_THRESHOLD</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDB_SEC_REMAIN_THRESHOLD</name></cpp:macro>                  <cpp:value>(KV_HDR_DATA_SIZE + FDB_KV_NAME_MAX)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* the total remain empty sector threshold before GC */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FDB_GC_EMPTY_SEC_THRESHOLD</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDB_GC_EMPTY_SEC_THRESHOLD</name></cpp:macro>                <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* the string KV value buffer size for legacy fdb_get_kv(db, ) function */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FDB_STR_KV_VALUE_MAX_SIZE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDB_STR_KV_VALUE_MAX_SIZE</name></cpp:macro>                <cpp:value>128</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FDB_KV_CACHE_TABLE_SIZE</name> <operator>&gt;</operator> <literal type="number">0xFFFF</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"The KV cache table size must less than 0xFFFF"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* the sector is not combined value */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTOR_NOT_COMBINED</name></cpp:macro>                      <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>
<comment type="block">/* the next address is get failed */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAILED_ADDR</name></cpp:macro>                              <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KV_STATUS_TABLE_SIZE</name></cpp:macro>                     <cpp:value>FDB_STATUS_TABLE_SIZE(FDB_KV_STATUS_NUM)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTOR_NUM</name></cpp:macro>                               <cpp:value>(db_max_size(db) / db_sec_size(db))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTOR_HDR_DATA_SIZE</name></cpp:macro>                     <cpp:value>(FDB_WG_ALIGN(sizeof(struct sector_hdr_data)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTOR_DIRTY_OFFSET</name></cpp:macro>                      <cpp:value>((unsigned long)(&amp;((struct sector_hdr_data *)0)-&gt;status_table.dirty))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KV_HDR_DATA_SIZE</name></cpp:macro>                         <cpp:value>(FDB_WG_ALIGN(sizeof(struct kv_hdr_data)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KV_MAGIC_OFFSET</name></cpp:macro>                          <cpp:value>((unsigned long)(&amp;((struct kv_hdr_data *)0)-&gt;magic))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KV_LEN_OFFSET</name></cpp:macro>                            <cpp:value>((unsigned long)(&amp;((struct kv_hdr_data *)0)-&gt;len))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KV_NAME_LEN_OFFSET</name></cpp:macro>                       <cpp:value>((unsigned long)(&amp;((struct kv_hdr_data *)0)-&gt;name_len))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db_name</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro>                              <cpp:value>(((fdb_db_t)db)-&gt;name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db_init_ok</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro>                           <cpp:value>(((fdb_db_t)db)-&gt;init_ok)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db_sec_size</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro>                          <cpp:value>(((fdb_db_t)db)-&gt;sec_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db_max_size</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro>                          <cpp:value>(((fdb_db_t)db)-&gt;max_size)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db_lock</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro>                                                            \
    <cpp:value>do {                                                                       \
        if (((fdb_db_t)db)-&gt;lock) ((fdb_db_t)db)-&gt;lock((fdb_db_t)db);          \
    } while(0);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db_unlock</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro>                                                          \
    <cpp:value>do {                                                                       \
        if (((fdb_db_t)db)-&gt;unlock) ((fdb_db_t)db)-&gt;unlock((fdb_db_t)db);      \
    } while(0);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VER_NUM_KV_NAME</name></cpp:macro>                         <cpp:value>"__ver_num__"</cpp:value></cpp:define>

<struct>struct <name>sector_hdr_data</name> <block>{
    <struct>struct <block>{
        <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>store</name><index>[<expr><name>FDB_STORE_STATUS_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="block" format="doxygen">/**&lt; sector store status @see fdb_sector_store_status_t */</comment>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>dirty</name><index>[<expr><name>FDB_DIRTY_STATUS_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="block" format="doxygen">/**&lt; sector dirty status @see fdb_sector_dirty_status_t */</comment>
    }</block> <decl><name>status_table</name></decl>;</struct>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>magic</name></decl>;</decl_stmt>                              <comment type="block" format="doxygen">/**&lt; magic word(`E`, `F`, `4`, `0`) */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>combined</name></decl>;</decl_stmt>                           <comment type="block" format="doxygen">/**&lt; the combined next sector number, 0xFFFFFFFF: not combined */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>sector_hdr_data</name></name> <modifier>*</modifier></type><name>sector_hdr_data_t</name>;</typedef>

<struct>struct <name>kv_hdr_data</name> <block>{
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>status_table</name><index>[<expr><name>KV_STATUS_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="block" format="doxygen">/**&lt; KV node status, @see fdb_kv_status_t */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>magic</name></decl>;</decl_stmt>                              <comment type="block" format="doxygen">/**&lt; magic word(`K`, `V`, `4`, `0`) */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>                                <comment type="block" format="doxygen">/**&lt; KV node total length (header + name + value), must align by FDB_WRITE_GRAN */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>crc32</name></decl>;</decl_stmt>                              <comment type="block" format="doxygen">/**&lt; KV node crc32(name_len + data_len + name + value) */</comment>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>name_len</name></decl>;</decl_stmt>                            <comment type="block" format="doxygen">/**&lt; name length */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>value_len</name></decl>;</decl_stmt>                          <comment type="block" format="doxygen">/**&lt; value length */</comment>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>kv_hdr_data</name></name> <modifier>*</modifier></type><name>kv_hdr_data_t</name>;</typedef>

<struct>struct <name>alloc_kv_cb_args</name> <block>{
    <decl_stmt><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>kv_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>empty_kv</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gc_collect</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_KV_USING_CACHE</name></cpp:ifdef>
<comment type="block">/*
 * It's only caching the current using status sector's empty_addr
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>update_sector_cache</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>sec_addr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>empty_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>empty_index</name> <init>= <expr><name>FDB_SECTOR_CACHE_TABLE_SIZE</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FDB_SECTOR_CACHE_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>empty_addr</name> <operator>&gt;</operator> <name>sec_addr</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>empty_addr</name> <operator>&lt;</operator> <name>sec_addr</name> <operator>+</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <comment type="block">/* update the sector empty_addr in cache */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>sector_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>==</operator> <name>sec_addr</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>sector_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>=</operator> <name>sec_addr</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>sector_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>empty_addr</name> <operator>=</operator> <name>empty_addr</name></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>sector_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>==</operator> <name>FDB_DATA_UNUSED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>empty_index</name> <operator>==</operator> <name>FDB_SECTOR_CACHE_TABLE_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>empty_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>sector_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>==</operator> <name>sec_addr</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* delete the sector which status is not current using */</comment>
            <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>sector_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>=</operator> <name>FDB_DATA_UNUSED</name></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* add the sector empty_addr to cache */</comment>
    <if_stmt><if>if <condition>(<expr><name>empty_index</name> <operator>&lt;</operator> <name>FDB_SECTOR_CACHE_TABLE_SIZE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>sector_cache_table</name><index>[<expr><name>empty_index</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>=</operator> <name>sec_addr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>sector_cache_table</name><index>[<expr><name>empty_index</name></expr>]</index></name><operator>.</operator><name>empty_addr</name> <operator>=</operator> <name>empty_addr</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get sector info from cache. It's return true when cache is hit.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_sector_from_cache</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>sec_addr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>empty_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FDB_SECTOR_CACHE_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>sector_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>==</operator> <name>sec_addr</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>empty_addr</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>empty_addr</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>sector_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>empty_addr</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>true</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_kv_cache</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>empty_index</name> <init>= <expr><name>FDB_KV_CACHE_TABLE_SIZE</name></expr></init></decl>, <decl><type ref="prev"/><name>min_activity_index</name> <init>= <expr><name>FDB_KV_CACHE_TABLE_SIZE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>name_crc</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <operator>(</operator><call><name>fdb_calc_crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>min_activity</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FDB_KV_CACHE_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>!=</operator> <name>FDB_DATA_UNUSED</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* update the KV address in cache */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_crc</name> <operator>==</operator> <name>name_crc</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>==</operator> <name>FDB_DATA_UNUSED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>empty_index</name> <operator>==</operator> <name>FDB_KV_CACHE_TABLE_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>empty_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>!=</operator> <name>FDB_DATA_UNUSED</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name><operator>--</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&lt;</operator> <name>min_activity</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>min_activity_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>min_activity</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_crc</name> <operator>==</operator> <name>name_crc</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* delete the KV */</comment>
            <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>=</operator> <name>FDB_DATA_UNUSED</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* add the KV to cache, using LRU (Least Recently Used) like algorithm */</comment>
    <if_stmt><if>if <condition>(<expr><name>empty_index</name> <operator>&lt;</operator> <name>FDB_KV_CACHE_TABLE_SIZE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>empty_index</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>empty_index</name></expr>]</index></name><operator>.</operator><name>name_crc</name> <operator>=</operator> <name>name_crc</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>empty_index</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>min_activity_index</name> <operator>&lt;</operator> <name>FDB_KV_CACHE_TABLE_SIZE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>min_activity_index</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>min_activity_index</name></expr>]</index></name><operator>.</operator><name>name_crc</name> <operator>=</operator> <name>name_crc</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>min_activity_index</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get KV info from cache. It's return true when cache is hit.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_kv_from_cache</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>name_crc</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <operator>(</operator><call><name>fdb_calc_crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FDB_KV_CACHE_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>!=</operator> <name>FDB_DATA_UNUSED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_crc</name> <operator>==</operator> <name>name_crc</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name><name>saved_name</name><index>[<expr><name>FDB_KV_NAME_MAX</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <comment type="block">/* read the KV name in flash */</comment>
            <expr_stmt><expr><call><name>_fdb_flash_read</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>+</operator> <name>KV_HDR_DATA_SIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>saved_name</name></expr></argument>, <argument><expr><name>FDB_KV_NAME_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>saved_name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>addr</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&gt;=</operator> <literal type="number">0xFFFF</literal> <operator>-</operator> <name>FDB_KV_CACHE_TABLE_SIZE</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>+=</operator> <name>FDB_KV_CACHE_TABLE_SIZE</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <return>return <expr><name>true</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_KV_USING_CACHE */</comment>

<comment type="block">/*
 * find the next KV address by magic word on the flash
 */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>find_next_kv_addr</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>start_bak</name> <init>= <expr><name>start</name></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>magic</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_KV_USING_CACHE</name></cpp:ifdef>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>empty_kv</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>get_sector_from_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>FDB_ALIGN_DOWN</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>empty_kv</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>start</name> <operator>==</operator> <name>empty_kv</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>FAILED_ADDR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_KV_USING_CACHE */</comment>

    <for>for <control>(<init>;</init> <condition><expr><name>start</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>start</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>start</name> <operator>+=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>_fdb_flash_read</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name>start</name> <operator>+</operator> <name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FDB_BIG_ENDIAN</name></cpp:ifndef>            <comment type="block">/* Little Endian Order */</comment>
            <expr_stmt><expr><name>magic</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>                       <comment type="block">/* Big Endian Order */</comment>
            <expr_stmt><expr><name>magic</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <if_stmt><if>if <condition>(<expr><name>magic</name> <operator>==</operator> <name>KV_MAGIC_WORD</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>start</name> <operator>+</operator> <name>i</name> <operator>-</operator> <name>KV_MAGIC_OFFSET</name><operator>)</operator> <operator>&gt;=</operator> <name>start_bak</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>start</name> <operator>+</operator> <name>i</name> <operator>-</operator> <name>KV_MAGIC_OFFSET</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <return>return <expr><name>FAILED_ADDR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>get_next_kv_addr</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>kv_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>fdb_kv_t</name></type> <name>pre_kv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><name>FAILED_ADDR</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>store</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_EMPTY</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>FAILED_ADDR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pre_kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name>FAILED_ADDR</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* the first KV address */</comment>
        <expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>sector</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>SECTOR_HDR_DATA_SIZE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pre_kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>&lt;=</operator> <name><name>sector</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>pre_kv</name><operator>-&gt;</operator><name>crc_is_ok</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>pre_kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>+</operator> <name><name>pre_kv</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="block">/* when pre_kv CRC check failed, maybe the flash has error data
                 * find_next_kv_addr after pre_kv address */</comment>
                <expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>pre_kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>+</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <comment type="block">/* check and find next KV address */</comment>
            <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>find_next_kv_addr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>SECTOR_HDR_DATA_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;</operator> <name><name>sector</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>pre_kv</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">//TODO Sector continuous mode</comment>
                <return>return <expr><name>FAILED_ADDR</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* no KV */</comment>
            <return>return <expr><name>FAILED_ADDR</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fdb_err_t</name></type> <name>read_kv</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>fdb_kv_t</name></type> <name>kv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>kv_hdr_data</name></name></type> <name>kv_hdr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>calc_crc32</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>crc_data_len</name></decl>, <decl><type ref="prev"/><name>kv_name_addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
    <comment type="block">/* read KV header raw data */</comment>
    <expr_stmt><expr><call><name>_fdb_flash_read</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>kv_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>kv_hdr_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <operator>(</operator><name>fdb_kv_status_t</name><operator>)</operator> <call><name>_fdb_get_status</name><argument_list>(<argument><expr><name><name>kv_hdr</name><operator>.</operator><name>status_table</name></name></expr></argument>, <argument><expr><name>FDB_KV_STATUS_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>kv_hdr</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <operator>~</operator><literal type="number">0UL</literal> <operator>||</operator> <name><name>kv</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <call><name>db_max_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>kv</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>KV_NAME_LEN_OFFSET</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* the KV length was not write, so reserved the info for current KV */</comment>
        <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>KV_HDR_DATA_SIZE</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>FDB_KV_ERR_HDR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FDB_KV_ERR_HDR</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FDB_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Error: The KV @0x%08"</literal> <name>PRIX32</name> <literal type="string">" length has an error.\n"</literal></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>_fdb_write_status</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>kv_hdr</name><operator>.</operator><name>status_table</name></name></expr></argument>, <argument><expr><name>FDB_KV_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_KV_ERR_HDR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>crc_is_ok</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <return>return <expr><name>FDB_READ_ERR</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>SECTOR_HDR_DATA_SIZE</name> <operator>&amp;&amp;</operator> <name><name>kv</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <call><name>db_max_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">//TODO Sector continuous mode, or the write length is not written completely</comment>
        <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* CRC32 data len(header.name_len + header.value_len + name + value) */</comment>
    <expr_stmt><expr><name>crc_data_len</name> <operator>=</operator> <name><name>kv</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>KV_NAME_LEN_OFFSET</name></expr>;</expr_stmt>
    <comment type="block">/* calculate the CRC32 value */</comment>
    <for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name>crc_data_len</name></expr>;</condition> <incr><expr><name>len</name> <operator>+=</operator> <name>size</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>crc_data_len</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>size</name> <operator>=</operator> <name>crc_data_len</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>_fdb_flash_read</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>+</operator> <name>KV_NAME_LEN_OFFSET</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>calc_crc32</name> <operator>=</operator> <call><name>fdb_calc_crc32</name><argument_list>(<argument><expr><name>calc_crc32</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block">/* check CRC32 */</comment>
    <if_stmt><if>if <condition>(<expr><name>calc_crc32</name> <operator>!=</operator> <name><name>kv_hdr</name><operator>.</operator><name>crc32</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>crc_is_ok</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>FDB_READ_ERR</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>crc_is_ok</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <comment type="block">/* the name is behind aligned KV header */</comment>
        <expr_stmt><expr><name>kv_name_addr</name> <operator>=</operator> <name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>+</operator> <name>KV_HDR_DATA_SIZE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>_fdb_flash_read</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>kv_name_addr</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name><name>kv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name><name>kv_hdr</name><operator>.</operator><name>name_len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* the value is behind aligned name */</comment>
        <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>kv_name_addr</name> <operator>+</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name><name>kv_hdr</name><operator>.</operator><name>name_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>value_len</name></name> <operator>=</operator> <name><name>kv_hdr</name><operator>.</operator><name>value_len</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>name_len</name></name> <operator>=</operator> <name><name>kv_hdr</name><operator>.</operator><name>name_len</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>kv_hdr</name><operator>.</operator><name>name_len</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>kv_hdr</name><operator>.</operator><name>name_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>name</name><index>[<expr><name><name>kv_hdr</name><operator>.</operator><name>name_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fdb_err_t</name></type> <name>read_sector_info</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>kv_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>traversal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sector_hdr_data</name></name></type> <name>sec_hdr</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name>addr</name> <operator>%</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name>sector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* read sector header raw data */</comment>
    <expr_stmt><expr><call><name>_fdb_flash_read</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sec_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sector_hdr_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name><name>sec_hdr</name><operator>.</operator><name>magic</name></name></expr>;</expr_stmt>
    <comment type="block">/* check magic word */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>magic</name></name> <operator>!=</operator> <name>SECTOR_MAGIC_WORD</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>check_ok</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>combined</name></name> <operator>=</operator> <name>SECTOR_NOT_COMBINED</name></expr>;</expr_stmt>
        <return>return <expr><name>FDB_INIT_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>check_ok</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <comment type="block">/* get other sector info */</comment>
    <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>combined</name></name> <operator>=</operator> <name><name>sec_hdr</name><operator>.</operator><name>combined</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>store</name></name> <operator>=</operator> <operator>(</operator><name>fdb_sector_store_status_t</name><operator>)</operator> <call><name>_fdb_get_status</name><argument_list>(<argument><expr><name><name>sec_hdr</name><operator>.</operator><name>status_table</name><operator>.</operator><name>store</name></name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_STATUS_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>dirty</name></name> <operator>=</operator> <operator>(</operator><name>fdb_sector_dirty_status_t</name><operator>)</operator> <call><name>_fdb_get_status</name><argument_list>(<argument><expr><name><name>sec_hdr</name><operator>.</operator><name>status_table</name><operator>.</operator><name>dirty</name></name></expr></argument>, <argument><expr><name>FDB_SECTOR_DIRTY_STATUS_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* traversal all KV and calculate the remain space size */</comment>
    <if_stmt><if>if <condition>(<expr><name>traversal</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>remain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>empty_kv</name></name> <operator>=</operator> <name><name>sector</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>SECTOR_HDR_DATA_SIZE</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>store</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_EMPTY</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>remain</name></name> <operator>=</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>SECTOR_HDR_DATA_SIZE</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>store</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_USING</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>fdb_kv</name></name></type> <name>kv_obj</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_KV_USING_CACHE</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><call><name>get_sector_from_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sector</name><operator>-&gt;</operator><name>empty_kv</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>remain</name></name> <operator>=</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name><name>sector</name><operator>-&gt;</operator><name>empty_kv</name></name> <operator>-</operator> <name><name>sector</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr>;</expr_stmt>
                <return>return <expr><name>result</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_KV_USING_CACHE */</comment>

            <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>remain</name></name> <operator>=</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>SECTOR_HDR_DATA_SIZE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>kv_obj</name><operator>.</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name><name>sector</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>SECTOR_HDR_DATA_SIZE</name></expr>;</expr_stmt>
            <do>do <block>{<block_content>

                <expr_stmt><expr><call><name>read_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>kv_obj</name><operator>.</operator><name>crc_is_ok</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>kv_obj</name><operator>.</operator><name>status</name></name> <operator>!=</operator> <name>FDB_KV_PRE_WRITE</name> <operator>&amp;&amp;</operator> <name><name>kv_obj</name><operator>.</operator><name>status</name></name> <operator>!=</operator> <name>FDB_KV_ERR_HDR</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: The KV (@0x%08"</literal> <name>PRIX32</name> <literal type="string">") CRC32 check failed!\n"</literal></expr></argument>, <argument><expr><name><name>kv_obj</name><operator>.</operator><name>addr</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>remain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>FDB_READ_ERR</name></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>empty_kv</name></name> <operator>+=</operator> <name><name>kv_obj</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>remain</name></name> <operator>-=</operator> <name><name>kv_obj</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><operator>(</operator><name><name>kv_obj</name><operator>.</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>get_next_kv_addr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv_obj</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FAILED_ADDR</name></expr>)</condition>;</do>
            <comment type="block">/* check the empty KV address by read continue 0xFF on flash  */</comment>
            <block>{<block_content>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>ff_addr</name></decl>;</decl_stmt>

                <expr_stmt><expr><name>ff_addr</name> <operator>=</operator> <call><name>_fdb_continue_ff_addr</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name><name>sector</name><operator>-&gt;</operator><name>empty_kv</name></name></expr></argument>, <argument><expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* check the flash data is clean */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>empty_kv</name></name> <operator>!=</operator> <name>ff_addr</name></expr>)</condition> <block>{<block_content>
                    <comment type="block">/* update the sector information */</comment>
                    <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>empty_kv</name></name> <operator>=</operator> <name>ff_addr</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>remain</name></name> <operator>=</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>ff_addr</name> <operator>-</operator> <name><name>sector</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_KV_USING_CACHE</name></cpp:ifdef>
            <expr_stmt><expr><call><name>update_sector_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>sector</name><operator>-&gt;</operator><name>empty_kv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>get_next_sector_addr</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>kv_sec_info_t</name></type> <name>pre_sec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>next_addr</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pre_sec</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>FAILED_ADDR</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* the next sector is on the top of the database */</comment>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* check KV sector combined */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>pre_sec</name><operator>-&gt;</operator><name>combined</name></name> <operator>==</operator> <name>SECTOR_NOT_COMBINED</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>next_addr</name> <operator>=</operator> <name><name>pre_sec</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>next_addr</name> <operator>=</operator> <name><name>pre_sec</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>pre_sec</name><operator>-&gt;</operator><name>combined</name></name> <operator>*</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <comment type="block">/* check range */</comment>
        <if_stmt><if>if <condition>(<expr><name>next_addr</name> <operator>&lt;</operator> <call><name>db_max_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>next_addr</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* no sector */</comment>
            <return>return <expr><name>FAILED_ADDR</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>kv_iterator</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>fdb_kv_t</name></type> <name>kv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>,
        <parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>fdb_kv_t</name></type> <name>kv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>kvdb_sec_info</name></name></type> <name>sector</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>sec_addr</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>sec_addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="block">/* search all sectors */</comment>
    <do>do <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>read_sector_info</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sec_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>callback</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* sector has KV */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>.</operator><name>status</name><operator>.</operator><name>store</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_USING</name> <operator>||</operator> <name><name>sector</name><operator>.</operator><name>status</name><operator>.</operator><name>store</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_FULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name><name>sector</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name>SECTOR_HDR_DATA_SIZE</name></expr>;</expr_stmt>
            <comment type="block">/* search all KV */</comment>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name>read_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* iterator is interrupted when callback return true */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>callback</name><argument_list>(<argument><expr><name>kv</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> while <condition>(<expr><operator>(</operator><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>get_next_kv_addr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FAILED_ADDR</name></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition>(<expr><operator>(</operator><name>sec_addr</name> <operator>=</operator> <call><name>get_next_sector_addr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FAILED_ADDR</name></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>find_kv_cb</name><parameter_list>(<parameter><decl><type><name>fdb_kv_t</name></type> <name>kv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>arg1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>find_ok</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>key_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>key_len</name> <operator>!=</operator> <name><name>kv</name><operator>-&gt;</operator><name>name_len</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* check KV */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>crc_is_ok</name></name> <operator>&amp;&amp;</operator> <name><name>kv</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FDB_KV_WRITE</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>find_ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>find_kv_no_cache</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>fdb_kv_t</name></type> <name>kv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>find_ok</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>kv_iterator</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>find_ok</name></expr></argument>, <argument><expr><name>find_kv_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>find_ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>find_kv</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>fdb_kv_t</name></type> <name>kv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>find_ok</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_KV_USING_CACHE</name></cpp:ifdef>
    <decl_stmt><decl><type><name>size_t</name></type> <name>key_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>get_kv_from_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>read_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_KV_USING_CACHE */</comment>

    <expr_stmt><expr><name>find_ok</name> <operator>=</operator> <call><name>find_kv_no_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_KV_USING_CACHE</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>find_ok</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>update_kv_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_KV_USING_CACHE */</comment>

    <return>return <expr><name>find_ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fdb_is_str</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__is_print</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>((unsigned int)((ch) - ' ') &lt; 127u - ' ')</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__is_print</name><argument_list>(<argument><expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>get_kv</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>value_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fdb_kv</name></name></type> <name>kv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>read_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>find_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value_len</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>value_len</name> <operator>=</operator> <name><name>kv</name><operator>.</operator><name>value_len</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>buf_len</name> <operator>&gt;</operator> <name><name>kv</name><operator>.</operator><name>value_len</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>read_len</name> <operator>=</operator> <name><name>kv</name><operator>.</operator><name>value_len</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>read_len</name> <operator>=</operator> <name>buf_len</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>value_buf</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>_fdb_flash_read</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name><name>kv</name><operator>.</operator><name>addr</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>value_buf</name></expr></argument>, <argument><expr><name>read_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value_len</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>value_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>read_len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Get a KV object by key name
 *
 * @param db database object
 * @param key KV name
 * @param kv KV object
 *
 * @return KV object when is not NULL
 */</comment>
<function><type><name>fdb_kv_t</name></type> <name>fdb_kv_get_obj</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>fdb_kv_t</name></type> <name>kv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>find_ok</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>db_init_ok</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: KV (%s) isn't initialize OK.\n"</literal></expr></argument>, <argument><expr><call><name>db_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* lock the KV cache */</comment>
    <expr_stmt><expr><call><name>db_lock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>find_ok</name> <operator>=</operator> <call><name>find_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* unlock the KV cache */</comment>
    <expr_stmt><expr><call><name>db_unlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><ternary><condition><expr><name>find_ok</name></expr> ?</condition><then> <expr><name>kv</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Convert the KV object to blob object
 *
 * @param kv KV object
 * @param blob blob object
 *
 * @return new blob object
 */</comment>
<function><type><name>fdb_blob_t</name></type> <name>fdb_kv_to_blob</name><parameter_list>(<parameter><decl><type><name>fdb_kv_t</name></type> <name>kv</name></decl></parameter>, <parameter><decl><type><name>fdb_blob_t</name></type> <name>blob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>blob</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>meta_addr</name></name> <operator>=</operator> <name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blob</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blob</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>kv</name><operator>-&gt;</operator><name>value_len</name></name></expr>;</expr_stmt>

    <return>return <expr><name>blob</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Get a blob KV value by key name.
 *
 * @param db database object
 * @param key KV name
 * @param blob blob object
 *
 * @return the actually get size on successful
 */</comment>
<function><type><name>size_t</name></type> <name>fdb_kv_get_blob</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>fdb_blob_t</name></type> <name>blob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>read_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>db_init_ok</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: KV (%s) isn't initialize OK.\n"</literal></expr></argument>, <argument><expr><call><name>db_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* lock the KV cache */</comment>
    <expr_stmt><expr><call><name>db_lock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>read_len</name> <operator>=</operator> <call><name>get_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>blob</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>blob</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>blob</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* unlock the KV cache */</comment>
    <expr_stmt><expr><call><name>db_unlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>read_len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Get an KV value by key name.
 *
 * @note this function is NOT supported reentrant
 * @note this function is DEPRECATED
 *
 * @param db database object
 * @param key KV name
 *
 * @return value
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>fdb_kv_get</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>value</name><index>[<expr><name>FDB_STR_KV_VALUE_MAX_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>get_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fdb_blob</name></name></type> <name>blob</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>get_size</name> <operator>=</operator> <call><name>fdb_kv_get_blob</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>fdb_blob_make</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blob</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>FDB_STR_KV_VALUE_MAX_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* the return value must be string */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>fdb_is_str</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>, <argument><expr><name>get_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>value</name><index>[<expr><name>get_size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <return>return <expr><name>value</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>blob</name><operator>.</operator><name>saved</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name>FDB_STR_KV_VALUE_MAX_SIZE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Warning: The default string KV value buffer length (%"</literal> <name>PRIdLEAST16</name> <literal type="string">") is too less (%"</literal> <name>PRIu32</name> <literal type="string">").\n"</literal></expr></argument>, <argument><expr><name>FDB_STR_KV_VALUE_MAX_SIZE</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>blob</name><operator>.</operator><name>saved</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Warning: The KV value isn't string. Could not be returned\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fdb_err_t</name></type> <name>write_kv_hdr</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>kv_hdr_data_t</name></type> <name>kv_hdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* write the status will by write granularity */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_fdb_write_status</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>kv_hdr</name><operator>-&gt;</operator><name>status_table</name></name></expr></argument>, <argument><expr><name>FDB_KV_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_KV_PRE_WRITE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* write other header data */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_fdb_flash_write</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name>KV_MAGIC_OFFSET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>kv_hdr</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><name>KV_HDR_DATA_SIZE</name> <operator>-</operator> <name>KV_MAGIC_OFFSET</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fdb_err_t</name></type> <name>format_sector</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>combined_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sector_hdr_data</name></name></type> <name>sec_hdr</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name>addr</name> <operator>%</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_fdb_flash_erase</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* initialize the header data */</comment>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec_hdr</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sector_hdr_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>_fdb_set_status</name><argument_list>(<argument><expr><name><name>sec_hdr</name><operator>.</operator><name>status_table</name><operator>.</operator><name>store</name></name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>_fdb_set_status</name><argument_list>(<argument><expr><name><name>sec_hdr</name><operator>.</operator><name>status_table</name><operator>.</operator><name>dirty</name></name></expr></argument>, <argument><expr><name>FDB_SECTOR_DIRTY_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_SECTOR_DIRTY_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sec_hdr</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <name>SECTOR_MAGIC_WORD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sec_hdr</name><operator>.</operator><name>combined</name></name> <operator>=</operator> <name>combined_value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sec_hdr</name><operator>.</operator><name>reserved</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>
        <comment type="block">/* save the header */</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_fdb_flash_write</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sec_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sector_hdr_data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_KV_USING_CACHE</name></cpp:ifdef>
        <comment type="block">/* delete the sector cache */</comment>
        <expr_stmt><expr><call><name>update_sector_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_KV_USING_CACHE */</comment>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fdb_err_t</name></type> <name>update_sec_status</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>kv_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>new_kv_len</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>is_full</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>status_table</name><index>[<expr><name>FDB_STORE_STATUS_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* change the current sector status */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>store</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_EMPTY</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* change the sector status to using */</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_fdb_write_status</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>status_table</name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_USING</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>store</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_USING</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* check remain size */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>remain</name></name> <operator>&lt;</operator> <name>FDB_SEC_REMAIN_THRESHOLD</name> <operator>||</operator> <name><name>sector</name><operator>-&gt;</operator><name>remain</name></name> <operator>-</operator> <name>new_kv_len</name> <operator>&lt;</operator> <name>FDB_SEC_REMAIN_THRESHOLD</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* change the sector status to full */</comment>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_fdb_write_status</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>status_table</name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_FULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_KV_USING_CACHE</name></cpp:ifdef>
            <comment type="block">/* delete the sector cache */</comment>
            <expr_stmt><expr><call><name>update_sector_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_KV_USING_CACHE */</comment>

            <if_stmt><if>if <condition>(<expr><name>is_full</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>is_full</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>is_full</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>is_full</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sector_iterator</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>kv_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>fdb_sector_store_status_t</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>,
        <parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>kv_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>traversal_kv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>sec_addr</name></decl>;</decl_stmt>

    <comment type="block">/* search all sectors */</comment>
    <expr_stmt><expr><name>sec_addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <do>do <block>{<block_content>
        <expr_stmt><expr><call><name>read_sector_info</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sec_addr</name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>FDB_SECTOR_STORE_UNUSED</name> <operator>||</operator> <name>status</name> <operator>==</operator> <name><name>sector</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>store</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>traversal_kv</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read_sector_info</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sec_addr</name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/* iterator is interrupted when callback return true */</comment>
            <if_stmt><if>if <condition>(<expr><name>callback</name> <operator>&amp;&amp;</operator> <call><name>callback</name><argument_list>(<argument><expr><name>sector</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition>(<expr><operator>(</operator><name>sec_addr</name> <operator>=</operator> <call><name>get_next_sector_addr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sector</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FAILED_ADDR</name></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sector_statistics_cb</name><parameter_list>(<parameter><decl><type><name>kv_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>empty_sector</name> <init>= <expr><name>arg1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>using_sector</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>check_ok</name></name> <operator>&amp;&amp;</operator> <name><name>sector</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>store</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_EMPTY</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>empty_sector</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>check_ok</name></name> <operator>&amp;&amp;</operator> <name><name>sector</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>store</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_USING</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>using_sector</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>alloc_kv_cb</name><parameter_list>(<parameter><decl><type><name>kv_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>alloc_kv_cb_args</name></name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>arg1</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* 1. sector has space
     * 2. the NO dirty sector
     * 3. the dirty sector only when the gc_request is false */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>check_ok</name></name> <operator>&amp;&amp;</operator> <name><name>sector</name><operator>-&gt;</operator><name>remain</name></name> <operator>&gt;</operator> <name><name>arg</name><operator>-&gt;</operator><name>kv_size</name></name>
            <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>sector</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>dirty</name></name> <operator>==</operator> <name>FDB_SECTOR_DIRTY_FALSE</name><operator>)</operator>
                    <operator>||</operator> <operator>(</operator><name><name>sector</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>dirty</name></name> <operator>==</operator> <name>FDB_SECTOR_DIRTY_TRUE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>arg</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>gc_request</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>arg</name><operator>-&gt;</operator><name>empty_kv</name></name><operator>)</operator> <operator>=</operator> <name><name>sector</name><operator>-&gt;</operator><name>empty_kv</name></name></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>alloc_kv</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>kv_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>kv_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>empty_kv</name> <init>= <expr><name>FAILED_ADDR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>empty_sector</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>using_sector</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>alloc_kv_cb_args</name></name></type> <name>arg</name> <init>= <expr><block>{<expr><name>db</name></expr>, <expr><name>kv_size</name></expr>, <expr><operator>&amp;</operator><name>empty_kv</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="block">/* sector status statistics */</comment>
    <expr_stmt><expr><call><name>sector_iterator</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_UNUSED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>empty_sector</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>using_sector</name></expr></argument>, <argument><expr><name>sector_statistics_cb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>using_sector</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* alloc the KV from the using status sector first */</comment>
        <expr_stmt><expr><call><name>sector_iterator</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_USING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>alloc_kv_cb</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>empty_sector</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>empty_kv</name> <operator>==</operator> <name>FAILED_ADDR</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>empty_sector</name> <operator>&gt;</operator> <name>FDB_GC_EMPTY_SEC_THRESHOLD</name> <operator>||</operator> <name><name>db</name><operator>-&gt;</operator><name>gc_request</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sector_iterator</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_EMPTY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>alloc_kv_cb</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* no space for new KV now will GC and retry */</comment>
            <expr_stmt><expr><call><name>FDB_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Trigger a GC check after alloc KV failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>gc_request</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>empty_kv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fdb_err_t</name></type> <name>del_kv</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>fdb_kv_t</name></type> <name>old_kv</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>complete_del</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>dirty_status_addr</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>KV_STATUS_TABLE_SIZE</name> <operator>&gt;=</operator> <name>FDB_DIRTY_STATUS_TABLE_SIZE</name><operator>)</operator></expr></cpp:if>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>status_table</name><index>[<expr><name>KV_STATUS_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>status_table</name><index>[<expr><name>DIRTY_STATUS_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* need find KV */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_kv</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>fdb_kv</name></name></type> <name>kv</name></decl>;</decl_stmt>
        <comment type="block">/* find KV */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>find_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>old_kv</name> <operator>=</operator> <operator>&amp;</operator><name>kv</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>FDB_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Not found '%s' in KV.\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>FDB_KV_NAME_ERR</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* change and save the new status */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>complete_del</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_fdb_write_status</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name><name>old_kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>status_table</name></expr></argument>, <argument><expr><name>FDB_KV_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_KV_PRE_DELETE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>last_is_complete_del</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_fdb_write_status</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name><name>old_kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>status_table</name></expr></argument>, <argument><expr><name>FDB_KV_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_KV_DELETED</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>last_is_complete_del</name></name> <operator>&amp;&amp;</operator> <name>result</name> <operator>==</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_KV_USING_CACHE</name></cpp:ifdef>
            <comment type="block">/* delete the KV in flash and cache */</comment>
            <if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* when using del_kv(db, key, NULL, true) or del_kv(db, key, kv, true) in fdb_del_kv(db, ) and set_kv(db, ) */</comment>
                <expr_stmt><expr><call><name>update_kv_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FDB_DATA_UNUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>old_kv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* when using del_kv(db, NULL, kv, true) in move_kv(db, ) */</comment>
                <expr_stmt><expr><call><name>update_kv_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>old_kv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>old_kv</name><operator>-&gt;</operator><name>name_len</name></name></expr></argument>, <argument><expr><name>FDB_DATA_UNUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_KV_USING_CACHE */</comment>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>last_is_complete_del</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>dirty_status_addr</name> <operator>=</operator> <call><name>FDB_ALIGN_DOWN</name><argument_list>(<argument><expr><name><name>old_kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name>SECTOR_DIRTY_OFFSET</name></expr>;</expr_stmt>
    <comment type="block">/* read and change the sector dirty status */</comment>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>FDB_NO_ERR</name>
            <operator>&amp;&amp;</operator> <call><name>_fdb_read_status</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>dirty_status_addr</name></expr></argument>, <argument><expr><name>status_table</name></expr></argument>, <argument><expr><name>FDB_SECTOR_DIRTY_STATUS_NUM</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FDB_SECTOR_DIRTY_FALSE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_fdb_write_status</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>dirty_status_addr</name></expr></argument>, <argument><expr><name>status_table</name></expr></argument>, <argument><expr><name>FDB_SECTOR_DIRTY_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_SECTOR_DIRTY_TRUE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * move the KV to new space
 */</comment>
<function><type><specifier>static</specifier> <name>fdb_err_t</name></type> <name>move_kv</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>fdb_kv_t</name></type> <name>kv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>status_table</name><index>[<expr><name>KV_STATUS_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>kv_addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>kvdb_sec_info</name></name></type> <name>sector</name></decl>;</decl_stmt>

    <comment type="block">/* prepare to delete the current KV */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FDB_KV_WRITE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>del_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>kv_addr</name> <operator>=</operator> <call><name>alloc_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FAILED_ADDR</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>in_recovery_check</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>fdb_kv</name></name></type> <name>kv_bak</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>FDB_KV_NAME_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>name_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* check the KV in flash is already create success */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>find_kv_no_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv_bak</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="block">/* already create success, don't need to duplicate */</comment>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name>FDB_NO_ERR</name></expr>;</expr_stmt>
                <goto>goto <name>__exit</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>FDB_SAVED_FULL</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* start move the KV */</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>kv_len</name> <init>= <expr><name><name>kv</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* update the new KV sector status first */</comment>
        <expr_stmt><expr><call><name>update_sec_status</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>_fdb_write_status</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>kv_addr</name></expr></argument>, <argument><expr><name>status_table</name></expr></argument>, <argument><expr><name>FDB_KV_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_KV_PRE_WRITE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>kv_len</name> <operator>-=</operator> <name>KV_MAGIC_OFFSET</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name>kv_len</name></expr>;</condition> <incr><expr><name>len</name> <operator>+=</operator> <name>size</name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>kv_len</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>size</name> <operator>=</operator> <name>kv_len</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>_fdb_flash_read</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>+</operator> <name>KV_MAGIC_OFFSET</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_fdb_flash_write</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>kv_addr</name> <operator>+</operator> <name>KV_MAGIC_OFFSET</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>_fdb_write_status</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>kv_addr</name></expr></argument>, <argument><expr><name>status_table</name></expr></argument>, <argument><expr><name>FDB_KV_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_KV_WRITE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_KV_USING_CACHE</name></cpp:ifdef>
        <expr_stmt><expr><call><name>update_sector_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>FDB_ALIGN_DOWN</name><argument_list>(<argument><expr><name>kv_addr</name></expr></argument>, <argument><expr><call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>kv_addr</name> <operator>+</operator> <name>KV_HDR_DATA_SIZE</name> <operator>+</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>name_len</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>value_len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>update_kv_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>name_len</name></name></expr></argument>, <argument><expr><name>kv_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_KV_USING_CACHE */</comment>
    </block_content>}</block>

    <expr_stmt><expr><call><name>FDB_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Moved the KV (%.*s) from 0x%08"</literal> <name>PRIX32</name> <literal type="string">" to 0x%08"</literal> <name>PRIX32</name> <literal type="string">".\n"</literal></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>name_len</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>kv_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>__exit</name>:</label>
    <expr_stmt><expr><call><name>del_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>new_kv</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>kv_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>kv_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>already_gc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>empty_kv</name> <init>= <expr><name>FAILED_ADDR</name></expr></init></decl>;</decl_stmt>

<label><name>__retry</name>:</label>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>empty_kv</name> <operator>=</operator> <call><name>alloc_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><name>kv_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>FAILED_ADDR</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>gc_request</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>already_gc</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>FDB_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Warning: Alloc an KV (size %"</literal> <name>PRIu32</name> <literal type="string">") failed when new KV. Now will GC then retry.\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>kv_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>gc_collect</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>already_gc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <goto>goto <name>__retry</name>;</goto>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>already_gc</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>FDB_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Error: Alloc an KV (size %"</literal> <name>PRIuLEAST16</name> <literal type="string">") failed after GC. KV full.\n"</literal></expr></argument>, <argument><expr><name>kv_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>gc_request</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>empty_kv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>new_kv_ex</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>kv_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>kv_len</name> <init>= <expr><name>KV_HDR_DATA_SIZE</name> <operator>+</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name>key_len</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>new_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><name>kv_len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>gc_check_cb</name><parameter_list>(<parameter><decl><type><name>kv_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>empty_sec</name> <init>= <expr><name>arg1</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>check_ok</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>empty_sec</name> <operator>=</operator> <operator>*</operator><name>empty_sec</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>do_gc</name><parameter_list>(<parameter><decl><type><name>kv_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fdb_kv</name></name></type> <name>kv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>fdb_kvdb_t</name></type> <name>db</name> <init>= <expr><name>arg1</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>check_ok</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sector</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>dirty</name></name> <operator>==</operator> <name>FDB_SECTOR_DIRTY_TRUE</name> <operator>||</operator> <name><name>sector</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>dirty</name></name> <operator>==</operator> <name>FDB_SECTOR_DIRTY_GC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>status_table</name><index>[<expr><name>FDB_DIRTY_STATUS_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
        <comment type="block">/* change the sector status to GC */</comment>
        <expr_stmt><expr><call><name>_fdb_write_status</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>SECTOR_DIRTY_OFFSET</name></expr></argument>, <argument><expr><name>status_table</name></expr></argument>, <argument><expr><name>FDB_SECTOR_DIRTY_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_SECTOR_DIRTY_GC</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* search all KV */</comment>
        <expr_stmt><expr><name><name>kv</name><operator>.</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name><name>sector</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>SECTOR_HDR_DATA_SIZE</name></expr>;</expr_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name>read_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>.</operator><name>crc_is_ok</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>kv</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>FDB_KV_WRITE</name> <operator>||</operator> <name><name>kv</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>FDB_KV_PRE_DELETE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <comment type="block">/* move the KV to new space */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>move_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>FDB_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Error: Moved the KV (%.*s) for GC failed.\n"</literal></expr></argument>, <argument><expr><name><name>kv</name><operator>.</operator><name>name_len</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> while <condition>(<expr><operator>(</operator><name><name>kv</name><operator>.</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>get_next_kv_addr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FAILED_ADDR</name></expr>)</condition>;</do>
        <expr_stmt><expr><call><name>format_sector</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>SECTOR_NOT_COMBINED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FDB_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Collect a sector @0x%08"</literal> <name>PRIX32</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * The GC will be triggered on the following scene:
 * 1. alloc an KV when the flash not has enough space
 * 2. write an KV then the flash not has enough space
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>gc_collect</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>kvdb_sec_info</name></name></type> <name>sector</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>empty_sec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* GC check the empty sector number */</comment>
    <expr_stmt><expr><call><name>sector_iterator</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_EMPTY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>empty_sec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>gc_check_cb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* do GC collect */</comment>
    <expr_stmt><expr><call><name>FDB_DEBUG</name><argument_list>(<argument><expr><literal type="string">"The remain empty sector is %"</literal> <name>PRIu32</name> <literal type="string">", GC threshold is %"</literal> <name>PRIdLEAST16</name> <literal type="string">".\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>empty_sec</name></expr></argument>, <argument><expr><name>FDB_GC_EMPTY_SEC_THRESHOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>empty_sec</name> <operator>&lt;=</operator> <name>FDB_GC_EMPTY_SEC_THRESHOLD</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sector_iterator</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_UNUSED</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>do_gc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>gc_request</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fdb_err_t</name></type> <name>align_write</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>align_remain</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>FDB_WRITE_GRAN</name> <operator>/</operator> <literal type="number">8</literal> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></cpp:if>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>align_data</name><index>[<expr><name>FDB_WRITE_GRAN</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>align_data_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>align_data</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* For compatibility with C89 */</comment>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>align_data_u8</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>align_data</name> <init>= <expr><operator>&amp;</operator><name>align_data_u8</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>align_data_size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>align_data</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><name>align_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_fdb_flash_write</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>FDB_WG_ALIGN_DOWN</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>align_remain</name> <operator>=</operator> <name>size</name> <operator>-</operator> <call><name>FDB_WG_ALIGN_DOWN</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>FDB_NO_ERR</name> <operator>&amp;&amp;</operator> <name>align_remain</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>align_data</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <call><name>FDB_WG_ALIGN_DOWN</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>align_remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_fdb_flash_write</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <call><name>FDB_WG_ALIGN_DOWN</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>align_data</name></expr></argument>, <argument><expr><name>align_data_size</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fdb_err_t</name></type> <name>create_kv_blob</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>kv_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>kv_hdr_data</name></name></type> <name>kv_hdr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_full</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>kv_addr</name> <init>= <expr><name><name>sector</name><operator>-&gt;</operator><name>empty_kv</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>FDB_KV_NAME_MAX</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: The KV name length is more than %d\n"</literal></expr></argument>, <argument><expr><name>FDB_KV_NAME_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FDB_KV_NAME_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kv_hdr</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>kv_hdr_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kv_hdr</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <name>KV_MAGIC_WORD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kv_hdr</name><operator>.</operator><name>name_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kv_hdr</name><operator>.</operator><name>value_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kv_hdr</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>KV_HDR_DATA_SIZE</name> <operator>+</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name><name>kv_hdr</name><operator>.</operator><name>name_len</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name><name>kv_hdr</name><operator>.</operator><name>value_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>kv_hdr</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>SECTOR_HDR_DATA_SIZE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: The KV size is too big\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FDB_SAVED_FULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>kv_addr</name> <operator>!=</operator> <name>FAILED_ADDR</name> <operator>||</operator> <operator>(</operator><name>kv_addr</name> <operator>=</operator> <call><name>new_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><name><name>kv_hdr</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FAILED_ADDR</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>align_remain</name></decl>;</decl_stmt>
        <comment type="block">/* update the sector status */</comment>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>update_sec_status</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><name><name>kv_hdr</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>uint8_t</name></type> <name>ff</name> <init>= <expr><literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
            <comment type="block">/* start calculate CRC32 */</comment>
            <expr_stmt><expr><name><name>kv_hdr</name><operator>.</operator><name>crc32</name></name> <operator>=</operator> <call><name>fdb_calc_crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>kv_hdr</name><operator>.</operator><name>name_len</name></name></expr></argument>, <argument><expr><name>KV_HDR_DATA_SIZE</name> <operator>-</operator> <name>KV_NAME_LEN_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>kv_hdr</name><operator>.</operator><name>crc32</name></name> <operator>=</operator> <call><name>fdb_calc_crc32</name><argument_list>(<argument><expr><name><name>kv_hdr</name><operator>.</operator><name>crc32</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>kv_hdr</name><operator>.</operator><name>name_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>align_remain</name> <operator>=</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name><name>kv_hdr</name><operator>.</operator><name>name_len</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>kv_hdr</name><operator>.</operator><name>name_len</name></name></expr>;</expr_stmt>
            <while>while <condition>(<expr><name>align_remain</name><operator>--</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>kv_hdr</name><operator>.</operator><name>crc32</name></name> <operator>=</operator> <call><name>fdb_calc_crc32</name><argument_list>(<argument><expr><name><name>kv_hdr</name><operator>.</operator><name>crc32</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><name><name>kv_hdr</name><operator>.</operator><name>crc32</name></name> <operator>=</operator> <call><name>fdb_calc_crc32</name><argument_list>(<argument><expr><name><name>kv_hdr</name><operator>.</operator><name>crc32</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>kv_hdr</name><operator>.</operator><name>value_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>align_remain</name> <operator>=</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name><name>kv_hdr</name><operator>.</operator><name>value_len</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>kv_hdr</name><operator>.</operator><name>value_len</name></name></expr>;</expr_stmt>
            <while>while <condition>(<expr><name>align_remain</name><operator>--</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>kv_hdr</name><operator>.</operator><name>crc32</name></name> <operator>=</operator> <call><name>fdb_calc_crc32</name><argument_list>(<argument><expr><name><name>kv_hdr</name><operator>.</operator><name>crc32</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <comment type="block">/* write KV header data */</comment>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>write_kv_hdr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>kv_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>
        <comment type="block">/* write key name */</comment>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>align_write</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>kv_addr</name> <operator>+</operator> <name>KV_HDR_DATA_SIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>, <argument><expr><name><name>kv_hdr</name><operator>.</operator><name>name_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_KV_USING_CACHE</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_full</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>update_sector_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,
                        <argument><expr><name>kv_addr</name> <operator>+</operator> <name>KV_HDR_DATA_SIZE</name> <operator>+</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name><name>kv_hdr</name><operator>.</operator><name>name_len</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name><name>kv_hdr</name><operator>.</operator><name>value_len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>update_kv_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>kv_hdr</name><operator>.</operator><name>name_len</name></name></expr></argument>, <argument><expr><name>kv_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_KV_USING_CACHE */</comment>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* write value */</comment>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>align_write</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>kv_addr</name> <operator>+</operator> <name>KV_HDR_DATA_SIZE</name> <operator>+</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name><name>kv_hdr</name><operator>.</operator><name>name_len</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>,
                    <argument><expr><name><name>kv_hdr</name><operator>.</operator><name>value_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* change the KV status to KV_WRITE */</comment>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_fdb_write_status</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>kv_addr</name></expr></argument>, <argument><expr><name><name>kv_hdr</name><operator>.</operator><name>status_table</name></name></expr></argument>, <argument><expr><name>FDB_KV_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_KV_WRITE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* trigger GC collect when current sector is full */</comment>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>FDB_NO_ERR</name> <operator>&amp;&amp;</operator> <name>is_full</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>FDB_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Trigger a GC check after created KV.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>gc_request</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>FDB_SAVED_FULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Delete an KV.
 *
 * @param db database object
 * @param key KV name
 *
 * @return result
 */</comment>
<function><type><name>fdb_err_t</name></type> <name>fdb_kv_del</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>db_init_ok</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: KV (%s) isn't initialize OK.\n"</literal></expr></argument>, <argument><expr><call><name>db_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FDB_INIT_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* lock the KV cache */</comment>
    <expr_stmt><expr><call><name>db_lock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>del_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* unlock the KV cache */</comment>
    <expr_stmt><expr><call><name>db_unlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fdb_err_t</name></type> <name>set_kv</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>kv_is_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>value_buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>del_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* make sure the flash has enough space */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>new_kv_ex</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cur_sector</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAILED_ADDR</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>FDB_SAVED_FULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>kv_is_found</name> <operator>=</operator> <call><name>find_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cur_kv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* prepare to delete the old KV */</comment>
        <if_stmt><if>if <condition>(<expr><name>kv_is_found</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>del_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cur_kv</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* create the new KV */</comment>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>create_kv_blob</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cur_sector</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value_buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* delete the old KV */</comment>
        <if_stmt><if>if <condition>(<expr><name>kv_is_found</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>==</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>del_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cur_kv</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* process the GC after set KV */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>gc_request</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>gc_collect</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Set a blob KV. If it blob value is NULL, delete it.
 * If not find it in flash, then create it.
 *
 * @param db database object
 * @param key KV name
 * @param blob blob object
 *
 * @return result
 */</comment>
<function><type><name>fdb_err_t</name></type> <name>fdb_kv_set_blob</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>fdb_blob_t</name></type> <name>blob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>db_init_ok</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: KV (%s) isn't initialize OK.\n"</literal></expr></argument>, <argument><expr><call><name>db_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FDB_INIT_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* lock the KV cache */</comment>
    <expr_stmt><expr><call><name>db_lock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>blob</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>blob</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* unlock the KV cache */</comment>
    <expr_stmt><expr><call><name>db_unlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Set a string KV. If it value is NULL, delete it.
 * If not find it in flash, then create it.
 *
 * @param db database object
 * @param key KV name
 * @param value KV value
 *
 * @return result
 */</comment>
<function><type><name>fdb_err_t</name></type> <name>fdb_kv_set</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fdb_blob</name></name></type> <name>blob</name></decl>;</decl_stmt>

    <return>return <expr><call><name>fdb_kv_set_blob</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>fdb_blob_make</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blob</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * recovery all KV to default.
 *
 * @param db database object
 * @return result
 */</comment>
<function><type><name>fdb_err_t</name></type> <name>fdb_kv_set_default</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>value_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>kvdb_sec_info</name></name></type> <name>sector</name></decl>;</decl_stmt>

    <comment type="block">/* lock the KV cache */</comment>
    <expr_stmt><expr><call><name>db_lock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* format all sectors */</comment>
    <for>for <control>(<init><expr><name>addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>addr</name> <operator>&lt;</operator> <call><name>db_max_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>addr</name> <operator>+=</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>format_sector</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>SECTOR_NOT_COMBINED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>__exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* create default KV */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>default_kvs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <comment type="block">/* It seems to be a string when value length is 0.
         * This mechanism is for compatibility with older versions (less then V4.0). */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>default_kvs</name><operator>.</operator><name>kvs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>value_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>default_kvs</name><operator>.</operator><name>kvs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>value_len</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>default_kvs</name><operator>.</operator><name>kvs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value_len</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>sector</name><operator>.</operator><name>empty_kv</name></name> <operator>=</operator> <name>FAILED_ADDR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>create_kv_blob</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>default_kvs</name><operator>.</operator><name>kvs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>default_kvs</name><operator>.</operator><name>kvs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>__exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

<label><name>__exit</name>:</label>
    <comment type="block">/* unlock the KV cache */</comment>
    <expr_stmt><expr><call><name>db_unlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>print_kv_cb</name><parameter_list>(<parameter><decl><type><name>fdb_kv_t</name></type> <name>kv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>value_is_str</name> <init>= <expr><name>true</name></expr></init></decl>, <decl><type ref="prev"/><name>print_value</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>using_size</name> <init>= <expr><name>arg1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>fdb_kvdb_t</name></type> <name>db</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>crc_is_ok</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* calculate the total using flash size */</comment>
        <expr_stmt><expr><operator>*</operator><name>using_size</name> <operator>+=</operator> <name><name>kv</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
        <comment type="block">/* check KV */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FDB_KV_WRITE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>FDB_PRINT</name><argument_list>(<argument><expr><literal type="string">"%.*s="</literal></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>name_len</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>value_len</name></name> <operator>&lt;</operator> <name>FDB_STR_KV_VALUE_MAX_SIZE</name></expr> )</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<label><name>__reload</name>:</label>
                <comment type="block">/* check the value is string */</comment>
                <for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name><name>kv</name><operator>-&gt;</operator><name>value_len</name></name></expr>;</condition> <incr><expr><name>len</name> <operator>+=</operator> <name>size</name></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name><name>kv</name><operator>-&gt;</operator><name>value_len</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>kv</name><operator>-&gt;</operator><name>value_len</name></name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <expr_stmt><expr><call><name>_fdb_flash_read</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>value</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>print_value</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>FDB_PRINT</name><argument_list>(<argument><expr><literal type="string">"%.*s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>fdb_is_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>value_is_str</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>value_is_str</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>value_is_str</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>print_value</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>print_value</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <goto>goto <name>__reload</name>;</goto>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>value_is_str</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>FDB_PRINT</name><argument_list>(<argument><expr><literal type="string">"blob @0x%08"</literal> <name>PRIX32</name> <literal type="string">" %"</literal> <name>PRIu32</name> <literal type="string">"bytes"</literal></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>value_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>FDB_PRINT</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
 * Print all KV.
 *
 * @param db database object
 */</comment>
<function><type><name>void</name></type> <name>fdb_kv_print</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fdb_kv</name></name></type> <name>kv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>using_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>db_init_ok</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: KV (%s) isn't initialize OK.\n"</literal></expr></argument>, <argument><expr><call><name>db_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* lock the KV cache */</comment>
    <expr_stmt><expr><call><name>db_lock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>kv_iterator</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>using_size</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>print_kv_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FDB_PRINT</name><argument_list>(<argument><expr><literal type="string">"\nmode: next generation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FDB_PRINT</name><argument_list>(<argument><expr><literal type="string">"size: %"</literal> <name>PRIu32</name> <literal type="string">"/%"</literal> <name>PRIu32</name> <literal type="string">" bytes.\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>using_size</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>SECTOR_NUM</name> <operator>-</operator> <name>FDB_GC_EMPTY_SEC_THRESHOLD</name><operator>)</operator> <operator>*</operator> <name>SECTOR_HDR_DATA_SIZE</name><operator>)</operator></expr></argument>,
            <argument><expr><call><name>db_max_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>FDB_GC_EMPTY_SEC_THRESHOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* unlock the KV cache */</comment>
    <expr_stmt><expr><call><name>db_unlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_KV_AUTO_UPDATE</name></cpp:ifdef>
<comment type="block">/*
 * Auto update KV to latest default when current setting version number is changed.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>kv_auto_update</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>saved_ver_num</name></decl>, <decl><type ref="prev"/><name>setting_ver_num</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>ver_num</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>get_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>VER_NUM_KV_NAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saved_ver_num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* check version number */</comment>
        <if_stmt><if>if <condition>(<expr><name>saved_ver_num</name> <operator>!=</operator> <name>setting_ver_num</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>value_len</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>FDB_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Update the KV from version %zu to %zu.\n"</literal></expr></argument>, <argument><expr><name>saved_ver_num</name></expr></argument>, <argument><expr><name>setting_ver_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>default_kvs</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <comment type="block">/* add a new KV when it's not found */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>default_kvs</name><operator>.</operator><name>kvs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cur_kv</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <comment type="block">/* It seems to be a string when value length is 0.
                     * This mechanism is for compatibility with older versions (less then V4.0). */</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>default_kvs</name><operator>.</operator><name>kvs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>value_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>default_kvs</name><operator>.</operator><name>kvs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>value_len</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>default_kvs</name><operator>.</operator><name>kvs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value_len</name></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>cur_sector</name><operator>.</operator><name>empty_kv</name></name> <operator>=</operator> <name>FAILED_ADDR</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>create_kv_blob</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cur_sector</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>default_kvs</name><operator>.</operator><name>kvs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>default_kvs</name><operator>.</operator><name>kvs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* version number not changed now return */</comment>
            <return>return;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>set_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>VER_NUM_KV_NAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>setting_ver_num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_KV_AUTO_UPDATE */</comment>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_sec_hdr_cb</name><parameter_list>(<parameter><decl><type><name>kv_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sector</name><operator>-&gt;</operator><name>check_ok</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>failed_count</name> <init>= <expr><name>arg1</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>fdb_kvdb_t</name></type> <name>db</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>failed_count</name><operator>)</operator> <operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>not_formatable</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>true</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>FDB_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Sector header info is incorrect. Auto format this sector (0x%08"</literal> <name>PRIX32</name> <literal type="string">").\n"</literal></expr></argument>, <argument><expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>format_sector</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>SECTOR_NOT_COMBINED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_and_recovery_gc_cb</name><parameter_list>(<parameter><decl><type><name>kv_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_kvdb_t</name></type> <name>db</name> <init>= <expr><name>arg1</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>check_ok</name></name> <operator>&amp;&amp;</operator> <name><name>sector</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>dirty</name></name> <operator>==</operator> <name>FDB_SECTOR_DIRTY_GC</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* make sure the GC request flag to true */</comment>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>gc_request</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <comment type="block">/* resume the GC operate */</comment>
        <expr_stmt><expr><call><name>gc_collect</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_and_recovery_kv_cb</name><parameter_list>(<parameter><decl><type><name>fdb_kv_t</name></type> <name>kv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_kvdb_t</name></type> <name>db</name> <init>= <expr><name>arg1</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* recovery the prepare deleted KV */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>crc_is_ok</name></name> <operator>&amp;&amp;</operator> <name><name>kv</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FDB_KV_PRE_DELETE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Found an KV (%.*s) which has changed value failed. Now will recovery it.\n"</literal></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>name_len</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* recovery the old KV */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>move_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>FDB_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Recovery the KV successful.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>FDB_DEBUG</name><argument_list>(<argument><expr><literal type="string">"Warning: Moved an KV (size %"</literal> <name>PRIu32</name> <literal type="string">") failed when recovery. Now will GC then retry.\n"</literal></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>true</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FDB_KV_PRE_WRITE</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>status_table</name><index>[<expr><name>KV_STATUS_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
        <comment type="block">/* the KV has not write finish, change the status to error */</comment>
        <comment type="line">//TODO Draw the state replacement diagram of exception handling</comment>
        <expr_stmt><expr><call><name>_fdb_write_status</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>status_table</name></expr></argument>, <argument><expr><name>FDB_KV_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_KV_ERR_HDR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>crc_is_ok</name></name> <operator>&amp;&amp;</operator> <name><name>kv</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FDB_KV_WRITE</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_KV_USING_CACHE</name></cpp:ifdef>
        <comment type="block">/* update the cache when first load. If caching is disabled, this step is not performed */</comment>
        <expr_stmt><expr><call><name>update_kv_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>name_len</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Check and load the flash KV.
 *
 * @return result
 */</comment>
<function><type><name>fdb_err_t</name></type> <name>_fdb_kv_load</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fdb_kv</name></name></type> <name>kv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>kvdb_sec_info</name></name></type> <name>sector</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>check_failed_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>in_recovery_check</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <comment type="block">/* check all sector header */</comment>
    <expr_stmt><expr><call><name>sector_iterator</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_UNUSED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check_failed_count</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>check_sec_hdr_cb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>not_formatable</name></name> <operator>&amp;&amp;</operator> <name>check_failed_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>FDB_READ_ERR</name></expr>;</expr_stmt>
        <goto>goto <name>__exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* all sector header check failed */</comment>
    <if_stmt><if>if <condition>(<expr><name>check_failed_count</name> <operator>==</operator> <name>SECTOR_NUM</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"All sector header is incorrect. Set it to default.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fdb_kv_set_default</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* lock the KV cache */</comment>
    <expr_stmt><expr><call><name>db_lock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* check all sector header for recovery GC */</comment>
    <expr_stmt><expr><call><name>sector_iterator</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_UNUSED</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>check_and_recovery_gc_cb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>__retry</name>:</label>
    <comment type="block">/* check all KV for recovery */</comment>
    <expr_stmt><expr><call><name>kv_iterator</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>check_and_recovery_kv_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>gc_request</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>gc_collect</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>__retry</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>in_recovery_check</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<label><name>__exit</name>:</label>
    <comment type="block">/* unlock the KV cache */</comment>
    <expr_stmt><expr><call><name>db_unlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function will get or set some options of the database
 *
 * @param db database object
 * @param cmd the control command
 * @param arg the argument
 */</comment>
<function><type><name>void</name></type> <name>fdb_kvdb_control</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>FDB_KVDB_CTRL_SET_SEC_SIZE</name></expr>:</case>
        <comment type="block">/* this change MUST before database initialization */</comment>
        <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>init_ok</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>sec_size</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>arg</name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>FDB_KVDB_CTRL_GET_SEC_SIZE</name></expr>:</case>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>arg</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>sec_size</name></name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>FDB_KVDB_CTRL_SET_LOCK</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ARMCC_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wpedantic"</cpp:literal></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>lock</name></name> <operator>=</operator> <operator>(</operator><macro><name>void</name> <argument_list>(<argument>*</argument>)</argument_list></macro><operator>(</operator><name>fdb_db_t</name> <name>db</name><operator>)</operator><operator>)</operator><name>arg</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ARMCC_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <break>break;</break>
    <case>case <expr><name>FDB_KVDB_CTRL_SET_UNLOCK</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ARMCC_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wpedantic"</cpp:literal></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>unlock</name></name> <operator>=</operator> <operator>(</operator><macro><name>void</name> <argument_list>(<argument>*</argument>)</argument_list></macro><operator>(</operator><name>fdb_db_t</name> <name>db</name><operator>)</operator><operator>)</operator><name>arg</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ARMCC_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <break>break;</break>
    <case>case <expr><name>FDB_KVDB_CTRL_SET_FILE_MODE</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_FILE_MODE</name></cpp:ifdef>
        <comment type="block">/* this change MUST before database initialization */</comment>
        <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>init_ok</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>file_mode</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><name>arg</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: set file mode Failed. Please defined the FDB_USING_FILE_MODE macro."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <break>break;</break>
    <case>case <expr><name>FDB_KVDB_CTRL_SET_MAX_SIZE</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_FILE_MODE</name></cpp:ifdef>
        <comment type="block">/* this change MUST before database initialization */</comment>
        <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>init_ok</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>max_size</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>arg</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <break>break;</break>
    <case>case <expr><name>FDB_KVDB_CTRL_SET_NOT_FORMAT</name></expr>:</case>
        <comment type="block">/* this change MUST before database initialization */</comment>
        <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>init_ok</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>not_formatable</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><name>arg</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * The KV database initialization.
 *
 * @param db database object
 * @param name database name
 * @param path FAL mode: partition name, file mode: database saved directory path
 * @param default_kv the default KV set @see fdb_default_kv
 * @param user_data user data
 *
 * @return result
 */</comment>
<function><type><name>fdb_err_t</name></type> <name>fdb_kvdb_init</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fdb_default_kv</name></name> <modifier>*</modifier></type><name>default_kv</name></decl></parameter>,
        <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_KV_USING_CACHE</name></cpp:ifdef>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* must be aligned with write granularity */</comment>
    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>FDB_STR_KV_VALUE_MAX_SIZE</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>%</operator> <name>FDB_WRITE_GRAN</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_fdb_init_ex</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>FDB_DB_TYPE_KV</name></expr></argument>, <argument><expr><name>user_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>__exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>gc_request</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>in_recovery_check</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>default_kv</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>default_kvs</name></name> <operator>=</operator> <operator>*</operator><name>default_kv</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>default_kvs</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>default_kvs</name><operator>.</operator><name>kvs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* there is at least one empty sector for GC. */</comment>
    <macro><name>FDB_ASSERT</name><argument_list>(<argument>(FDB_GC_EMPTY_SEC_THRESHOLD &gt; <literal type="number">0</literal> &amp;&amp; FDB_GC_EMPTY_SEC_THRESHOLD &lt; SECTOR_NUM)</argument>)</argument_list></macro>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_KV_USING_CACHE</name></cpp:ifdef>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FDB_SECTOR_CACHE_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>sector_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>=</operator> <name>FDB_DATA_UNUSED</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FDB_KV_CACHE_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>kv_cache_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>=</operator> <name>FDB_DATA_UNUSED</name></expr>;</expr_stmt>
    </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_KV_USING_CACHE */</comment>

    <expr_stmt><expr><call><name>FDB_DEBUG</name><argument_list>(<argument><expr><literal type="string">"KVDB size is %"</literal> <name>PRIu32</name> <literal type="string">" bytes.\n"</literal></expr></argument>, <argument><expr><call><name>db_max_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_fdb_kv_load</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_KV_AUTO_UPDATE</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>kv_auto_update</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>__exit</name>:</label>

    <expr_stmt><expr><call><name>_fdb_init_finish</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * The KV database initialization.
 *
 * @param db database object
 *
 * @return result
 */</comment>
<function><type><name>fdb_err_t</name></type> <name>fdb_kvdb_deinit</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>_fdb_deinit</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator> <name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>FDB_NO_ERR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * The KV database initialization.
 *
 * @param itr iterator structure to be initialized
 *
 * @return pointer to the iterator initialized.
 */</comment>
<function><type><name>fdb_kv_iterator_t</name></type> <name>fdb_kv_iterator_init</name><parameter_list>(<parameter><decl><type><name>fdb_kv_iterator_t</name></type> <name>itr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>curr_kv</name><operator>.</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* If iterator statistics is needed */</comment>
    <expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>iterated_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>iterated_obj_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>iterated_value_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="block">/* Start from sector head */</comment>
    <expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>sector_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>itr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * The KV database iterator.
 *
 * @param db database object
 * @param itr the iterator structure
 *
 * @return false if iteration is ended, true if iteration is not ended.
 */</comment>
<function><type><name>bool</name></type> <name>fdb_kv_iterate</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>fdb_kv_iterator_t</name></type> <name>itr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>kvdb_sec_info</name></name></type> <name>sector</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>fdb_kv_t</name></type> <name>kv</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>itr</name><operator>-&gt;</operator><name>curr_kv</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <do>do <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>read_sector_info</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>itr</name><operator>-&gt;</operator><name>sector_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>.</operator><name>status</name><operator>.</operator><name>store</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_USING</name> <operator>||</operator> <name><name>sector</name><operator>.</operator><name>status</name><operator>.</operator><name>store</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_FULL</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name><name>sector</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name>SECTOR_HDR_DATA_SIZE</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>get_next_kv_addr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>FAILED_ADDR</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <do>do <block>{<block_content>
                    <expr_stmt><expr><call><name>read_kv</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FDB_KV_WRITE</name></expr>)</condition> <block>{<block_content>
                        <comment type="block">/* We got a valid kv here. */</comment>
                        <comment type="block">/* If iterator statistics is needed */</comment>
                        <expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>iterated_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>iterated_obj_bytes</name></name> <operator>+=</operator> <name><name>kv</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>iterated_value_bytes</name></name> <operator>+=</operator> <name><name>kv</name><operator>-&gt;</operator><name>value_len</name></name></expr>;</expr_stmt>
                        <return>return <expr><name>true</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block> while<condition>(<expr><operator>(</operator><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>get_next_kv_addr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FAILED_ADDR</name></expr>)</condition>;</do>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block" format="doxygen">/** Set kv-&gt;addr.start to 0 when we get into a new sector so that if we successfully get the next sector info,
         *  the kv-&gt;addr.start is set to the new sector.addr + SECTOR_HDR_DATA_SIZE.
        */</comment>
        <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><operator>(</operator><name><name>itr</name><operator>-&gt;</operator><name>sector_addr</name></name> <operator>=</operator> <call><name>get_next_sector_addr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FAILED_ADDR</name></expr>)</condition>;</do>
    <comment type="block">/* Finally we have iterated all the KVs. */</comment>
    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(FDB_USING_KVDB) */</comment>

</unit>
