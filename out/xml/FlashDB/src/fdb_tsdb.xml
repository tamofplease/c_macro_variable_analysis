<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/src/fdb_tsdb.c"><comment type="block">/*
 * Copyright (c) 2020, Armink, &lt;armink.ztl@gmail.com&gt;
 *
 * SPDX-License-Identifier: Apache-2.0
 */</comment>

<comment type="block" format="doxygen">/**
 * @file
 * @brief TSDB feature.
 *
 * Time series log (like TSDB) feature implement source file.
 *
 * TSL is time series log, the TSDB saved many TSLs.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;flashdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fdb_low_lvl.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDB_LOG_TAG</name></cpp:macro> <cpp:value>"[tsl]"</cpp:value></cpp:define>
<comment type="block">/* rewrite log prefix */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>FDB_LOG_PREFIX2</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDB_LOG_PREFIX2</name><parameter_list>()</parameter_list></cpp:macro>                         <cpp:value>FDB_PRINT("[%s] ", db_name(db))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FDB_USING_TSDB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* magic word(`T`, `S`, `L`, `0`) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTOR_MAGIC_WORD</name></cpp:macro>                        <cpp:value>0x304C5354</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSL_STATUS_TABLE_SIZE</name></cpp:macro>                    <cpp:value>FDB_STATUS_TABLE_SIZE(FDB_TSL_STATUS_NUM)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTOR_HDR_DATA_SIZE</name></cpp:macro>                     <cpp:value>(FDB_WG_ALIGN(sizeof(struct sector_hdr_data)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_IDX_DATA_SIZE</name></cpp:macro>                        <cpp:value>(FDB_WG_ALIGN(sizeof(struct log_idx_data)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_IDX_TS_OFFSET</name></cpp:macro>                        <cpp:value>((unsigned long)(&amp;((struct log_idx_data *)0)-&gt;time))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTOR_MAGIC_OFFSET</name></cpp:macro>                      <cpp:value>((unsigned long)(&amp;((struct sector_hdr_data *)0)-&gt;magic))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTOR_START_TIME_OFFSET</name></cpp:macro>                 <cpp:value>((unsigned long)(&amp;((struct sector_hdr_data *)0)-&gt;start_time))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTOR_END0_TIME_OFFSET</name></cpp:macro>                  <cpp:value>((unsigned long)(&amp;((struct sector_hdr_data *)0)-&gt;end_info[0].time))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTOR_END0_IDX_OFFSET</name></cpp:macro>                   <cpp:value>((unsigned long)(&amp;((struct sector_hdr_data *)0)-&gt;end_info[0].index))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTOR_END0_STATUS_OFFSET</name></cpp:macro>                <cpp:value>((unsigned long)(&amp;((struct sector_hdr_data *)0)-&gt;end_info[0].status))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTOR_END1_TIME_OFFSET</name></cpp:macro>                  <cpp:value>((unsigned long)(&amp;((struct sector_hdr_data *)0)-&gt;end_info[1].time))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTOR_END1_IDX_OFFSET</name></cpp:macro>                   <cpp:value>((unsigned long)(&amp;((struct sector_hdr_data *)0)-&gt;end_info[1].index))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTOR_END1_STATUS_OFFSET</name></cpp:macro>                <cpp:value>((unsigned long)(&amp;((struct sector_hdr_data *)0)-&gt;end_info[1].status))</cpp:value></cpp:define>

<comment type="block">/* the next address is get failed */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAILED_ADDR</name></cpp:macro>                              <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db_name</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro>                              <cpp:value>(((fdb_db_t)db)-&gt;name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db_init_ok</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro>                           <cpp:value>(((fdb_db_t)db)-&gt;init_ok)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db_sec_size</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro>                          <cpp:value>(((fdb_db_t)db)-&gt;sec_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db_max_size</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro>                          <cpp:value>(((fdb_db_t)db)-&gt;max_size)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db_lock</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro>                                                            \
    <cpp:value>do {                                                                       \
        if (((fdb_db_t)db)-&gt;lock) ((fdb_db_t)db)-&gt;lock((fdb_db_t)db);          \
    } while(0);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db_unlock</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro>                                                          \
    <cpp:value>do {                                                                       \
        if (((fdb_db_t)db)-&gt;unlock) ((fdb_db_t)db)-&gt;unlock((fdb_db_t)db);      \
    } while(0);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_FDB_WRITE_STATUS</name><parameter_list>(<parameter><type><name>db</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>status_table</name></type></parameter>, <parameter><type><name>status_num</name></type></parameter>, <parameter><type><name>status_index</name></type></parameter>, <parameter><type><name>sync</name></type></parameter>)</parameter_list></cpp:macro>    \
    <cpp:value>do {                                                                       \
        result = _fdb_write_status((fdb_db_t)db, addr, status_table, status_num, status_index, sync);\
        if (result != FDB_NO_ERR) return result;                               \
    } while(0);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLASH_WRITE</name><parameter_list>(<parameter><type><name>db</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>sync</name></type></parameter>)</parameter_list></cpp:macro>                                 \
    <cpp:value>do {                                                                       \
        result = _fdb_flash_write((fdb_db_t)db, addr, buf, size, sync);        \
        if (result != FDB_NO_ERR) return result;                               \
    } while(0);</cpp:value></cpp:define>

<struct>struct <name>sector_hdr_data</name> <block>{
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>status</name><index>[<expr><name>FDB_STORE_STATUS_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt> <comment type="block" format="doxygen">/**&lt; sector store status @see fdb_sector_store_status_t */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>magic</name></decl>;</decl_stmt>                              <comment type="block" format="doxygen">/**&lt; magic word(`T`, `S`, `L`, `0`) */</comment>
    <decl_stmt><decl><type><name>fdb_time_t</name></type> <name>start_time</name></decl>;</decl_stmt>                       <comment type="block" format="doxygen">/**&lt; the first start node's timestamp */</comment>
    <struct>struct <block>{
        <decl_stmt><decl><type><name>fdb_time_t</name></type> <name>time</name></decl>;</decl_stmt>                         <comment type="block" format="doxygen">/**&lt; the last end node's timestamp */</comment>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>index</name></decl>;</decl_stmt>                          <comment type="block" format="doxygen">/**&lt; the last end node's index */</comment>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>status</name><index>[<expr><name>TSL_STATUS_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>   <comment type="block" format="doxygen">/**&lt; end node status, @see fdb_tsl_status_t */</comment>
    }</block> <decl><name><name>end_info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</struct>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>sector_hdr_data</name></name> <modifier>*</modifier></type><name>sector_hdr_data_t</name>;</typedef>

<comment type="block">/* time series log node index data */</comment>
<struct>struct <name>log_idx_data</name> <block>{
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>status_table</name><index>[<expr><name>TSL_STATUS_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt> <comment type="block" format="doxygen">/**&lt; node status, @see fdb_tsl_status_t */</comment>
    <decl_stmt><decl><type><name>fdb_time_t</name></type> <name>time</name></decl>;</decl_stmt>                             <comment type="block" format="doxygen">/**&lt; node timestamp */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>log_len</name></decl>;</decl_stmt>                            <comment type="block" format="doxygen">/**&lt; node total length (header + name + value), must align by FDB_WRITE_GRAN */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>log_addr</name></decl>;</decl_stmt>                           <comment type="block" format="doxygen">/**&lt; node address */</comment>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>log_idx_data</name></name> <modifier>*</modifier></type><name>log_idx_data_t</name>;</typedef>

<struct>struct <name>query_count_args</name> <block>{
    <decl_stmt><decl><type><name>fdb_tsl_status_t</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>check_sec_hdr_cb_args</name> <block>{
    <decl_stmt><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>check_failed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>empty_num</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>empty_addr</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>fdb_err_t</name></type> <name>read_tsl</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>fdb_tsl_t</name></type> <name>tsl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>log_idx_data</name></name></type> <name>idx</name></decl>;</decl_stmt>
    <comment type="block">/* read TSL index raw data */</comment>
    <expr_stmt><expr><call><name>_fdb_flash_read</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name><name>tsl</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>log_idx_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tsl</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <operator>(</operator><name>fdb_tsl_status_t</name><operator>)</operator> <call><name>_fdb_get_status</name><argument_list>(<argument><expr><name><name>idx</name><operator>.</operator><name>status_table</name></name></expr></argument>, <argument><expr><name>FDB_TSL_STATUS_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tsl</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FDB_TSL_PRE_WRITE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>tsl</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FDB_TSL_UNUSED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>tsl</name><operator>-&gt;</operator><name>log_len</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>max_len</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tsl</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>log</name></name> <operator>=</operator> <name>FDB_DATA_UNUSED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tsl</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>tsl</name><operator>-&gt;</operator><name>log_len</name></name> <operator>=</operator> <name><name>idx</name><operator>.</operator><name>log_len</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tsl</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>log</name></name> <operator>=</operator> <name><name>idx</name><operator>.</operator><name>log_addr</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tsl</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <name><name>idx</name><operator>.</operator><name>time</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>FDB_NO_ERR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>get_next_sector_addr</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>tsdb_sec_info_t</name></type> <name>pre_sec</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>traversed_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>traversed_len</name> <operator>+</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>db_max_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pre_sec</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>db_max_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>pre_sec</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* the next sector is on the top of the database */</comment>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* finished */</comment>
        <return>return <expr><name>FAILED_ADDR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>get_next_tsl_addr</name><parameter_list>(<parameter><decl><type><name>tsdb_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>fdb_tsl_t</name></type> <name>pre_tsl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><name>FAILED_ADDR</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_EMPTY</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>FAILED_ADDR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pre_tsl</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>index</name></name> <operator>+</operator> <name>LOG_IDX_DATA_SIZE</name> <operator>&lt;=</operator> <name><name>sector</name><operator>-&gt;</operator><name>end_idx</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>pre_tsl</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>index</name></name> <operator>+</operator> <name>LOG_IDX_DATA_SIZE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* no TSL */</comment>
        <return>return <expr><name>FAILED_ADDR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>get_last_tsl_addr</name><parameter_list>(<parameter><decl><type><name>tsdb_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>fdb_tsl_t</name></type> <name>pre_tsl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><name>FAILED_ADDR</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_EMPTY</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>FAILED_ADDR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pre_tsl</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>index</name></name> <operator>&gt;=</operator> <operator>(</operator><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>SECTOR_HDR_DATA_SIZE</name> <operator>+</operator> <name>LOG_IDX_DATA_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>pre_tsl</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>index</name></name> <operator>-</operator> <name>LOG_IDX_DATA_SIZE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>FAILED_ADDR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>get_last_sector_addr</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>tsdb_sec_info_t</name></type> <name>pre_sec</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>traversed_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>traversed_len</name> <operator>+</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>db_max_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pre_sec</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="block">/* the next sector is previous sector */</comment>
            <return>return <expr><name><name>pre_sec</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* the next sector is the last sector */</comment>
            <return>return <expr><call><name>db_max_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>FAILED_ADDR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fdb_err_t</name></type> <name>read_sector_info</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>tsdb_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>traversal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sector_hdr_data</name></name></type> <name>sec_hdr</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name>sector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* read sector header raw data */</comment>
    <expr_stmt><expr><call><name>_fdb_flash_read</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sec_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sector_hdr_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name><name>sec_hdr</name><operator>.</operator><name>magic</name></name></expr>;</expr_stmt>

    <comment type="block">/* check magic word */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>magic</name></name> <operator>!=</operator> <name>SECTOR_MAGIC_WORD</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>check_ok</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <return>return <expr><name>FDB_INIT_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>check_ok</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <operator>(</operator><name>fdb_sector_store_status_t</name><operator>)</operator> <call><name>_fdb_get_status</name><argument_list>(<argument><expr><name><name>sec_hdr</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_STATUS_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <name><name>sec_hdr</name><operator>.</operator><name>start_time</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>end_info_stat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>fdb_tsl_status_t</name><operator>)</operator> <call><name>_fdb_get_status</name><argument_list>(<argument><expr><name><name>sec_hdr</name><operator>.</operator><name>end_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>status</name></expr></argument>, <argument><expr><name>FDB_TSL_STATUS_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>end_info_stat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>fdb_tsl_status_t</name><operator>)</operator> <call><name>_fdb_get_status</name><argument_list>(<argument><expr><name><name>sec_hdr</name><operator>.</operator><name>end_info</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>status</name></expr></argument>, <argument><expr><name>FDB_TSL_STATUS_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>end_info_stat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>FDB_TSL_WRITE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>end_time</name></name> <operator>=</operator> <name><name>sec_hdr</name><operator>.</operator><name>end_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>time</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>end_idx</name></name> <operator>=</operator> <name><name>sec_hdr</name><operator>.</operator><name>end_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>index</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>end_info_stat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>FDB_TSL_WRITE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>end_time</name></name> <operator>=</operator> <name><name>sec_hdr</name><operator>.</operator><name>end_info</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>time</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>end_idx</name></name> <operator>=</operator> <name><name>sec_hdr</name><operator>.</operator><name>end_info</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>index</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>end_info_stat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>FDB_TSL_PRE_WRITE</name> <operator>&amp;&amp;</operator> <name><name>sector</name><operator>-&gt;</operator><name>end_info_stat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>FDB_TSL_PRE_WRITE</name></expr>)</condition> <block>{<block_content>
        <comment type="line">//TODO There is no valid end node info on this sector, need impl fast query this sector by fdb_tsl_iter_by_time</comment>
        <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* traversal all TSL and calculate the remain space size */</comment>
    <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>empty_idx</name></name> <operator>=</operator> <name><name>sector</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>SECTOR_HDR_DATA_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>empty_data</name></name> <operator>=</operator> <name><name>sector</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* the TSL's data is saved from sector bottom, and the TSL's index saved from the sector top */</comment>
    <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>remain</name></name> <operator>=</operator> <name><name>sector</name><operator>-&gt;</operator><name>empty_data</name></name> <operator>-</operator> <name><name>sector</name><operator>-&gt;</operator><name>empty_idx</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_USING</name> <operator>&amp;&amp;</operator> <name>traversal</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>fdb_tsl</name></name></type> <name>tsl</name></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>tsl</name><operator>.</operator><name>addr</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>sector</name><operator>-&gt;</operator><name>empty_idx</name></name></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name>read_tsl</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsl</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>tsl</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>FDB_TSL_UNUSED</name></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>end_time</name></name> <operator>=</operator> <name><name>tsl</name><operator>.</operator><name>time</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>end_idx</name></name> <operator>=</operator> <name><name>tsl</name><operator>.</operator><name>addr</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>empty_idx</name></name> <operator>+=</operator> <name>LOG_IDX_DATA_SIZE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>empty_data</name></name> <operator>-=</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name><name>tsl</name><operator>.</operator><name>log_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tsl</name><operator>.</operator><name>addr</name><operator>.</operator><name>index</name></name> <operator>+=</operator> <name>LOG_IDX_DATA_SIZE</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>remain</name></name> <operator>&gt;</operator> <name>LOG_IDX_DATA_SIZE</name> <operator>+</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name><name>tsl</name><operator>.</operator><name>log_len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>remain</name></name> <operator>-=</operator> <operator>(</operator><name>LOG_IDX_DATA_SIZE</name> <operator>+</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name><name>tsl</name><operator>.</operator><name>log_len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: this TSL (0x%08"</literal> <name>PRIX32</name> <literal type="string">") size (%"</literal> <name>PRIu32</name> <literal type="string">") is out of bound.\n"</literal></expr></argument>, <argument><expr><name><name>tsl</name><operator>.</operator><name>addr</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>tsl</name><operator>.</operator><name>log_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>remain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name>FDB_READ_ERR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fdb_err_t</name></type> <name>format_sector</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sector_hdr_data</name></name></type> <name>sec_hdr</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name>addr</name> <operator>%</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_fdb_flash_erase</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>_FDB_WRITE_STATUS</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>sec_hdr</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_EMPTY</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* set the magic */</comment>
        <expr_stmt><expr><name><name>sec_hdr</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <name>SECTOR_MAGIC_WORD</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FLASH_WRITE</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name>SECTOR_MAGIC_OFFSET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sec_hdr</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sec_hdr</name><operator>.</operator><name>magic</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sector_iterator</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>tsdb_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>fdb_sector_store_status_t</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>,
        <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>, <parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>tsdb_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>traversal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>sec_addr</name> <init>= <expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>, <decl><type ref="prev"/><name>traversed_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* search all sectors */</comment>
    <do>do <block>{<block_content>
        <expr_stmt><expr><call><name>read_sector_info</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sec_addr</name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>FDB_SECTOR_STORE_UNUSED</name> <operator>||</operator> <name>status</name> <operator>==</operator> <name><name>sector</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>traversal</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read_sector_info</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sec_addr</name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/* iterator is interrupted when callback return true */</comment>
            <if_stmt><if>if <condition>(<expr><name>callback</name> <operator>&amp;&amp;</operator> <call><name>callback</name><argument_list>(<argument><expr><name>sector</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>traversed_len</name> <operator>+=</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><operator>(</operator><name>sec_addr</name> <operator>=</operator> <call><name>get_next_sector_addr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><name>traversed_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FAILED_ADDR</name></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fdb_err_t</name></type> <name>write_tsl</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>fdb_blob_t</name></type> <name>blob</name></decl></parameter>, <parameter><decl><type><name>fdb_time_t</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>log_idx_data</name></name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>idx_addr</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>empty_idx</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>idx</name><operator>.</operator><name>log_len</name></name> <operator>=</operator> <name><name>blob</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>idx</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>idx</name><operator>.</operator><name>log_addr</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>empty_data</name></name> <operator>-</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name><name>idx</name><operator>.</operator><name>log_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* write the status will by write granularity */</comment>
    <expr_stmt><expr><call><name>_FDB_WRITE_STATUS</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>idx_addr</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>status_table</name></name></expr></argument>, <argument><expr><name>FDB_TSL_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_TSL_PRE_WRITE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* write other index info */</comment>
    <expr_stmt><expr><call><name>FLASH_WRITE</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>idx_addr</name> <operator>+</operator> <name>LOG_IDX_TS_OFFSET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>idx</name><operator>.</operator><name>time</name></name></expr></argument>,  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>log_idx_data</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>LOG_IDX_TS_OFFSET</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* write blob data */</comment>
    <expr_stmt><expr><call><name>FLASH_WRITE</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>log_addr</name></name></expr></argument>, <argument><expr><name><name>blob</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>blob</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* write the status will by write granularity */</comment>
    <expr_stmt><expr><call><name>_FDB_WRITE_STATUS</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>idx_addr</name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>status_table</name></name></expr></argument>, <argument><expr><name>FDB_TSL_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_TSL_WRITE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fdb_err_t</name></type> <name>update_sec_status</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>tsdb_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>fdb_blob_t</name></type> <name>blob</name></decl></parameter>, <parameter><decl><type><name>fdb_time_t</name></type> <name>cur_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>status</name><index>[<expr><name>FDB_STORE_STATUS_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_USING</name> <operator>&amp;&amp;</operator> <name><name>sector</name><operator>-&gt;</operator><name>remain</name></name> <operator>&lt;</operator> <name>LOG_IDX_DATA_SIZE</name> <operator>+</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name><name>blob</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>end_status</name><index>[<expr><name>TSL_STATUS_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>end_index</name> <init>= <expr><name><name>sector</name><operator>-&gt;</operator><name>empty_idx</name></name> <operator>-</operator> <name>LOG_IDX_DATA_SIZE</name></expr></init></decl>, <decl><type ref="prev"/><name>new_sec_addr</name></decl>, <decl><type ref="prev"/><name>cur_sec_addr</name> <init>= <expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>
        <comment type="block">/* save the end node index and timestamp */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>end_info_stat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>FDB_TSL_UNUSED</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>_FDB_WRITE_STATUS</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>cur_sec_addr</name> <operator>+</operator> <name>SECTOR_END0_STATUS_OFFSET</name></expr></argument>, <argument><expr><name>end_status</name></expr></argument>, <argument><expr><name>FDB_TSL_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_TSL_PRE_WRITE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FLASH_WRITE</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>cur_sec_addr</name> <operator>+</operator> <name>SECTOR_END0_TIME_OFFSET</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator> <operator>)</operator><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>last_time</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fdb_time_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FLASH_WRITE</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>cur_sec_addr</name> <operator>+</operator> <name>SECTOR_END0_IDX_OFFSET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_index</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>end_index</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>_FDB_WRITE_STATUS</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>cur_sec_addr</name> <operator>+</operator> <name>SECTOR_END0_STATUS_OFFSET</name></expr></argument>, <argument><expr><name>end_status</name></expr></argument>, <argument><expr><name>FDB_TSL_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_TSL_WRITE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>end_info_stat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>FDB_TSL_UNUSED</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>_FDB_WRITE_STATUS</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>cur_sec_addr</name> <operator>+</operator> <name>SECTOR_END1_STATUS_OFFSET</name></expr></argument>, <argument><expr><name>end_status</name></expr></argument>, <argument><expr><name>FDB_TSL_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_TSL_PRE_WRITE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FLASH_WRITE</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>cur_sec_addr</name> <operator>+</operator> <name>SECTOR_END1_TIME_OFFSET</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator> <operator>)</operator><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>last_time</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fdb_time_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FLASH_WRITE</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>cur_sec_addr</name> <operator>+</operator> <name>SECTOR_END1_IDX_OFFSET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_index</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>end_index</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>_FDB_WRITE_STATUS</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>cur_sec_addr</name> <operator>+</operator> <name>SECTOR_END1_STATUS_OFFSET</name></expr></argument>, <argument><expr><name>end_status</name></expr></argument>, <argument><expr><name>FDB_TSL_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_TSL_WRITE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* change current sector to full */</comment>
        <expr_stmt><expr><call><name>_FDB_WRITE_STATUS</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>cur_sec_addr</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_FULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FDB_SECTOR_STORE_FULL</name></expr>;</expr_stmt>
        <comment type="block">/* calculate next sector address */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>db_max_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>new_sec_addr</name> <operator>=</operator> <name><name>sector</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>rollover</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>new_sec_addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* not rollover */</comment>
            <return>return <expr><name>FDB_SAVED_FULL</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>read_sector_info</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>new_sec_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>FDB_SECTOR_STORE_EMPTY</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* calculate the oldest sector address */</comment>
            <if_stmt><if>if <condition>(<expr><name>new_sec_addr</name> <operator>+</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>db_max_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>oldest_addr</name></name> <operator>=</operator> <name>new_sec_addr</name> <operator>+</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>oldest_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>format_sector</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>new_sec_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read_sector_info</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>new_sec_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_FULL</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* database full */</comment>
        <return>return <expr><name>FDB_SAVED_FULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_EMPTY</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* change the sector to using */</comment>
        <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FDB_SECTOR_STORE_USING</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sector</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <name>cur_time</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>_FDB_WRITE_STATUS</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_STATUS_NUM</name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_USING</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* save the start timestamp */</comment>
        <expr_stmt><expr><call><name>FLASH_WRITE</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>SECTOR_START_TIME_OFFSET</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cur_time</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fdb_time_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fdb_err_t</name></type> <name>tsl_append</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>fdb_blob_t</name></type> <name>blob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>fdb_time_t</name></type> <name>cur_time</name> <init>= <expr><call><name><name>db</name><operator>-&gt;</operator><name>get_time</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name><name>blob</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <name><name>db</name><operator>-&gt;</operator><name>max_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* check the current timestamp, MUST more than the last save timestamp */</comment>
    <if_stmt><if>if <condition>(<expr><name>cur_time</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>last_time</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Warning: current timestamp (%"</literal> <name>PRIdMAX</name> <literal type="string">") is less than the last save timestamp (%"</literal> <name>PRIdMAX</name> <literal type="string">"). This tsl will be dropped.\n"</literal></expr></argument>,
                <argument><expr><operator>(</operator><name>intmax_t</name> <operator>)</operator><name>cur_time</name></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name> <operator>)</operator><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>last_time</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FDB_WRITE_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>update_sec_status</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name></name></expr></argument>, <argument><expr><name>blob</name></expr></argument>, <argument><expr><name>cur_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* write the TSL node */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>write_tsl</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>blob</name></expr></argument>, <argument><expr><name>cur_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* recalculate the current using sector info */</comment>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>end_idx</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>empty_idx</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>end_time</name></name> <operator>=</operator> <name>cur_time</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>empty_idx</name></name> <operator>+=</operator> <name>LOG_IDX_DATA_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>empty_data</name></name> <operator>-=</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name><name>blob</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>remain</name></name> <operator>-=</operator> <name>LOG_IDX_DATA_SIZE</name> <operator>+</operator> <call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name><name>blob</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>last_time</name></name> <operator>=</operator> <name>cur_time</name></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Append a new log to TSDB.
 *
 * @param db database object
 * @param blob log blob data
 *
 * @return result
 */</comment>
<function><type><name>fdb_err_t</name></type> <name>fdb_tsl_append</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>fdb_blob_t</name></type> <name>blob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>db_init_ok</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: TSL (%s) isn't initialize OK.\n"</literal></expr></argument>, <argument><expr><call><name>db_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FDB_INIT_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>db_lock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tsl_append</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>db_unlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * The TSDB iterator for each TSL.
 *
 * @param db database object
 * @param cb callback
 * @param arg callback argument
 */</comment>
<function><type><name>void</name></type> <name>fdb_tsl_iter</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>fdb_tsl_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tsdb_sec_info</name></name></type> <name>sector</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>sec_addr</name></decl>, <decl><type ref="prev"/><name>traversed_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fdb_tsl</name></name></type> <name>tsl</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>db_init_ok</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: TSL (%s) isn't initialize OK.\n"</literal></expr></argument>, <argument><expr><call><name>db_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>sec_addr</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>oldest_addr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>db_lock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* search all sectors */</comment>
    <do>do <block>{<block_content>
        <expr_stmt><expr><name>traversed_len</name> <operator>+=</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>read_sector_info</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sec_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* sector has TSL */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_USING</name> <operator>||</operator> <name><name>sector</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_FULL</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_USING</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* copy the current using sector status  */</comment>
                <expr_stmt><expr><name>sector</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>cur_sec</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>tsl</name><operator>.</operator><name>addr</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>sector</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name>SECTOR_HDR_DATA_SIZE</name></expr>;</expr_stmt>
            <comment type="block">/* search all TSL */</comment>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name>read_tsl</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* iterator is interrupted when callback return true */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsl</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>db_unlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> while <condition>(<expr><operator>(</operator><name><name>tsl</name><operator>.</operator><name>addr</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>get_next_tsl_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsl</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FAILED_ADDR</name></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition>(<expr><operator>(</operator><name>sec_addr</name> <operator>=</operator> <call><name>get_next_sector_addr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name>traversed_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FAILED_ADDR</name></expr>)</condition>;</do>
    <expr_stmt><expr><call><name>db_unlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * The TSDB iterator for each TSL.
 *
 * @param db database object
 * @param cb callback
 * @param arg callback argument
 */</comment>
<function><type><name>void</name></type> <name>fdb_tsl_iter_reverse</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>fdb_tsl_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tsdb_sec_info</name></name></type> <name>sector</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>sec_addr</name></decl>, <decl><type ref="prev"/><name>traversed_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fdb_tsl</name></name></type> <name>tsl</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>db_init_ok</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: TSL (%s) isn't initialize OK.\n"</literal></expr></argument>, <argument><expr><call><name>db_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>sec_addr</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>addr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>db_lock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* search all sectors */</comment>
    <do>do <block>{<block_content>
        <expr_stmt><expr><name>traversed_len</name> <operator>+=</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>read_sector_info</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sec_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* sector has TSL */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_USING</name> <operator>||</operator> <name><name>sector</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_FULL</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_USING</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* copy the current using sector status  */</comment>
                <expr_stmt><expr><name>sector</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>cur_sec</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>tsl</name><operator>.</operator><name>addr</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>sector</name><operator>.</operator><name>end_idx</name></name></expr>;</expr_stmt>
            <comment type="block">/* search all TSL */</comment>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name>read_tsl</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* iterator is interrupted when callback return true */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsl</name></expr></argument>, <argument><expr><name>cb_arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <goto>goto <name>__exit</name>;</goto>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> while <condition>(<expr><operator>(</operator><name><name>tsl</name><operator>.</operator><name>addr</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>get_last_tsl_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsl</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FAILED_ADDR</name></expr>)</condition>;</do>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sector</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_EMPTY</name> <operator>||</operator> <name><name>sector</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_UNUSED</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>__exit</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block> while <condition>(<expr><operator>(</operator><name>sec_addr</name> <operator>=</operator> <call><name>get_last_sector_addr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name>traversed_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FAILED_ADDR</name></expr>)</condition>;</do>

<label><name>__exit</name>:</label>
    <expr_stmt><expr><call><name>db_unlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Found the matched TSL address.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>search_start_tsl_addr</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>fdb_time_t</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>fdb_time_t</name></type> <name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fdb_tsl</name></name></type> <name>tsl</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>tsl</name><operator>.</operator><name>addr</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>start</name> <operator>+</operator> <call><name>FDB_ALIGN</name><argument_list>(<argument><expr><operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>LOG_IDX_DATA_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read_tsl</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>tsl</name><operator>.</operator><name>time</name></name> <operator>&lt;</operator> <name>from</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>tsl</name><operator>.</operator><name>addr</name><operator>.</operator><name>index</name></name> <operator>+</operator> <name>LOG_IDX_DATA_SIZE</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tsl</name><operator>.</operator><name>time</name></name> <operator>&gt;</operator> <name>from</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>tsl</name><operator>.</operator><name>addr</name><operator>.</operator><name>index</name></name> <operator>-</operator> <name>LOG_IDX_DATA_SIZE</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name><name>tsl</name><operator>.</operator><name>addr</name><operator>.</operator><name>index</name></name></expr>;</return>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>tsl</name><operator>.</operator><name>addr</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read_tsl</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>tsl</name><operator>.</operator><name>time</name></name> <operator>&gt;</operator> <name>from</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>start</name> <operator>-=</operator> <name>LOG_IDX_DATA_SIZE</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>start</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * The TSDB iterator for each TSL by timestamp.
 *
 * @param db database object
 * @param from starting timestamp. It will be a reverse iterator when ending timestamp less than starting timestamp
 * @param to ending timestamp
 * @param cb callback
 * @param arg callback argument
 */</comment>
<function><type><name>void</name></type> <name>fdb_tsl_iter_by_time</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>fdb_time_t</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>fdb_time_t</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>fdb_tsl_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tsdb_sec_info</name></name></type> <name>sector</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>sec_addr</name></decl>, <decl><type ref="prev"/><name>start_addr</name></decl>, <decl><type ref="prev"/><name>traversed_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fdb_tsl</name></name></type> <name>tsl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>found_start_tsl</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>get_sector_addr</name>)<parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type></decl></parameter> , <parameter><decl><type><name>tsdb_sec_info_t</name></type></decl></parameter> , <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>get_tsl_addr</name>)<parameter_list>(<parameter><decl><type><name>tsdb_sec_info_t</name></type></decl></parameter> , <parameter><decl><type><name>fdb_tsl_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>db_init_ok</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: TSL (%s) isn't initialize OK.\n"</literal></expr></argument>, <argument><expr><call><name>db_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name>from</name> <operator>&lt;=</operator> <name>to</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>start_addr</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>oldest_addr</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>get_sector_addr</name> <operator>=</operator> <name>get_next_sector_addr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>get_tsl_addr</name> <operator>=</operator> <name>get_next_tsl_addr</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>start_addr</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>addr</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>get_sector_addr</name> <operator>=</operator> <name>get_last_sector_addr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>get_tsl_addr</name> <operator>=</operator> <name>get_last_tsl_addr</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

<comment type="line">//    FDB_INFO("from %s", ctime((const time_t * )&amp;from));</comment>
<comment type="line">//    FDB_INFO("to %s", ctime((const time_t * )&amp;to));</comment>

    <if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>sec_addr</name> <operator>=</operator> <name>start_addr</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>db_lock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* search all sectors */</comment>
    <do>do <block>{<block_content>
        <expr_stmt><expr><name>traversed_len</name> <operator>+=</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>read_sector_info</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sec_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* sector has TSL */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sector</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_USING</name> <operator>||</operator> <name><name>sector</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_FULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>sector</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_USING</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* copy the current using sector status  */</comment>
                <expr_stmt><expr><name>sector</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>cur_sec</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>found_start_tsl</name><operator>)</operator>
                    <operator>||</operator> <operator>(</operator><operator>!</operator><name>found_start_tsl</name> <operator>&amp;&amp;</operator>
                            <operator>(</operator><operator>(</operator><name>from</name> <operator>&lt;=</operator> <name>to</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>sec_addr</name> <operator>==</operator> <name>start_addr</name> <operator>&amp;&amp;</operator> <name>from</name> <operator>&lt;=</operator> <name><name>sector</name><operator>.</operator><name>start_time</name></name><operator>)</operator> <operator>||</operator> <name>from</name> <operator>&lt;=</operator> <name><name>sector</name><operator>.</operator><name>end_time</name></name><operator>)</operator><operator>)</operator> <operator>||</operator>
                             <operator>(</operator><name>from</name> <operator>&gt;</operator> <name>to</name>  <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>sec_addr</name> <operator>==</operator> <name>start_addr</name> <operator>&amp;&amp;</operator> <name>from</name> <operator>&gt;=</operator> <name><name>sector</name><operator>.</operator><name>end_time</name></name><operator>)</operator> <operator>||</operator> <name>from</name> <operator>&gt;=</operator> <name><name>sector</name><operator>.</operator><name>start_time</name></name><operator>)</operator><operator>)</operator><operator>)</operator>
                             <operator>)</operator></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>start</name> <init>= <expr><name><name>sector</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name>SECTOR_HDR_DATA_SIZE</name></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><name><name>sector</name><operator>.</operator><name>end_idx</name></name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name>found_start_tsl</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <comment type="block">/* search the first start TSL address */</comment>
                <expr_stmt><expr><name><name>tsl</name><operator>.</operator><name>addr</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>search_start_tsl_addr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* search all TSL */</comment>
                <do>do <block>{<block_content>
                    <expr_stmt><expr><call><name>read_tsl</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>tsl</name><operator>.</operator><name>status</name></name> <operator>!=</operator> <name>FDB_TSL_UNUSED</name></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>from</name> <operator>&lt;=</operator> <name>to</name> <operator>&amp;&amp;</operator> <name><name>tsl</name><operator>.</operator><name>time</name></name> <operator>&gt;=</operator> <name>from</name> <operator>&amp;&amp;</operator> <name><name>tsl</name><operator>.</operator><name>time</name></name> <operator>&lt;=</operator> <name>to</name><operator>)</operator>
                                <operator>||</operator> <operator>(</operator><name>from</name> <operator>&gt;</operator> <name>to</name> <operator>&amp;&amp;</operator> <name><name>tsl</name><operator>.</operator><name>time</name></name> <operator>&lt;=</operator> <name>from</name> <operator>&amp;&amp;</operator> <name><name>tsl</name><operator>.</operator><name>time</name></name> <operator>&gt;=</operator> <name>to</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                            <comment type="block">/* iterator is interrupted when callback return true */</comment>
                            <if_stmt><if>if <condition>(<expr><call><name>cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsl</name></expr></argument>, <argument><expr><name>cb_arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                <goto>goto <name>__exit</name>;</goto>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <goto>goto <name>__exit</name>;</goto>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block> while <condition>(<expr><operator>(</operator><name><name>tsl</name><operator>.</operator><name>addr</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>get_tsl_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsl</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FAILED_ADDR</name></expr>)</condition>;</do>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sector</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_EMPTY</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>__exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition>(<expr><operator>(</operator><name>sec_addr</name> <operator>=</operator> <call><name>get_sector_addr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name>traversed_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FAILED_ADDR</name></expr>)</condition>;</do>

<label><name>__exit</name>:</label>
    <expr_stmt><expr><call><name>db_unlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>query_count_cb</name><parameter_list>(<parameter><decl><type><name>fdb_tsl_t</name></type> <name>tsl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>query_count_args</name></name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>tsl</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name><name>args</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Query some TSL's count by timestamp and status.
 *
 * @param db database object
 * @param from starting timestamp
 * @param to ending timestamp
 * @param status status
 */</comment>
<function><type><name>size_t</name></type> <name>fdb_tsl_query_count</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>fdb_time_t</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>fdb_time_t</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>fdb_tsl_status_t</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>query_count_args</name></name></type> <name>arg</name> <init>= <expr><block>{ <expr><name>FDB_TSL_UNUSED</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>arg</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>db_init_ok</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: TSL (%s) isn't initialize OK.\n"</literal></expr></argument>, <argument><expr><call><name>db_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FDB_INIT_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>fdb_tsl_iter_by_time</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>query_count_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name><name>arg</name><operator>.</operator><name>count</name></name></expr>;</return>

</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Set the TSL status.
 *
 * @param db database object
 * @param tsl TSL object
 * @param status status
 *
 * @return result
 */</comment>
<function><type><name>fdb_err_t</name></type> <name>fdb_tsl_set_status</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>fdb_tsl_t</name></type> <name>tsl</name></decl></parameter>, <parameter><decl><type><name>fdb_tsl_status_t</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>status_table</name><index>[<expr><name>TSL_STATUS_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* write the status will by write granularity */</comment>
    <expr_stmt><expr><call><name>_FDB_WRITE_STATUS</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>tsl</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name>status_table</name></expr></argument>, <argument><expr><name>FDB_TSL_STATUS_NUM</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Convert the TSL object to blob object
 *
 * @param tsl TSL object
 * @param blob blob object
 *
 * @return new blob object
 */</comment>
<function><type><name>fdb_blob_t</name></type> <name>fdb_tsl_to_blob</name><parameter_list>(<parameter><decl><type><name>fdb_tsl_t</name></type> <name>tsl</name></decl></parameter>, <parameter><decl><type><name>fdb_blob_t</name></type> <name>blob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>blob</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name><name>tsl</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>log</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blob</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>meta_addr</name></name> <operator>=</operator> <name><name>tsl</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blob</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>tsl</name><operator>-&gt;</operator><name>log_len</name></name></expr>;</expr_stmt>

    <return>return <expr><name>blob</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_sec_hdr_cb</name><parameter_list>(<parameter><decl><type><name>tsdb_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>check_sec_hdr_cb_args</name></name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>arg1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>fdb_tsdb_t</name></type> <name>db</name> <init>= <expr><name><name>arg</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sector</name><operator>-&gt;</operator><name>check_ok</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Sector (0x%08"</literal> <name>PRIX32</name> <literal type="string">") header info is incorrect.\n"</literal></expr></argument>, <argument><expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name><name>arg</name><operator>-&gt;</operator><name>check_failed</name></name><operator>)</operator> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_USING</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>addr</name></name> <operator>==</operator> <name>FDB_DATA_UNUSED</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name></name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tsdb_sec_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Warning: Sector status is wrong, there are multiple sectors in use.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><name><name>arg</name><operator>-&gt;</operator><name>check_failed</name></name><operator>)</operator> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <return>return <expr><name>true</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sector</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_EMPTY</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name><name>arg</name><operator>-&gt;</operator><name>empty_num</name></name><operator>)</operator> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>empty_addr</name></name> <operator>=</operator> <name><name>sector</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arg</name><operator>-&gt;</operator><name>empty_num</name></name><operator>)</operator> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>addr</name></name> <operator>==</operator> <name>FDB_DATA_UNUSED</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name></name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tsdb_sec_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>format_all_cb</name><parameter_list>(<parameter><decl><type><name>tsdb_sec_info_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_tsdb_t</name></type> <name>db</name> <init>= <expr><name>arg1</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>format_sector</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>sector</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tsl_format_all</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tsdb_sec_info</name></name></type> <name>sector</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>sector</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sector_iterator</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_UNUSED</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>format_all_cb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>oldest_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>last_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="block">/* read the current using sector info */</comment>
    <expr_stmt><expr><call><name>read_sector_info</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"All sector format finished.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Clean all the data in the TSDB.
 *
 * @note It's DANGEROUS. This operation is not reversible.
 *
 * @param db database object
 */</comment>
<function><type><name>void</name></type> <name>fdb_tsl_clean</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>db_lock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsl_format_all</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>db_unlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function will get or set some options of the database
 *
 * @param db database object
 * @param cmd the control command
 * @param arg the argument
 */</comment>
<function><type><name>void</name></type> <name>fdb_tsdb_control</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>FDB_TSDB_CTRL_SET_SEC_SIZE</name></expr>:</case>
        <comment type="block">/* this change MUST before database initialization */</comment>
        <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>init_ok</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>sec_size</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>arg</name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>FDB_TSDB_CTRL_GET_SEC_SIZE</name></expr>:</case>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>arg</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>sec_size</name></name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>FDB_TSDB_CTRL_SET_LOCK</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ARMCC_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wpedantic"</cpp:literal></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>lock</name></name> <operator>=</operator> <operator>(</operator><macro><name>void</name> <argument_list>(<argument>*</argument>)</argument_list></macro><operator>(</operator><name>fdb_db_t</name> <name>db</name><operator>)</operator><operator>)</operator><name>arg</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ARMCC_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <break>break;</break>
    <case>case <expr><name>FDB_TSDB_CTRL_SET_UNLOCK</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ARMCC_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wpedantic"</cpp:literal></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>unlock</name></name> <operator>=</operator> <operator>(</operator><macro><name>void</name> <argument_list>(<argument>*</argument>)</argument_list></macro><operator>(</operator><name>fdb_db_t</name> <name>db</name><operator>)</operator><operator>)</operator><name>arg</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ARMCC_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <break>break;</break>
    <case>case <expr><name>FDB_TSDB_CTRL_SET_ROLLOVER</name></expr>:</case>
        <comment type="block">/* this change MUST after database initialized */</comment>
        <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>init_ok</name></name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>rollover</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><name>arg</name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>FDB_TSDB_CTRL_GET_ROLLOVER</name></expr>:</case>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><name>arg</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>rollover</name></name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>FDB_TSDB_CTRL_GET_LAST_TIME</name></expr>:</case>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>fdb_time_t</name> <operator>*</operator><operator>)</operator><name>arg</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>last_time</name></name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>FDB_TSDB_CTRL_SET_FILE_MODE</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_FILE_MODE</name></cpp:ifdef>
        <comment type="block">/* this change MUST before database initialization */</comment>
        <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>init_ok</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>file_mode</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><name>arg</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: set file mode Failed. Please defined the FDB_USING_FILE_MODE macro."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <break>break;</break>
    <case>case <expr><name>FDB_TSDB_CTRL_SET_MAX_SIZE</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_FILE_MODE</name></cpp:ifdef>
        <comment type="block">/* this change MUST before database initialization */</comment>
        <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>init_ok</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>max_size</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>arg</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <break>break;</break>
    <case>case <expr><name>FDB_TSDB_CTRL_SET_NOT_FORMAT</name></expr>:</case>
        <comment type="block">/* this change MUST before database initialization */</comment>
        <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>init_ok</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>not_formatable</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><name>arg</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * The time series database initialization.
 *
 * @param db database object
 * @param name database name
 * @param path FAL mode: partition name, file mode: database saved directory path
 * @param get_time get current time function
 * @param max_len maximum length of each log
 * @param user_data user data
 *
 * @return result
 */</comment>
<function><type><name>fdb_err_t</name></type> <name>fdb_tsdb_init</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>fdb_get_time</name></type> <name>get_time</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max_len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tsdb_sec_info</name></name></type> <name>sector</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>check_sec_hdr_cb_args</name></name></type> <name>check_sec_arg</name> <init>= <expr><block>{ <expr><name>db</name></expr>, <expr><name>false</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name>get_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_fdb_init_ex</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>FDB_DB_TYPE_TS</name></expr></argument>, <argument><expr><name>user_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>__exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>get_time</name></name> <operator>=</operator> <name>get_time</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>max_len</name></name> <operator>=</operator> <name>max_len</name></expr>;</expr_stmt>
    <comment type="block">/* default rollover flag is true */</comment>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>rollover</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>oldest_addr</name></name> <operator>=</operator> <name>FDB_DATA_UNUSED</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>FDB_DATA_UNUSED</name></expr>;</expr_stmt>
    <comment type="block">/* must less than sector size */</comment>
    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name>max_len</name> <operator>&lt;</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* check all sector header */</comment>
    <expr_stmt><expr><name><name>sector</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sector_iterator</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sector</name></expr></argument>, <argument><expr><name>FDB_SECTOR_STORE_UNUSED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check_sec_arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>check_sec_hdr_cb</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* format all sector when check failed */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>check_sec_arg</name><operator>.</operator><name>check_failed</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>not_formatable</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>FDB_READ_ERR</name></expr>;</expr_stmt>
            <goto>goto <name>__exit</name>;</goto>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>tsl_format_all</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>latest_addr</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>check_sec_arg</name><operator>.</operator><name>empty_num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>latest_addr</name> <operator>=</operator> <name><name>check_sec_arg</name><operator>.</operator><name>empty_addr</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>rollover</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>latest_addr</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>addr</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="block">/* There is no empty sector. */</comment>
                <expr_stmt><expr><name>latest_addr</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <call><name>db_max_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <comment type="block">/* db-&gt;cur_sec is the latest sector, and the next is the oldest sector */</comment>
        <if_stmt><if>if <condition>(<expr><name>latest_addr</name> <operator>+</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>db_max_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="block">/* db-&gt;cur_sec is the the bottom of the database */</comment>
            <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>oldest_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>oldest_addr</name></name> <operator>=</operator> <name>latest_addr</name> <operator>+</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>FDB_DEBUG</name><argument_list>(<argument><expr><literal type="string">"TSDB (%s) oldest sectors is 0x%08"</literal> <name>PRIX32</name> <literal type="string">", current using sector is 0x%08"</literal> <name>PRIX32</name> <literal type="string">".\n"</literal></expr></argument>, <argument><expr><call><name>db_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>oldest_addr</name></name></expr></argument>,
            <argument><expr><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* read the current using sector info */</comment>
    <expr_stmt><expr><call><name>read_sector_info</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* get last save time */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_USING</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>last_time</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>end_time</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>FDB_SECTOR_STORE_EMPTY</name> <operator>&amp;&amp;</operator> <name><name>db</name><operator>-&gt;</operator><name>oldest_addr</name></name> <operator>!=</operator> <name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>tsdb_sec_info</name></name></type> <name>sec</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>cur_sec</name><operator>.</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>db_max_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>addr</name> <operator>-=</operator> <call><name>db_sec_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>read_sector_info</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>last_time</name></name> <operator>=</operator> <name><name>sec</name><operator>.</operator><name>end_time</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<label><name>__exit</name>:</label>

    <expr_stmt><expr><call><name>_fdb_init_finish</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * The time series database deinitialization.
 *
 * @param db database object
 *
 * @return result
 */</comment>
<function><type><name>fdb_err_t</name></type> <name>fdb_tsdb_deinit</name><parameter_list>(<parameter><decl><type><name>fdb_tsdb_t</name></type> <name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>_fdb_deinit</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator> <name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>FDB_NO_ERR</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(FDB_USING_TSDB) */</comment>
</unit>
