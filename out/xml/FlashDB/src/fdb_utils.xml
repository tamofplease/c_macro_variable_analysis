<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/src/fdb_utils.c"><comment type="block">/*
 * Copyright (c) 2020, Armink, &lt;armink.ztl@gmail.com&gt;
 *
 * SPDX-License-Identifier: Apache-2.0
 */</comment>

<comment type="block" format="doxygen">/**
 * @file
 * @brief utils
 *
 * Some utils for this library.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;flashdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fdb_low_lvl.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDB_LOG_TAG</name></cpp:macro> <cpp:value>"[utils]"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>crc32_table</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x77073096</literal></expr>, <expr><literal type="number">0xee0e612c</literal></expr>, <expr><literal type="number">0x990951ba</literal></expr>, <expr><literal type="number">0x076dc419</literal></expr>, <expr><literal type="number">0x706af48f</literal></expr>,
    <expr><literal type="number">0xe963a535</literal></expr>, <expr><literal type="number">0x9e6495a3</literal></expr>, <expr><literal type="number">0x0edb8832</literal></expr>, <expr><literal type="number">0x79dcb8a4</literal></expr>, <expr><literal type="number">0xe0d5e91e</literal></expr>, <expr><literal type="number">0x97d2d988</literal></expr>,
    <expr><literal type="number">0x09b64c2b</literal></expr>, <expr><literal type="number">0x7eb17cbd</literal></expr>, <expr><literal type="number">0xe7b82d07</literal></expr>, <expr><literal type="number">0x90bf1d91</literal></expr>, <expr><literal type="number">0x1db71064</literal></expr>, <expr><literal type="number">0x6ab020f2</literal></expr>,
    <expr><literal type="number">0xf3b97148</literal></expr>, <expr><literal type="number">0x84be41de</literal></expr>, <expr><literal type="number">0x1adad47d</literal></expr>, <expr><literal type="number">0x6ddde4eb</literal></expr>, <expr><literal type="number">0xf4d4b551</literal></expr>, <expr><literal type="number">0x83d385c7</literal></expr>,
    <expr><literal type="number">0x136c9856</literal></expr>, <expr><literal type="number">0x646ba8c0</literal></expr>, <expr><literal type="number">0xfd62f97a</literal></expr>, <expr><literal type="number">0x8a65c9ec</literal></expr>, <expr><literal type="number">0x14015c4f</literal></expr>, <expr><literal type="number">0x63066cd9</literal></expr>,
    <expr><literal type="number">0xfa0f3d63</literal></expr>, <expr><literal type="number">0x8d080df5</literal></expr>, <expr><literal type="number">0x3b6e20c8</literal></expr>, <expr><literal type="number">0x4c69105e</literal></expr>, <expr><literal type="number">0xd56041e4</literal></expr>, <expr><literal type="number">0xa2677172</literal></expr>,
    <expr><literal type="number">0x3c03e4d1</literal></expr>, <expr><literal type="number">0x4b04d447</literal></expr>, <expr><literal type="number">0xd20d85fd</literal></expr>, <expr><literal type="number">0xa50ab56b</literal></expr>, <expr><literal type="number">0x35b5a8fa</literal></expr>, <expr><literal type="number">0x42b2986c</literal></expr>,
    <expr><literal type="number">0xdbbbc9d6</literal></expr>, <expr><literal type="number">0xacbcf940</literal></expr>, <expr><literal type="number">0x32d86ce3</literal></expr>, <expr><literal type="number">0x45df5c75</literal></expr>, <expr><literal type="number">0xdcd60dcf</literal></expr>, <expr><literal type="number">0xabd13d59</literal></expr>,
    <expr><literal type="number">0x26d930ac</literal></expr>, <expr><literal type="number">0x51de003a</literal></expr>, <expr><literal type="number">0xc8d75180</literal></expr>, <expr><literal type="number">0xbfd06116</literal></expr>, <expr><literal type="number">0x21b4f4b5</literal></expr>, <expr><literal type="number">0x56b3c423</literal></expr>,
    <expr><literal type="number">0xcfba9599</literal></expr>, <expr><literal type="number">0xb8bda50f</literal></expr>, <expr><literal type="number">0x2802b89e</literal></expr>, <expr><literal type="number">0x5f058808</literal></expr>, <expr><literal type="number">0xc60cd9b2</literal></expr>, <expr><literal type="number">0xb10be924</literal></expr>,
    <expr><literal type="number">0x2f6f7c87</literal></expr>, <expr><literal type="number">0x58684c11</literal></expr>, <expr><literal type="number">0xc1611dab</literal></expr>, <expr><literal type="number">0xb6662d3d</literal></expr>, <expr><literal type="number">0x76dc4190</literal></expr>, <expr><literal type="number">0x01db7106</literal></expr>,
    <expr><literal type="number">0x98d220bc</literal></expr>, <expr><literal type="number">0xefd5102a</literal></expr>, <expr><literal type="number">0x71b18589</literal></expr>, <expr><literal type="number">0x06b6b51f</literal></expr>, <expr><literal type="number">0x9fbfe4a5</literal></expr>, <expr><literal type="number">0xe8b8d433</literal></expr>,
    <expr><literal type="number">0x7807c9a2</literal></expr>, <expr><literal type="number">0x0f00f934</literal></expr>, <expr><literal type="number">0x9609a88e</literal></expr>, <expr><literal type="number">0xe10e9818</literal></expr>, <expr><literal type="number">0x7f6a0dbb</literal></expr>, <expr><literal type="number">0x086d3d2d</literal></expr>,
    <expr><literal type="number">0x91646c97</literal></expr>, <expr><literal type="number">0xe6635c01</literal></expr>, <expr><literal type="number">0x6b6b51f4</literal></expr>, <expr><literal type="number">0x1c6c6162</literal></expr>, <expr><literal type="number">0x856530d8</literal></expr>, <expr><literal type="number">0xf262004e</literal></expr>,
    <expr><literal type="number">0x6c0695ed</literal></expr>, <expr><literal type="number">0x1b01a57b</literal></expr>, <expr><literal type="number">0x8208f4c1</literal></expr>, <expr><literal type="number">0xf50fc457</literal></expr>, <expr><literal type="number">0x65b0d9c6</literal></expr>, <expr><literal type="number">0x12b7e950</literal></expr>,
    <expr><literal type="number">0x8bbeb8ea</literal></expr>, <expr><literal type="number">0xfcb9887c</literal></expr>, <expr><literal type="number">0x62dd1ddf</literal></expr>, <expr><literal type="number">0x15da2d49</literal></expr>, <expr><literal type="number">0x8cd37cf3</literal></expr>, <expr><literal type="number">0xfbd44c65</literal></expr>,
    <expr><literal type="number">0x4db26158</literal></expr>, <expr><literal type="number">0x3ab551ce</literal></expr>, <expr><literal type="number">0xa3bc0074</literal></expr>, <expr><literal type="number">0xd4bb30e2</literal></expr>, <expr><literal type="number">0x4adfa541</literal></expr>, <expr><literal type="number">0x3dd895d7</literal></expr>,
    <expr><literal type="number">0xa4d1c46d</literal></expr>, <expr><literal type="number">0xd3d6f4fb</literal></expr>, <expr><literal type="number">0x4369e96a</literal></expr>, <expr><literal type="number">0x346ed9fc</literal></expr>, <expr><literal type="number">0xad678846</literal></expr>, <expr><literal type="number">0xda60b8d0</literal></expr>,
    <expr><literal type="number">0x44042d73</literal></expr>, <expr><literal type="number">0x33031de5</literal></expr>, <expr><literal type="number">0xaa0a4c5f</literal></expr>, <expr><literal type="number">0xdd0d7cc9</literal></expr>, <expr><literal type="number">0x5005713c</literal></expr>, <expr><literal type="number">0x270241aa</literal></expr>,
    <expr><literal type="number">0xbe0b1010</literal></expr>, <expr><literal type="number">0xc90c2086</literal></expr>, <expr><literal type="number">0x5768b525</literal></expr>, <expr><literal type="number">0x206f85b3</literal></expr>, <expr><literal type="number">0xb966d409</literal></expr>, <expr><literal type="number">0xce61e49f</literal></expr>,
    <expr><literal type="number">0x5edef90e</literal></expr>, <expr><literal type="number">0x29d9c998</literal></expr>, <expr><literal type="number">0xb0d09822</literal></expr>, <expr><literal type="number">0xc7d7a8b4</literal></expr>, <expr><literal type="number">0x59b33d17</literal></expr>, <expr><literal type="number">0x2eb40d81</literal></expr>,
    <expr><literal type="number">0xb7bd5c3b</literal></expr>, <expr><literal type="number">0xc0ba6cad</literal></expr>, <expr><literal type="number">0xedb88320</literal></expr>, <expr><literal type="number">0x9abfb3b6</literal></expr>, <expr><literal type="number">0x03b6e20c</literal></expr>, <expr><literal type="number">0x74b1d29a</literal></expr>,
    <expr><literal type="number">0xead54739</literal></expr>, <expr><literal type="number">0x9dd277af</literal></expr>, <expr><literal type="number">0x04db2615</literal></expr>, <expr><literal type="number">0x73dc1683</literal></expr>, <expr><literal type="number">0xe3630b12</literal></expr>, <expr><literal type="number">0x94643b84</literal></expr>,
    <expr><literal type="number">0x0d6d6a3e</literal></expr>, <expr><literal type="number">0x7a6a5aa8</literal></expr>, <expr><literal type="number">0xe40ecf0b</literal></expr>, <expr><literal type="number">0x9309ff9d</literal></expr>, <expr><literal type="number">0x0a00ae27</literal></expr>, <expr><literal type="number">0x7d079eb1</literal></expr>,
    <expr><literal type="number">0xf00f9344</literal></expr>, <expr><literal type="number">0x8708a3d2</literal></expr>, <expr><literal type="number">0x1e01f268</literal></expr>, <expr><literal type="number">0x6906c2fe</literal></expr>, <expr><literal type="number">0xf762575d</literal></expr>, <expr><literal type="number">0x806567cb</literal></expr>,
    <expr><literal type="number">0x196c3671</literal></expr>, <expr><literal type="number">0x6e6b06e7</literal></expr>, <expr><literal type="number">0xfed41b76</literal></expr>, <expr><literal type="number">0x89d32be0</literal></expr>, <expr><literal type="number">0x10da7a5a</literal></expr>, <expr><literal type="number">0x67dd4acc</literal></expr>,
    <expr><literal type="number">0xf9b9df6f</literal></expr>, <expr><literal type="number">0x8ebeeff9</literal></expr>, <expr><literal type="number">0x17b7be43</literal></expr>, <expr><literal type="number">0x60b08ed5</literal></expr>, <expr><literal type="number">0xd6d6a3e8</literal></expr>, <expr><literal type="number">0xa1d1937e</literal></expr>,
    <expr><literal type="number">0x38d8c2c4</literal></expr>, <expr><literal type="number">0x4fdff252</literal></expr>, <expr><literal type="number">0xd1bb67f1</literal></expr>, <expr><literal type="number">0xa6bc5767</literal></expr>, <expr><literal type="number">0x3fb506dd</literal></expr>, <expr><literal type="number">0x48b2364b</literal></expr>,
    <expr><literal type="number">0xd80d2bda</literal></expr>, <expr><literal type="number">0xaf0a1b4c</literal></expr>, <expr><literal type="number">0x36034af6</literal></expr>, <expr><literal type="number">0x41047a60</literal></expr>, <expr><literal type="number">0xdf60efc3</literal></expr>, <expr><literal type="number">0xa867df55</literal></expr>,
    <expr><literal type="number">0x316e8eef</literal></expr>, <expr><literal type="number">0x4669be79</literal></expr>, <expr><literal type="number">0xcb61b38c</literal></expr>, <expr><literal type="number">0xbc66831a</literal></expr>, <expr><literal type="number">0x256fd2a0</literal></expr>, <expr><literal type="number">0x5268e236</literal></expr>,
    <expr><literal type="number">0xcc0c7795</literal></expr>, <expr><literal type="number">0xbb0b4703</literal></expr>, <expr><literal type="number">0x220216b9</literal></expr>, <expr><literal type="number">0x5505262f</literal></expr>, <expr><literal type="number">0xc5ba3bbe</literal></expr>, <expr><literal type="number">0xb2bd0b28</literal></expr>,
    <expr><literal type="number">0x2bb45a92</literal></expr>, <expr><literal type="number">0x5cb36a04</literal></expr>, <expr><literal type="number">0xc2d7ffa7</literal></expr>, <expr><literal type="number">0xb5d0cf31</literal></expr>, <expr><literal type="number">0x2cd99e8b</literal></expr>, <expr><literal type="number">0x5bdeae1d</literal></expr>,
    <expr><literal type="number">0x9b64c2b0</literal></expr>, <expr><literal type="number">0xec63f226</literal></expr>, <expr><literal type="number">0x756aa39c</literal></expr>, <expr><literal type="number">0x026d930a</literal></expr>, <expr><literal type="number">0x9c0906a9</literal></expr>, <expr><literal type="number">0xeb0e363f</literal></expr>,
    <expr><literal type="number">0x72076785</literal></expr>, <expr><literal type="number">0x05005713</literal></expr>, <expr><literal type="number">0x95bf4a82</literal></expr>, <expr><literal type="number">0xe2b87a14</literal></expr>, <expr><literal type="number">0x7bb12bae</literal></expr>, <expr><literal type="number">0x0cb61b38</literal></expr>,
    <expr><literal type="number">0x92d28e9b</literal></expr>, <expr><literal type="number">0xe5d5be0d</literal></expr>, <expr><literal type="number">0x7cdcefb7</literal></expr>, <expr><literal type="number">0x0bdbdf21</literal></expr>, <expr><literal type="number">0x86d3d2d4</literal></expr>, <expr><literal type="number">0xf1d4e242</literal></expr>,
    <expr><literal type="number">0x68ddb3f8</literal></expr>, <expr><literal type="number">0x1fda836e</literal></expr>, <expr><literal type="number">0x81be16cd</literal></expr>, <expr><literal type="number">0xf6b9265b</literal></expr>, <expr><literal type="number">0x6fb077e1</literal></expr>, <expr><literal type="number">0x18b74777</literal></expr>,
    <expr><literal type="number">0x88085ae6</literal></expr>, <expr><literal type="number">0xff0f6a70</literal></expr>, <expr><literal type="number">0x66063bca</literal></expr>, <expr><literal type="number">0x11010b5c</literal></expr>, <expr><literal type="number">0x8f659eff</literal></expr>, <expr><literal type="number">0xf862ae69</literal></expr>,
    <expr><literal type="number">0x616bffd3</literal></expr>, <expr><literal type="number">0x166ccf45</literal></expr>, <expr><literal type="number">0xa00ae278</literal></expr>, <expr><literal type="number">0xd70dd2ee</literal></expr>, <expr><literal type="number">0x4e048354</literal></expr>, <expr><literal type="number">0x3903b3c2</literal></expr>,
    <expr><literal type="number">0xa7672661</literal></expr>, <expr><literal type="number">0xd06016f7</literal></expr>, <expr><literal type="number">0x4969474d</literal></expr>, <expr><literal type="number">0x3e6e77db</literal></expr>, <expr><literal type="number">0xaed16a4a</literal></expr>, <expr><literal type="number">0xd9d65adc</literal></expr>,
    <expr><literal type="number">0x40df0b66</literal></expr>, <expr><literal type="number">0x37d83bf0</literal></expr>, <expr><literal type="number">0xa9bcae53</literal></expr>, <expr><literal type="number">0xdebb9ec5</literal></expr>, <expr><literal type="number">0x47b2cf7f</literal></expr>, <expr><literal type="number">0x30b5ffe9</literal></expr>,
    <expr><literal type="number">0xbdbdf21c</literal></expr>, <expr><literal type="number">0xcabac28a</literal></expr>, <expr><literal type="number">0x53b39330</literal></expr>, <expr><literal type="number">0x24b4a3a6</literal></expr>, <expr><literal type="number">0xbad03605</literal></expr>, <expr><literal type="number">0xcdd70693</literal></expr>,
    <expr><literal type="number">0x54de5729</literal></expr>, <expr><literal type="number">0x23d967bf</literal></expr>, <expr><literal type="number">0xb3667a2e</literal></expr>, <expr><literal type="number">0xc4614ab8</literal></expr>, <expr><literal type="number">0x5d681b02</literal></expr>, <expr><literal type="number">0x2a6f2b94</literal></expr>,
    <expr><literal type="number">0xb40bbe37</literal></expr>, <expr><literal type="number">0xc30c8ea1</literal></expr>, <expr><literal type="number">0x5a05df1b</literal></expr>, <expr><literal type="number">0x2d02ef8d</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Calculate the CRC32 value of a memory buffer.
 *
 * @param crc accumulated CRC32 value, must be 0 on first call
 * @param buf buffer to calculate CRC32 value for
 * @param size bytes in buffer
 *
 * @return calculated CRC32 value
 */</comment>
<function><type><name>uint32_t</name></type> <name>fdb_calc_crc32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>crc</name> <operator>=</operator> <name>crc</name> <operator>^</operator> <operator>~</operator><literal type="number">0U</literal></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>size</name><operator>--</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>crc32_table</name><index>[<expr><operator>(</operator><name>crc</name> <operator>^</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>crc</name> <operator>^</operator> <operator>~</operator><literal type="number">0U</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>_fdb_set_status</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>status_table</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>status_num</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>status_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>byte_index</name> <init>= <expr><operator>~</operator><literal type="number">0UL</literal></expr></init></decl>;</decl_stmt>
    <comment type="block">/*
     * | write garn |       status0       |       status1       |      status2         |
     * ---------------------------------------------------------------------------------
     * |    1bit    | 0xFF                | 0x7F                |  0x3F                |
     * |    8bit    | 0xFFFF              | 0x00FF              |  0x0000              |
     * |   32bit    | 0xFFFFFFFF FFFFFFFF | 0x00FFFFFF FFFFFFFF |  0x00FFFFFF 00FFFFFF |
     */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>status_table</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><call><name>FDB_STATUS_TABLE_SIZE</name><argument_list>(<argument><expr><name>status_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>status_index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>FDB_WRITE_GRAN</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><name>byte_index</name> <operator>=</operator> <operator>(</operator><name>status_index</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>status_table</name><index>[<expr><name>byte_index</name></expr>]</index></name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">0x00ff</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>status_index</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name>byte_index</name> <operator>=</operator> <operator>(</operator><name>status_index</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>FDB_WRITE_GRAN</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>status_table</name><index>[<expr><name>byte_index</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_WRITE_GRAN == 1 */</comment>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>byte_index</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>_fdb_get_status</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>status_table</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>status_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>status_num_bak</name> <init>= <expr><operator>--</operator><name>status_num</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>status_num</name> <operator>--</operator></expr>)</condition> <block>{<block_content>
        <comment type="block">/* get the first 0 position from end address to start address */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>FDB_WRITE_GRAN</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>status_table</name><index>[<expr><name>status_num</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>status_num</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/*  (FDB_WRITE_GRAN == 8) ||  (FDB_WRITE_GRAN == 32) ||  (FDB_WRITE_GRAN == 64) */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>status_table</name><index>[<expr><name>status_num</name> <operator>*</operator> <name>FDB_WRITE_GRAN</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_WRITE_GRAN == 1 */</comment>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>status_num_bak</name> <operator>-</operator> <name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>fdb_err_t</name></type> <name>_fdb_write_status</name><parameter_list>(<parameter><decl><type><name>fdb_db_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>status_table</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>status_num</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>status_index</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sync</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>byte_index</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name>status_index</name> <operator>&lt;</operator> <name>status_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name>status_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* set the status first */</comment>
    <expr_stmt><expr><name>byte_index</name> <operator>=</operator> <call><name>_fdb_set_status</name><argument_list>(<argument><expr><name>status_table</name></expr></argument>, <argument><expr><name>status_num</name></expr></argument>, <argument><expr><name>status_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* the first status table value is all 1, so no need to write flash */</comment>
    <if_stmt><if>if <condition>(<expr><name>byte_index</name> <operator>==</operator> <operator>~</operator><literal type="number">0UL</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>FDB_NO_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>FDB_WRITE_GRAN</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_fdb_flash_write</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name>byte_index</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>status_table</name><index>[<expr><name>byte_index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/*  (FDB_WRITE_GRAN == 8) ||  (FDB_WRITE_GRAN == 32) ||  (FDB_WRITE_GRAN == 64) */</comment>
    <comment type="block">/* write the status by write granularity
     * some flash (like stm32 onchip) NOT supported repeated write before erase */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_fdb_flash_write</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name>byte_index</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>status_table</name><index>[<expr><name>byte_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>FDB_WRITE_GRAN</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_WRITE_GRAN == 1 */</comment>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>_fdb_read_status</name><parameter_list>(<parameter><decl><type><name>fdb_db_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>status_table</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>total_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name>status_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>_fdb_flash_read</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>status_table</name></expr></argument>, <argument><expr><call><name>FDB_STATUS_TABLE_SIZE</name><argument_list>(<argument><expr><name>total_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>_fdb_get_status</name><argument_list>(<argument><expr><name>status_table</name></expr></argument>, <argument><expr><name>total_num</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * find the continue 0xFF flash address to end address
 */</comment>
<function><type><name>uint32_t</name></type> <name>_fdb_continue_ff_addr</name><parameter_list>(<parameter><decl><type><name>fdb_db_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>last_data</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>addr</name> <init>= <expr><name>start</name></expr></init></decl>, <decl><type ref="prev"/><name>read_size</name></decl>;</decl_stmt>

    <for>for <control>(<init>;</init> <condition><expr><name>start</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>start</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>start</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>read_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>read_size</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>_fdb_flash_read</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><name>read_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>read_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>last_data</name> <operator>!=</operator> <literal type="number">0xFF</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>addr</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>last_data</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>last_data</name> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>FDB_WG_ALIGN</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>end</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Make a blob object.
 *
 * @param blob blob object
 * @param value_buf value buffer
 * @param buf_len buffer length
 *
 * @return new blob object
 */</comment>
<function><type><name>fdb_blob_t</name></type> <name>fdb_blob_make</name><parameter_list>(<parameter><decl><type><name>fdb_blob_t</name></type> <name>blob</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>blob</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>value_buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blob</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>buf_len</name></expr>;</expr_stmt>

    <return>return <expr><name>blob</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Read the blob object in database.
 *
 * @param db database object
 * @param blob blob object
 *
 * @return read length
 */</comment>
<function><type><name>size_t</name></type> <name>fdb_blob_read</name><parameter_list>(<parameter><decl><type><name>fdb_db_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>fdb_blob_t</name></type> <name>blob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>read_len</name> <init>= <expr><name><name>blob</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>read_len</name> <operator>&gt;</operator> <name><name>blob</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>read_len</name> <operator>=</operator> <name><name>blob</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>_fdb_flash_read</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>blob</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>blob</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>read_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>read_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>read_len</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_FILE_MODE</name></cpp:ifdef>
<function_decl><type><specifier>extern</specifier> <name>fdb_err_t</name></type> <name>_fdb_file_read</name><parameter_list>(<parameter><decl><type><name>fdb_db_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>fdb_err_t</name></type> <name>_fdb_file_write</name><parameter_list>(<parameter><decl><type><name>fdb_db_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>fdb_err_t</name></type> <name>_fdb_file_erase</name><parameter_list>(<parameter><decl><type><name>fdb_db_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_USING_FILE_LIBC */</comment>

<function><type><name>fdb_err_t</name></type> <name>_fdb_flash_read</name><parameter_list>(<parameter><decl><type><name>fdb_db_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>file_mode</name></name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_FILE_MODE</name></cpp:ifdef>
        <return>return <expr><call><name>_fdb_file_read</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <return>return <expr><name>FDB_READ_ERR</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if> <else>else <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_FAL_MODE</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><call><name>fal_partition_read</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>storage</name><operator>.</operator><name>part</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>FDB_READ_ERR</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>fdb_err_t</name></type> <name>_fdb_flash_erase</name><parameter_list>(<parameter><decl><type><name>fdb_db_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>file_mode</name></name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_FILE_MODE</name></cpp:ifdef>
        <return>return <expr><call><name>_fdb_file_erase</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <return>return <expr><name>FDB_ERASE_ERR</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_USING_FILE_MODE */</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_FAL_MODE</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><call><name>fal_partition_erase</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>storage</name><operator>.</operator><name>part</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>FDB_ERASE_ERR</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>fdb_err_t</name></type> <name>_fdb_flash_write</name><parameter_list>(<parameter><decl><type><name>fdb_db_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sync</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_err_t</name></type> <name>result</name> <init>= <expr><name>FDB_NO_ERR</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>file_mode</name></name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_FILE_MODE</name></cpp:ifdef>
        <return>return <expr><call><name>_fdb_file_write</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>sync</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <return>return <expr><name>FDB_READ_ERR</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_USING_FILE_MODE */</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_FAL_MODE</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><call><name>fal_partition_write</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>storage</name><operator>.</operator><name>part</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>FDB_WRITE_ERR</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>
</unit>
