<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/src/fdb.c"><comment type="block">/*
 * Copyright (c) 2020, Armink, &lt;armink.ztl@gmail.com&gt;
 *
 * SPDX-License-Identifier: Apache-2.0
 */</comment>

<comment type="block" format="doxygen">/**
 * @file
 * @brief Initialize interface.
 *
 * Some initialize interface for this library.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;flashdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fdb_low_lvl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDB_LOG_TAG</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FDB_USING_FAL_MODE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FDB_USING_FILE_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Please defined the FDB_USING_FAL_MODE or FDB_USING_FILE_MODE macro"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>fdb_err_t</name></type> <name>_fdb_init_ex</name><parameter_list>(<parameter><decl><type><name>fdb_db_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>fdb_db_type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>init_ok</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>FDB_NO_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>user_data</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>file_mode</name></name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_FILE_MODE</name></cpp:ifdef>
        <comment type="block">/* must set when using file mode */</comment>
        <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>sec_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>max_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_FILE_POSIX_MODE</name></cpp:ifdef>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>cur_file</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>cur_file</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>storage</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
        <macro><name>FDB_ASSERT</name><argument_list>(<argument>strlen(path) != <literal type="number">0</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if> <else>else <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_FAL_MODE</name></cpp:ifdef>
        <decl_stmt><decl><type><name>size_t</name></type> <name>block_size</name></decl>;</decl_stmt>

        <comment type="block">/* FAL (Flash Abstraction Layer) initialization */</comment>
        <expr_stmt><expr><call><name>fal_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* check the flash partition */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>storage</name><operator>.</operator><name>part</name></name> <operator>=</operator> <call><name>fal_partition_find</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: Partition (%s) not found.\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>FDB_PART_NOT_FOUND</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>block_size</name> <operator>=</operator> <call><name>fal_flash_device_find</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>storage</name><operator>.</operator><name>part</name><operator>-&gt;</operator><name>flash_name</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>blk_size</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>sec_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>sec_size</name></name> <operator>=</operator> <name>block_size</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* must be aligned with block size */</comment>
            <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>sec_size</name></name> <operator>%</operator> <name>block_size</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>max_size</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>storage</name><operator>.</operator><name>part</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_USING_FAL_MODE */</comment>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* must align with sector size */</comment>
    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>max_size</name></name> <operator>%</operator> <name><name>db</name><operator>-&gt;</operator><name>sec_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* must have more than or equal 2 sector */</comment>
    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>max_size</name></name> <operator>/</operator> <name><name>db</name><operator>-&gt;</operator><name>sec_size</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>FDB_NO_ERR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_fdb_init_finish</name><parameter_list>(<parameter><decl><type><name>fdb_db_t</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>fdb_err_t</name></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>log_is_show</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>FDB_NO_ERR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>init_ok</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>log_is_show</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"FlashDB V%s is initialize success.\n"</literal></expr></argument>, <argument><expr><name>FDB_SW_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"You can get the latest version on https://github.com/armink/FlashDB .\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>log_is_show</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>not_formatable</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"Error: %s (%s) is initialize fail (%d).\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>db</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FDB_DB_TYPE_KV</name></expr> ?</condition><then> <expr><literal type="string">"KVDB"</literal></expr> </then><else>: <expr><literal type="string">"TSDB"</literal></expr></else></ternary></expr></argument>,
                <argument><expr><name><name>db</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_fdb_deinit</name><parameter_list>(<parameter><decl><type><name>fdb_db_t</name></type> <name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FDB_ASSERT</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>init_ok</name></name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_FILE_MODE</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_FILE_POSIX_MODE</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>cur_file</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>cur_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>cur_file</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>cur_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_USING_FILE_POSIX_MODE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_USING_FILE_MODE */</comment>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>init_ok</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
