<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/samples/kvdb_type_string_sample.c"><comment type="block">/*
 * Copyright (c) 2020, Armink, &lt;armink.ztl@gmail.com&gt;
 *
 * SPDX-License-Identifier: Apache-2.0
 */</comment>

<comment type="block" format="doxygen">/**
 * @file
 * @brief string KV samples.
 *
 * Key-Value Database string type KV feature samples source file.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;flashdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_KVDB</name></cpp:ifdef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDB_LOG_TAG</name></cpp:macro> <cpp:value>"[sample][kvdb][string]"</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>kvdb_type_string_sample</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>kvdb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"==================== kvdb_type_string_sample ====================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block>{<block_content> <comment type="block">/* CREATE new Key-Value */</comment>
        <decl_stmt><decl><type><name>char</name></type> <name><name>temp_data</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><literal type="string">"36C"</literal></expr></init></decl>;</decl_stmt>

        <comment type="block">/* It will create new KV node when "temp" KV not in database. */</comment>
        <expr_stmt><expr><call><name>fdb_kv_set</name><argument_list>(<argument><expr><name>kvdb</name></expr></argument>, <argument><expr><literal type="string">"temp"</literal></expr></argument>, <argument><expr><name>temp_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"create the 'temp' string KV, value is: %s\n"</literal></expr></argument>, <argument><expr><name>temp_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <block>{<block_content> <comment type="block">/* GET the KV value */</comment>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>return_value</name></decl>, <decl><type ref="prev"/><name><name>temp_data</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Get the "temp" KV value.
         * NOTE: The return value saved in fdb_kv_get's buffer. Please copy away as soon as possible.
         */</comment>
        <expr_stmt><expr><name>return_value</name> <operator>=</operator> <call><name>fdb_kv_get</name><argument_list>(<argument><expr><name>kvdb</name></expr></argument>, <argument><expr><literal type="string">"temp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* the return value is NULL when get the value failed */</comment>
        <if_stmt><if>if <condition>(<expr><name>return_value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>temp_data</name></expr></argument>, <argument><expr><name>return_value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"get the 'temp' value is: %s\n"</literal></expr></argument>, <argument><expr><name>temp_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <block>{<block_content> <comment type="block">/* CHANGE the KV value */</comment>
        <decl_stmt><decl><type><name>char</name></type> <name><name>temp_data</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><literal type="string">"38C"</literal></expr></init></decl>;</decl_stmt>

        <comment type="block">/* change the "temp" KV's value to "38.1" */</comment>
        <expr_stmt><expr><call><name>fdb_kv_set</name><argument_list>(<argument><expr><name>kvdb</name></expr></argument>, <argument><expr><literal type="string">"temp"</literal></expr></argument>, <argument><expr><name>temp_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"set 'temp' value to %s\n"</literal></expr></argument>, <argument><expr><name>temp_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <block>{<block_content> <comment type="block">/* DELETE the KV by name */</comment>
        <expr_stmt><expr><call><name>fdb_kv_del</name><argument_list>(<argument><expr><name>kvdb</name></expr></argument>, <argument><expr><literal type="string">"temp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"delete the 'temp' finish\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"===========================================================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_USING_KVDB */</comment>
</unit>
