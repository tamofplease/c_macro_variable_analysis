<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/samples/kvdb_basic_sample.c"><comment type="block">/*
 * Copyright (c) 2020, Armink, &lt;armink.ztl@gmail.com&gt;
 *
 * SPDX-License-Identifier: Apache-2.0
 */</comment>

<comment type="block" format="doxygen">/**
 * @file
 * @brief basic KV samples.
 *
 * basic Key-Value Database KV feature samples
 * get and show currnet boot counts
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;flashdb.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FDB_USING_KVDB</name></cpp:ifdef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDB_LOG_TAG</name></cpp:macro> <cpp:value>"[sample][kvdb][basic]"</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>kvdb_basic_sample</name><parameter_list>(<parameter><decl><type><name>fdb_kvdb_t</name></type> <name>kvdb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fdb_blob</name></name></type> <name>blob</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>boot_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"==================== kvdb_basic_sample ====================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block>{<block_content> <comment type="block">/* GET the KV value */</comment>
        <comment type="block">/* get the "boot_count" KV value */</comment>
        <expr_stmt><expr><call><name>fdb_kv_get_blob</name><argument_list>(<argument><expr><name>kvdb</name></expr></argument>, <argument><expr><literal type="string">"boot_count"</literal></expr></argument>, <argument><expr><call><name>fdb_blob_make</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>boot_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>boot_count</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* the blob.saved.len is more than 0 when get the value successful */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>blob</name><operator>.</operator><name>saved</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"get the 'boot_count' value is %d\n"</literal></expr></argument>, <argument><expr><name>boot_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"get the 'boot_count' failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>

    <block>{<block_content> <comment type="block">/* CHANGE the KV value */</comment>
        <comment type="block">/* increase the boot count */</comment>
        <expr_stmt><expr><name>boot_count</name> <operator>++</operator></expr>;</expr_stmt>
        <comment type="block">/* change the "boot_count" KV's value */</comment>
        <expr_stmt><expr><call><name>fdb_kv_set_blob</name><argument_list>(<argument><expr><name>kvdb</name></expr></argument>, <argument><expr><literal type="string">"boot_count"</literal></expr></argument>, <argument><expr><call><name>fdb_blob_make</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>boot_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>boot_count</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"set the 'boot_count' value to %d\n"</literal></expr></argument>, <argument><expr><name>boot_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>FDB_INFO</name><argument_list>(<argument><expr><literal type="string">"===========================================================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDB_USING_KVDB */</comment>
</unit>
