<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/port/fal/src/fal_flash.c"><comment type="block">/*
 * Copyright (c) 2006-2018, RT-Thread Development Team
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Change Logs:
 * Date           Author       Notes
 * 2018-05-17     armink       the first version
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="block">/* flash device table, must defined by user */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FAL_FLASH_DEV_TABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"You must defined flash device table (FAL_FLASH_DEV_TABLE) on 'fal_cfg.h'"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>fal_flash_dev</name></name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>device_table</name><index>[]</index></name> <init>= <expr><name>FAL_FLASH_DEV_TABLE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>device_table_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>device_table</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>device_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name>init_ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Initialize all flash device on FAL flash table
 *
 * @return result
 */</comment>
<function><type><name>int</name></type> <name>fal_flash_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>init_ok</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>device_table_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>device_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>ops</name><operator>.</operator><name>read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>device_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>ops</name><operator>.</operator><name>write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>device_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>ops</name><operator>.</operator><name>erase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* init flash device on flash table */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>device_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>ops</name><operator>.</operator><name>init</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>device_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name><name>ops</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>log_d</name><argument_list>(<argument><expr><literal type="string">"Flash device | %*.*s | addr: 0x%08lx | len: 0x%08x | blk_size: 0x%08x |initialized finish."</literal></expr></argument>,
                <argument><expr><name>FAL_DEV_NAME_MAX</name></expr></argument>, <argument><expr><name>FAL_DEV_NAME_MAX</name></expr></argument>, <argument><expr><name><name>device_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name><name>device_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>addr</name></expr></argument>, <argument><expr><name><name>device_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>len</name></expr></argument>,
                <argument><expr><name><name>device_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>blk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>init_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * find flash device by name
 *
 * @param name flash device name
 *
 * @return != NULL: flash device
 *            NULL: not found
 */</comment>
<function><type><specifier>const</specifier> <name><name>struct</name> <name>fal_flash_dev</name></name> <modifier>*</modifier></type><name>fal_flash_device_find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>init_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>device_table_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>device_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name>FAL_DEV_NAME_MAX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>device_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
