<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/port/fal/src/fal_partition.c"><comment type="block">/*
 * Copyright (c) 2006-2018, RT-Thread Development Team
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Change Logs:
 * Date           Author       Notes
 * 2018-05-17     armink       the first version
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<comment type="block">/* partition magic word */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAL_PART_MAGIC_WORD</name></cpp:macro>         <cpp:value>0x45503130</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAL_PART_MAGIC_WORD_H</name></cpp:macro>       <cpp:value>0x4550L</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAL_PART_MAGIC_WORD_L</name></cpp:macro>       <cpp:value>0x3130L</cpp:value></cpp:define>

<struct>struct <name>part_flash_info</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_flash_dev</name></name> <modifier>*</modifier></type><name>flash_dev</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block" format="doxygen">/**
 * FAL partition table config has defined on 'fal_cfg.h'.
 * When this option is disable, it will auto find the partition table on a specified location in flash partition.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FAL_PART_HAS_TABLE_CFG</name></cpp:ifdef>

<comment type="block">/* check partition table definition */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FAL_PART_TABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"You must defined FAL_PART_TABLE on 'fal_cfg.h'"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__CC_ARM</name></cpp:ifdef>                        <comment type="block">/* ARM Compiler */</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTION</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                 <cpp:value>__attribute__((section(x)))</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USED</name></cpp:macro>                       <cpp:value>__attribute__((used))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__IAR_SYSTEMS_ICC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>    <comment type="block">/* for IAR Compiler */</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTION</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                 <cpp:value>@ x</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USED</name></cpp:macro>                       <cpp:value>__root</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>               <comment type="block">/* GNU GCC Compiler */</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTION</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                 <cpp:value>__attribute__((section(x)))</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USED</name></cpp:macro>                       <cpp:value>__attribute__((used))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:error>#<cpp:directive>error</cpp:directive> not supported tool chain</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __CC_ARM */</comment>
<comment type="line">//USED static const struct fal_partition partition_table_def[] SECTION("FalPartTable") = FAL_PART_TABLE;</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>fal_partition</name></name></type> <name><name>partition_table_def</name><index>[]</index></name> <init>= <expr><name>FAL_PART_TABLE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>fal_partition</name></name> <modifier>*</modifier></type><name>partition_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<comment type="block">/* partition and flash object information cache table */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>part_flash_info</name></name></type> <name><name>part_flash_cache</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>partition_table_def</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>partition_table_def</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* FAL_PART_HAS_TABLE_CFG */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FAL_PART_TABLE_FLASH_DEV_NAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"You must defined FAL_PART_TABLE_FLASH_DEV_NAME on 'fal_cfg.h'"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* check partition table end offset address definition */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FAL_PART_TABLE_END_OFFSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"You must defined FAL_PART_TABLE_END_OFFSET on 'fal_cfg.h'"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>fal_partition</name></name> <modifier>*</modifier></type><name>partition_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>part_flash_info</name></name> <modifier>*</modifier></type><name>part_flash_cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FAL_PART_HAS_TABLE_CFG */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name>init_ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>partition_table_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * print the partition table
 */</comment>
<function><type><name>void</name></type> <name>fal_show_part_table</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>item1</name> <init>= <expr><literal type="string">"name"</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>item2</name> <init>= <expr><literal type="string">"flash_dev"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>part_name_max</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>item1</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>flash_dev_name_max</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>item2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_partition</name></name> <modifier>*</modifier></type><name>part</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>partition_table_len</name></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>partition_table_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>part</name> <operator>=</operator> <operator>&amp;</operator><name><name>partition_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>part_name_max</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>part_name_max</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>flash_name</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>flash_dev_name_max</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>flash_dev_name_max</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>flash_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>log_i</name><argument_list>(<argument><expr><literal type="string">"==================== FAL partition table ===================="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>log_i</name><argument_list>(<argument><expr><literal type="string">"| %-*.*s | %-*.*s |   offset   |    length  |"</literal></expr></argument>, <argument><expr><name>part_name_max</name></expr></argument>, <argument><expr><name>FAL_DEV_NAME_MAX</name></expr></argument>, <argument><expr><name>item1</name></expr></argument>, <argument><expr><name>flash_dev_name_max</name></expr></argument>,
            <argument><expr><name>FAL_DEV_NAME_MAX</name></expr></argument>, <argument><expr><name>item2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>log_i</name><argument_list>(<argument><expr><literal type="string">"-------------------------------------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>partition_table_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FAL_PART_HAS_TABLE_CFG</name></cpp:ifdef>
        <expr_stmt><expr><name>part</name> <operator>=</operator> <operator>&amp;</operator><name><name>partition_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name>part</name> <operator>=</operator> <operator>&amp;</operator><name><name>partition_table</name><index>[<expr><name>partition_table_len</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>log_i</name><argument_list>(<argument><expr><literal type="string">"| %-*.*s | %-*.*s | 0x%08lx | 0x%08x |"</literal></expr></argument>, <argument><expr><name>part_name_max</name></expr></argument>, <argument><expr><name>FAL_DEV_NAME_MAX</name></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>flash_dev_name_max</name></expr></argument>,
                <argument><expr><name>FAL_DEV_NAME_MAX</name></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>flash_name</name></name></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>log_i</name><argument_list>(<argument><expr><literal type="string">"============================================================="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_and_update_part_cache</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_partition</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_flash_dev</name></name> <modifier>*</modifier></type><name>flash_dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FAL_PART_HAS_TABLE_CFG</name></cpp:ifndef>
    <if_stmt><if>if <condition>(<expr><name>part_flash_cache</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>FAL_FREE</name><argument_list>(<argument><expr><name>part_flash_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>part_flash_cache</name> <operator>=</operator> <call><name>FAL_MALLOC</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>part_flash_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>part_flash_cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Initialize failed! No memory for partition table cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>flash_dev</name> <operator>=</operator> <call><name>fal_flash_device_find</name><argument_list>(<argument><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flash_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>flash_dev</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>log_d</name><argument_list>(<argument><expr><literal type="string">"Warning: Do NOT found the flash device(%s)."</literal></expr></argument>, <argument><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flash_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>&gt;=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>flash_dev</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Initialize failed! Partition(%s) offset address(%ld) out of flash bound(&lt;%d)."</literal></expr></argument>,
                    <argument><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>, <argument><expr><name><name>flash_dev</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>partition_table_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>part_flash_cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flash_dev</name> <operator>=</operator> <name>flash_dev</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Initialize all flash partition on FAL partition table
 *
 * @return partitions total number
 */</comment>
<function><type><name>int</name></type> <name>fal_partition_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name>init_ok</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>partition_table_len</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FAL_PART_HAS_TABLE_CFG</name></cpp:ifdef>
    <expr_stmt><expr><name>partition_table</name> <operator>=</operator> <operator>&amp;</operator><name><name>partition_table_def</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>partition_table_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>partition_table_def</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>partition_table_def</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* load partition table from the end address FAL_PART_TABLE_END_OFFSET, error return 0 */</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>part_table_offset</name> <init>= <expr><name>FAL_PART_TABLE_END_OFFSET</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>table_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>table_item_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>part_table_find_ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>read_magic_word</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>fal_partition_t</name></type> <name>new_part</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_flash_dev</name></name> <modifier>*</modifier></type><name>flash_dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>flash_dev</name> <operator>=</operator> <call><name>fal_flash_device_find</name><argument_list>(<argument><expr><name>FAL_PART_TABLE_FLASH_DEV_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flash_dev</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Initialize failed! Flash device (%s) NOT found."</literal></expr></argument>, <argument><expr><name>FAL_PART_TABLE_FLASH_DEV_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* check partition table offset address */</comment>
    <if_stmt><if>if <condition>(<expr><name>part_table_offset</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>part_table_offset</name> <operator>&gt;=</operator> <operator>(</operator><name>long</name><operator>)</operator> <name><name>flash_dev</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Setting partition table end offset address(%ld) out of flash bound(&lt;%d)."</literal></expr></argument>, <argument><expr><name>part_table_offset</name></expr></argument>, <argument><expr><name><name>flash_dev</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>table_item_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>fal_partition</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name>new_part</name> <operator>=</operator> <operator>(</operator><name>fal_partition_t</name><operator>)</operator><call><name>FAL_MALLOC</name><argument_list>(<argument><expr><name>table_item_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>new_part</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Initialize failed! No memory for table buffer."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* find partition table location */</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>read_buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><name>part_table_offset</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>read_buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>part_table_offset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>flash_dev</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>part_table_offset</name></expr></argument>, <argument><expr><name>read_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>read_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* find magic word in read buf */</comment>
                <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>read_buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>read_magic_word</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name>read_magic_word</name> <operator>=</operator> <name><name>read_buf</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>read_buf</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>read_buf</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>read_buf</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>read_magic_word</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>FAL_PART_MAGIC_WORD_H</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>FAL_PART_MAGIC_WORD_L</name><operator>)</operator></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>part_table_find_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>part_table_offset</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>log_d</name><argument_list>(<argument><expr><literal type="string">"Find the partition table on '%s' offset @0x%08lx."</literal></expr></argument>, <argument><expr><name>FAL_PART_TABLE_FLASH_DEV_NAME</name></expr></argument>,
                                <argument><expr><name>part_table_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="block">/* read failed */</comment>
                <break>break;</break>
            </block_content>}</block></else></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>part_table_find_ok</name></expr>)</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="block">/* calculate next read buf position */</comment>
                <if_stmt><if>if <condition>(<expr><name>part_table_offset</name> <operator>&gt;=</operator> <operator>(</operator><name>long</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>read_buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>part_table_offset</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>read_buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
                    <expr_stmt><expr><name>part_table_offset</name> <operator>+=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>read_magic_word</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>part_table_offset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>part_table_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="block">/* find failed */</comment>
                    <break>break;</break>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block>

    <comment type="block">/* load partition table */</comment>
    <while>while <condition>(<expr><name>part_table_find_ok</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>new_part</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name>table_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>flash_dev</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>part_table_offset</name> <operator>-</operator> <name>table_item_size</name> <operator>*</operator> <operator>(</operator><name>table_num</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>new_part</name></expr></argument>,
                <argument><expr><name>table_item_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Initialize failed! Flash device (%s) read error!"</literal></expr></argument>, <argument><expr><name><name>flash_dev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>table_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>new_part</name><operator>-&gt;</operator><name>magic_word</name></name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>FAL_PART_MAGIC_WORD_H</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>FAL_PART_MAGIC_WORD_L</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>partition_table</name> <operator>=</operator> <operator>(</operator><name>fal_partition_t</name><operator>)</operator> <call><name>FAL_REALLOC</name><argument_list>(<argument><expr><name>partition_table</name></expr></argument>, <argument><expr><name>table_item_size</name> <operator>*</operator> <operator>(</operator><name>table_num</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>partition_table</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Initialize failed! No memory for partition table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>table_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>partition_table</name> <operator>+</operator> <name>table_num</name></expr></argument>, <argument><expr><name>new_part</name></expr></argument>, <argument><expr><name>table_item_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>table_num</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while><empty_stmt>;</empty_stmt>

    <if_stmt><if>if <condition>(<expr><name>table_num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Partition table NOT found on flash: %s (len: %d) from offset: 0x%08x."</literal></expr></argument>, <argument><expr><name>FAL_PART_TABLE_FLASH_DEV_NAME</name></expr></argument>,
                <argument><expr><name>FAL_DEV_NAME_MAX</name></expr></argument>, <argument><expr><name>FAL_PART_TABLE_END_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>partition_table_len</name> <operator>=</operator> <name>table_num</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FAL_PART_HAS_TABLE_CFG */</comment>

    <comment type="block">/* check the partition table device exists */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>check_and_update_part_cache</name><argument_list>(<argument><expr><name>partition_table</name></expr></argument>, <argument><expr><name>partition_table_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>init_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>_exit</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FAL_DEBUG</name></expr></cpp:if>
    <expr_stmt><expr><call><name>fal_show_part_table</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FAL_PART_HAS_TABLE_CFG</name></cpp:ifndef>
    <if_stmt><if>if <condition>(<expr><name>new_part</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>FAL_FREE</name><argument_list>(<argument><expr><name>new_part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !FAL_PART_HAS_TABLE_CFG */</comment>

    <return>return <expr><name>partition_table_len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * find the partition by name
 *
 * @param name partition name
 *
 * @return != NULL: partition
 *            NULL: not found
 */</comment>
<function><type><specifier>const</specifier> <name><name>struct</name> <name>fal_partition</name></name> <modifier>*</modifier></type><name>fal_partition_find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>init_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>partition_table_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>partition_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>&amp;</operator><name><name>partition_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>fal_flash_dev</name></name> <modifier>*</modifier></type><name>flash_device_find_by_part</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_partition</name></name> <modifier>*</modifier></type><name>part</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>part</name> <operator>&gt;=</operator> <name>partition_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>part</name> <operator>&lt;=</operator> <operator>&amp;</operator><name><name>partition_table</name><index>[<expr><name>partition_table_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name><name>part_flash_cache</name><index>[<expr><name>part</name> <operator>-</operator> <name>partition_table</name></expr>]</index></name><operator>.</operator><name>flash_dev</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * get the partition table
 *
 * @param len return the partition table length
 *
 * @return partition table
 */</comment>
<function><type><specifier>const</specifier> <name><name>struct</name> <name>fal_partition</name></name> <modifier>*</modifier></type><name>fal_get_partition_table</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>init_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>partition_table_len</name></expr>;</expr_stmt>

    <return>return <expr><name>partition_table</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * set partition table temporarily
 * This setting will modify the partition table temporarily, the setting will be lost after restart.
 *
 * @param table partition table
 * @param len partition table length
 */</comment>
<function><type><name>void</name></type> <name>fal_set_partition_table_temp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fal_partition</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>init_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>check_and_update_part_cache</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>partition_table_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>partition_table</name> <operator>=</operator> <name>table</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * read data from partition
 *
 * @param part partition
 * @param addr relative address for partition
 * @param buf read buffer
 * @param size read size
 *
 * @return &gt;= 0: successful read data size
 *           -1: error
 */</comment>
<function><type><name>int</name></type> <name>fal_partition_read</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_partition</name></name> <modifier>*</modifier></type><name>part</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_flash_dev</name></name> <modifier>*</modifier></type><name>flash_dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>part</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Partition read error! Partition address out of bound."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>flash_dev</name> <operator>=</operator> <call><name>flash_device_find_by_part</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flash_dev</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Partition read error! Don't found flash device(%s) of the partition(%s)."</literal></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>flash_name</name></name></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>flash_dev</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Partition read error! Flash device(%s) read error!"</literal></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>flash_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * write data to partition
 *
 * @param part partition
 * @param addr relative address for partition
 * @param buf write buffer
 * @param size write size
 *
 * @return &gt;= 0: successful write data size
 *           -1: error
 */</comment>
<function><type><name>int</name></type> <name>fal_partition_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_partition</name></name> <modifier>*</modifier></type><name>part</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_flash_dev</name></name> <modifier>*</modifier></type><name>flash_dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>part</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Partition write error! Partition address out of bound."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>flash_dev</name> <operator>=</operator> <call><name>flash_device_find_by_part</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flash_dev</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Partition write error!  Don't found flash device(%s) of the partition(%s)."</literal></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>flash_name</name></name></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>flash_dev</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Partition write error! Flash device(%s) write error!"</literal></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>flash_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * erase partition data
 *
 * @param part partition
 * @param addr relative address for partition
 * @param size erase size
 *
 * @return &gt;= 0: successful erased data size
 *           -1: error
 */</comment>
<function><type><name>int</name></type> <name>fal_partition_erase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_partition</name></name> <modifier>*</modifier></type><name>part</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_flash_dev</name></name> <modifier>*</modifier></type><name>flash_dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>part</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Partition erase error! Partition address out of bound."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>flash_dev</name> <operator>=</operator> <call><name>flash_device_find_by_part</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flash_dev</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Partition erase error! Don't found flash device(%s) of the partition(%s)."</literal></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>flash_name</name></name></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>flash_dev</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Partition erase error! Flash device(%s) erase error!"</literal></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>flash_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * erase partition all data
 *
 * @param part partition
 *
 * @return &gt;= 0: successful erased data size
 *           -1: error
 */</comment>
<function><type><name>int</name></type> <name>fal_partition_erase_all</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_partition</name></name> <modifier>*</modifier></type><name>part</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>fal_partition_erase</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
