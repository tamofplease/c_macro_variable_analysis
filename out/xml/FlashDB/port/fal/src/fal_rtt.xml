<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/port/fal/src/fal_rtt.c"><comment type="block">/*
 * Copyright (c) 2006-2018, RT-Thread Development Team
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Change Logs:
 * Date           Author       Notes
 * 2018-06-23     armink       the first version
 * 2019-08-22     MurphyZhao   adapt to none rt-thread case
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fal.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RT_VER_NUM</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rtthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rtdevice.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="block">/* ========================== block device ======================== */</comment>
<struct>struct <name>fal_blk_device</name>
<block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>rt_device</name></name></type>                <name>parent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>rt_device_blk_geometry</name></name></type>   <name>geometry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_partition</name></name>     <modifier>*</modifier></type><name>fal_part</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* RT-Thread device interface */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RTTHREAD_VERSION</name> <operator>&gt;=</operator> <literal type="number">30000</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>rt_err_t</name></type> <name>blk_dev_control</name><argument_list>(<argument><expr><name>rt_device_t</name> <name>dev</name></expr></argument>, <argument><expr><name>int</name> <name>cmd</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>args</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
static <name>rt_err_t</name> <name>blk_dev_control</name><argument_list>(<argument><expr><name>rt_device_t</name> <name>dev</name></expr></argument>, <argument><expr><name>rt_uint8_t</name> <name>cmd</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>args</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fal_blk_device</name></name> <modifier>*</modifier></type><name>part</name> <init>= <expr><operator>(</operator>struct <name>fal_blk_device</name><operator>*</operator><operator>)</operator> <name>dev</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>part</name> <operator>!=</operator> <name>RT_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>RT_DEVICE_CTRL_BLK_GETGEOME</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>rt_device_blk_geometry</name></name> <modifier>*</modifier></type><name>geometry</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>geometry</name> <operator>=</operator> <operator>(</operator>struct <name>rt_device_blk_geometry</name> <operator>*</operator><operator>)</operator> <name>args</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>geometry</name> <operator>==</operator> <name>RT_NULL</name></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>-</operator><name>RT_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>geometry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>part</name><operator>-&gt;</operator><name>geometry</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rt_device_blk_geometry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>RT_DEVICE_CTRL_BLK_ERASE</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>rt_uint32_t</name> <modifier>*</modifier></type><name>addrs</name> <init>= <expr><operator>(</operator><name>rt_uint32_t</name> <operator>*</operator><operator>)</operator> <name>args</name></expr></init></decl>, <decl><type ref="prev"/><name>start_addr</name> <init>= <expr><name><name>addrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>end_addr</name> <init>= <expr><name><name>addrs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>phy_start_addr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>rt_size_t</name></type> <name>phy_size</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>addrs</name> <operator>==</operator> <name>RT_NULL</name> <operator>||</operator> <name>start_addr</name> <operator>&gt;</operator> <name>end_addr</name></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>-</operator><name>RT_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>end_addr</name> <operator>==</operator> <name>start_addr</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>end_addr</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>phy_start_addr</name> <operator>=</operator> <name>start_addr</name> <operator>*</operator> <name><name>part</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>bytes_per_sector</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>phy_size</name> <operator>=</operator> <operator>(</operator><name>end_addr</name> <operator>-</operator> <name>start_addr</name><operator>)</operator> <operator>*</operator> <name><name>part</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>bytes_per_sector</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>fal_partition_erase</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>fal_part</name></name></expr></argument>, <argument><expr><name>phy_start_addr</name></expr></argument>, <argument><expr><name>phy_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>-</operator><name>RT_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>RT_EOK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>rt_size_t</name></type> <name>blk_dev_read</name><parameter_list>(<parameter><decl><type><name>rt_device_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name>rt_off_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>rt_size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fal_blk_device</name></name> <modifier>*</modifier></type><name>part</name> <init>= <expr><operator>(</operator>struct <name>fal_blk_device</name><operator>*</operator><operator>)</operator> <name>dev</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>part</name> <operator>!=</operator> <name>RT_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fal_partition_read</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>fal_part</name></name></expr></argument>, <argument><expr><name>pos</name> <operator>*</operator> <name><name>part</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>block_size</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <name><name>part</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size</name> <operator>*</operator> <name><name>part</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>block_size</name></name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rt_size_t</name></type> <name>blk_dev_write</name><parameter_list>(<parameter><decl><type><name>rt_device_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name>rt_off_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>rt_size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fal_blk_device</name></name> <modifier>*</modifier></type><name>part</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>rt_off_t</name></type> <name>phy_pos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>rt_size_t</name></type> <name>phy_size</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>part</name> <operator>=</operator> <operator>(</operator>struct <name>fal_blk_device</name><operator>*</operator><operator>)</operator> <name>dev</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>part</name> <operator>!=</operator> <name>RT_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* change the block device's logic address to physical address */</comment>
    <expr_stmt><expr><name>phy_pos</name> <operator>=</operator> <name>pos</name> <operator>*</operator> <name><name>part</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>bytes_per_sector</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>phy_size</name> <operator>=</operator> <name>size</name> <operator>*</operator> <name><name>part</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>bytes_per_sector</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fal_partition_erase</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>fal_part</name></name></expr></argument>, <argument><expr><name>phy_pos</name></expr></argument>, <argument><expr><name>phy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>phy_size</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fal_partition_write</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>fal_part</name></name></expr></argument>, <argument><expr><name>phy_pos</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>phy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>phy_size</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RT_USING_DEVICE_OPS</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name><name>struct</name> <name>rt_device_ops</name></name></type> <name>blk_dev_ops</name> <init>=
<expr><block>{
    <expr><name>RT_NULL</name></expr>,
    <expr><name>RT_NULL</name></expr>,
    <expr><name>RT_NULL</name></expr>,
    <expr><name>blk_dev_read</name></expr>,
    <expr><name>blk_dev_write</name></expr>,
    <expr><name>blk_dev_control</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**
 * create RT-Thread block device by specified partition
 *
 * @param parition_name partition name
 *
 * @return != NULL: created block device
 *            NULL: created failed
 */</comment>
<function><type><name><name>struct</name> <name>rt_device</name></name> <modifier>*</modifier></type><name>fal_blk_device_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parition_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fal_blk_device</name></name> <modifier>*</modifier></type><name>blk_dev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_partition</name></name> <modifier>*</modifier></type><name>fal_part</name> <init>= <expr><call><name>fal_partition_find</name><argument_list>(<argument><expr><name>parition_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_flash_dev</name></name> <modifier>*</modifier></type><name>fal_flash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fal_part</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Error: the partition name (%s) is not found."</literal></expr></argument>, <argument><expr><name>parition_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fal_flash</name> <operator>=</operator> <call><name>fal_flash_device_find</name><argument_list>(<argument><expr><name><name>fal_part</name><operator>-&gt;</operator><name>flash_name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Error: the flash device name (%s) is not found."</literal></expr></argument>, <argument><expr><name><name>fal_part</name><operator>-&gt;</operator><name>flash_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>blk_dev</name> <operator>=</operator> <operator>(</operator>struct <name>fal_blk_device</name><operator>*</operator><operator>)</operator> <call><name>rt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>fal_blk_device</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>blk_dev</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>blk_dev</name><operator>-&gt;</operator><name>fal_part</name></name> <operator>=</operator> <name>fal_part</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>blk_dev</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>bytes_per_sector</name></name> <operator>=</operator> <name><name>fal_flash</name><operator>-&gt;</operator><name>blk_size</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>blk_dev</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>block_size</name></name> <operator>=</operator> <name><name>fal_flash</name><operator>-&gt;</operator><name>blk_size</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>blk_dev</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>sector_count</name></name> <operator>=</operator> <name><name>fal_part</name><operator>-&gt;</operator><name>len</name></name> <operator>/</operator> <name><name>fal_flash</name><operator>-&gt;</operator><name>blk_size</name></name></expr>;</expr_stmt>

        <comment type="block">/* register device */</comment>
        <expr_stmt><expr><name><name>blk_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>RT_Device_Class_Block</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RT_USING_DEVICE_OPS</name></cpp:ifdef>
        <expr_stmt><expr><name><name>blk_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ops</name></name>  <operator>=</operator> <operator>&amp;</operator><name>blk_dev_ops</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name><name>blk_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>init</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>blk_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>open</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>blk_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>close</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>blk_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>read</name></name> <operator>=</operator> <name>blk_dev_read</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>blk_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>write</name></name> <operator>=</operator> <name>blk_dev_write</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>blk_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>control</name></name> <operator>=</operator> <name>blk_dev_control</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="block">/* no private */</comment>
        <expr_stmt><expr><name><name>blk_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>user_data</name></name> <operator>=</operator> <name>RT_NULL</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>log_i</name><argument_list>(<argument><expr><literal type="string">"The FAL block device (%s) created successfully"</literal></expr></argument>, <argument><expr><name><name>fal_part</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rt_device_register</name><argument_list>(<argument><expr><call><name>RT_DEVICE</name><argument_list>(<argument><expr><name>blk_dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fal_part</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>RT_DEVICE_FLAG_RDWR</name> <operator>|</operator> <name>RT_DEVICE_FLAG_STANDALONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Error: no memory for create FAL block device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><call><name>RT_DEVICE</name><argument_list>(<argument><expr><name>blk_dev</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ========================== MTD nor device ======================== */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RT_USING_MTD_NOR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<struct>struct <name>fal_mtd_nor_device</name>
<block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>rt_mtd_nor_device</name></name></type>       <name>parent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_partition</name></name>     <modifier>*</modifier></type><name>fal_part</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>rt_size_t</name></type> <name>mtd_nor_dev_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rt_mtd_nor_device</name></name><modifier>*</modifier></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>rt_off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>rt_uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>rt_uint32_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fal_mtd_nor_device</name></name> <modifier>*</modifier></type><name>part</name> <init>= <expr><operator>(</operator>struct <name>fal_mtd_nor_device</name><operator>*</operator><operator>)</operator> <name>device</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>part</name> <operator>!=</operator> <name>RT_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fal_partition_read</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>fal_part</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>length</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rt_size_t</name></type> <name>mtd_nor_dev_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rt_mtd_nor_device</name></name><modifier>*</modifier></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>rt_off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rt_uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>rt_uint32_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fal_mtd_nor_device</name></name> <modifier>*</modifier></type><name>part</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>part</name> <operator>=</operator> <operator>(</operator>struct <name>fal_mtd_nor_device</name><operator>*</operator><operator>)</operator> <name>device</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>part</name> <operator>!=</operator> <name>RT_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fal_partition_write</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>fal_part</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>length</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rt_err_t</name></type> <name>mtd_nor_dev_erase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rt_mtd_nor_device</name></name><modifier>*</modifier></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>rt_off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>rt_uint32_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fal_mtd_nor_device</name></name> <modifier>*</modifier></type><name>part</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>part</name> <operator>=</operator> <operator>(</operator>struct <name>fal_mtd_nor_device</name><operator>*</operator><operator>)</operator> <name>device</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>part</name> <operator>!=</operator> <name>RT_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fal_partition_erase</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>fal_part</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>length</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>-</operator><name>RT_ERROR</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return <expr><name>RT_EOK</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>rt_mtd_nor_driver_ops</name></name></type> <name>_ops</name> <init>= 
<expr><block>{
    <expr><name>RT_NULL</name></expr>,
    <expr><name>mtd_nor_dev_read</name></expr>,
    <expr><name>mtd_nor_dev_write</name></expr>,
    <expr><name>mtd_nor_dev_erase</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * create RT-Thread MTD NOR device by specified partition
 *
 * @param parition_name partition name
 *
 * @return != NULL: created MTD NOR device
 *            NULL: created failed
 */</comment>
<function><type><name><name>struct</name> <name>rt_device</name></name> <modifier>*</modifier></type><name>fal_mtd_nor_device_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parition_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fal_mtd_nor_device</name></name> <modifier>*</modifier></type><name>mtd_nor_dev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_partition</name></name> <modifier>*</modifier></type><name>fal_part</name> <init>= <expr><call><name>fal_partition_find</name><argument_list>(<argument><expr><name>parition_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_flash_dev</name></name> <modifier>*</modifier></type><name>fal_flash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fal_part</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Error: the partition name (%s) is not found."</literal></expr></argument>, <argument><expr><name>parition_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fal_flash</name> <operator>=</operator> <call><name>fal_flash_device_find</name><argument_list>(<argument><expr><name><name>fal_part</name><operator>-&gt;</operator><name>flash_name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Error: the flash device name (%s) is not found."</literal></expr></argument>, <argument><expr><name><name>fal_part</name><operator>-&gt;</operator><name>flash_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>mtd_nor_dev</name> <operator>=</operator> <operator>(</operator>struct <name>fal_mtd_nor_device</name><operator>*</operator><operator>)</operator> <call><name>rt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>fal_mtd_nor_device</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>mtd_nor_dev</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>mtd_nor_dev</name><operator>-&gt;</operator><name>fal_part</name></name> <operator>=</operator> <name>fal_part</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>mtd_nor_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>block_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mtd_nor_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>block_end</name></name> <operator>=</operator> <name><name>fal_part</name><operator>-&gt;</operator><name>len</name></name> <operator>/</operator> <name><name>fal_flash</name><operator>-&gt;</operator><name>blk_size</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mtd_nor_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>block_size</name></name> <operator>=</operator> <name><name>fal_flash</name><operator>-&gt;</operator><name>blk_size</name></name></expr>;</expr_stmt>

        <comment type="block">/* set ops */</comment>
        <expr_stmt><expr><name><name>mtd_nor_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>_ops</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>log_i</name><argument_list>(<argument><expr><literal type="string">"The FAL MTD NOR device (%s) created successfully"</literal></expr></argument>, <argument><expr><name><name>fal_part</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rt_mtd_nor_register_device</name><argument_list>(<argument><expr><name><name>fal_part</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mtd_nor_dev</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Error: no memory for create FAL MTD NOR device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><call><name>RT_DEVICE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtd_nor_dev</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(RT_USING_MTD_NOR) */</comment>


<comment type="block">/* ========================== char device ======================== */</comment>
<struct>struct <name>fal_char_device</name>
<block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>rt_device</name></name></type>                <name>parent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_partition</name></name>     <modifier>*</modifier></type><name>fal_part</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* RT-Thread device interface */</comment>
<function><type><specifier>static</specifier> <name>rt_size_t</name></type> <name>char_dev_read</name><parameter_list>(<parameter><decl><type><name>rt_device_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name>rt_off_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>rt_size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fal_char_device</name></name> <modifier>*</modifier></type><name>part</name> <init>= <expr><operator>(</operator>struct <name>fal_char_device</name> <operator>*</operator><operator>)</operator> <name>dev</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>part</name> <operator>!=</operator> <name>RT_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>part</name><operator>-&gt;</operator><name>fal_part</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>part</name><operator>-&gt;</operator><name>fal_part</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fal_partition_read</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>fal_part</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rt_size_t</name></type> <name>char_dev_write</name><parameter_list>(<parameter><decl><type><name>rt_device_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name>rt_off_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>rt_size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fal_char_device</name></name> <modifier>*</modifier></type><name>part</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>part</name> <operator>=</operator> <operator>(</operator>struct <name>fal_char_device</name> <operator>*</operator><operator>)</operator> <name>dev</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>part</name> <operator>!=</operator> <name>RT_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fal_partition_erase_all</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>fal_part</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>pos</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>part</name><operator>-&gt;</operator><name>fal_part</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>part</name><operator>-&gt;</operator><name>fal_part</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fal_partition_write</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>fal_part</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RT_USING_DEVICE_OPS</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name><name>struct</name> <name>rt_device_ops</name></name></type> <name>char_dev_ops</name> <init>=
<expr><block>{
    <expr><name>RT_NULL</name></expr>,
    <expr><name>RT_NULL</name></expr>,
    <expr><name>RT_NULL</name></expr>,
    <expr><name>char_dev_read</name></expr>,
    <expr><name>char_dev_write</name></expr>,
    <expr><name>RT_NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RT_USING_POSIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dfs_posix.h&gt;</cpp:file></cpp:include>

<comment type="block">/* RT-Thread device filesystem interface */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>char_dev_fopen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dfs_fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fal_char_device</name></name> <modifier>*</modifier></type><name>part</name> <init>= <expr><operator>(</operator>struct <name>fal_char_device</name> <operator>*</operator><operator>)</operator> <name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>part</name> <operator>!=</operator> <name>RT_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>O_ACCMODE</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>O_RDONLY</name></expr>:</case>
        <break>break;</break>
    <case>case <expr><name>O_WRONLY</name></expr>:</case>
    <case>case <expr><name>O_RDWR</name></expr>:</case>
        <comment type="block">/* erase partition when device file open */</comment>
        <expr_stmt><expr><call><name>fal_partition_erase_all</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>fal_part</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <return>return <expr><name>RT_EOK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>char_dev_fread</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dfs_fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fal_char_device</name></name> <modifier>*</modifier></type><name>part</name> <init>= <expr><operator>(</operator>struct <name>fal_char_device</name> <operator>*</operator><operator>)</operator> <name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>part</name> <operator>!=</operator> <name>RT_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>count</name> <operator>&gt;</operator> <name><name>part</name><operator>-&gt;</operator><name>fal_part</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>part</name><operator>-&gt;</operator><name>fal_part</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>fd</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fal_partition_read</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>fal_part</name></name></expr></argument>, <argument><expr><name><name>fd</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>count</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>char_dev_fwrite</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dfs_fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fal_char_device</name></name> <modifier>*</modifier></type><name>part</name> <init>= <expr><operator>(</operator>struct <name>fal_char_device</name> <operator>*</operator><operator>)</operator> <name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>part</name> <operator>!=</operator> <name>RT_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>count</name> <operator>&gt;</operator> <name><name>part</name><operator>-&gt;</operator><name>fal_part</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>part</name><operator>-&gt;</operator><name>fal_part</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>fd</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fal_partition_write</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>fal_part</name></name></expr></argument>, <argument><expr><name><name>fd</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>dfs_file_ops</name></name></type> <name>char_dev_fops</name> <init>=
<expr><block>{
    <expr><name>char_dev_fopen</name></expr>,
    <expr><name>RT_NULL</name></expr>,
    <expr><name>RT_NULL</name></expr>,
    <expr><name>char_dev_fread</name></expr>,
    <expr><name>char_dev_fwrite</name></expr>,
    <expr><name>RT_NULL</name></expr>, <comment type="block">/* flush */</comment>
    <expr><name>RT_NULL</name></expr>, <comment type="block">/* lseek */</comment>
    <expr><name>RT_NULL</name></expr>, <comment type="block">/* getdents */</comment>
    <expr><name>RT_NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(RT_USING_POSIX) */</comment>

<comment type="block" format="doxygen">/**
 * create RT-Thread char device by specified partition
 *
 * @param parition_name partition name
 *
 * @return != NULL: created char device
 *            NULL: created failed
 */</comment>
<function><type><name><name>struct</name> <name>rt_device</name></name> <modifier>*</modifier></type><name>fal_char_device_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parition_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fal_char_device</name></name> <modifier>*</modifier></type><name>char_dev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_partition</name></name> <modifier>*</modifier></type><name>fal_part</name> <init>= <expr><call><name>fal_partition_find</name><argument_list>(<argument><expr><name>parition_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fal_part</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Error: the partition name (%s) is not found."</literal></expr></argument>, <argument><expr><name>parition_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>fal_flash_device_find</name><argument_list>(<argument><expr><name><name>fal_part</name><operator>-&gt;</operator><name>flash_name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Error: the flash device name (%s) is not found."</literal></expr></argument>, <argument><expr><name><name>fal_part</name><operator>-&gt;</operator><name>flash_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>char_dev</name> <operator>=</operator> <operator>(</operator>struct <name>fal_char_device</name> <operator>*</operator><operator>)</operator> <call><name>rt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>fal_char_device</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>char_dev</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>char_dev</name><operator>-&gt;</operator><name>fal_part</name></name> <operator>=</operator> <name>fal_part</name></expr>;</expr_stmt>

        <comment type="block">/* register device */</comment>
        <expr_stmt><expr><name><name>char_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>RT_Device_Class_Char</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RT_USING_DEVICE_OPS</name></cpp:ifdef>
        <expr_stmt><expr><name><name>char_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ops</name></name>  <operator>=</operator> <operator>&amp;</operator><name>char_dev_ops</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name><name>char_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>init</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>char_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>open</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>char_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>close</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>char_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>read</name></name> <operator>=</operator> <name>char_dev_read</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>char_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>write</name></name> <operator>=</operator> <name>char_dev_write</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>char_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>control</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <comment type="block">/* no private */</comment>
        <expr_stmt><expr><name><name>char_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>user_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>rt_device_register</name><argument_list>(<argument><expr><call><name>RT_DEVICE</name><argument_list>(<argument><expr><name>char_dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fal_part</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>RT_DEVICE_FLAG_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log_i</name><argument_list>(<argument><expr><literal type="string">"The FAL char device (%s) created successfully"</literal></expr></argument>, <argument><expr><name><name>fal_part</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RT_USING_POSIX</name></cpp:ifdef>
        <comment type="block">/* set fops */</comment>
        <expr_stmt><expr><name><name>char_dev</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>fops</name></name> <operator>=</operator> <operator>&amp;</operator><name>char_dev_fops</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_e</name><argument_list>(<argument><expr><literal type="string">"Error: no memory for create FAL char device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><call><name>RT_DEVICE</name><argument_list>(<argument><expr><name>char_dev</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RT_USING_FINSH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FINSH_USING_MSH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;finsh.h&gt;</cpp:file></cpp:include>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>fal_init_check</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fal</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__is_print</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>((unsigned int)((ch) - ' ') &lt; 127u - ' ')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXDUMP_WIDTH</name></cpp:macro>                 <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_PROBE_INDEX</name></cpp:macro>               <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_READ_INDEX</name></cpp:macro>                <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_WRITE_INDEX</name></cpp:macro>               <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_ERASE_INDEX</name></cpp:macro>               <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_BENCH_INDEX</name></cpp:macro>               <cpp:value>4</cpp:value></cpp:define>

    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>fal_flash_dev</name></name> <modifier>*</modifier></type><name>flash_dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>fal_partition</name></name> <modifier>*</modifier></type><name>part_dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>help_info</name><index>[]</index></name> <init>=
    <expr><block>{
            <expr><index>[<expr><name>CMD_PROBE_INDEX</name></expr>]</index>     <operator>=</operator> <literal type="string">"fal probe [dev_name|part_name]   - probe flash device or partition by given name"</literal></expr>,
            <expr><index>[<expr><name>CMD_READ_INDEX</name></expr>]</index>      <operator>=</operator> <literal type="string">"fal read addr size               - read 'size' bytes starting at 'addr'"</literal></expr>,
            <expr><index>[<expr><name>CMD_WRITE_INDEX</name></expr>]</index>     <operator>=</operator> <literal type="string">"fal write addr data1 ... dataN   - write some bytes 'data' starting at 'addr'"</literal></expr>,
            <expr><index>[<expr><name>CMD_ERASE_INDEX</name></expr>]</index>     <operator>=</operator> <literal type="string">"fal erase addr size              - erase 'size' bytes starting at 'addr'"</literal></expr>,
            <expr><index>[<expr><name>CMD_BENCH_INDEX</name></expr>]</index>     <operator>=</operator> <literal type="string">"fal bench &lt;blk_size&gt;             - benchmark test with per block size"</literal></expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>fal_init_check</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"\n[Warning] FAL is not initialized or failed to initialize!\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Usage:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>help_info</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>help_info</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operator</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>operator</name></expr></argument>, <argument><expr><literal type="string">"probe"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dev_name</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flash_dev</name> <operator>=</operator> <call><name>fal_flash_device_find</name><argument_list>(<argument><expr><name>dev_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>part_dev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><operator>(</operator><name>part_dev</name> <operator>=</operator> <call><name>fal_partition_find</name><argument_list>(<argument><expr><name>dev_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>flash_dev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Device %s NOT found. Probe failed.\n"</literal></expr></argument>, <argument><expr><name>dev_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>flash_dev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>part_dev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>flash_dev</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Probed a flash device | %s | addr: %ld | len: %d |.\n"</literal></expr></argument>, <argument><expr><name><name>flash_dev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                        <argument><expr><name><name>flash_dev</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>flash_dev</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>part_dev</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Probed a flash partition | %s | flash_dev: %s | offset: %ld | len: %d |.\n"</literal></expr></argument>,
                        <argument><expr><name><name>part_dev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>part_dev</name><operator>-&gt;</operator><name>flash_name</name></name></expr></argument>, <argument><expr><name><name>part_dev</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>part_dev</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"No flash device or partition was probed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Usage: %s.\n"</literal></expr></argument>, <argument><expr><name><name>help_info</name><index>[<expr><name>CMD_PROBE_INDEX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>fal_show_part_table</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>flash_dev</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>part_dev</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"No flash device or partition was probed. Please run 'fal probe'.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rt_strcmp</name><argument_list>(<argument><expr><name>operator</name></expr></argument>, <argument><expr><literal type="string">"read"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Usage: %s.\n"</literal></expr></argument>, <argument><expr><name><name>help_info</name><index>[<expr><name>CMD_READ_INDEX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>rt_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>flash_dev</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>flash_dev</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>part_dev</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>fal_partition_read</name><argument_list>(<argument><expr><name>part_dev</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Read data success. Start from 0x%08X, size is %ld. The data is:\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>,
                                    <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Offset (h) 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>HEXDUMP_WIDTH</name></expr></incr>)</control>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"[%08X] "</literal></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <comment type="block">/* dump hex */</comment>
                                <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>HEXDUMP_WIDTH</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                                <block>{<block_content>
                                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>j</name> <operator>&lt;</operator> <name>size</name></expr>)</condition>
                                    <block>{<block_content>
                                        <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"%02X "</literal></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></if>
                                    <else>else
                                    <block>{<block_content>
                                        <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"   "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></else></if_stmt>
                                </block_content>}</block></for>
                                <comment type="block">/* dump char for hex */</comment>
                                <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>HEXDUMP_WIDTH</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                                <block>{<block_content>
                                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>j</name> <operator>&lt;</operator> <name>size</name></expr>)</condition>
                                    <block>{<block_content>
                                        <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>__is_print</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></if></if_stmt>
                                </block_content>}</block></for>
                                <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></for>
                            <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name>rt_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Low memory!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>operator</name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Usage: %s.\n"</literal></expr></argument>, <argument><expr><name><name>help_info</name><index>[<expr><name>CMD_WRITE_INDEX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>size</name> <operator>=</operator> <name>argc</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>rt_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition>
                    <block>{<block_content>
                        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></for>
                        <if_stmt><if>if <condition>(<expr><name>flash_dev</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>flash_dev</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>part_dev</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>fal_partition_write</name><argument_list>(<argument><expr><name>part_dev</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Write data success. Start from 0x%08X, size is %ld.\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Write data: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></for>
                            <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name>rt_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Low memory!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>rt_strcmp</name><argument_list>(<argument><expr><name>operator</name></expr></argument>, <argument><expr><literal type="string">"erase"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Usage: %s.\n"</literal></expr></argument>, <argument><expr><name><name>help_info</name><index>[<expr><name>CMD_ERASE_INDEX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>flash_dev</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>flash_dev</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name>part_dev</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>fal_partition_erase</name><argument_list>(<argument><expr><name>part_dev</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Erase data success. Start from 0x%08X, size is %ld.\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>operator</name></expr></argument>, <argument><expr><literal type="string">"bench"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Usage: %s.\n"</literal></expr></argument>, <argument><expr><name><name>help_info</name><index>[<expr><name>CMD_BENCH_INDEX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><operator>(</operator><name>argc</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>argc</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"DANGER: It will erase full chip or partition! Please run 'fal bench %d yes'.\n"</literal></expr></argument>, <argument><expr><call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
                <comment type="block">/* full chip benchmark test */</comment>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>start_time</name></decl>, <decl><type ref="prev"/><name>time_cast</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>size_t</name></type> <name>write_size</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>read_size</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>cur_op_size</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>write_data</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>rt_malloc</name><argument_list>(<argument><expr><name>write_size</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>read_data</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>rt_malloc</name><argument_list>(<argument><expr><name>read_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>write_data</name> <operator>&amp;&amp;</operator> <name>read_data</name></expr>)</condition>
                <block>{<block_content>
                    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>write_size</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <expr_stmt><expr><name><name>write_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <if_stmt><if>if <condition>(<expr><name>flash_dev</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>flash_dev</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name>part_dev</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>part_dev</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <comment type="block">/* benchmark testing */</comment>
                    <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Erasing %ld bytes data, waiting...\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>start_time</name> <operator>=</operator> <call><name>rt_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>flash_dev</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>flash_dev</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name>part_dev</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>fal_partition_erase</name><argument_list>(<argument><expr><name>part_dev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>time_cast</name> <operator>=</operator> <call><name>rt_tick_get</name><argument_list>()</argument_list></call> <operator>-</operator> <name>start_time</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Erase benchmark success, total time: %d.%03dS.\n"</literal></expr></argument>, <argument><expr><name>time_cast</name> <operator>/</operator> <name>RT_TICK_PER_SECOND</name></expr></argument>,
                                <argument><expr><name>time_cast</name> <operator>%</operator> <name>RT_TICK_PER_SECOND</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>RT_TICK_PER_SECOND</name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">999</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Erase benchmark has an error. Error code: %d.\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <comment type="block">/* write test */</comment>
                    <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Writing %ld bytes data, waiting...\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>start_time</name> <operator>=</operator> <call><name>rt_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>write_size</name></expr></incr>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>write_size</name> <operator>&lt;=</operator> <name>size</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>cur_op_size</name> <operator>=</operator> <name>write_size</name></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content>
                            <expr_stmt><expr><name>cur_op_size</name> <operator>=</operator> <name>size</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>flash_dev</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>flash_dev</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>write_data</name></expr></argument>, <argument><expr><name>cur_op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>part_dev</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>fal_partition_write</name><argument_list>(<argument><expr><name>part_dev</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>write_data</name></expr></argument>, <argument><expr><name>cur_op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
                        <block>{<block_content>
                            <break>break;</break>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>time_cast</name> <operator>=</operator> <call><name>rt_tick_get</name><argument_list>()</argument_list></call> <operator>-</operator> <name>start_time</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Write benchmark success, total time: %d.%03dS.\n"</literal></expr></argument>, <argument><expr><name>time_cast</name> <operator>/</operator> <name>RT_TICK_PER_SECOND</name></expr></argument>,
                                <argument><expr><name>time_cast</name> <operator>%</operator> <name>RT_TICK_PER_SECOND</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>RT_TICK_PER_SECOND</name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">999</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Write benchmark has an error. Error code: %d.\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <comment type="block">/* read test */</comment>
                    <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Reading %ld bytes data, waiting...\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>start_time</name> <operator>=</operator> <call><name>rt_tick_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>read_size</name></expr></incr>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>read_size</name> <operator>&lt;=</operator> <name>size</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>cur_op_size</name> <operator>=</operator> <name>read_size</name></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content>
                            <expr_stmt><expr><name>cur_op_size</name> <operator>=</operator> <name>size</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>flash_dev</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>flash_dev</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>read_data</name></expr></argument>, <argument><expr><name>cur_op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>part_dev</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>fal_partition_read</name><argument_list>(<argument><expr><name>part_dev</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>read_data</name></expr></argument>, <argument><expr><name>cur_op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <comment type="block">/* data check */</comment>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>cur_op_size</name></expr>;</condition> <incr><expr><name>index</name> <operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name><name>write_data</name><index>[<expr><name>index</name></expr>]</index></name> <operator>!=</operator> <name><name>read_data</name><index>[<expr><name>index</name></expr>]</index></name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"%d %d %02x %02x.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>write_data</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>read_data</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>

                        <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>write_data</name></expr></argument>, <argument><expr><name>read_data</name></expr></argument>, <argument><expr><name>cur_op_size</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><name>RT_ERROR</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Data check ERROR! Please check you flash by other command.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <comment type="block">/* has an error */</comment>
                        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
                        <block>{<block_content>
                            <break>break;</break>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>time_cast</name> <operator>=</operator> <call><name>rt_tick_get</name><argument_list>()</argument_list></call> <operator>-</operator> <name>start_time</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Read benchmark success, total time: %d.%03dS.\n"</literal></expr></argument>, <argument><expr><name>time_cast</name> <operator>/</operator> <name>RT_TICK_PER_SECOND</name></expr></argument>,
                                <argument><expr><name>time_cast</name> <operator>%</operator> <name>RT_TICK_PER_SECOND</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>RT_TICK_PER_SECOND</name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">999</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Read benchmark has an error. Error code: %d.\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Low memory!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name>rt_free</name><argument_list>(<argument><expr><name>write_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>rt_free</name><argument_list>(<argument><expr><name>read_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"Usage:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>help_info</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>help_info</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>rt_kprintf</name><argument_list>(<argument><expr><literal type="string">"This operate has an error. Error code: %d.\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<expr_stmt><expr><call><name>MSH_CMD_EXPORT</name><argument_list>(<argument><expr><name>fal</name></expr></argument>, <argument><expr><macro><name>FAL</name> <argument_list>(<argument>Flash Abstraction Layer</argument>)</argument_list></macro> <name><name>operate</name><operator>.</operator><name/></name>)</expr></argument>;</argument_list></call></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(RT_USING_FINSH) &amp;&amp; defined(FINSH_USING_MSH) */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RT_VER_NUM */</comment>
</unit>
