<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/port/fal/samples/porting/fal_flash_sfud_port.c"><comment type="block">/*
 * Copyright (c) 2006-2018, RT-Thread Development Team
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Change Logs:
 * Date           Author       Notes
 * 2018-01-26     armink       the first version
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sfud.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FAL_USING_SFUD_PORT</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RT_USING_SFUD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;spi_flash_sfud.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FAL_USING_NOR_FLASH_DEV_NAME</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAL_USING_NOR_FLASH_DEV_NAME</name></cpp:macro>             <cpp:value>"norflash0"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>sfud_flash_t</name></type> <name>sfud_dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fal_flash_dev</name></name></type> <name>nor_flash0</name> <init>=
<expr><block>{
    <expr><operator>.</operator><name>name</name>       <operator>=</operator> <name>FAL_USING_NOR_FLASH_DEV_NAME</name></expr>,
    <expr><operator>.</operator><name>addr</name>       <operator>=</operator> <literal type="number">0</literal></expr>,
    <expr><operator>.</operator><name>len</name>        <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>,
    <expr><operator>.</operator><name>blk_size</name>   <operator>=</operator> <literal type="number">4096</literal></expr>,
    <expr><operator>.</operator><name>ops</name>        <operator>=</operator> <block>{<expr><name>init</name></expr>, <expr><name>read</name></expr>, <expr><name>write</name></expr>, <expr><name>erase</name></expr>}</block></expr>,
    <expr><operator>.</operator><name>write_gran</name> <operator>=</operator> <literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RT_USING_SFUD</name></cpp:ifdef>
    <comment type="block">/* RT-Thread RTOS platform */</comment>
    <expr_stmt><expr><name>sfud_dev</name> <operator>=</operator> <call><name>rt_sfud_flash_find_by_dev_name</name><argument_list>(<argument><expr><name>FAL_USING_NOR_FLASH_DEV_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* bare metal platform */</comment>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>sfud_flash</name></type> <name>sfud_norflash0</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>sfud_dev</name> <operator>=</operator> <operator>&amp;</operator><name>sfud_norflash0</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>sfud_dev</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* update the flash chip information */</comment>
    <expr_stmt><expr><name><name>nor_flash0</name><operator>.</operator><name>blk_size</name></name> <operator>=</operator> <name><name>sfud_dev</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>erase_gran</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nor_flash0</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>sfud_dev</name><operator>-&gt;</operator><name>chip</name><operator>.</operator><name>capacity</name></name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sfud_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sfud_dev</name><operator>-&gt;</operator><name>init_ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sfud_read</name><argument_list>(<argument><expr><name>sfud_dev</name></expr></argument>, <argument><expr><name><name>nor_flash0</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sfud_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sfud_dev</name><operator>-&gt;</operator><name>init_ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sfud_write</name><argument_list>(<argument><expr><name>sfud_dev</name></expr></argument>, <argument><expr><name><name>nor_flash0</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sfud_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sfud_dev</name><operator>-&gt;</operator><name>init_ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sfud_erase</name><argument_list>(<argument><expr><name>sfud_dev</name></expr></argument>, <argument><expr><name><name>nor_flash0</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SFUD_SUCCESS</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FAL_USING_SFUD_PORT */</comment>

</unit>
