<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/port/fal/samples/porting/fal_flash_stm32l4.c"><comment type="block">/*
 * Copyright (c) 2022, Spider, &lt;spider@spider.vc&gt;
 *
 * SPDX-License-Identifier: Apache-2.0
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stm32l4xx.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* do nothing now */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ef_err_port_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>on_ic_read_cnt</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>on_ic_write_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>feed_dog</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><name><name>stm32_onchip_flash</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>addr</name><operator>%</operator><literal type="number">4</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ef_err_port_cnt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>addr</name><operator>++</operator></expr><operator>,</operator> <expr><name>buf</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>addr</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>on_ic_read_cnt</name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type>   <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><name><name>stm32_onchip_flash</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>__ALIGN_BEGIN</name> <name>uint64_t</name> <name>write_data</name></type> <name>__ALIGN_END</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>__ALIGN_BEGIN</name> <name>uint64_t</name> <name>read_data</name></type>  <name>__ALIGN_END</name></decl>;</decl_stmt>  

    <if_stmt><if>if<condition>(<expr><name>addr</name><operator>%</operator><literal type="number">4</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ef_err_port_cnt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<comment type="block">/*
    if((int)buf%8 != 0)
        ef_err_port_cnt++;
*/</comment>

    <expr_stmt><expr><call><name>HAL_FLASH_Unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>buf</name><operator>+=</operator><literal type="number">8</literal></expr><operator>,</operator> <expr><name>addr</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>write_data</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//The third parameter used to ensure HAL_FLASH_Program is the alignment of the first address in memory</comment>
        <if_stmt><if>if <condition>(<expr><name>write_data</name> <operator>!=</operator> <literal type="number">0xFFFFFFFFFFFFFFFF</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>HAL_FLASH_Program</name><argument_list>(<argument><expr><name>FLASH_TYPEPROGRAM_DOUBLEWORD</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>write_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>read_data</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>addr</name></expr>;</expr_stmt>
        <comment type="block">/* You can add your code under here. */</comment>
        <if_stmt><if>if <condition>(<expr><name>read_data</name> <operator>!=</operator> <name>write_data</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>HAL_FLASH_Lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
			<comment type="line">//FLashæä½å¯è½éå¸¸èæ¶ï¼å¦ææçé¨çéè¦åçï¼ä»¥ä¸ä»£ç ç±ç¨æ·å®ç°</comment>
           <expr_stmt><expr><call><name>feed_dog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>HAL_FLASH_Lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>on_ic_write_cnt</name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// uint32_t addr = stm32_onchip_flash.addr + offset;</comment>

    <decl_stmt><decl><type><name>HAL_StatusTypeDef</name></type> <name>flash_status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>erase_pages</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>PAGEError</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>erase_pages</name> <operator>=</operator> <name>size</name> <operator>/</operator> <name>FLASH_PAGE_SIZE</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>%</operator> <name>FLASH_PAGE_SIZE</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>erase_pages</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>FLASH_EraseInitTypeDef</name></type> <name>EraseInitStruct</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>EraseInitStruct</name><operator>.</operator><name>TypeErase</name></name>   <operator>=</operator> <name>FLASH_TYPEERASE_PAGES</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>EraseInitStruct</name><operator>.</operator><name>NbPages</name></name>     <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="line">//Wipe out one sector at a time to perform one feeding of the dog to prevent timeout</comment>
    <expr_stmt><expr><call><name>HAL_FLASH_Unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>erase_pages</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>EraseInitStruct</name><operator>.</operator><name>Page</name></name> <operator>=</operator> <operator>(</operator><name>offset</name><operator>/</operator><name>FLASH_PAGE_SIZE</name><operator>)</operator> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>flash_status</name> <operator>=</operator> <call><name>HAL_FLASHEx_Erase</name><argument_list>(<argument><expr><operator>&amp;</operator><name>EraseInitStruct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PAGEError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>flash_status</name> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>HAL_FLASH_Lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
			<comment type="line">//FLash operation can be very time-consuming, if there is a watchdog that needs to feed the dog, the following code is implemented by the user</comment>
            <expr_stmt><expr><call><name>feed_dog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>HAL_FLASH_Lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

    <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
  "stm32_onchip" : Flash è®¾å¤çåå­ã
  0x08000000: å¯¹ Flash æä½çèµ·å§å°åã
  1024*1024ï¼Flash çæ»å¤§å°ï¼1MBï¼ã
  128*1024ï¼Flash å/æåºå¤§å°ï¼å ä¸º STM32F2 ååå¤§å°ä¸ååï¼æä»¥æ¦é¤ç²åº¦ä¸ºæå¤§åçå¤§å°ï¼128Kï¼ã
  {init, read, write, erase} ï¼Flash çæä½å½æ°ã å¦ææ²¡æ init åå§åè¿ç¨ï¼ç¬¬ä¸ä¸ªæä½å½æ°ä½ç½®å¯ä»¥ç½®ç©ºã
  8 : è®¾ç½®åç²åº¦ï¼åä½ bitï¼ 0 è¡¨ç¤ºæªçæï¼é»è®¤å¼ä¸º 0 ï¼ï¼è¯¥æåæ¯ fal çæ¬å¤§äº 0.4.0 çæ°å¢æåãåä¸ª flash åå¥ç²åº¦ä¸å°½ç¸åï¼å¯éè¿è¯¥æåè¿è¡è®¾ç½®ï¼ä»¥ä¸åä¸¾å ç§å¸¸è§ Flash åç²åº¦ï¼
  nor flash:  1 bit
  stm32f2/f4: 8 bit
  stm32f1:    32 bit
  stm32l4:    64 bit
 */</comment>

<comment type="line">//1.å®ä¹ flash è®¾å¤</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_flash_dev</name></name></type> <name>stm32_onchip_flash</name> <init>=
<expr><block>{
    <expr><operator>.</operator><name>name</name>       <operator>=</operator> <literal type="string">"stm32_onchip"</literal></expr>,
    <expr><operator>.</operator><name>addr</name>       <operator>=</operator> <literal type="number">0x08000000</literal></expr>,
    <expr><operator>.</operator><name>len</name>        <operator>=</operator> <literal type="number">256</literal><operator>*</operator><literal type="number">1024</literal></expr>,
    <expr><operator>.</operator><name>blk_size</name>   <operator>=</operator> <name>FLASH_PAGE_SIZE</name></expr>,
    <expr><operator>.</operator><name>ops</name>        <operator>=</operator> <block>{<expr><name>init</name></expr>, <expr><name>read</name></expr>, <expr><name>write</name></expr>, <expr><name>erase</name></expr>}</block></expr>,
    <expr><operator>.</operator><name>write_gran</name> <operator>=</operator> <literal type="number">64</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


</unit>
