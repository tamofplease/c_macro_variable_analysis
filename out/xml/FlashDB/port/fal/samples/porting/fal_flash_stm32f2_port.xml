<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/port/fal/samples/porting/fal_flash_stm32f2_port.c"><comment type="block">/*
 * Copyright (c) 2020, Armink, &lt;armink.ztl@gmail.com&gt;
 *
 * SPDX-License-Identifier: Apache-2.0
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stm32f2xx.h&gt;</cpp:file></cpp:include>

<comment type="block">/* base address of the flash sectors */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_FLASH_SECTOR_0</name></cpp:macro>      <cpp:value>((uint32_t)0x08000000)</cpp:value></cpp:define> <comment type="block">/* Base address of Sector 0, 16 K bytes   */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_FLASH_SECTOR_1</name></cpp:macro>      <cpp:value>((uint32_t)0x08004000)</cpp:value></cpp:define> <comment type="block">/* Base address of Sector 1, 16 K bytes   */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_FLASH_SECTOR_2</name></cpp:macro>      <cpp:value>((uint32_t)0x08008000)</cpp:value></cpp:define> <comment type="block">/* Base address of Sector 2, 16 K bytes   */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_FLASH_SECTOR_3</name></cpp:macro>      <cpp:value>((uint32_t)0x0800C000)</cpp:value></cpp:define> <comment type="block">/* Base address of Sector 3, 16 K bytes   */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_FLASH_SECTOR_4</name></cpp:macro>      <cpp:value>((uint32_t)0x08010000)</cpp:value></cpp:define> <comment type="block">/* Base address of Sector 4, 64 K bytes   */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_FLASH_SECTOR_5</name></cpp:macro>      <cpp:value>((uint32_t)0x08020000)</cpp:value></cpp:define> <comment type="block">/* Base address of Sector 5, 128 K bytes  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_FLASH_SECTOR_6</name></cpp:macro>      <cpp:value>((uint32_t)0x08040000)</cpp:value></cpp:define> <comment type="block">/* Base address of Sector 6, 128 K bytes  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_FLASH_SECTOR_7</name></cpp:macro>      <cpp:value>((uint32_t)0x08060000)</cpp:value></cpp:define> <comment type="block">/* Base address of Sector 7, 128 K bytes  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_FLASH_SECTOR_8</name></cpp:macro>      <cpp:value>((uint32_t)0x08080000)</cpp:value></cpp:define> <comment type="block">/* Base address of Sector 8, 128 K bytes  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_FLASH_SECTOR_9</name></cpp:macro>      <cpp:value>((uint32_t)0x080A0000)</cpp:value></cpp:define> <comment type="block">/* Base address of Sector 9, 128 K bytes  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_FLASH_SECTOR_10</name></cpp:macro>     <cpp:value>((uint32_t)0x080C0000)</cpp:value></cpp:define> <comment type="block">/* Base address of Sector 10, 128 K bytes */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_FLASH_SECTOR_11</name></cpp:macro>     <cpp:value>((uint32_t)0x080E0000)</cpp:value></cpp:define> <comment type="block">/* Base address of Sector 11, 128 K bytes */</comment>

<comment type="block" format="doxygen">/**
 * Get the sector of a given address
 *
 * @param address flash address
 *
 * @return The sector of a given address
 */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>stm32_get_sector</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>sector</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>address</name> <operator>&lt;</operator> <name>ADDR_FLASH_SECTOR_1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>address</name> <operator>&gt;=</operator> <name>ADDR_FLASH_SECTOR_0</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>sector</name> <operator>=</operator> <name>FLASH_Sector_0</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>address</name> <operator>&lt;</operator> <name>ADDR_FLASH_SECTOR_2</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>address</name> <operator>&gt;=</operator> <name>ADDR_FLASH_SECTOR_1</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>sector</name> <operator>=</operator> <name>FLASH_Sector_1</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>address</name> <operator>&lt;</operator> <name>ADDR_FLASH_SECTOR_3</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>address</name> <operator>&gt;=</operator> <name>ADDR_FLASH_SECTOR_2</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>sector</name> <operator>=</operator> <name>FLASH_Sector_2</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>address</name> <operator>&lt;</operator> <name>ADDR_FLASH_SECTOR_4</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>address</name> <operator>&gt;=</operator> <name>ADDR_FLASH_SECTOR_3</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>sector</name> <operator>=</operator> <name>FLASH_Sector_3</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>address</name> <operator>&lt;</operator> <name>ADDR_FLASH_SECTOR_5</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>address</name> <operator>&gt;=</operator> <name>ADDR_FLASH_SECTOR_4</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>sector</name> <operator>=</operator> <name>FLASH_Sector_4</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>address</name> <operator>&lt;</operator> <name>ADDR_FLASH_SECTOR_6</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>address</name> <operator>&gt;=</operator> <name>ADDR_FLASH_SECTOR_5</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>sector</name> <operator>=</operator> <name>FLASH_Sector_5</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>address</name> <operator>&lt;</operator> <name>ADDR_FLASH_SECTOR_7</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>address</name> <operator>&gt;=</operator> <name>ADDR_FLASH_SECTOR_6</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>sector</name> <operator>=</operator> <name>FLASH_Sector_6</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>address</name> <operator>&lt;</operator> <name>ADDR_FLASH_SECTOR_8</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>address</name> <operator>&gt;=</operator> <name>ADDR_FLASH_SECTOR_7</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>sector</name> <operator>=</operator> <name>FLASH_Sector_7</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>address</name> <operator>&lt;</operator> <name>ADDR_FLASH_SECTOR_9</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>address</name> <operator>&gt;=</operator> <name>ADDR_FLASH_SECTOR_8</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>sector</name> <operator>=</operator> <name>FLASH_Sector_8</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>address</name> <operator>&lt;</operator> <name>ADDR_FLASH_SECTOR_10</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>address</name> <operator>&gt;=</operator> <name>ADDR_FLASH_SECTOR_9</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>sector</name> <operator>=</operator> <name>FLASH_Sector_9</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>address</name> <operator>&lt;</operator> <name>ADDR_FLASH_SECTOR_11</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>address</name> <operator>&gt;=</operator> <name>ADDR_FLASH_SECTOR_10</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>sector</name> <operator>=</operator> <name>FLASH_Sector_10</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>sector</name> <operator>=</operator> <name>FLASH_Sector_11</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>sector</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Get the sector size
 *
 * @param sector sector
 *
 * @return sector size
 */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>stm32_get_sector_size</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>sector</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>IS_FLASH_SECTOR</name><argument_list>(<argument><expr><name>sector</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>sector</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>FLASH_Sector_0</name></expr>:</case> <return>return <expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</return>
    <case>case <expr><name>FLASH_Sector_1</name></expr>:</case> <return>return <expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</return>
    <case>case <expr><name>FLASH_Sector_2</name></expr>:</case> <return>return <expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</return>
    <case>case <expr><name>FLASH_Sector_3</name></expr>:</case> <return>return <expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</return>
    <case>case <expr><name>FLASH_Sector_4</name></expr>:</case> <return>return <expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</return>
    <case>case <expr><name>FLASH_Sector_5</name></expr>:</case> <return>return <expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</return>
    <case>case <expr><name>FLASH_Sector_6</name></expr>:</case> <return>return <expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</return>
    <case>case <expr><name>FLASH_Sector_7</name></expr>:</case> <return>return <expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</return>
    <case>case <expr><name>FLASH_Sector_8</name></expr>:</case> <return>return <expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</return>
    <case>case <expr><name>FLASH_Sector_9</name></expr>:</case> <return>return <expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</return>
    <case>case <expr><name>FLASH_Sector_10</name></expr>:</case> <return>return <expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</return>
    <case>case <expr><name>FLASH_Sector_11</name></expr>:</case> <return>return <expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</return>
    <default>default :</default> <return>return <expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* do nothing now */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><name><name>stm32f2_onchip_flash</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>addr</name><operator>++</operator></expr><operator>,</operator> <expr><name>buf</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>addr</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>read_data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><name><name>stm32f2_onchip_flash</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>FLASH_Unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLASH_ClearFlag</name><argument_list>(
            <argument><expr><name>FLASH_FLAG_EOP</name> <operator>|</operator> <name>FLASH_FLAG_OPERR</name> <operator>|</operator> <name>FLASH_FLAG_WRPERR</name> <operator>|</operator> <name>FLASH_FLAG_PGAERR</name> <operator>|</operator> <name>FLASH_FLAG_PGPERR</name>
                    <operator>|</operator> <name>FLASH_FLAG_PGSERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>buf</name><operator>++</operator></expr><operator>,</operator> <expr><name>addr</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <comment type="block">/* write data */</comment>
        <expr_stmt><expr><call><name>FLASH_ProgramByte</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>read_data</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>addr</name></expr>;</expr_stmt>
        <comment type="block">/* check data */</comment>
        <if_stmt><if>if <condition>(<expr><name>read_data</name> <operator>!=</operator> <operator>*</operator><name>buf</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>FLASH_Lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>FLASH_Lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FLASH_Status</name></type> <name>flash_status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>erased_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>cur_erase_sector</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><name><name>stm32f2_onchip_flash</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* start erase */</comment>
    <expr_stmt><expr><call><name>FLASH_Unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLASH_ClearFlag</name><argument_list>(
            <argument><expr><name>FLASH_FLAG_EOP</name> <operator>|</operator> <name>FLASH_FLAG_OPERR</name> <operator>|</operator> <name>FLASH_FLAG_WRPERR</name> <operator>|</operator> <name>FLASH_FLAG_PGAERR</name> <operator>|</operator> <name>FLASH_FLAG_PGPERR</name>
                    <operator>|</operator> <name>FLASH_FLAG_PGSERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* it will stop when erased size is greater than setting size */</comment>
    <while>while <condition>(<expr><name>erased_size</name> <operator>&lt;</operator> <name>size</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>cur_erase_sector</name> <operator>=</operator> <call><name>stm32_get_sector</name><argument_list>(<argument><expr><name>addr</name> <operator>+</operator> <name>erased_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>flash_status</name> <operator>=</operator> <call><name>FLASH_EraseSector</name><argument_list>(<argument><expr><name>cur_erase_sector</name></expr></argument>, <argument><expr><name>VoltageRange_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>flash_status</name> <operator>!=</operator> <name>FLASH_COMPLETE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>FLASH_Lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>erased_size</name> <operator>+=</operator> <call><name>stm32_get_sector_size</name><argument_list>(<argument><expr><name>cur_erase_sector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>FLASH_Lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_flash_dev</name></name></type> <name>stm32f2_onchip_flash</name> <init>=
<expr><block>{
    <expr><operator>.</operator><name>name</name>       <operator>=</operator> <literal type="string">"stm32_onchip"</literal></expr>,
    <expr><operator>.</operator><name>addr</name>       <operator>=</operator> <literal type="number">0x08000000</literal></expr>,
    <expr><operator>.</operator><name>len</name>        <operator>=</operator> <literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>,
    <expr><operator>.</operator><name>blk_size</name>   <operator>=</operator> <literal type="number">128</literal><operator>*</operator><literal type="number">1024</literal></expr>,
    <expr><operator>.</operator><name>ops</name>        <operator>=</operator> <block>{<expr><name>init</name></expr>, <expr><name>read</name></expr>, <expr><name>write</name></expr>, <expr><name>erase</name></expr>}</block></expr>,
    <expr><operator>.</operator><name>write_gran</name> <operator>=</operator> <literal type="number">8</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

</unit>
