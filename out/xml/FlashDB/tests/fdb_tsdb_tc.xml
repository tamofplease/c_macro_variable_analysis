<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/tests/fdb_tsdb_tc.c"><comment type="block">/*
 * Copyright (c) 2020, Armink, &lt;armink.ztl@gmail.com&gt;
 *
 * SPDX-License-Identifier: Apache-2.0
 */</comment>

<comment type="block" format="doxygen">/**
 * @file
 * @brief TSDB testcases.
 *
 * This testcases is be used in RT-Thread Utest framework.
 * If you want run it, please add it to RT-Thread project.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;flashdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RT_USING_UTEST</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FDB_USING_TSDB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_TS_PART_NAME</name></cpp:macro>             <cpp:value>"fdb_tsdb1"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_TS_COUNT</name></cpp:macro>                 <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_TS_USER_STATUS1_COUNT</name></cpp:macro>    <cpp:value>(TEST_TS_COUNT/2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_TS_DELETED_COUNT</name></cpp:macro>         <cpp:value>(TEST_TS_COUNT - TEST_TS_USER_STATUS1_COUNT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_SECTOR_SIZE</name></cpp:macro>              <cpp:value>4096</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_TIME_STEP</name></cpp:macro>                <cpp:value>2</cpp:value></cpp:define>

<struct>struct <name>test_tls_data</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>fdb_time_t</name></type> <name>time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>rt_slist_t</name></type> <name>list</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>test_tls_sector</name> <block>{
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name></decl>;</decl_stmt>                               <comment type="block" format="doxygen">/**&lt; sector start address */</comment>
    <decl_stmt><decl><type><name>fdb_time_t</name></type> <name>start_time</name></decl>;</decl_stmt>                       <comment type="block" format="doxygen">/**&lt; the first start node's timestamp, 0x7FFFFFFF: unused */</comment>
    <decl_stmt><decl><type><name>fdb_time_t</name></type> <name>end_time</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>logbuf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>fdb_tsdb</name></name></type> <name>test_tsdb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cur_times</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>test_tls_sector</name></name></type> <name><name>test_secs_info</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>fdb_time_t</name></type> <name>test_db_start_time</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>, <decl><type ref="prev"/><name>test_db_end_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>fdb_time_t</name></type> <name>get_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>cur_times</name> <operator>+=</operator> <name>TEST_TIME_STEP</name></expr>;</expr_stmt>
    <return>return <expr><name>cur_times</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_fdb_tsdb_init_ex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><literal type="string">"/fdb_tsdb1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mkdir</name><argument_list>(<argument><expr><literal type="string">"/fdb_tsdb1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FDB_USING_FAL_MODE</name></cpp:ifndef>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>sec_size</name> <init>= <expr><name>TEST_SECTOR_SIZE</name></expr></init></decl>, <decl><type ref="prev"/><name>db_size</name> <init>= <expr><name>sec_size</name> <operator>*</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>rt_bool_t</name></type> <name>file_mode</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fdb_kvdb_control</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_kvdb_t</name><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>test_tsdb</name><operator>)</operator></expr></argument>, <argument><expr><name>FDB_TSDB_CTRL_SET_SEC_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fdb_kvdb_control</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_kvdb_t</name><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>test_tsdb</name><operator>)</operator></expr></argument>, <argument><expr><name>FDB_TSDB_CTRL_SET_FILE_MODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fdb_kvdb_control</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_kvdb_t</name><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>test_tsdb</name><operator>)</operator></expr></argument>, <argument><expr><name>FDB_TSDB_CTRL_SET_MAX_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  


    <expr_stmt><expr><call><name>uassert_true</name><argument_list>(<argument><expr><call><name>fdb_tsdb_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_tsdb</name></expr></argument>, <argument><expr><literal type="string">"test_ts"</literal></expr></argument>, <argument><expr><name>TEST_TS_PART_NAME</name></expr></argument>, <argument><expr><name>get_time</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FDB_NO_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_fdb_tsl_append</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fdb_blob</name></name></type> <name>blob</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TEST_TS_COUNT</name> <operator>*</operator> <name>TEST_TIME_STEP</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>TEST_TIME_STEP</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rt_snprintf</name><argument_list>(<argument><expr><name>logbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>uassert_true</name><argument_list>(<argument><expr><call><name>fdb_tsl_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_tsdb</name></expr></argument>, <argument><expr><call><name>fdb_blob_make</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blob</name></expr></argument>, <argument><expr><name>logbuf</name></expr></argument>, <argument><expr><call><name>rt_strnlen</name><argument_list>(<argument><expr><name>logbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>FDB_NO_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_fdb_tsl_iter_cb</name><parameter_list>(<parameter><decl><type><name>fdb_tsl_t</name></type> <name>tsl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fdb_blob</name></name></type> <name>blob</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>logbuf</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>read_len</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>fdb_blob_make</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blob</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>tsl</name><operator>-&gt;</operator><name>log_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>read_len</name> <operator>=</operator> <call><name>fdb_blob_read</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator> <operator>&amp;</operator><name>test_tsdb</name></expr></argument>, <argument><expr><call><name>fdb_tsl_to_blob</name><argument_list>(<argument><expr><name>tsl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>data</name><index>[<expr><name>read_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>uassert_true</name><argument_list>(<argument><expr><name><name>tsl</name><operator>-&gt;</operator><name>time</name></name> <operator>==</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>uassert_true</name><argument_list>(<argument><expr><name><name>tsl</name><operator>-&gt;</operator><name>time</name></name> <operator>==</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>fdb_time_t</name> <operator>*</operator><operator>)</operator><name>arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_fdb_tsl_iter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>fdb_tsl_iter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_tsdb</name></expr></argument>, <argument><expr><name>test_fdb_tsl_iter_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_fdb_tsl_iter_by_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_time_t</name></type> <name>from</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>to</name> <init>= <expr><name>TEST_TS_COUNT</name> <operator>*</operator> <name>TEST_TIME_STEP</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>fdb_time_t</name></type> <name>cur</name> <init>= <expr><name>from</name></expr></init></decl>;</init> <condition><expr><name>cur</name> <operator>&lt;=</operator> <name>to</name></expr>;</condition> <incr><expr><name>cur</name> <operator>+=</operator> <name>TEST_TIME_STEP</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>fdb_tsl_iter_by_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_tsdb</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>test_fdb_tsl_iter_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fdb_tsl_iter_by_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_tsdb</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>test_fdb_tsl_iter_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_fdb_tsl_query_count</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_time_t</name></type> <name>from</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>to</name> <init>= <expr><name>TEST_TS_COUNT</name> <operator>*</operator> <name>TEST_TIME_STEP</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>uassert_true</name><argument_list>(<argument><expr><call><name>fdb_tsl_query_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_tsdb</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>FDB_TSL_WRITE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TEST_TS_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>est_fdb_tsl_set_status_cb</name><parameter_list>(<parameter><decl><type><name>fdb_tsl_t</name></type> <name>tsl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>fdb_tsdb_t</name></type> <name>db</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>tsl</name><operator>-&gt;</operator><name>time</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>tsl</name><operator>-&gt;</operator><name>time</name></name> <operator>&lt;=</operator> <name>TEST_TS_USER_STATUS1_COUNT</name> <operator>*</operator> <name>TEST_TIME_STEP</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>uassert_true</name><argument_list>(<argument><expr><call><name>fdb_tsl_set_status</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>tsl</name></expr></argument>, <argument><expr><name>FDB_TSL_USER_STATUS1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FDB_NO_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>uassert_true</name><argument_list>(<argument><expr><call><name>fdb_tsl_set_status</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>tsl</name></expr></argument>, <argument><expr><name>FDB_TSL_DELETED</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FDB_NO_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_fdb_tsl_set_status</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fdb_time_t</name></type> <name>from</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>to</name> <init>= <expr><name>TEST_TS_COUNT</name> <operator>*</operator> <name>TEST_TIME_STEP</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>fdb_tsl_iter_by_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_tsdb</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>est_fdb_tsl_set_status_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>test_tsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>uassert_true</name><argument_list>(<argument><expr><call><name>fdb_tsl_query_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_tsdb</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>FDB_TSL_USER_STATUS1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TEST_TS_USER_STATUS1_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uassert_true</name><argument_list>(<argument><expr><call><name>fdb_tsl_query_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_tsdb</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>FDB_TSL_DELETED</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TEST_TS_DELETED_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>test_fdb_tsl_clean_cb</name><parameter_list>(<parameter><decl><type><name>fdb_tsl_t</name></type> <name>tsl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>count</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>count</name><operator>)</operator> <operator>++</operator></expr>;</expr_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_fdb_tsl_clean</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>cur_times</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fdb_tsl_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_tsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fdb_tsl_iter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_tsdb</name></expr></argument>, <argument><expr><name>test_fdb_tsl_clean_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>uassert_true</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rt_err_t</name></type> <name>utest_tc_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>cur_times</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rt_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_tsdb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>fdb_tsdb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>RT_EOK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rt_err_t</name></type> <name>utest_tc_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>RT_EOK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>query_cb</name><parameter_list>(<parameter><decl><type><name>fdb_tsl_t</name></type> <name>tsl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fdb_blob</name></name></type> <name>blob</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>test_tls_data</name></name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>rt_slist_t</name> <modifier>*</modifier></type><name>tsl_list</name> <init>= <expr><operator>(</operator><name>rt_slist_t</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fdb_blob_read</name><argument_list>(<argument><expr><operator>(</operator><name>fdb_db_t</name><operator>)</operator> <operator>&amp;</operator><name>test_tsdb</name></expr></argument>, <argument><expr><call><name>fdb_tsl_to_blob</name><argument_list>(<argument><expr><name>tsl</name></expr></argument>, <argument><expr><call><name>fdb_blob_make</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>rt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>test_tls_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RT_ASSERT</name><argument_list>(<argument><expr><name>node</name> <operator>!=</operator> <name>RT_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <name><name>tsl</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rt_slist_append</name><argument_list>(<argument><expr><name>tsl_list</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_sector_info_cb</name><parameter_list>(<parameter><decl><type><name>fdb_tsl_t</name></type> <name>tsl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>tsl</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>log</name></name> <operator>/</operator> <name>TEST_SECTOR_SIZE</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>test_secs_info</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>test_secs_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>=</operator> <call><name>RT_ALIGN_DOWN</name><argument_list>(<argument><expr><name><name>tsl</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>log</name></name></expr></argument>, <argument><expr><name>TEST_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>test_secs_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start_time</name> <operator>&gt;</operator> <name><name>tsl</name><operator>-&gt;</operator><name>time</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>test_secs_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start_time</name> <operator>=</operator> <name><name>tsl</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>test_secs_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end_time</name> <operator>&lt;</operator> <name><name>tsl</name><operator>-&gt;</operator><name>time</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>test_secs_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end_time</name> <operator>=</operator> <name><name>tsl</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>test_db_start_time</name> <operator>&gt;</operator> <name><name>tsl</name><operator>-&gt;</operator><name>time</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>test_db_start_time</name> <operator>=</operator> <name><name>tsl</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>test_db_end_time</name> <operator>&lt;</operator> <name><name>tsl</name><operator>-&gt;</operator><name>time</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>test_db_end_time</name> <operator>=</operator> <name><name>tsl</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_tsdb_data_by_time</name><parameter_list>(<parameter><decl><type><name>fdb_time_t</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>fdb_time_t</name></type> <name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>rt_slist_t</name></type> <name>tsl_list</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>rt_slist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsl_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>fdb_time_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>cur_time</name> <init>= <expr><name>from</name></expr></init></decl>, <decl><type ref="prev"/><name>valid_to</name> <init>= <expr><name>to</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>tsl_num</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>from</name> <operator>&lt;=</operator> <name>to</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>from</name> <operator>&lt;</operator> <name>test_db_start_time</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>cur_time</name> <operator>=</operator> <name>test_db_start_time</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>to</name> <operator>&gt;</operator> <name>test_db_end_time</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>valid_to</name> <operator>=</operator> <name>test_db_end_time</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;</operator> <name>test_db_end_time</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>cur_time</name> <operator>=</operator> <name>test_db_end_time</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>to</name> <operator>&lt;</operator> <name>test_db_start_time</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>valid_to</name> <operator>=</operator> <name>test_db_start_time</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>fdb_tsl_iter_by_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_tsdb</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>query_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsl_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>test_tls_data</name></name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>rt_slist_t</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><name>RT_NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>tsl_num</name> <operator>=</operator> <call><name>rt_slist_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsl_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* check the tsl number */</comment>
    <if_stmt><if>if <condition>(<expr><name>from</name> <operator>&lt;=</operator> <name>to</name></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>cur_time</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>valid_to</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <name>TEST_TIME_STEP</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>cur_time</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>valid_to</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <name>TEST_TIME_STEP</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>uassert_true</name><argument_list>(<argument><expr><name>tsl_num</name> <operator>==</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* check the tsl time */</comment>
    <macro><name>rt_slist_for_each</name><argument_list>(<argument>node</argument>, <argument>&amp;tsl_list</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>tls</name> <operator>=</operator> <call><name>rt_slist_entry</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr>struct <name>test_tls_data</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>from</name> <operator>&lt;=</operator> <name>to</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>uassert_true</name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>time</name></name> <operator>==</operator> <call><name>RT_ALIGN</name><argument_list>(<argument><expr><name>cur_time</name></expr></argument>, <argument><expr><name>TEST_TIME_STEP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cur_time</name> <operator>+=</operator> <name>TEST_TIME_STEP</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>uassert_true</name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>time</name></name> <operator>==</operator> <call><name>RT_ALIGN_DOWN</name><argument_list>(<argument><expr><name>cur_time</name></expr></argument>, <argument><expr><name>TEST_TIME_STEP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cur_time</name> <operator>-=</operator> <name>TEST_TIME_STEP</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>rt_free</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <if_stmt><if>if <condition>(<expr><name>tsl_num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* check the last tsl */</comment>
        <if_stmt><if>if <condition>(<expr><name>from</name> <operator>&lt;=</operator> <name>to</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>uassert_true</name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>time</name></name> <operator>==</operator> <call><name>RT_ALIGN_DOWN</name><argument_list>(<argument><expr><name>valid_to</name></expr></argument>, <argument><expr><name>TEST_TIME_STEP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>uassert_true</name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>time</name></name> <operator>==</operator> <call><name>RT_ALIGN</name><argument_list>(<argument><expr><name>valid_to</name></expr></argument>, <argument><expr><name>TEST_TIME_STEP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_fdb_tsl_iter_by_time_1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fdb_blob</name></name></type> <name>blob</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>data</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>fdb_tsl_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_tsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* make test data for more than 2 sectors */</comment>
    <for>for <control>(<init><expr><name>data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>data</name> <operator>&lt;</operator> <literal type="number">800</literal></expr>;</condition> <incr><expr><name>data</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>fdb_tsl_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_tsdb</name></expr></argument>, <argument><expr><call><name>fdb_blob_make</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block">/* init all test sectors info */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>test_secs_info</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>test_secs_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>=</operator> <name>TEST_SECTOR_SIZE</name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>test_secs_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start_time</name> <operator>=</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>test_secs_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block">/* get the the sectors info by iterator */</comment>
    <expr_stmt><expr><call><name>fdb_tsl_iter_by_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_tsdb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x7FFFFFFF</literal></expr></argument>, <argument><expr><name>get_sector_info_cb</name></expr></argument>, <argument><expr><name>RT_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* must found more than 2 sectors */</comment>
    <expr_stmt><expr><call><name>uassert_true</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>start_time</name> <operator>!=</operator> <literal type="number">0x7FFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* check the database bound */</comment>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name>test_db_start_time</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>test_db_end_time</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name>test_db_start_time</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>test_db_start_time</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name>test_db_start_time</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>test_db_start_time</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name>test_db_end_time</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>test_db_end_time</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name>test_db_end_time</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>test_db_end_time</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* check 1st sector */</comment>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_time</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_time</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_time</name></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_time</name></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* check last sector */</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>test_tls_sector</name></name> <modifier>*</modifier></type><name>last_secs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>test_secs_info</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>test_secs_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end_time</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>last_secs</name> <operator>=</operator> <operator>&amp;</operator><name><name>test_secs_info</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>uassert_true</name><argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uassert_true</name><argument_list>(<argument><expr><name>last_secs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>last_secs</name><operator>-&gt;</operator><name>start_time</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>last_secs</name><operator>-&gt;</operator><name>end_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>last_secs</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>, <argument><expr><name><name>last_secs</name><operator>-&gt;</operator><name>end_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>last_secs</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>, <argument><expr><name><name>last_secs</name><operator>-&gt;</operator><name>end_time</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>last_secs</name><operator>-&gt;</operator><name>end_time</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>last_secs</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>last_secs</name><operator>-&gt;</operator><name>end_time</name></name></expr></argument>, <argument><expr><name><name>last_secs</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>last_secs</name><operator>-&gt;</operator><name>end_time</name></name></expr></argument>, <argument><expr><name><name>last_secs</name><operator>-&gt;</operator><name>start_time</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* check less then 1 sector */</comment>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_time</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_time</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* check equal 1 sector */</comment>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_time</name></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* check 1~2 sector */</comment>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_time</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end_time</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end_time</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>start_time</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* check more than 2 sectors */</comment>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>end_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>end_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_time</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>end_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>end_time</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>end_time</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_tsdb_data_by_time</name><argument_list>(<argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>start_time</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test_secs_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_fdb_tsdb_deinit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>uassert_true</name><argument_list>(<argument><expr><call><name>fdb_tsdb_deinit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_tsdb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FDB_NO_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>testcase</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>UTEST_UNIT_RUN</name><argument_list>(<argument><expr><name>test_fdb_tsdb_init_ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UTEST_UNIT_RUN</name><argument_list>(<argument><expr><name>test_fdb_tsl_clean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UTEST_UNIT_RUN</name><argument_list>(<argument><expr><name>test_fdb_tsl_append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UTEST_UNIT_RUN</name><argument_list>(<argument><expr><name>test_fdb_tsl_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UTEST_UNIT_RUN</name><argument_list>(<argument><expr><name>test_fdb_tsl_iter_by_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UTEST_UNIT_RUN</name><argument_list>(<argument><expr><name>test_fdb_tsl_query_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UTEST_UNIT_RUN</name><argument_list>(<argument><expr><name>test_fdb_tsl_set_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UTEST_UNIT_RUN</name><argument_list>(<argument><expr><name>test_fdb_tsl_clean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UTEST_UNIT_RUN</name><argument_list>(<argument><expr><name>test_fdb_tsl_iter_by_time_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UTEST_UNIT_RUN</name><argument_list>(<argument><expr><name>test_fdb_tsdb_deinit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>UTEST_TC_EXPORT</name><argument_list>(<argument><expr><name>testcase</name></expr></argument>, <argument><expr><literal type="string">"packages.tools.flashdb.tsdb"</literal></expr></argument>, <argument><expr><name>utest_tc_init</name></expr></argument>, <argument><expr><name>utest_tc_cleanup</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(RT_USING_UTEST) &amp;&amp; defined(FDBTC_USING_TSDB) &amp;&amp; defined(TC_USING_FDBTC_TSDB) */</comment>
</unit>
