<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/test_error.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../include/dqlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../src/error.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./lib/heap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./lib/runner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./lib/sqlite.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>TEST_MODULE</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Setup and tear down
 *
 ******************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>error</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>test_heap_setup</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>user_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_sqlite_setup</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>error</name> <operator>=</operator> <operator>(</operator><name>dqlite__error</name> <operator>*</operator><operator>)</operator><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_init</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tear_down</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>dqlite__error_close</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_sqlite_tear_down</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_heap_tear_down</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * dqlite__error_printf
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>printf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_SETUP</name><argument_list>(<argument><expr><name>printf</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TEAR_DOWN</name><argument_list>(<argument><expr><name>printf</name></expr></argument>, <argument><expr><name>tear_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>TEST_CASE</name><argument_list>(<argument>printf</argument>, <argument>success</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_true</name><argument_list>(<argument><expr><call><name>dqlite__error_is_null</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_printf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"hello %s"</literal></expr></argument>, <argument><expr><literal type="string">"world"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><operator>*</operator><name>error</name></expr></argument>, <argument><expr><literal type="string">"hello world"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST_CASE</name><argument_list>(<argument>printf</argument>, <argument>override</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_printf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"hello %s"</literal></expr></argument>, <argument><expr><literal type="string">"world"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dqlite__error_printf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"I'm %s!"</literal></expr></argument>, <argument><expr><literal type="string">"here"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><operator>*</operator><name>error</name></expr></argument>, <argument><expr><literal type="string">"I'm here!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST_CASE</name><argument_list>(<argument>printf</argument>, <argument>oom</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_heap_fault_config</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_heap_fault_enable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_printf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"hello %s"</literal></expr></argument>, <argument><expr><literal type="string">"world"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><operator>*</operator><name>error</name></expr></argument>,
				  <argument><expr><literal type="string">"error message unavailable (out of memory)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * dqlite__error_wrapf
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>wrapf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_SETUP</name><argument_list>(<argument><expr><name>wrapf</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TEAR_DOWN</name><argument_list>(<argument><expr><name>wrapf</name></expr></argument>, <argument><expr><name>tear_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>TEST_CASE</name><argument_list>(<argument>wrapf</argument>, <argument>success</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>dqlite__error</name></type> <name>cause</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cause</name></expr></argument>, <argument><expr><literal type="string">"hello %s"</literal></expr></argument>, <argument><expr><literal type="string">"world"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_wrapf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cause</name></expr></argument>, <argument><expr><literal type="string">"boom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><operator>*</operator><name>error</name></expr></argument>, <argument><expr><literal type="string">"boom: hello world"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST_CASE</name><argument_list>(<argument>wrapf</argument>, <argument>null_cause</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>dqlite__error</name></type> <name>cause</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_wrapf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cause</name></expr></argument>, <argument><expr><literal type="string">"boom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><operator>*</operator><name>error</name></expr></argument>, <argument><expr><literal type="string">"boom: (null)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST_CASE</name><argument_list>(<argument>wrapf</argument>, <argument>itself</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_printf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"I'm %s!"</literal></expr></argument>, <argument><expr><literal type="string">"here"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_wrapf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"boom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><operator>*</operator><name>error</name></expr></argument>, <argument><expr><literal type="string">"boom: I'm here!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * dqlite__error_oom
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>oom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_SETUP</name><argument_list>(<argument><expr><name>oom</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TEAR_DOWN</name><argument_list>(<argument><expr><name>oom</name></expr></argument>, <argument><expr><name>tear_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>TEST_CASE</name><argument_list>(<argument>oom</argument>, <argument>success</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_oom</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"boom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><operator>*</operator><name>error</name></expr></argument>, <argument><expr><literal type="string">"boom: out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST_CASE</name><argument_list>(<argument>oom</argument>, <argument>vargs</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_oom</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"boom %d"</literal></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><operator>*</operator><name>error</name></expr></argument>, <argument><expr><literal type="string">"boom 123: out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * dqlite__error_sys
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_SETUP</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TEAR_DOWN</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>tear_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>TEST_CASE</name><argument_list>(<argument>sys</argument>, <argument>success</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>open</name><argument_list>(<argument><expr><literal type="string">"/foo/bar/egg/baz"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dqlite__error_sys</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"boom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><operator>*</operator><name>error</name></expr></argument>, <argument><expr><literal type="string">"boom: No such file or directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * dqlite__error_uv
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_SETUP</name><argument_list>(<argument><expr><name>uv</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TEAR_DOWN</name><argument_list>(<argument><expr><name>uv</name></expr></argument>, <argument><expr><name>tear_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>TEST_CASE</name><argument_list>(<argument>uv</argument>, <argument>success</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_uv</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>UV_EBUSY</name></expr></argument>, <argument><expr><literal type="string">"boom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><operator>*</operator><name>error</name></expr></argument>,
				  <argument><expr><literal type="string">"boom: resource busy or locked (EBUSY)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * dqlite__error_copy
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_SETUP</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TEAR_DOWN</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>tear_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>TEST_CASE</name><argument_list>(<argument>copy</argument>, <argument>success</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_printf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"hello %s"</literal></expr></argument>, <argument><expr><literal type="string">"world"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>dqlite__error_copy</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"hello world"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST_CASE</name><argument_list>(<argument>copy</argument>, <argument>null</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>dqlite__error_copy</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ptr_equal</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST_CASE</name><argument_list>(<argument>copy</argument>, <argument>oom</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_SKIP</name></expr>;</return>

	<expr_stmt><expr><call><name>test_heap_fault_config</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_heap_fault_enable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_printf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>dqlite__error_copy</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ptr_equal</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * dqlite__error_is_disconnect
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>is_disconnect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_SETUP</name><argument_list>(<argument><expr><name>is_disconnect</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TEAR_DOWN</name><argument_list>(<argument><expr><name>is_disconnect</name></expr></argument>, <argument><expr><name>tear_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>TEST_CASE</name><argument_list>(<argument>is_disconnect</argument>, <argument>eof</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_uv</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>UV_EOF</name></expr></argument>, <argument><expr><literal type="string">"boom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_true</name><argument_list>(<argument><expr><call><name>dqlite__error_is_disconnect</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST_CASE</name><argument_list>(<argument>is_disconnect</argument>, <argument>econnreset</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_uv</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>UV_ECONNRESET</name></expr></argument>, <argument><expr><literal type="string">"boom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_true</name><argument_list>(<argument><expr><call><name>dqlite__error_is_disconnect</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST_CASE</name><argument_list>(<argument>is_disconnect</argument>, <argument>other</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_printf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"boom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_true</name><argument_list>(<argument><expr><operator>!</operator><call><name>dqlite__error_is_disconnect</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST_CASE</name><argument_list>(<argument>is_disconnect</argument>, <argument>null</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_true</name><argument_list>(<argument><expr><operator>!</operator><call><name>dqlite__error_is_disconnect</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>
</unit>
