<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/integration/test_fsm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/heap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/runner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/sqlite.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Fixture
 *
 ******************************************************************************/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_SERVERS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXTURE</name></cpp:macro>                                \
	<cpp:value>struct test_server servers[N_SERVERS]; \
	struct client *client</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETUP</name></cpp:macro>                                                 \
	<cpp:value>unsigned i_;                                          \
	test_heap_setup(params, user_data);                   \
	test_sqlite_setup(params);                            \
	for (i_ = 0; i_ &lt; N_SERVERS; i_++) {                  \
		struct test_server *server = &amp;f-&gt;servers[i_]; \
		test_server_setup(server, i_ + 1, params);    \
	}                                                     \
	test_server_network(f-&gt;servers, N_SERVERS);           \
	for (i_ = 0; i_ &lt; N_SERVERS; i_++) {                  \
		struct test_server *server = &amp;f-&gt;servers[i_]; \
		test_server_start(server, params);            \
	}                                                     \
	SELECT(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEAR_DOWN</name></cpp:macro>                                       \
	<cpp:value>unsigned i_;                                    \
	for (i_ = 0; i_ &lt; N_SERVERS; i_++) {            \
		test_server_tear_down(&amp;f-&gt;servers[i_]); \
	}                                               \
	test_sqlite_tear_down();                        \
	test_heap_tear_down(data)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Helper macros.
 *
 ******************************************************************************/</comment>

<comment type="block">/* Use the client connected to the server with the given ID. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECT</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f-&gt;client = test_server_client(&amp;f-&gt;servers[ID - 1])</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name><name>bools</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"0"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Make sure the snapshots scheduled by raft don't interfere with the snapshots
 * scheduled by the tests. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>snapshot_threshold</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"8192"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>MunitParameterEnum</name></type> <name><name>snapshot_params</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>SNAPSHOT_THRESHOLD_PARAM</name></expr>, <expr><name>snapshot_threshold</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"disk_mode"</literal></expr>, <expr><name>bools</name></expr> }</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * snapshot
 *
 ******************************************************************************/</comment>

<macro><name>SUITE</name><argument_list>(<argument>fsm</argument>)</argument_list></macro>

<struct>struct <name>fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>setUp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST</name><argument_list>(<argument>fsm</argument>, <argument>snapshotFreshDb</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>snapshot_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft_fsm</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name> <modifier>*</modifier></type><name>bufs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n_bufs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>disk_mode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>disk_mode_param</name> <init>= <expr><call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"disk_mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>disk_mode_param</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>disk_mode</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>disk_mode_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint</name><argument_list>(<argument><expr><name>n_bufs</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Snapshot header */</comment>

	<if_stmt><if>if <condition>(<expr><name>disk_mode</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_async</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_finalize</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ptr_null</name><argument_list>(<argument><expr><name>bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint</name><argument_list>(<argument><expr><name>n_bufs</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>fsm</argument>, <argument>snapshotWrittenDb</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>snapshot_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft_fsm</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name> <modifier>*</modifier></type><name>bufs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n_bufs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>disk_mode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>disk_mode_param</name> <init>= <expr><call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"disk_mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>disk_mode_param</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>disk_mode</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>disk_mode_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Add some data to database */</comment>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint</name><argument_list>(<argument><expr><name>n_bufs</name></expr></argument>, <argument><expr><operator>&gt;</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>disk_mode</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_async</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_finalize</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ptr_null</name><argument_list>(<argument><expr><name>bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint</name><argument_list>(<argument><expr><name>n_bufs</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>fsm</argument>, <argument>snapshotHeapFaultSingleDB</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>snapshot_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft_fsm</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name> <modifier>*</modifier></type><name>bufs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n_bufs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>disk_mode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>disk_mode_param</name> <init>= <expr><call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"disk_mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>disk_mode_param</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>disk_mode</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>disk_mode_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Add some data to database */</comment>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Inject heap faults at different stages of fsm__snapshot */</comment>
	<expr_stmt><expr><call><name>test_heap_fault_config</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_heap_fault_enable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_heap_fault_config</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_heap_fault_config</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* disk_mode does fewer allocations */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>disk_mode</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_heap_fault_config</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Inject faults into the async stage of the snapshot process */</comment>
<macro><name>TEST</name><argument_list>(<argument>fsm</argument>, <argument>snapshotHeapFaultSingleDBAsyncDisk</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>snapshot_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft_fsm</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name> <modifier>*</modifier></type><name>bufs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n_bufs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>disk_mode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>disk_mode_param</name> <init>= <expr><call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"disk_mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>disk_mode_param</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>disk_mode</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>disk_mode_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>disk_mode</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>MUNIT_SKIP</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Add some data to database */</comment>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Sync stage succeeds */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Inject heap fault in first call to encodeDiskDatabaseAsync */</comment>
	<expr_stmt><expr><call><name>test_heap_fault_config</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_heap_fault_enable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_async</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Cleanup should succeed */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_finalize</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>fsm</argument>, <argument>snapshotHeapFaultTwoDB</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>snapshot_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft_fsm</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name> <modifier>*</modifier></type><name>bufs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n_bufs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>disk_mode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>disk_mode_param</name> <init>= <expr><call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"disk_mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>disk_mode_param</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>disk_mode</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>disk_mode_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Open 2 databases and add data to them */</comment>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>OPEN_NAME</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Close and reopen the client and open a second database */</comment>
	<expr_stmt><expr><call><name>test_server_client_reconnect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>OPEN_NAME</name><argument_list>(<argument><expr><literal type="string">"test2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Inject heap faults at different stages of fsm__snapshot */</comment>
	<expr_stmt><expr><call><name>test_heap_fault_config</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_heap_fault_enable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_heap_fault_config</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_heap_fault_config</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_heap_fault_config</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* disk_mode does fewer allocations */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>disk_mode</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_heap_fault_config</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>test_heap_fault_config</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>fsm</argument>, <argument>snapshotHeapFaultTwoDBAsync</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>snapshot_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft_fsm</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name> <modifier>*</modifier></type><name>bufs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n_bufs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>disk_mode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>disk_mode_param</name> <init>= <expr><call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"disk_mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>disk_mode_param</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>disk_mode</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>disk_mode_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>disk_mode</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>MUNIT_SKIP</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Open 2 databases and add data to them */</comment>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>OPEN_NAME</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Close and reopen the client and open a second database */</comment>
	<expr_stmt><expr><call><name>test_server_client_reconnect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>OPEN_NAME</name><argument_list>(<argument><expr><literal type="string">"test2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* sync fsm__snapshot succeeds. */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* async step fails at different stages. */</comment>
	<expr_stmt><expr><call><name>test_heap_fault_enable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_heap_fault_config</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_async</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_finalize</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Inject fault when encoding second Database */</comment>

	<comment type="block">/* sync fsm__snapshot succeeds. */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_heap_fault_config</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_async</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_finalize</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>fsm</argument>, <argument>snapshotNewDbAddedBeforeFinalize</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>snapshot_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft_fsm</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name> <modifier>*</modifier></type><name>bufs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n_bufs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>disk_mode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>disk_mode_param</name> <init>= <expr><call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"disk_mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>disk_mode_param</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>disk_mode</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>disk_mode_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Add some data to database */</comment>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>OPEN_NAME</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint</name><argument_list>(<argument><expr><name>n_bufs</name></expr></argument>, <argument><expr><operator>&gt;</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Close and reopen the client and open a second database,
	 * and ensure finalize succeeds. */</comment>
	<expr_stmt><expr><call><name>test_server_client_reconnect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>OPEN_NAME</name><argument_list>(<argument><expr><literal type="string">"test2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>disk_mode</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_async</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_finalize</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ptr_null</name><argument_list>(<argument><expr><name>bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint</name><argument_list>(<argument><expr><name>n_bufs</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>fsm</argument>, <argument>snapshotWritesBeforeFinalize</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>snapshot_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft_fsm</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name> <modifier>*</modifier></type><name>bufs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n_bufs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>disk_mode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>disk_mode_param</name> <init>= <expr><call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"disk_mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>disk_mode_param</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>disk_mode</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>disk_mode_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Add some data to database */</comment>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(0)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint</name><argument_list>(<argument><expr><name>n_bufs</name></expr></argument>, <argument><expr><operator>&gt;</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add (a lot) more data to the database */</comment>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"INSERT INTO test(n) VALUES(%d)"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>disk_mode</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <literal type="number">512</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_async</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Finalize succeeds */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_finalize</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ptr_null</name><argument_list>(<argument><expr><name>bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint</name><argument_list>(<argument><expr><name>n_bufs</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Triggers a checkpoint */</comment>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1001)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>fsm</argument>, <argument>concurrentSnapshots</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>snapshot_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft_fsm</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name> <modifier>*</modifier></type><name>bufs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name> <modifier>*</modifier></type><name>bufs2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n_bufs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n_bufs2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>disk_mode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>disk_mode_param</name> <init>= <expr><call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"disk_mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>disk_mode_param</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>disk_mode</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>disk_mode_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Add some data to database */</comment>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Second snapshot fails when first isn't finalized */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>RAFT_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>disk_mode</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_async</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_finalize</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Second snapshot succeeds after first is finalized */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>disk_mode</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_async</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_finalize</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>


<comment type="block">/* Copies n raft buffers to a single raft buffer */</comment>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>raft_buffer</name></name></type> <name>n_bufs_to_buf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_buffer</name></name></type> <name><name>bufs</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name></type> <name>buf</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Allocate a suitable buffer */</comment>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>buf</name><operator>.</operator><name>len</name></name> <operator>+=</operator> <name><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>buf</name><operator>.</operator><name>base</name></name> <operator>=</operator> <call><name>raft_malloc</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ptr_not_null</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Copy all data */</comment>
	<expr_stmt><expr><name>cursor</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>base</name></name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>base</name></expr></argument>, <argument><expr><name><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <name><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>munit_assert_ullong</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name>cursor</name> <operator>-</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>buf</name><operator>.</operator><name>base</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name><name>num_records</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"0"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"256"</literal></expr>,
    <comment type="block">/* WAL will just have been checkpointed after 993 writes. */</comment>
    <expr><literal type="string">"993"</literal></expr>,
    <comment type="block">/* Non-empty WAL, checkpointed twice */</comment>
    <expr><literal type="string">"2200"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>MunitParameterEnum</name></type> <name><name>restore_params</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"num_records"</literal></expr>, <expr><name>num_records</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>SNAPSHOT_THRESHOLD_PARAM</name></expr>, <expr><name>snapshot_threshold</name></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"disk_mode"</literal></expr>, <expr><name>bools</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<macro><name>TEST</name><argument_list>(<argument>fsm</argument>, <argument>snapshotRestore</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>restore_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft_fsm</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name> <modifier>*</modifier></type><name>bufs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name></type> <name>snapshot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>n_records</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"num_records"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n_bufs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>rows</name></name></type> <name>rows</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>disk_mode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>disk_mode_param</name> <init>= <expr><call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"disk_mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>disk_mode_param</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>disk_mode</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>disk_mode_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>


	<comment type="block">/* Add some data to database */</comment>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_records</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
	    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"INSERT INTO test(n) VALUES(%d)"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>disk_mode</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_async</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Deep copy snapshot */</comment>
	<expr_stmt><expr><name>snapshot</name> <operator>=</operator> <call><name>n_bufs_to_buf</name><argument_list>(<argument><expr><name>bufs</name></expr></argument>, <argument><expr><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_finalize</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Additionally frees snapshot.base */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>restore</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Table is there on fresh connection. */</comment>
	<expr_stmt><expr><call><name>test_server_client_reconnect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"SELECT COUNT(*) from test"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QUERY</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_long</name><argument_list>(<argument><expr><name><name>rows</name><operator>.</operator><name>next</name><operator>-&gt;</operator><name>values</name><operator>-&gt;</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>n_records</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>clientCloseRows</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Still possible to insert entries */</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_records</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
	    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"INSERT INTO test(n) VALUES(%ld)"</literal></expr></argument>, <argument><expr><name>n_records</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>fsm</argument>, <argument>snapshotRestoreMultipleDBs</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>snapshot_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft_fsm</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name> <modifier>*</modifier></type><name>bufs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name></type> <name>snapshot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n_bufs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>rows</name></name></type> <name>rows</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>disk_mode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>disk_mode_param</name> <init>= <expr><call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"disk_mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>disk_mode_param</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>disk_mode</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>disk_mode_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Create 2 databases and add data to them. */</comment>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>OPEN_NAME</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_server_client_reconnect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>OPEN_NAME</name><argument_list>(<argument><expr><literal type="string">"test2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test2a (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test2a(n) VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Snapshot both databases and restore the data. */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>disk_mode</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_async</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Copy the snapshot to restore it */</comment>
	<expr_stmt><expr><name>snapshot</name> <operator>=</operator> <call><name>n_bufs_to_buf</name><argument_list>(<argument><expr><name>bufs</name></expr></argument>, <argument><expr><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>snapshot_finalize</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create a new table in test2 that shouldn't be visible after
	 * restoring the snapshot. */</comment>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test2b (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test2b(n) VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Restore snapshot */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>restore</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Reopen connection */</comment>
	<expr_stmt><expr><call><name>test_server_client_reconnect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>OPEN_NAME</name><argument_list>(<argument><expr><literal type="string">"test2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Table before snapshot is there on second DB */</comment>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"SELECT * from test2a"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QUERY</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>clientCloseRows</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Table after snapshot is not there on second DB */</comment>
	<expr_stmt><expr><call><name>PREPARE_FAIL</name><argument_list>(<argument><expr><literal type="string">"SELECT * from test2b"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint64</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"no such table: test2b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Table is there on first DB */</comment>
	<expr_stmt><expr><call><name>test_server_client_reconnect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>OPEN_NAME</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"SELECT * from test"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QUERY</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>clientCloseRows</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * apply
 *
 ******************************************************************************/</comment>

<macro><name>TEST</name><argument_list>(<argument>fsm</argument>, <argument>applyFail</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>command_frames</name></name></type> <name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name></type> <name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft_fsm</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">0xDEADBEEF</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Create a frames command without data. */</comment>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>filename</name></name> <operator>=</operator> <literal type="string">"test"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>tx_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>truncate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>is_commit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>frames</name><operator>.</operator><name>n_pages</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>frames</name><operator>.</operator><name>page_size</name></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>frames</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>command__encode</name><argument_list>(<argument><expr><name>COMMAND_FRAMES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Apply the command and expect it to fail. */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>apply</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ptr_null</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>raft_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>fsm</argument>, <argument>applyUnknownTypeFail</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>command_frames</name></name></type> <name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name></type> <name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft_fsm</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">0xDEADBEEF</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Create a frames command without data. */</comment>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>filename</name></name> <operator>=</operator> <literal type="string">"test"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>tx_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>truncate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>is_commit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>frames</name><operator>.</operator><name>n_pages</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>frames</name><operator>.</operator><name>page_size</name></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>frames</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>command__encode</name><argument_list>(<argument><expr><name>COMMAND_FRAMES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Command type does not exist. */</comment>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>buf</name><operator>.</operator><name>base</name></name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>COMMAND_CHECKPOINT</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

	<comment type="block">/* Apply the command and expect it to fail. */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>apply</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_PROTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ptr_null</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>raft_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>
</unit>
