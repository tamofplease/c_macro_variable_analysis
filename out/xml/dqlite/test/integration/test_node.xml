<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/integration/test_node.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/heap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/runner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/sqlite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../include/dqlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/utils.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Fixture
 *
 ******************************************************************************/</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name><name>bools</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"0"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>MunitParameterEnum</name></type> <name><name>node_params</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"disk_mode"</literal></expr>, <expr><name>bools</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>fixture</name>
<block>{
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>         <comment type="block">/* Data directory. */</comment>
	<decl_stmt><decl><type><name>dqlite_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt> <comment type="block">/* Node instance. */</comment>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>setUp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>test_heap_setup</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>user_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_sqlite_setup</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <call><name>test_dir_setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_create</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_set_bind_address</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><literal type="string">"@123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>disk_mode_param</name> <init>= <expr><call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"disk_mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>disk_mode_param</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>disk_mode</name> <init>= <expr><operator>(</operator><name>bool</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>disk_mode_param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>disk_mode</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_enable_disk_mode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>setUpInet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>test_heap_setup</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>user_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_sqlite_setup</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <call><name>test_dir_setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_create</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_set_bind_address</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:9001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>disk_mode_param</name> <init>= <expr><call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"disk_mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>disk_mode_param</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>disk_mode</name> <init>= <expr><operator>(</operator><name>bool</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>disk_mode_param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>disk_mode</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_enable_disk_mode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Tests if node starts/stops successfully and also performs some memory cleanup */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>startStopNode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><call><name>dqlite_node_start</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><call><name>dqlite_node_stop</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Recovery only works if a node has been started regularly for a first time. */</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>setUpForRecovery</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>setUp</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>user_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>startStopNode</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dqlite_node_destroy</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_create</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_set_bind_address</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><literal type="string">"@123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>disk_mode_param</name> <init>= <expr><call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"disk_mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>disk_mode_param</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>disk_mode</name> <init>= <expr><operator>(</operator><name>bool</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>disk_mode_param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>disk_mode</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_enable_disk_mode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

        <return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>dqlite_node_destroy</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_dir_tear_down</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_sqlite_tear_down</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_heap_tear_down</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>SUITE</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * dqlite_node_start
 *
 ******************************************************************************/</comment>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>start</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_start</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_stop</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>startInet</argument>, <argument>setUpInet</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_start</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_stop</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>snapshotParams</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_set_snapshot_params</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startStopNode</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>snapshotParamsRunning</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_start</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_set_snapshot_params</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_stop</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>snapshotParamsTrailingTooSmall</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_set_snapshot_params</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startStopNode</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>snapshotParamsThresholdLargerThanTrailing</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_set_snapshot_params</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><literal type="number">2049</literal></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startStopNode</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>networkLatency</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_set_network_latency</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><literal type="number">3600000000000ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startStopNode</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>networkLatencyRunning</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_start</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_set_network_latency</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><literal type="number">3600000000000ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_MISUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_stop</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>networkLatencyTooLarge</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_set_network_latency</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><literal type="number">3600000000000ULL</literal> <operator>+</operator> <literal type="number">1ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_MISUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startStopNode</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>networkLatencyMs</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_set_network_latency_ms</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_set_network_latency_ms</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">3600U</literal> <operator>*</operator> <literal type="number">1000U</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startStopNode</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>networkLatencyMsRunning</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_start</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_set_network_latency_ms</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_MISUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_stop</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>networkLatencyMsTooSmall</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_set_network_latency_ms</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_MISUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startStopNode</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>networkLatencyMsTooLarge</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_set_network_latency_ms</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">3600U</literal> <operator>*</operator> <literal type="number">1000U</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_MISUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startStopNode</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>


<comment type="block" format="doxygen">/******************************************************************************
 *
 * dqlite_node_recover
 *
 ******************************************************************************/</comment>
<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>recover</argument>, <argument>setUpForRecovery</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

        <comment type="block">/* Setup the infos structs */</comment>
        <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>dqlite_node_info</name></name></type> <name><name>infos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>address</name> <operator>=</operator> <literal type="string">"1"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>address</name> <operator>=</operator> <literal type="string">"2"</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_recover</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>infos</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startStopNode</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>recoverExt</argument>, <argument>setUpForRecovery</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

        <comment type="block">/* Setup the infos structs */</comment>
        <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>dqlite_node_info_ext</name></name></type> <name><name>infos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>infos</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <call><name>dqlite_generate_node_id</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>address</name> <operator>=</operator> <call><name>PTR_TO_UINT64</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dqlite_role</name> <operator>=</operator> <name>DQLITE_VOTER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>infos</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <call><name>dqlite_generate_node_id</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>address</name> <operator>=</operator> <call><name>PTR_TO_UINT64</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dqlite_role</name> <operator>=</operator> <name>DQLITE_SPARE</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_recover_ext</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>infos</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startStopNode</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>recoverExtUnaligned</argument>, <argument>setUpForRecovery</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

        <comment type="block">/* Setup the infos structs */</comment>
        <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>dqlite_node_info_ext</name></name></type> <name><name>infos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>infos</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* Unaligned */</comment>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>address</name> <operator>=</operator> <call><name>PTR_TO_UINT64</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dqlite_role</name> <operator>=</operator> <name>DQLITE_VOTER</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_recover_ext</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>infos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_MISUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startStopNode</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>recoverExtTooSmall</argument>, <argument>setUpForRecovery</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

        <comment type="block">/* Setup the infos structs */</comment>
        <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>dqlite_node_info_ext</name></name></type> <name><name>infos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>DQLITE_NODE_INFO_EXT_SZ_ORIG</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>address</name> <operator>=</operator> <call><name>PTR_TO_UINT64</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dqlite_role</name> <operator>=</operator> <name>DQLITE_VOTER</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_recover_ext</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>infos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_MISUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startStopNode</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<struct>struct <name>dqlite_node_info_ext_new</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>dqlite_node_info_ext</name></name></type> <name>orig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>new1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>new2</name></decl>;</decl_stmt>
}</block>;</struct>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>recoverExtNewFields</argument>, <argument>setUpForRecovery</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

        <comment type="block">/* Setup the infos structs */</comment>
        <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>dqlite_node_info_ext_new</name></name></type> <name><name>infos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>orig</name><operator>.</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>infos</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>orig</name><operator>.</operator><name>id</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>orig</name><operator>.</operator><name>address</name></name> <operator>=</operator> <call><name>PTR_TO_UINT64</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>orig</name><operator>.</operator><name>dqlite_role</name></name> <operator>=</operator> <name>DQLITE_VOTER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>new1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>new2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_recover_ext</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>dqlite_node_info_ext</name><operator>*</operator><operator>)</operator> <name>infos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startStopNode</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>recoverExtNewFieldsNotZero</argument>, <argument>setUpForRecovery</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

        <comment type="block">/* Setup the infos structs */</comment>
        <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>dqlite_node_info_ext_new</name></name></type> <name><name>infos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>orig</name><operator>.</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>infos</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>orig</name><operator>.</operator><name>id</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>orig</name><operator>.</operator><name>address</name></name> <operator>=</operator> <call><name>PTR_TO_UINT64</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>orig</name><operator>.</operator><name>dqlite_role</name></name> <operator>=</operator> <name>DQLITE_VOTER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>new1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>new2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* This will cause a failure */</comment>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_recover_ext</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>dqlite_node_info_ext</name><operator>*</operator><operator>)</operator> <name>infos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_MISUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startStopNode</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * dqlite_node_errmsg
 *
 ******************************************************************************/</comment>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>errMsgNodeNull</argument>, <argument>NULL</argument>, <argument>NULL</argument>, <argument><literal type="number">0</literal></argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><call><name>dqlite_node_errmsg</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"node is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>node</argument>, <argument>errMsg</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>node_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><call><name>dqlite_node_errmsg</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_start</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_stop</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>
</unit>
