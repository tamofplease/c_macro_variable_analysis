<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/integration/test_membership.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/endpoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/heap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/runner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/sqlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/util.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Fixture
 *
 ******************************************************************************/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_SERVERS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXTURE</name></cpp:macro>                                \
	<cpp:value>struct test_server servers[N_SERVERS]; \
	struct client *client;                 \
	struct rows rows;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETUP</name></cpp:macro>                                                 \
	<cpp:value>unsigned i_;                                          \
	test_heap_setup(params, user_data);                   \
	test_sqlite_setup(params);                            \
	for (i_ = 0; i_ &lt; N_SERVERS; i_++) {                  \
		struct test_server *server = &amp;f-&gt;servers[i_]; \
		test_server_setup(server, i_ + 1, params);    \
	}                                                     \
	test_server_network(f-&gt;servers, N_SERVERS);           \
	for (i_ = 0; i_ &lt; N_SERVERS; i_++) {                  \
		struct test_server *server = &amp;f-&gt;servers[i_]; \
		test_server_start(server, params);            \
	}                                                     \
	SELECT(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEAR_DOWN</name></cpp:macro>                                       \
	<cpp:value>unsigned i_;                                    \
	for (i_ = 0; i_ &lt; N_SERVERS; i_++) {            \
		test_server_tear_down(&amp;f-&gt;servers[i_]); \
	}                                               \
	test_sqlite_tear_down();                        \
	test_heap_tear_down(data)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Helper macros.
 *
 ******************************************************************************/</comment>

<comment type="block">/* Use the client connected to the server with the given ID. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECT</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f-&gt;client = test_server_client(&amp;f-&gt;servers[ID - 1])</cpp:value></cpp:define>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * join
 *
 ******************************************************************************/</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name><name>bools</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"0"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>MunitParameterEnum</name></type> <name><name>membership_params</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"disk_mode"</literal></expr>, <expr><name>bools</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<macro><name>SUITE</name><argument_list>(<argument>membership</argument>)</argument_list></macro>

<struct>struct <name>fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>setUp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST</name><argument_list>(<argument>membership</argument>, <argument>join</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>membership_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>id</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><literal type="string">"@2"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSIGN</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* voter */</comment>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* The table is visible from the new node */</comment>
	<expr_stmt><expr><call><name>TRANSFER</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SELECT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM test"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* TODO: fix the standalone test for remove */</comment>
	<expr_stmt><expr><call><name>REMOVE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<struct>struct <name>id_last_applied</name> <block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>raft_index</name></type> <name>last_applied</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>last_applied_cond</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>id_last_applied</name></name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>arg</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><name><name>arg</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft</name><operator>.</operator><name>last_applied</name></name> <operator>&gt;=</operator> <name><name>arg</name><operator>.</operator><name>last_applied</name></name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST</name><argument_list>(<argument>membership</argument>, <argument>transfer</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>membership_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>id</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><literal type="string">"@2"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>raft_index</name></type> <name>last_applied</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>client</name></name></type> <name>c_transfer</name></decl>;</decl_stmt> <comment type="block">/* Client used for transfer requests */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>id_last_applied</name></name></type> <name>await_arg</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSIGN</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* voter */</comment>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Transfer leadership and wait until first leader has applied a new
	 * entry replicated from the new leader.  */</comment>
	<expr_stmt><expr><call><name>test_server_client_connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDSHAKE_C</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRANSFER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_server_client_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>last_applied</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft</name><operator>.</operator><name>last_applied</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SELECT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>await_arg</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>await_arg</name><operator>.</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>await_arg</name><operator>.</operator><name>last_applied</name></name> <operator>=</operator> <name>last_applied</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AWAIT_TRUE</name><argument_list>(<argument><expr><name>last_applied_cond</name></expr></argument>, <argument><expr><name>await_arg</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Transfer leadership away from a member that has a pending transaction */</comment>
<macro><name>TEST</name><argument_list>(<argument>membership</argument>, <argument>transferPendingTransaction</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>membership_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>id</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><literal type="string">"@2"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>raft_index</name></type> <name>last_applied</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>client</name></name></type> <name>c_transfer</name></decl>;</decl_stmt> <comment type="block">/* Client used for transfer requests */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>id_last_applied</name></name></type> <name>await_arg</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSIGN</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* voter */</comment>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Pending transaction */</comment>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM test"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QUERY</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>clientCloseRows</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Transfer leadership and wait until first leader has applied a new
	 * entry replicated from the new leader.  */</comment>
	<expr_stmt><expr><call><name>test_server_client_connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDSHAKE_C</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRANSFER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_server_client_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>last_applied</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft</name><operator>.</operator><name>last_applied</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SELECT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(2)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>await_arg</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>await_arg</name><operator>.</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>await_arg</name><operator>.</operator><name>last_applied</name></name> <operator>=</operator> <name>last_applied</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AWAIT_TRUE</name><argument_list>(<argument><expr><name>last_applied_cond</name></expr></argument>, <argument><expr><name>await_arg</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<struct>struct <name>fixture_id</name> <block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>transfer_started_cond</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fixture_id</name></name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>arg</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><name><name>arg</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft</name><operator>.</operator><name>transfer</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Transfer leadership away from a member and immediately try to EXEC a
 * prepared SQL statement that needs a barrier */</comment>
<macro><name>TEST</name><argument_list>(<argument>membership</argument>, <argument>transferAndSqlExecWithBarrier</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>id</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><literal type="string">"@2"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>client</name></name></type> <name>c_transfer</name></decl>;</decl_stmt> <comment type="block">/* Client used for transfer requests */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture_id</name></name></type> <name>arg</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSIGN</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* voter */</comment>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Iniate transfer of leadership. This will cause a raft_barrier
	 * failure while the node is technically still the leader, so the gateway
	 * functionality that checks for leadership still succeeds. */</comment>
	<expr_stmt><expr><call><name>test_server_client_connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDSHAKE_C</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>clientSendTransfer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Wait until transfer is started by raft so the barrier can fail. */</comment>
	<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AWAIT_TRUE</name><argument_list>(<argument><expr><name>transfer_started_cond</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Force a barrier.
	 * TODO this is hacky, but I can't seem to hit the codepath otherwise */</comment>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft</name><operator>.</operator><name>last_applied</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>clientSendExec</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>clientRecvResult</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_server_client_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Transfer leadership back and forth from a member that has a pending transaction */</comment>
<macro><name>TEST</name><argument_list>(<argument>membership</argument>, <argument>transferTwicePendingTransaction</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>membership_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>id</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><literal type="string">"@2"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>raft_index</name></type> <name>last_applied</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>client</name></name></type> <name>c_transfer</name></decl>;</decl_stmt> <comment type="block">/* Client used for transfer requests */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>id_last_applied</name></name></type> <name>await_arg</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSIGN</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* voter */</comment>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Pending transaction */</comment>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM test"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QUERY</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>clientCloseRows</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Transfer leadership and wait until first leader has applied a new
	 * entry replicated from the new leader.  */</comment>
	<expr_stmt><expr><call><name>test_server_client_connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDSHAKE_C</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRANSFER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_server_client_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>last_applied</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft</name><operator>.</operator><name>last_applied</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SELECT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(2)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>await_arg</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>await_arg</name><operator>.</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>await_arg</name><operator>.</operator><name>last_applied</name></name> <operator>=</operator> <name>last_applied</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AWAIT_TRUE</name><argument_list>(<argument><expr><name>last_applied_cond</name></expr></argument>, <argument><expr><name>await_arg</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Transfer leadership back to original node, reconnect the client and
	 * ensure queries can be executed. */</comment>
	<expr_stmt><expr><call><name>test_server_client_connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDSHAKE_C</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRANSFER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_server_client_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>last_applied</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>dqlite</name><operator>-&gt;</operator><name>raft</name><operator>.</operator><name>last_applied</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_server_client_reconnect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SELECT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(3)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>await_arg</name><operator>.</operator><name>id</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AWAIT_TRUE</name><argument_list>(<argument><expr><name>last_applied_cond</name></expr></argument>, <argument><expr><name>await_arg</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>
</unit>
