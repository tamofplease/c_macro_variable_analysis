<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/integration/test_cluster.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/endpoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/heap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/runner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/sqlite.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Fixture
 *
 ******************************************************************************/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_SERVERS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXTURE</name></cpp:macro>                                \
	<cpp:value>struct test_server servers[N_SERVERS]; \
	struct client *client</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETUP</name></cpp:macro>                                                 \
	<cpp:value>unsigned i_;                                          \
	test_heap_setup(params, user_data);                   \
	test_sqlite_setup(params);                            \
	for (i_ = 0; i_ &lt; N_SERVERS; i_++) {                  \
		struct test_server *server = &amp;f-&gt;servers[i_]; \
		test_server_setup(server, i_ + 1, params);    \
	}                                                     \
	test_server_network(f-&gt;servers, N_SERVERS);           \
	for (i_ = 0; i_ &lt; N_SERVERS; i_++) {                  \
		struct test_server *server = &amp;f-&gt;servers[i_]; \
		test_server_start(server, params);            \
	}                                                     \
	SELECT(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEAR_DOWN</name></cpp:macro>                                       \
	<cpp:value>unsigned i_;                                    \
	for (i_ = 0; i_ &lt; N_SERVERS; i_++) {            \
		test_server_tear_down(&amp;f-&gt;servers[i_]); \
	}                                               \
	test_sqlite_tear_down();                        \
	test_heap_tear_down(data)</cpp:value></cpp:define>

<comment type="block">/* Use the client connected to the server with the given ID. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECT</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f-&gt;client = test_server_client(&amp;f-&gt;servers[ID - 1])</cpp:value></cpp:define>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * cluster
 *
 ******************************************************************************/</comment>

<macro><name>SUITE</name><argument_list>(<argument>cluster</argument>)</argument_list></macro>

<struct>struct <name>fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>setUp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name><name>bools</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"0"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name><name>num_records</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"0"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"256"</literal></expr>,
    <comment type="block">/* WAL will just have been checkpointed after 993 writes. */</comment>
    <expr><literal type="string">"993"</literal></expr>,
    <comment type="block">/* Non-empty WAL, checkpointed twice, 2 snapshots taken */</comment>
    <expr><literal type="string">"2200"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>MunitParameterEnum</name></type> <name><name>cluster_params</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"num_records"</literal></expr>, <expr><name>num_records</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"disk_mode"</literal></expr>, <expr><name>bools</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Restart a node and check if all data is there */</comment>
<macro><name>TEST</name><argument_list>(<argument>cluster</argument>, <argument>restart</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>cluster_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>rows</name></name></type> <name>rows</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>n_records</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"num_records"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_records</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"INSERT INTO test(n) VALUES(%d)"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<decl_stmt><decl><type><name><name>struct</name> <name>test_server</name></name> <modifier>*</modifier></type><name>server</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>test_server_stop</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_server_start</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* The table is visible after restart. */</comment>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"SELECT COUNT(*) from test"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QUERY</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_long</name><argument_list>(<argument><expr><name><name>rows</name><operator>.</operator><name>next</name><operator>-&gt;</operator><name>values</name><operator>-&gt;</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>n_records</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>clientCloseRows</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Add data to a node, add a new node and make sure data is there. */</comment>
<macro><name>TEST</name><argument_list>(<argument>cluster</argument>, <argument>dataOnNewNode</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>cluster_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>rows</name></name></type> <name>rows</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>n_records</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"num_records"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>id</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><literal type="string">"@2"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_records</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"INSERT INTO test(n) VALUES(%d)"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Add a second voting server, this one will receive all data from the
	 * original leader. */</comment>
	<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSIGN</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* voter */</comment>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Remove original server so second server becomes leader after election
	 * timeout */</comment>
	<expr_stmt><expr><call><name>REMOVE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* The full table is visible from the new node */</comment>
	<expr_stmt><expr><call><name>SELECT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"SELECT COUNT(*) from test"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QUERY</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_long</name><argument_list>(<argument><expr><name><name>rows</name><operator>.</operator><name>next</name><operator>-&gt;</operator><name>values</name><operator>-&gt;</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>n_records</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>clientCloseRows</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Insert a huge row, causing SQLite to allocate overflow pages. Then
 * insert the same row again. (Reproducer for https://github.com/canonical/raft/issues/432.) */</comment>
<macro><name>TEST</name><argument_list>(<argument>cluster</argument>, <argument>hugeRow</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>huge</name> <init>= <expr><literal type="number">20000000</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE IF NOT EXISTS model(key TEXT, value TEXT, UNIQUE(key))"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sql</name> <operator>=</operator> <call><name>munit_malloc</name><argument_list>(<argument><expr><name>huge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>huge</name></expr></argument>, <argument><expr><literal type="string">"INSERT OR REPLACE INTO model (key, value) VALUES('my-key-1', '"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sql</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><name>huge</name> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sql</name> <operator>+</operator> <name>huge</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"')"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Again */</comment>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>

</block_content>}</block>
</unit>
