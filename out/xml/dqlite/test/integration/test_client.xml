<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/integration/test_client.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/heap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/runner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/sqlite.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Handle client requests
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>SUITE</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name><name>bools</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"0"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>MunitParameterEnum</name></type> <name><name>client_params</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"disk_mode"</literal></expr>, <expr><name>bools</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>fixture</name>
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>test_server</name></name></type> <name>server</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>setUp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_heap_setup</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>user_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_sqlite_setup</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_server_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_server_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <call><name>test_server_client</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>HANDSHAKE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>test_server_tear_down</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_sqlite_tear_down</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_heap_tear_down</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST</name><argument_list>(<argument>client</argument>, <argument>exec</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>client_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>client</argument>, <argument>query</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>client_params</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>rows</name></name></type> <name>rows</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test (n) VALUES(123)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"SELECT n FROM test"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QUERY</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>clientCloseRows</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>
</unit>
