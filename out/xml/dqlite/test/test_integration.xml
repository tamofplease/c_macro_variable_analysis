<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/test_integration.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../include/dqlite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./lib/runner.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>TEST_MODULE</name><argument_list>(<argument><expr><name>integration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Helpers
 *
 ******************************************************************************/</comment>

<comment type="block">/* A worker that keeps inserting rows into a test table and fetching them back,
 * checking that they have been all inserted. */</comment>
struct worker
{
	struct test_client *client; <comment type="block">/* A connected client */</comment>
	int i;			    <comment type="block">/* Worker index */</comment>
	int a;			    <comment type="block">/* Start inserting from this number */</comment>
	int n;			    <comment type="block">/* Number of insertions to perform */</comment>
	pthread_t thread;	   <comment type="block">/* System thread we run in */</comment>
};

static void *__worker_run(void *arg)
{
	struct worker *w;
	char *leader;
	uint64_t heartbeat;
	uint32_t db_id;
	int b;
	int i;

	munit_assert_ptr_not_null(arg);

	w = (struct worker *)arg;

	<comment type="block">/* Initialize the connection and open a database. */</comment>
	test_client_handshake(w-&gt;client);
	test_client_leader(w-&gt;client, &amp;leader);
	test_client_client(w-&gt;client, &amp;heartbeat);
	test_client_open(w-&gt;client, "test.db", &amp;db_id);

	b = w-&gt;a + w-&gt;n;

	for (i = w-&gt;a; i &lt; b; i++) {
		uint32_t stmt_id;
		char sql[128];
		struct test_client_result result;
		struct test_client_rows rows;
		struct test_client_row *row;
		int j;

		<comment type="block">/* Insert a row in the test table. */</comment>
		sprintf(sql, "INSERT INTO test(n) VALUES(%d)", i);

		test_client_prepare(w-&gt;client, db_id, sql, &amp;stmt_id);
		test_client_exec(w-&gt;client, db_id, stmt_id, &amp;result);

		munit_assert_int(result.rows_affected, ==, 1);

		test_client_finalize(w-&gt;client, db_id, stmt_id);

		<comment type="block">/* Fetch all rows within our own working range. */</comment>
		sprintf(sql, "SELECT n FROM test WHERE n &gt;= %d AND n &lt; %d",
			w-&gt;a, b);

		test_client_prepare(w-&gt;client, db_id, sql, &amp;stmt_id);
		test_client_query(w-&gt;client, db_id, stmt_id, &amp;rows);

		munit_assert_int(rows.column_count, ==, 1);
		munit_assert_string_equal(rows.column_names[0], "n");

		row = rows.next;
		for (j = w-&gt;a; j &lt;= i; j++) {
			munit_assert_ptr_not_null(row);

			munit_assert_int(row-&gt;types[0], ==, SQLITE_INTEGER);
			munit_assert_int(*(int64_t *)row-&gt;values[0], ==, j);

			row = row-&gt;next;
		}

		test_client_rows_close(&amp;rows);
		test_client_finalize(w-&gt;client, db_id, stmt_id);
	}

	return 0;
}

static void __worker_start(struct worker *w,
			   struct test_server *server,
			   int i,
			   int a,
			   int n)
{
	int err;

	w-&gt;i = i;
	w-&gt;a = a;
	w-&gt;n = n;

	test_server_connect(server, &amp;w-&gt;client);

	err = pthread_create(&amp;w-&gt;thread, 0, &amp;__worker_run, (void *)w);
	if (err) {
		munit_errorf("failed to spawn test worker thread: %s",
			     strerror(errno));
	}
}

static void __worker_wait(struct worker *w)
{
	int err;
	void *retval;

	err = pthread_join(w-&gt;thread, &amp;retval);
	if (err) {
		munit_errorf("failed to wait test worker thread: %s",
			     strerror(errno));
	}

	test_client_close(w-&gt;client);
	free(w-&gt;client);
}

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Setup and tear down
 *
 ******************************************************************************/</comment>

static void *setup(const MunitParameter params[], void *user_data)
{
	struct test_server *server;
	const char *errmsg;
	int err;

	(void)user_data;
	(void)params;

	err = dqlite_init(&amp;errmsg);
	munit_assert_int(err, ==, 0);

	server = test_server_start("unix", params);

	return server;
}

static void tear_down(void *data)
{
	struct test_server *server = data;
	int rc;

	test_server_stop(server);

	rc = sqlite3_shutdown();
	munit_assert_int(rc, ==, 0);
}

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Tests
 *
 ******************************************************************************/</comment>

TEST_SUITE(exec);
TEST_SETUP(exec, setup);
TEST_TEAR_DOWN(exec, tear_down);

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

TEST_CASE(exec, single_query, NULL)
{
	struct test_server *server = data;
	struct test_client *client;
	char *leader;
	uint64_t heartbeat;
	uint32_t db_id;
	uint32_t stmt_id;
	struct test_client_result result;
	struct test_client_rows rows;

	(void)params;

	test_server_connect(server, &amp;client);

	<comment type="block">/* Initialize the connection and open a database. */</comment>
	test_client_handshake(client);
	test_client_leader(client, &amp;leader);
	test_client_client(client, &amp;heartbeat);
	test_client_open(client, "test.db", &amp;db_id);
	munit_assert_int(db_id, ==, 0);

	<comment type="block">/* Create a test table. */</comment>
	test_client_prepare(client, db_id, "CREATE TABLE test (n INT)",
			    &amp;stmt_id);
	test_client_exec(client, db_id, stmt_id, &amp;result);
	test_client_finalize(client, db_id, stmt_id);

	<comment type="block">/* Insert a row in the test table. */</comment>
	test_client_prepare(client, db_id, "INSERT INTO test VALUES(123)",
			    &amp;stmt_id);

	munit_assert_int(stmt_id, ==, 0);

	test_client_exec(client, db_id, stmt_id, &amp;result);

	munit_assert_int(result.last_insert_id, ==, 1);
	munit_assert_int(result.rows_affected, ==, 1);

	test_client_finalize(client, db_id, stmt_id);

	<comment type="block">/* Select rows from the test table. */</comment>
	test_client_prepare(client, db_id, "SELECT n FROM test", &amp;stmt_id);

	munit_assert_int(stmt_id, ==, 0);

	test_client_query(client, db_id, stmt_id, &amp;rows);

	munit_assert_int(rows.column_count, ==, 1);
	munit_assert_string_equal(rows.column_names[0], "n");

	munit_assert_ptr_not_null(rows.next);
	munit_assert_int(rows.next-&gt;types[0], ==, SQLITE_INTEGER);
	munit_assert_int(*(int64_t *)rows.next-&gt;values[0], ==, 123);

	test_client_rows_close(&amp;rows);

	test_client_finalize(client, db_id, stmt_id);

	test_client_close(client);
	free(client);

	return MUNIT_OK;
}

TEST_CASE(exec, large_query, NULL)
{
	struct test_server *server = data;
	struct test_client *client;
	char *leader;
	uint64_t heartbeat;
	uint32_t db_id;
	uint32_t stmt_id;
	struct test_client_result result;
	struct test_client_rows rows;
	int i;

	(void)params;

	test_server_connect(server, &amp;client);

	<comment type="block">/* Initialize the connection and open a database. */</comment>
	test_client_handshake(client);
	test_client_leader(client, &amp;leader);
	test_client_client(client, &amp;heartbeat);
	test_client_open(client, "test.db", &amp;db_id);
	munit_assert_int(db_id, ==, 0);

	<comment type="block">/* Create a test table. */</comment>
	test_client_prepare(client, db_id, "CREATE TABLE test (n INT)",
			    &amp;stmt_id);
	test_client_exec(client, db_id, stmt_id, &amp;result);
	test_client_finalize(client, db_id, stmt_id);

	test_client_prepare(client, db_id, "BEGIN", &amp;stmt_id);
	test_client_exec(client, db_id, stmt_id, &amp;result);
	test_client_finalize(client, db_id, stmt_id);

	<comment type="block">/* Insert lots of rows in the test table. */</comment>
	test_client_prepare(client, db_id, "INSERT INTO test VALUES(123456789)",
			    &amp;stmt_id);

	for (i = 0; i &lt; 256; i++) {
		munit_assert_int(stmt_id, ==, 0);
		test_client_exec(client, db_id, stmt_id, &amp;result);
		munit_assert_int(result.rows_affected, ==, 1);
	}

	test_client_finalize(client, db_id, stmt_id);

	test_client_prepare(client, db_id, "COMMIT", &amp;stmt_id);
	test_client_exec(client, db_id, stmt_id, &amp;result);
	test_client_finalize(client, db_id, stmt_id);

	<comment type="block">/* Select all rows from the test table. */</comment>
	test_client_prepare(client, db_id, "SELECT n FROM test", &amp;stmt_id);

	munit_assert_int(stmt_id, ==, 0);

	test_client_query(client, db_id, stmt_id, &amp;rows);

	munit_assert_int(rows.column_count, ==, 1);
	munit_assert_string_equal(rows.column_names[0], "n");

	munit_assert_ptr_not_null(rows.next);
	munit_assert_int(rows.next-&gt;types[0], ==, SQLITE_INTEGER);
	munit_assert_int(*(int64_t *)rows.next-&gt;values[0], ==, 123456789);

	test_client_rows_close(&amp;rows);

	test_client_finalize(client, db_id, stmt_id);

	test_client_close(client);

	free(client);

	return MUNIT_OK;
}

TEST_CASE(exec, multi_thread, NULL)
{
	struct test_server *server = data;
	struct worker *workers;
	struct test_client *client;
	struct test_client_result result;
	char *leader;
	uint64_t heartbeat;
	uint32_t db_id;
	uint32_t stmt_id;

	(void)params;

	int n = 2;
	int i;

	test_server_connect(server, &amp;client);

	<comment type="block">/* Initialize the connection and open a database. */</comment>
	test_client_handshake(client);
	test_client_leader(client, &amp;leader);
	test_client_client(client, &amp;heartbeat);
	test_client_open(client, "test.db", &amp;db_id);
	munit_assert_int(db_id, ==, 0);

	<comment type="block">/* Create a test table and close this client. */</comment>
	test_client_prepare(client, db_id, "CREATE TABLE test (n INT)",
			    &amp;stmt_id);
	test_client_exec(client, db_id, stmt_id, &amp;result);
	test_client_finalize(client, db_id, stmt_id);

	test_client_close(client);

	<comment type="block">/* Spawn the workers. */</comment>
	workers = munit_malloc(n * sizeof *workers);

	for (i = 0; i &lt; n; i++) {
		__worker_start(&amp;(workers[i]), server, i, i * 100000, 4);
	}

	<comment type="block">/* Wait for the workers. */</comment>
	for (i = 0; i &lt; n; i++) {
		__worker_wait(&amp;(workers[i]));
	}

	free(client);
	free(workers);

	return MUNIT_OK;
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
