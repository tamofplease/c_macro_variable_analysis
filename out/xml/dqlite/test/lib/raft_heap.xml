<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/lib/raft_heap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;raft.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fault.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raft_heap.h"</cpp:file></cpp:include>

<struct>struct <name>heapFault</name>
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>test_fault</name></name></type> <name>fault</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>raft_heap</name></name> <modifier>*</modifier></type><name>orig_heap</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>heapFault</name></name></type> <name>faulty</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>faultyMalloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>test_fault_tick</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>faulty</name><operator>.</operator><name>fault</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><call><name><name>faulty</name><operator>.</operator><name>orig_heap</name><operator>-&gt;</operator><name>malloc</name></name><argument_list>(<argument><expr><name><name>faulty</name><operator>.</operator><name>orig_heap</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>faultyFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>faulty</name><operator>.</operator><name>orig_heap</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name><name>faulty</name><operator>.</operator><name>orig_heap</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>faultyCalloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>test_fault_tick</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>faulty</name><operator>.</operator><name>fault</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><call><name><name>faulty</name><operator>.</operator><name>orig_heap</name><operator>-&gt;</operator><name>calloc</name></name><argument_list>(<argument><expr><name><name>faulty</name><operator>.</operator><name>orig_heap</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>nmemb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>faultyRealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>test_fault_tick</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>faulty</name><operator>.</operator><name>fault</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><call><name><name>faulty</name><operator>.</operator><name>orig_heap</name><operator>-&gt;</operator><name>realloc</name></name><argument_list>(<argument><expr><name><name>faulty</name><operator>.</operator><name>orig_heap</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>faultyAlignedAlloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>test_fault_tick</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>faulty</name><operator>.</operator><name>fault</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><call><name><name>faulty</name><operator>.</operator><name>orig_heap</name><operator>-&gt;</operator><name>aligned_alloc</name></name><argument_list>(<argument><expr><name><name>faulty</name><operator>.</operator><name>orig_heap</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>faultyAlignedFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>alignment</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>faulty</name><operator>.</operator><name>orig_heap</name><operator>-&gt;</operator><name>aligned_free</name></name><argument_list>(<argument><expr><name><name>faulty</name><operator>.</operator><name>orig_heap</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_raft_heap_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_heap</name></name> <modifier>*</modifier></type><name>heap</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>heap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>test_fault_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>faulty</name><operator>.</operator><name>fault</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>faulty</name><operator>.</operator><name>orig_heap</name></name> <operator>=</operator> <call><name>raft_heap_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>malloc</name></name> <operator>=</operator> <name>faultyMalloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>faultyFree</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>calloc</name></name> <operator>=</operator> <name>faultyCalloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>realloc</name></name> <operator>=</operator> <name>faultyRealloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>aligned_alloc</name></name> <operator>=</operator> <name>faultyAlignedAlloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>aligned_free</name></name> <operator>=</operator> <name>faultyAlignedFree</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raft_heap_set</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_raft_heap_tear_down</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_heap</name></name> <modifier>*</modifier></type><name>heap</name> <init>= <expr><operator>(</operator>struct <name>raft_heap</name> <operator>*</operator><operator>)</operator><call><name>raft_heap_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raft_heap_set</name><argument_list>(<argument><expr><operator>(</operator>struct <name>raft_heap</name> <operator>*</operator><operator>)</operator><name><name>faulty</name><operator>.</operator><name>orig_heap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>faulty</name><operator>.</operator><name>orig_heap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_raft_heap_fault_config</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repeat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>test_fault_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>faulty</name><operator>.</operator><name>fault</name></name></expr></argument>, <argument><expr><name>delay</name></expr></argument>, <argument><expr><name>repeat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_raft_heap_fault_enable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>test_fault_enable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>faulty</name><operator>.</operator><name>fault</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
