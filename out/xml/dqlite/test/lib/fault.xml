<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/lib/fault.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fault.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"munit.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>test_fault_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_fault</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>countdown</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>enabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_fault_tick</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_fault</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>MUNIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>enabled</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If the initial delay parameter was set to -1, then never fail. This is
     * the most common case. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>MUNIT_LIKELY</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>countdown</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If we did not yet reach 'delay' ticks, then just decrease the countdown.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>countdown</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>countdown</name></name><operator>--</operator></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>countdown</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* We reached 'delay' ticks, let's see how many times we have to trigger the
     * fault, if any. */</comment>

    <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>n</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Trigger the fault forever. */</comment>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Trigger the fault at least this time. */</comment>
        <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>n</name></name><operator>--</operator></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* We reached 'repeat' ticks, let's stop triggering the fault. */</comment>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>countdown</name></name><operator>--</operator></expr>;</expr_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_fault_config</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_fault</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repeat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>countdown</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>repeat</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_fault_enable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_fault</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>enabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
