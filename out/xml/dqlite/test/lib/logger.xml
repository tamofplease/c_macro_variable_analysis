<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/lib/logger.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../include/dqlite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"logger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"munit.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>test_logger_emit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>test_logger</name></name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>level_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>DQLITE_DEBUG</name></expr>:</case>
			<expr_stmt><expr><name>level_name</name> <operator>=</operator> <literal type="string">"DEBUG"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DQLITE_INFO</name></expr>:</case>
			<expr_stmt><expr><name>level_name</name> <operator>=</operator> <literal type="string">"INFO "</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DQLITE_WARN</name></expr>:</case>
			<expr_stmt><expr><name>level_name</name> <operator>=</operator> <literal type="string">"WARN "</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DQLITE_LOG_ERROR</name></expr>:</case>
			<expr_stmt><expr><name>level_name</name> <operator>=</operator> <literal type="string">"ERROR"</literal></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch><empty_stmt>;</empty_stmt>

	<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%2d -&gt; [%s] "</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>level_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wformat-nonliteral"</cpp:literal></cpp:pragma>
	<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
	<expr_stmt><expr><call><name>munit_log</name><argument_list>(<argument><expr><name>MUNIT_LOG_INFO</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">85</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>munit_log</name><argument_list>(<argument><expr><name>MUNIT_LOG_INFO</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_logger_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>logger</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>test_logger</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>emit</name></name> <operator>=</operator> <name>test_logger_emit</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_logger_tear_down</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>logger</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
