<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/lib/heap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fault.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"heap.h"</cpp:file></cpp:include>

<comment type="block">/* This structure is used to encapsulate the global state variables used by
 * malloc() fault simulation. */</comment>
<struct>struct <name>mem_fault</name>
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>test_fault</name></name></type> <name>fault</name></decl>;</decl_stmt> <comment type="block">/* Fault trigger */</comment>
	<decl_stmt><decl><type><name>sqlite3_mem_methods</name></type> <name>m</name></decl>;</decl_stmt>   <comment type="block">/* Actual malloc implementation */</comment>
}</block>;</struct>

<comment type="block">/* We need to use a global variable here because after a sqlite3_mem_methods
 * instance has been installed using sqlite3_config(), and after
 * sqlite3_initialize() has been called, there's no way to retrieve it back with
 * sqlite3_config(). */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>mem_fault</name></name></type> <name>memFault</name></decl>;</decl_stmt>

<comment type="block">/* A version of sqlite3_mem_methods.xMalloc() that includes fault simulation
 * logic.*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mem_fault_malloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_fault_tick</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>memFault</name><operator>.</operator><name>fault</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name><name>memFault</name><operator>.</operator><name>m</name><operator>.</operator><name>xMalloc</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* A version of sqlite3_mem_methods.xRealloc() that includes fault simulation
 * logic. */</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mem_fault_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>old</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_fault_tick</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>memFault</name><operator>.</operator><name>fault</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name><name>memFault</name><operator>.</operator><name>m</name><operator>.</operator><name>xRealloc</name></name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The following method calls are passed directly through to the underlying
 * malloc system:
 *
 *     xFree
 *     xSize
 *     xRoundup
 *     xInit
 *     xShutdown
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mem_fault_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>memFault</name><operator>.</operator><name>m</name><operator>.</operator><name>xFree</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mem_fault_size</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>memFault</name><operator>.</operator><name>m</name><operator>.</operator><name>xSize</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mem_fault_roundup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>memFault</name><operator>.</operator><name>m</name><operator>.</operator><name>xRoundup</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mem_fault_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p</name></expr>;</expr_stmt>
	<return>return <expr><call><name><name>memFault</name><operator>.</operator><name>m</name><operator>.</operator><name>xInit</name></name><argument_list>(<argument><expr><name><name>memFault</name><operator>.</operator><name>m</name><operator>.</operator><name>pAppData</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mem_fault_shutdown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>memFault</name><operator>.</operator><name>m</name><operator>.</operator><name>xShutdown</name></name><argument_list>(<argument><expr><name><name>memFault</name><operator>.</operator><name>m</name><operator>.</operator><name>pAppData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Wrap the given SQLite memory management instance with the faulty memory
 * management interface. By default no faults will be triggered. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mem_wrap</name><parameter_list>(<parameter><decl><type><name>sqlite3_mem_methods</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>sqlite3_mem_methods</name> <modifier>*</modifier></type><name>wrap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>test_fault_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>memFault</name><operator>.</operator><name>fault</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>memFault</name><operator>.</operator><name>m</name></name> <operator>=</operator> <operator>*</operator><name>m</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>wrap</name><operator>-&gt;</operator><name>xMalloc</name></name> <operator>=</operator> <name>mem_fault_malloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wrap</name><operator>-&gt;</operator><name>xFree</name></name> <operator>=</operator> <name>mem_fault_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wrap</name><operator>-&gt;</operator><name>xRealloc</name></name> <operator>=</operator> <name>mem_fault_realloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wrap</name><operator>-&gt;</operator><name>xSize</name></name> <operator>=</operator> <name>mem_fault_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wrap</name><operator>-&gt;</operator><name>xRoundup</name></name> <operator>=</operator> <name>mem_fault_roundup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wrap</name><operator>-&gt;</operator><name>xInit</name></name> <operator>=</operator> <name>mem_fault_init</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wrap</name><operator>-&gt;</operator><name>xShutdown</name></name> <operator>=</operator> <name>mem_fault_shutdown</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>wrap</name><operator>-&gt;</operator><name>pAppData</name></name> <operator>=</operator> <operator>&amp;</operator><name>memFault</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Unwrap the given faulty memory management instance returning the original
 * one. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mem_unwrap</name><parameter_list>(<parameter><decl><type><name>sqlite3_mem_methods</name> <modifier>*</modifier></type><name>wrap</name></decl></parameter>, <parameter><decl><type><name>sqlite3_mem_methods</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>wrap</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>m</name> <operator>=</operator> <name><name>memFault</name><operator>.</operator><name>m</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Get the current number of outstanding malloc()'s without a matching free()
 * and the total number of used memory. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mem_stats</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>malloc_count</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>memory_used</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>watermark</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_status</name><argument_list>(<argument><expr><name>SQLITE_STATUS_MALLOC_COUNT</name></expr></argument>, <argument><expr><name>malloc_count</name></expr></argument>,
			    <argument><expr><operator>&amp;</operator><name>watermark</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>munit_errorf</name><argument_list>(<argument><expr><literal type="string">"can't get malloc count: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_status</name><argument_list>(<argument><expr><name>SQLITE_STATUS_MEMORY_USED</name></expr></argument>, <argument><expr><name>memory_used</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>watermark</name></expr></argument>,
			    <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>munit_errorf</name><argument_list>(<argument><expr><literal type="string">"can't get memory: %s\n:"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Ensure we're starting from a clean memory state with no allocations and
 * optionally inject malloc failures. */</comment>
<function><type><name>void</name></type> <name>test_heap_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>malloc_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>memory_used</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fault_delay</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fault_repeat</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sqlite3_mem_methods</name></type> <name>mem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sqlite3_mem_methods</name></type> <name>mem_fault</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>

	<comment type="block">/* Install the faulty malloc implementation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_GETMALLOC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>munit_errorf</name><argument_list>(<argument><expr><literal type="string">"can't get default mem: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>mem_wrap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mem_fault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_MALLOC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mem_fault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>munit_errorf</name><argument_list>(<argument><expr><literal type="string">"can't set faulty mem: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Check that memory is clean. */</comment>
	<expr_stmt><expr><call><name>mem_stats</name><argument_list>(<argument><expr><operator>&amp;</operator><name>malloc_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>memory_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>malloc_count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>memory_used</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>munit_errorf</name><argument_list>(
		    <argument><expr><literal type="string">"setup memory:\n    bytes: %11d\n    allocations: %5d\n"</literal></expr></argument>,
		    <argument><expr><name>malloc_count</name></expr></argument>, <argument><expr><name>memory_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Optionally inject memory allocation failures. */</comment>
	<expr_stmt><expr><name>fault_delay</name> <operator>=</operator> <call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"mem-fault-delay"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fault_repeat</name> <operator>=</operator> <call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"mem-fault-repeat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert</name><argument_list>(<argument><expr><operator>(</operator><name>fault_delay</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>fault_repeat</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
		     <operator>(</operator><name>fault_delay</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>fault_repeat</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fault_delay</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_heap_fault_config</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>fault_delay</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>fault_repeat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Ensure we're starting leaving a clean memory behind. */</comment>
<function><type><name>void</name></type> <name>test_heap_tear_down</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sqlite3_mem_methods</name></type> <name>mem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sqlite3_mem_methods</name></type> <name>mem_fault</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>malloc_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>memory_used</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>mem_stats</name><argument_list>(<argument><expr><operator>&amp;</operator><name>malloc_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>memory_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>malloc_count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>memory_used</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>munit_errorf</name><argument_list>(
		    <argument><expr><literal type="string">"teardown memory:\n    bytes: %11d\n    allocations: %5d\n"</literal></expr></argument>,
		    <argument><expr><name>memory_used</name></expr></argument>, <argument><expr><name>malloc_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Restore default memory management. */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_GETMALLOC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mem_fault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>munit_errorf</name><argument_list>(<argument><expr><literal type="string">"can't get faulty mem: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>mem_unwrap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mem_fault</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_MALLOC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>munit_errorf</name><argument_list>(<argument><expr><literal type="string">"can't reset default mem: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_heap_fault_config</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repeat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>test_fault_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>memFault</name><operator>.</operator><name>fault</name></name></expr></argument>, <argument><expr><name>delay</name></expr></argument>, <argument><expr><name>repeat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_heap_fault_enable</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>test_fault_enable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>memFault</name><operator>.</operator><name>fault</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
