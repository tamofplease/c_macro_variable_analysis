<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/lib/server.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unistd.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>endpointConnect</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
			   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>,
			   <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>address</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>addr</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_UNIX</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>sun_path</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>address</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>, <argument><expr><operator>!=</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>connect</name><argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa_family_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>address</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_server_setup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_server</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
		       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>id</name></decl></parameter>,
		       <parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><literal type="string">"@%u"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <call><name>test_dir_setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>others</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>s</name><operator>-&gt;</operator><name>others</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_server_stop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_server</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>test_server_client_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_stop</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dqlite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dqlite_node_destroy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dqlite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_server_tear_down</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_server</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>test_server_stop</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_dir_tear_down</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_server_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_server</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_create</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dqlite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_set_bind_address</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dqlite</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_set_connect_func</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dqlite</name></name></expr></argument>, <argument><expr><name>endpointConnect</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_set_network_latency_ms</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dqlite</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>snapshot_threshold_param</name> <init>= <expr><call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>,
							    <argument><expr><name>SNAPSHOT_THRESHOLD_PARAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>snapshot_threshold_param</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>threshold</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>snapshot_threshold_param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_set_snapshot_params</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dqlite</name></name></expr></argument>, <argument><expr><name>threshold</name></expr></argument>, <argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>disk_mode_param</name> <init>= <expr><call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"disk_mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>disk_mode_param</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>disk_mode</name> <init>= <expr><operator>(</operator><name>bool</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>disk_mode_param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>disk_mode</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_enable_disk_mode</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dqlite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_node_start</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dqlite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_server_client_connect</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>test_server_client</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_server</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>client</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_server_client_reconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_server</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>test_server_client_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_server_client_connect</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_server_client_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_server</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>endpointConnect</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>clientInit</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_server_client_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_server</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>s</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>clientClose</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setOther</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_server</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>test_server</name></name> <modifier>*</modifier></type><name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name><name>other</name><operator>-&gt;</operator><name>id</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>munit_assert_ptr_null</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>others</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>others</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>other</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>test_server_network</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_server</name></name> <modifier>*</modifier></type><name>servers</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>n_servers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>j</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_servers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n_servers</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>test_server</name></name> <modifier>*</modifier></type><name>server</name> <init>= <expr><operator>&amp;</operator><name><name>servers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>struct</name> <name>test_server</name></name> <modifier>*</modifier></type><name>other</name> <init>= <expr><operator>&amp;</operator><name><name>servers</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>j</name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>setOther</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
