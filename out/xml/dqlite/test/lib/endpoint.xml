<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/lib/endpoint.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"endpoint.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getFamily</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>family</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>params</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>family</name> <operator>=</operator> <call><name>munit_parameters_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>TEST_ENDPOINT_FAMILY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>family</name> <operator>=</operator> <literal type="string">"unix"</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><literal type="string">"tcp"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>AF_INET</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>AF_UNIX</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>munit_errorf</name><argument_list>(<argument><expr><literal type="string">"unexpected socket family: %s"</literal></expr></argument>, <argument><expr><name>family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_endpoint_setup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_endpoint</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>address</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socklen_t</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <call><name>getFamily</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initialize the appropriate socket address structure, depending on the
	 * selected socket family. */</comment>
	<switch>switch <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>family</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>AF_INET</name></expr>:</case>
			<comment type="block">/* TCP socket on loopback device */</comment>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>in_address</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>e</name><operator>-&gt;</operator><name>in_address</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>in_address</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>in_address</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>inet_addr</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>in_address</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* Get a random free port */</comment>
			<expr_stmt><expr><name>address</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>in_address</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof <name><name>e</name><operator>-&gt;</operator><name>in_address</name></name></sizeof></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AF_UNIX</name></expr>:</case>
			<comment type="block">/* Abstract Unix socket */</comment>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>un_address</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>e</name><operator>-&gt;</operator><name>un_address</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>un_address</name><operator>.</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_UNIX</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>un_address</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Random address */</comment>
			<expr_stmt><expr><name>address</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>un_address</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof <name><name>e</name><operator>-&gt;</operator><name>un_address</name></name></sizeof></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>munit_errorf</name><argument_list>(<argument><expr><literal type="string">"unexpected socket family: %d"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<comment type="block">/* Create the listener fd. */</comment>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>family</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>munit_errorf</name><argument_list>(<argument><expr><literal type="string">"socket(): %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Bind the listener fd. */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>bind</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>munit_errorf</name><argument_list>(<argument><expr><literal type="string">"bind(): %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Get the actual addressed assigned by the kernel and save it back in
	 * the relevant struct server field (pointed to by address). */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>getsockname</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>munit_errorf</name><argument_list>(<argument><expr><literal type="string">"getsockname(): %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Render the endpoint address. */</comment>
	<switch>switch <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>family</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>AF_INET</name></expr>:</case>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:%d"</literal></expr></argument>,
				<argument><expr><call><name>htons</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>in_address</name><operator>.</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AF_UNIX</name></expr>:</case>
			<comment type="block">/* TODO */</comment>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_endpoint_tear_down</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_endpoint</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test_endpoint_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_endpoint</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>address</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socklen_t</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>family</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>AF_INET</name></expr>:</case>
			<expr_stmt><expr><name>address</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>in_address</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof <name><name>e</name><operator>-&gt;</operator><name>in_address</name></name></sizeof></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AF_UNIX</name></expr>:</case>
			<expr_stmt><expr><name>address</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>un_address</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof <name><name>e</name><operator>-&gt;</operator><name>un_address</name></name></sizeof></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="block">/* Create the socket. */</comment>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>family</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>munit_errorf</name><argument_list>(<argument><expr><literal type="string">"socket(): %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Connect to the server */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>connect</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ECONNREFUSED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>munit_errorf</name><argument_list>(<argument><expr><literal type="string">"connect(): %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test_endpoint_accept</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_endpoint</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>in_address</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>un_address</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>address</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socklen_t</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>family</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>AF_INET</name></expr>:</case>
			<expr_stmt><expr><name>address</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>in_address</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof <name>in_address</name></sizeof></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AF_UNIX</name></expr>:</case>
			<expr_stmt><expr><name>address</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>un_address</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof <name>un_address</name></sizeof></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="block">/* Accept the client connection. */</comment>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Check if the endpoint has been closed, so this is benign. */</comment>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EBADF</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EINVAL</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ENOTSOCK</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>munit_errorf</name><argument_list>(<argument><expr><literal type="string">"accept(): %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Set non-blocking mode */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>munit_errorf</name><argument_list>(<argument><expr><literal type="string">"set non-blocking mode: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_endpoint_pair</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_endpoint</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>client</name> <operator>=</operator> <call><name>test_endpoint_connect</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>server</name> <operator>=</operator> <call><name>test_endpoint_accept</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>test_endpoint_address</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>test_endpoint</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>address</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>test_endpoint_family_values</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"tcp"</literal></expr>, <expr><literal type="string">"unix"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
</unit>
