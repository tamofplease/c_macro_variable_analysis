<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/unit/test_gateway.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../include/dqlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/gateway.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/response.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/tuple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/cluster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/raft_heap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/runner.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>TEST_MODULE</name><argument_list>(<argument><expr><name>gateway</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Fixture.
 *
 ******************************************************************************/</comment>

<comment type="block">/* Context for a gateway handle request. */</comment>
<struct>struct <name>context</name>
<block>{
	<decl_stmt><decl><type><name>bool</name></type> <name>invoked</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* Drive a single gateway. Each gateway is associated with a different raft
 * node. */</comment>
<struct>struct <name>connection</name>
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name></type> <name>gateway</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>buffer</name></name></type> <name>buf1</name></decl>;</decl_stmt>   <comment type="block">/* Request payload */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>buffer</name></name></type> <name>buf2</name></decl>;</decl_stmt>   <comment type="block">/* Response payload */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name></decl>;</decl_stmt> <comment type="block">/* Response read cursor */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>handle</name></name></type> <name>handle</name></decl>;</decl_stmt> <comment type="block">/* Async handle request */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>context</name></name></type> <name>context</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXTURE</name></cpp:macro>                                   \
	<cpp:value>FIXTURE_CLUSTER;                          \
	struct connection connections[N_SERVERS]; \
	struct gateway *gateway;                  \
	struct buffer *buf1;                      \
	struct cursor *cursor;                    \
	struct buffer *buf2;                      \
	struct handle *handle;                    \
	struct context *context;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETUP</name></cpp:macro>                                                           \
	<cpp:value>unsigned i;                                                     \
	int rc;                                                         \
	SETUP_CLUSTER(V2);						\
	for (i = 0; i &lt; N_SERVERS; i++) {                               \
		struct connection *c = &amp;f-&gt;connections[i];              \
		struct config *config;                                  \
		config = CLUSTER_CONFIG(i);                             \
		config-&gt;page_size = 512;                                \
		gateway__init(&amp;c-&gt;gateway, config, CLUSTER_REGISTRY(i), \
			      CLUSTER_RAFT(i));                         \
		c-&gt;handle.data = &amp;c-&gt;context;                           \
		rc = buffer__init(&amp;c-&gt;buf1);                            \
		munit_assert_int(rc, ==, 0);                            \
		rc = buffer__init(&amp;c-&gt;buf2);                            \
		munit_assert_int(rc, ==, 0);                            \
	}                                                               \
	test_raft_heap_setup(params, user_data);                        \
	SELECT(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEAR_DOWN</name></cpp:macro>                                          \
	<cpp:value>unsigned i;                                        \
	test_raft_heap_tear_down(data);                    \
	for (i = 0; i &lt; N_SERVERS; i++) {                  \
		struct connection *c = &amp;f-&gt;connections[i]; \
		gateway__close(&amp;c-&gt;gateway);               \
		buffer__close(&amp;c-&gt;buf1);                   \
		buffer__close(&amp;c-&gt;buf2);                   \
	}                                                  \
	TEAR_DOWN_CLUSTER;</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handleCb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>context</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>invoked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Helper macros.
 *
 ******************************************************************************/</comment>

<comment type="block">/* Select which gateway to use for performing requests. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECT</name><parameter_list>(<parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro>                                \
	<cpp:value>f-&gt;gateway = &amp;f-&gt;connections[I].gateway; \
	f-&gt;buf1 = &amp;f-&gt;connections[I].buf1;       \
	f-&gt;buf2 = &amp;f-&gt;connections[I].buf2;       \
	f-&gt;cursor = &amp;f-&gt;connections[I].cursor;   \
	f-&gt;context = &amp;f-&gt;connections[I].context; \
	f-&gt;handle = &amp;f-&gt;connections[I].handle</cpp:value></cpp:define>

<comment type="block">/* Allocate the payload buffer, encode a request of the given lower case name
 * and initialize the fixture cursor. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE</name><parameter_list>(<parameter><type><name>REQUEST</name></type></parameter>, <parameter><type><name>LOWER</name></type></parameter>)</parameter_list></cpp:macro>                                  \
	<cpp:value>{                                                       \
		size_t n2 = request_##LOWER##__sizeof(REQUEST); \
		void *cursor;                                   \
		buffer__reset(f-&gt;buf1);                         \
		cursor = buffer__advance(f-&gt;buf1, n2);          \
		munit_assert_ptr_not_null(cursor);              \
		request_##LOWER##__encode(REQUEST, &amp;cursor);    \
	}</cpp:value></cpp:define>

<comment type="block">/* Encode N parameters with the given values in the given format */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_PARAMS</name><parameter_list>(<parameter><type><name>N</name></type></parameter>, <parameter><type><name>VALUES</name></type></parameter>, <parameter><type><name>FORMAT</name></type></parameter>)</parameter_list></cpp:macro>                                      \
	<cpp:value>{                                                                     \
		struct tuple_encoder encoder;                                 \
		unsigned long i2;                                             \
		int rc2;                                                      \
		rc2 =                                                         \
		    tuple_encoder__init(&amp;encoder, N, FORMAT, f-&gt;buf1); \
		munit_assert_int(rc2, ==, 0);                                 \
		for (i2 = 0; i2 &lt; N; i2++) {                                  \
			rc2 = tuple_encoder__next(&amp;encoder, &amp;((VALUES)[i2])); \
			munit_assert_int(rc2, ==, 0);                         \
		}                                                             \
	}</cpp:value></cpp:define>

<comment type="block">/* Decode a response of the given lower/upper case name using the buffer that
 * was written by the gateway. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODE</name><parameter_list>(<parameter><type><name>RESPONSE</name></type></parameter>, <parameter><type><name>LOWER</name></type></parameter>)</parameter_list></cpp:macro>                                        \
	<cpp:value>{                                                              \
		int rc2;                                               \
		rc2 = response_##LOWER##__decode(f-&gt;cursor, RESPONSE); \
		munit_assert_int(rc2, ==, 0);                          \
	}</cpp:value></cpp:define>

<comment type="block">/* Decode a row with N columns filling the given values. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODE_ROW</name><parameter_list>(<parameter><type><name>N</name></type></parameter>, <parameter><type><name>VALUES</name></type></parameter>)</parameter_list></cpp:macro>                                                  \
	<cpp:value>{                                                                      \
		struct tuple_decoder decoder;                                  \
		int i2;                                                        \
		int rc2;                                                       \
		rc2 = tuple_decoder__init(&amp;decoder, N, TUPLE__ROW, f-&gt;cursor); \
		munit_assert_int(rc2, ==, 0);                                  \
		for (i2 = 0; i2 &lt; N; i2++) {                                   \
			rc2 = tuple_decoder__next(&amp;decoder, &amp;((VALUES)[i2]));  \
			munit_assert_int(rc2, ==, 0);                          \
		}                                                              \
	}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_SCHEMA_STATUS</name><parameter_list>(<parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>SCHEMA</name></type></parameter>, <parameter><type><name>RC</name></type></parameter>)</parameter_list></cpp:macro>                    \
	<cpp:value>{                                                         \
		int rc2;                                          \
		f-&gt;handle-&gt;cursor.p = buffer__cursor(f-&gt;buf1, 0); \
		f-&gt;handle-&gt;cursor.cap = buffer__offset(f-&gt;buf1);  \
		buffer__reset(f-&gt;buf2);                           \
		f-&gt;context-&gt;invoked = false;                      \
		f-&gt;context-&gt;status = -1;                          \
		f-&gt;context-&gt;type = -1;                            \
		rc2 = gateway__handle(f-&gt;gateway, f-&gt;handle,      \
				      TYPE, SCHEMA,               \
				      f-&gt;buf2, handleCb);         \
		munit_assert_int(rc2, ==, RC);                    \
	}</cpp:value></cpp:define>

<comment type="block">/* Handle a request of the given type and check for the given return code. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_STATUS</name><parameter_list>(<parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>RC</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HANDLE_SCHEMA_STATUS(TYPE, 0, RC)</cpp:value></cpp:define>

<comment type="block">/* Handle a request of the given type and check that no error occurs. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE</name><parameter_list>(<parameter><type><name>TYPE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HANDLE_STATUS(DQLITE_REQUEST_##TYPE, 0)</cpp:value></cpp:define>

<comment type="block">/* Open a leader connection against the "test" database */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPEN</name></cpp:macro>                              \
	<cpp:value>{                                 \
		struct request_open open; \
		open.filename = "test";   \
		open.vfs = "";            \
		ENCODE(&amp;open, open);      \
		HANDLE(OPEN);             \
		ASSERT_CALLBACK(0, DB);   \
	}</cpp:value></cpp:define>

<comment type="block">/* Prepare a statement. The ID will be saved in stmt_id. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREPARE</name><parameter_list>(<parameter><type><name>SQL</name></type></parameter>)</parameter_list></cpp:macro>                            \
	<cpp:value>{                                       \
		struct request_prepare prepare; \
		struct response_stmt stmt;      \
		prepare.db_id = 0;              \
		prepare.sql = SQL;              \
		ENCODE(&amp;prepare, prepare);      \
		HANDLE(PREPARE);                \
		WAIT;                           \
		ASSERT_CALLBACK(0, STMT);       \
		DECODE(&amp;stmt, stmt);            \
		stmt_id = stmt.id;              \
	}</cpp:value></cpp:define>

<comment type="block">/* Finalize the statement with the given ID. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FINALIZE</name><parameter_list>(<parameter><type><name>STMT_ID</name></type></parameter>)</parameter_list></cpp:macro>                         \
	<cpp:value>{                                         \
		struct request_finalize finalize; \
		finalize.db_id = 0;               \
		finalize.stmt_id = STMT_ID;       \
		ENCODE(&amp;finalize, finalize);      \
		HANDLE(FINALIZE);                 \
		ASSERT_CALLBACK(0, EMPTY);        \
	}</cpp:value></cpp:define>

<comment type="block">/* Submit a request to execute the given statement. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXEC_SUBMIT</name><parameter_list>(<parameter><type><name>STMT_ID</name></type></parameter>)</parameter_list></cpp:macro>              \
	<cpp:value>{                                 \
		struct request_exec exec; \
		exec.db_id = 0;           \
		exec.stmt_id = STMT_ID;   \
		ENCODE(&amp;exec, exec);      \
		HANDLE(EXEC);             \
	}</cpp:value></cpp:define>

<comment type="block">/* Submit a request to execute the given statement. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXEC_SQL_SUBMIT</name><parameter_list>(<parameter><type><name>SQL</name></type></parameter>)</parameter_list></cpp:macro>                      \
	<cpp:value>{                                         \
		struct request_exec_sql exec_sql; \
		exec_sql.db_id = 0;               \
		exec_sql.sql = SQL;               \
		ENCODE(&amp;exec_sql, exec_sql);      \
		HANDLE(EXEC_SQL);                 \
	}</cpp:value></cpp:define>

<comment type="block">/* Submit a request to execute the given statement. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUERY_SQL_SUBMIT</name><parameter_list>(<parameter><type><name>SQL</name></type></parameter>)</parameter_list></cpp:macro>                       \
	<cpp:value>{                                           \
		struct request_query_sql query_sql; \
		query_sql.db_id = 0;                \
		query_sql.sql = SQL;                \
		ENCODE(&amp;query_sql, query_sql);      \
		HANDLE(QUERY_SQL);                  \
	}</cpp:value></cpp:define>

<comment type="block">/* Wait for the last request to complete */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAIT</name></cpp:macro>                                            \
	<cpp:value>{                                               \
		unsigned _i;                            \
		for (_i = 0; _i &lt; 60; _i++) {           \
			CLUSTER_STEP;                   \
			if (f-&gt;context-&gt;invoked) {      \
				break;                  \
			}                               \
		}                                       \
		munit_assert_true(f-&gt;context-&gt;invoked); \
	}</cpp:value></cpp:define>

<comment type="block">/* Prepare and exec a statement. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXEC</name><parameter_list>(<parameter><type><name>SQL</name></type></parameter>)</parameter_list></cpp:macro>                               \
	<cpp:value>{                                       \
		uint64_t _stmt_id;              \
		struct request_prepare prepare; \
		struct response_stmt stmt;      \
		prepare.db_id = 0;              \
		prepare.sql = SQL;              \
		ENCODE(&amp;prepare, prepare);      \
		HANDLE(PREPARE);                \
		WAIT;                           \
		ASSERT_CALLBACK(0, STMT);       \
		DECODE(&amp;stmt, stmt);            \
		_stmt_id = stmt.id;             \
		EXEC_SUBMIT(_stmt_id);          \
		WAIT;                           \
		ASSERT_CALLBACK(0, RESULT);     \
		FINALIZE(_stmt_id);             \
	}</cpp:value></cpp:define>

<comment type="block">/* Execute a pragma statement to lowers SQLite's page cache size, in order to
 * force it to write uncommitted dirty pages to the WAL and hance trigger calls
 * to the xFrames hook with non-commit batches. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOWER_CACHE_SIZE</name></cpp:macro> <cpp:value>EXEC("PRAGMA cache_size = 1")</cpp:value></cpp:define>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Assertions.
 *
 ******************************************************************************/</comment>

<comment type="block">/* Assert that the handle callback has been invoked with the given status and
 * response type. Also, initialize the fixture's cursor to read the response
 * buffer. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_CALLBACK</name><parameter_list>(<parameter><type><name>STATUS</name></type></parameter>, <parameter><type><name>UPPER</name></type></parameter>)</parameter_list></cpp:macro>                                   \
	<cpp:value>munit_assert_true(f-&gt;context-&gt;invoked);                          \
	munit_assert_int(f-&gt;context-&gt;status, ==, STATUS);                \
	munit_assert_int(f-&gt;context-&gt;type, ==, DQLITE_RESPONSE_##UPPER); \
	f-&gt;cursor-&gt;p = buffer__cursor(f-&gt;buf2, 0);                       \
	f-&gt;cursor-&gt;cap = buffer__offset(f-&gt;buf2);                        \
	buffer__reset(f-&gt;buf2);                                          \
	f-&gt;context-&gt;invoked = false;</cpp:value></cpp:define>

<comment type="block">/* Assert that the failure response generated by the gateway matches the given
 * details. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_FAILURE</name><parameter_list>(<parameter><type><name>CODE</name></type></parameter>, <parameter><type><name>MESSAGE</name></type></parameter>)</parameter_list></cpp:macro>                                \
	<cpp:value>{                                                            \
		struct response_failure failure;                     \
		int rc2;                                             \
		rc2 = response_failure__decode(f-&gt;cursor, &amp;failure); \
		munit_assert_int(rc2, ==, 0);                        \
		munit_assert_int(failure.code, ==, CODE);            \
		munit_assert_string_equal(failure.message, MESSAGE); \
	}</cpp:value></cpp:define>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * leader
 *
 ******************************************************************************/</comment>

<struct>struct <name>leader_fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_leader</name></name></type> <name>request</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_server</name></name></type> <name>response</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>leader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TEST_SETUP</name><argument_list>(<argument>leader</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>leader_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>
<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>leader</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>leader_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* If the leader is not available, an empty string is returned. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>leader</argument>, <argument>not_available</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>leader_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>leader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>LEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* The leader is the same node serving the request. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>leader</argument>, <argument>same_node</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>leader_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>leader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>LEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* The leader is a different node than the one serving the request. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>leader</argument>, <argument>other_node</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>leader_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>leader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>LEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * open
 *
 ******************************************************************************/</comment>

<struct>struct <name>open_fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_open</name></name></type> <name>request</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_db</name></name></type> <name>response</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>open</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TEST_SETUP</name><argument_list>(<argument>open</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>open_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>
<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>open</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>open_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Successfully open a database connection. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>open</argument>, <argument>success</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>open_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>filename</name></name> <operator>=</operator> <literal type="string">"test"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>vfs</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>open</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<expr_stmt><expr><call><name>TEST_GROUP</name><argument_list>(<argument><expr><name>open</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Attempting to open two databases on the same gateway results in an error. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>open</argument>, <argument>error</argument>, <argument>twice</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>open_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>filename</name></name> <operator>=</operator> <literal type="string">"test"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>vfs</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>open</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>open</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><name>SQLITE_BUSY</name></expr></argument>,
		       <argument><expr><literal type="string">"a database for this connection is already open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * prepare
 *
 ******************************************************************************/</comment>

<struct>struct <name>prepare_fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_prepare</name></name></type> <name>request</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_stmt</name></name></type> <name>response</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>prepare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TEST_SETUP</name><argument_list>(<argument>prepare</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>prepare_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>
<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>prepare</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>prepare_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Successfully prepare a statement. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>prepare</argument>, <argument>success</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>prepare_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">"CREATE TABLE test (n INT)"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>prepare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>PREPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>WAIT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>STMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Prepare an empty statement. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>prepare</argument>, <argument>empty1</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>prepare_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>prepare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>PREPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>WAIT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"empty statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Prepare an empty statement. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>prepare</argument>, <argument>empty2</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>prepare_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">" -- This is a comment"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>prepare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>PREPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>WAIT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"empty statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Prepare an invalid statement. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>prepare</argument>, <argument>invalid</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>prepare_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">"NOT SQL"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>prepare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>PREPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>WAIT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><name>SQLITE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"near \"NOT\": syntax error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Prepare a statement and close the gateway early. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>prepare</argument>, <argument>closing</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>prepare_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">"CREATE TABLE test (n INT)"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>prepare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>PREPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Submit a prepare request that triggers a failed barrier operation. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>prepare</argument>, <argument>barrier_error</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>prepare_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<comment type="block">/* Set up an uncommitted exec operation */</comment>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SUBMIT</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CLUSTER_DEPOSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Submit a prepare request, forcing a barrier, which fails */</comment>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">"SELECT n FROM test"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>prepare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* We rely on leader__barrier (called by handle_prepare) attempting
	 * an allocation using raft_malloc. */</comment>
	<expr_stmt><expr><call><name>test_raft_heap_fault_config</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_raft_heap_fault_enable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE_STATUS</name><argument_list>(<argument><expr><name>DQLITE_REQUEST_PREPARE</name></expr></argument>, <argument><expr><name>RAFT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Submit a prepare request to a non-leader node. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>prepare</argument>, <argument>non_leader</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>prepare_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SELECT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">"CREATE TABLE test (n INT)"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>prepare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>PREPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>WAIT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><name>SQLITE_IOERR_NOT_LEADER</name></expr></argument>, <argument><expr><literal type="string">"not leader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * exec
 *
 ******************************************************************************/</comment>

<struct>struct <name>exec_fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_exec</name></name></type> <name>request</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_result</name></name></type> <name>response</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TEST_SETUP</name><argument_list>(<argument>exec</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>
<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>exec</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Successfully execute a simple statement with no parameters. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>simple</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>stmt_id</name></name> <operator>=</operator> <name>stmt_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_APPLIED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>last_insert_id</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>rows_affected</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Successfully execute a statement with a one parameter. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>one_param</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create the test table */</comment>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Insert a row with one parameter */</comment>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test VALUES (?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>stmt_id</name></name> <operator>=</operator> <name>stmt_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SQLITE_INTEGER</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE_PARAMS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>TUPLE__PARAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_APPLIED</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>last_insert_id</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>rows_affected</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Successfully execute a statement with a blob parameter. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>blob</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_query</name></name></type> <name>query</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'h'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>column</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create the test table */</comment>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (data BLOB)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Insert a row with one parameter */</comment>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test VALUES (?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>stmt_id</name></name> <operator>=</operator> <name>stmt_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SQLITE_BLOB</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>blob</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>blob</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof <name>buf</name></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE_PARAMS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>TUPLE__PARAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_APPLIED</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>last_insert_id</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>rows_affected</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"SELECT data FROM test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>query</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>query</name><operator>.</operator><name>stmt_id</name></name> <operator>=</operator> <name>stmt_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uint64__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>text__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DECODE_ROW</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>blob</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>blob</name><operator>.</operator><name>base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>blob</name><operator>.</operator><name>base</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* The server is not the leader anymore when the first frames hook for a
 * non-commit frames batch fires. The same leader gets re-elected. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>frames_not_leader_1st_non_commit_re_elected</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Accumulate enough dirty data to fill the page cache */</comment>
	<expr_stmt><expr><name>LOWER_CACHE_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">162</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Trigger a page cache flush to the WAL, which fails because we are not
	 * leader anymore */</comment>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CLUSTER_DEPOSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SUBMIT</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><name>SQLITE_IOERR_NOT_LEADER</name></expr></argument>, <argument><expr><literal type="string">"not leader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Re-elect ourselves and re-try */</comment>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* The server is not the leader anymore when the first frames hook for a
 * non-commit frames batch fires. Another leader gets re-elected. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>frames_not_leader_1st_non_commit_other_elected</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Accumulate enough dirty data to fill the page cache */</comment>
	<expr_stmt><expr><name>LOWER_CACHE_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">162</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Trigger a page cache flush to the WAL, which fails because we are not
	 * leader anymore */</comment>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CLUSTER_DEPOSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SUBMIT</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><name>SQLITE_IOERR_NOT_LEADER</name></expr></argument>, <argument><expr><literal type="string">"not leader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Elect another leader and re-try */</comment>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SELECT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* The server is not the leader anymore when the second frames hook for a
 * non-commit frames batch fires. The same leader gets re-elected. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>frames_not_leader_2nd_non_commit_re_elected</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Accumulate enough dirty data to fill the page cache a first time,
	 * flush it and then fill it a second time. */</comment>
	<expr_stmt><expr><name>LOWER_CACHE_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">234</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Trigger a second page cache flush to the WAL, which fails because we
	 * are not leader anymore */</comment>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CLUSTER_DEPOSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SUBMIT</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><name>SQLITE_IOERR_NOT_LEADER</name></expr></argument>, <argument><expr><literal type="string">"not leader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Re-elect ourselves and re-try */</comment>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* The gateway is closed while a raft commit is in flight. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>close_while_in_flight</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Accumulate enough dirty data to fill the page cache and trigger
	 * an apply request. */</comment>
	<expr_stmt><expr><name>LOWER_CACHE_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">162</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Trigger a second page cache flush to the WAL, and abort before it's
	 * done. */</comment>
	<expr_stmt><expr><call><name>EXEC_SQL_SUBMIT</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* The server is not the leader anymore when the second frames hook for a
 * non-commit frames batch fires. Another leader gets elected. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>frames_not_leader_2nd_non_commit_other_elected</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Accumulate enough dirty data to fill the page cache a first time,
	 * flush it and then fill it a second time. */</comment>
	<expr_stmt><expr><name>LOWER_CACHE_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">234</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Trigger a second page cache flush to the WAL, which fails because we
	 * are not leader anymore */</comment>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CLUSTER_DEPOSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SUBMIT</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Elect another leader and re-try */</comment>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SELECT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* The server loses leadership after trying to apply the first Frames command
 * for a non-commit frames batch. The same leader gets re-elected. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>frames_leadership_lost_1st_non_commit_re_elected</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Accumulate enough dirty data to fill the page cache */</comment>
	<expr_stmt><expr><name>LOWER_CACHE_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">162</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Trigger a page cache flush to the WAL */</comment>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Try to commit */</comment>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SUBMIT</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CLUSTER_DEPOSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><name>SQLITE_IOERR_LEADERSHIP_LOST</name></expr></argument>, <argument><expr><literal type="string">"disk I/O error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Re-elect ourselves and re-try */</comment>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* The server is not the leader anymore when the undo hook for a writing
 * transaction fires. The same leader gets re-elected. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>undo_not_leader_pending_re_elected</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Accumulate enough dirty data to fill the page cache a first time */</comment>
	<expr_stmt><expr><name>LOWER_CACHE_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">163</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Trying to rollback fails because we are not leader anymore */</comment>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"ROLLBACK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CLUSTER_DEPOSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SUBMIT</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><name>SQLITE_IOERR_NOT_LEADER</name></expr></argument>, <argument><expr><literal type="string">"not leader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Re-elect ourselves and re-try */</comment>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* The server is not the leader anymore when the undo hook for a writing
 * transaction fires. Another leader gets elected. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>undo_not_leader_pending_other_elected</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Accumulate enough dirty data to fill the page cache a first time */</comment>
	<expr_stmt><expr><name>LOWER_CACHE_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">163</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Trying to rollback fails because we are not leader anymore */</comment>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"ROLLBACK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CLUSTER_DEPOSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SUBMIT</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><name>SQLITE_IOERR_NOT_LEADER</name></expr></argument>, <argument><expr><literal type="string">"not leader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Re-elect ourselves and re-try */</comment>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SELECT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* A follower remains behind and needs to restore state from a snapshot. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>restore</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_query</name></name></type> <name>request</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_rows</name></name></type> <name>response</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>column</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_SNAPSHOT_THRESHOLD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_SNAPSHOT_TRAILING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_DISCONNECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_RECONNECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_APPLIED</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* TODO: the query below fails because we can exec queries only against
	 * the leader. */</comment>
	<return>return <expr><name>MUNIT_SKIP</name></expr>;</return>

	<comment type="block">/* The follower contains the expected rows. */</comment>
	<expr_stmt><expr><call><name>SELECT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"SELECT n FROM test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>stmt_id</name></name> <operator>=</operator> <name>stmt_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uint64__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>text__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DECODE_ROW</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DECODE_ROW</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>response</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ullong</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>eof</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_RESPONSE_ROWS_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Close the gateway early while an exec barrier is in flight. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>barrier_closing</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>, <decl><type ref="prev"/><name>prev_stmt_id</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Save this stmt to exec later */</comment>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev_stmt_id</name> <operator>=</operator> <name>stmt_id</name></expr>;</expr_stmt>

	<comment type="block">/* Submit exec request, then depose the leader before it commits */</comment>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SUBMIT</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CLUSTER_DEPOSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Now try to exec the other stmt (triggering a barrier) and close early */</comment>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SUBMIT</name><argument_list>(<argument><expr><name>prev_stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Send an exec request in the new (schema version 1) format, which
 * supports larger numbers of parameters. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>manyParams</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">20000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>num_exec_params</name> <init>= <expr><literal type="number">999</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name> <modifier>*</modifier></type><name>values</name> <init>= <expr><call><name>munit_calloc</name><argument_list>(<argument><expr><name>num_exec_params</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"DELETE FROM test WHERE n = ?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_exec_params</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">" OR n = ?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_exec_params</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>SQLITE_INTEGER</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>integer</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>stmt_id</name></name> <operator>=</operator> <name>stmt_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE_PARAMS</name><argument_list>(<argument><expr><name>num_exec_params</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>TUPLE__PARAMS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE_SCHEMA_STATUS</name><argument_list>(<argument><expr><name>DQLITE_REQUEST_EXEC</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>WAIT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FINALIZE</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * query
 *
 ******************************************************************************/</comment>

<struct>struct <name>query_fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_query</name></name></type> <name>request</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_rows</name></name></type> <name>response</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TEST_SETUP</name><argument_list>(<argument>query</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT, data BLOB)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>
<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>query</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Successfully query a simple statement with no parameters and yielding no
 * rows. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query</argument>, <argument>simple</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>column</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"SELECT n FROM test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>stmt_id</name></name> <operator>=</operator> <name>stmt_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uint64__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>text__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ullong</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>eof</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_RESPONSE_ROWS_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Successfully query a simple statement with no parameters yielding one row. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query</argument>, <argument>one_row</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>column</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(666)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"SELECT n FROM test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>stmt_id</name></name> <operator>=</operator> <name>stmt_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uint64__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>text__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DECODE_ROW</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ullong</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>eof</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_RESPONSE_ROWS_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Calculate max amount of rows that can fit in 1 response buffer.
 * A response buffer has _SC_PAGESIZE size.
 * A response consists of n tuples each row_sz in size
 * and an 8B EOF marker. */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>max_rows_buffer</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>tuple_row_sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>buf_sz</name> <init>= <expr><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_PAGESIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>eof_sz</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><name>buf_sz</name> <operator>-</operator> <name>eof_sz</name><operator>)</operator> <operator>/</operator> <name>tuple_row_sz</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Successfully query that yields a large number of rows that need to be split
 * into several reponses. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query</argument>, <argument>large</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>column</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>finished</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* 16 = 8B header + 8B value (int) */</comment>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n_rows_buffer</name> <init>= <expr><call><name>max_rows_buffer</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Insert 1 less than 2 response buffers worth of rows, otherwise we need
	 * 3 responses, of which the last one contains no rows. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>n_rows_buffer</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(123)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"SELECT n FROM test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>stmt_id</name></name> <operator>=</operator> <name>stmt_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uint64__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>text__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* First response contains max amount of rows */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_rows_buffer</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>DECODE_ROW</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ullong</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>eof</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_RESPONSE_ROWS_PART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>gateway__resume</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>gateway</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>finished</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_false</name><argument_list>(<argument><expr><name>finished</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uint64__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>text__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Second, and last, response contains 1 less than maximum amount */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_rows_buffer</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>DECODE_ROW</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ullong</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>eof</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_RESPONSE_ROWS_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>gateway__resume</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>gateway</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>finished</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_true</name><argument_list>(<argument><expr><name>finished</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Perform a query using a prepared statement with parameters */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query</argument>, <argument>params</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(3)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(4)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"SELECT n FROM test WHERE n &gt; ? AND n &lt; ?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>stmt_id</name></name> <operator>=</operator> <name>stmt_id</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>SQLITE_INTEGER</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>integer</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>SQLITE_INTEGER</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>integer</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE_PARAMS</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>TUPLE__PARAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Interrupt a large query. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query</argument>, <argument>interrupt</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_interrupt</name></name></type> <name>interrupt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>column</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* 16 = 8B header + 8B value (int) */</comment>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n_rows_buffer</name> <init>= <expr><call><name>max_rows_buffer</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Insert 2 response buffers worth of rows */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>n_rows_buffer</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(123)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"SELECT n FROM test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>stmt_id</name></name> <operator>=</operator> <name>stmt_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uint64__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>text__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_rows_buffer</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>DECODE_ROW</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ullong</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>eof</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_RESPONSE_ROWS_PART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>interrupt</name></expr></argument>, <argument><expr><name>interrupt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>INTERRUPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Close the gateway during a large query. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query</argument>, <argument>largeClose</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>column</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* 16 = 8B header + 8B value (int) */</comment>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n_rows_buffer</name> <init>= <expr><call><name>max_rows_buffer</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Insert 2 response buffers worth of rows */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>n_rows_buffer</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(123)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"SELECT n FROM test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>stmt_id</name></name> <operator>=</operator> <name>stmt_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uint64__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>text__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_rows_buffer</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>DECODE_ROW</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ullong</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>eof</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_RESPONSE_ROWS_PART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Submit a query request right after the server has been re-elected and needs
 * to catch up with logs. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query</argument>, <argument>barrier</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SUBMIT</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CLUSTER_DEPOSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Re-elect ourselves and issue a query request */</comment>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"SELECT n FROM test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>stmt_id</name></name> <operator>=</operator> <name>stmt_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>WAIT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Submit a query request right after the server has been re-elected and needs
 * to catch up with logs, but close early */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query</argument>, <argument>barrierInFlightQuery</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SUBMIT</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CLUSTER_DEPOSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Re-elect ourselves and issue a query request */</comment>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"SELECT n FROM test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>stmt_id</name></name> <operator>=</operator> <name>stmt_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Submit a query sql request right after the server has been re-elected and needs
 * to catch up with logs, but close early */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query</argument>, <argument>barrierInFlightQuerySql</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SUBMIT</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CLUSTER_DEPOSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Re-elect ourselves and issue a query request */</comment>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>QUERY_SQL_SUBMIT</name><argument_list>(<argument><expr><literal type="string">"SELECT n FROM test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Submit an exec request right after the server has been re-elected and needs
 * to catch up with logs, but close early */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query</argument>, <argument>barrierInFlightExec</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SUBMIT</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CLUSTER_DEPOSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Re-elect ourselves and issue an exec request */</comment>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SUBMIT</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Send a QUERY request in the new (schema version 1) format, which
 * supports larger numbers of parameters. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query</argument>, <argument>manyParams</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">20000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>num_query_params</name> <init>= <expr><literal type="number">999</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name> <modifier>*</modifier></type><name>values</name> <init>= <expr><call><name>munit_calloc</name><argument_list>(<argument><expr><name>num_query_params</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"SELECT (n) FROM test WHERE n = ?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_query_params</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">" OR n = ?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_query_params</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>SQLITE_INTEGER</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>integer</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>stmt_id</name></name> <operator>=</operator> <name>stmt_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE_PARAMS</name><argument_list>(<argument><expr><name>num_query_params</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>TUPLE__PARAMS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE_SCHEMA_STATUS</name><argument_list>(<argument><expr><name>DQLITE_REQUEST_QUERY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>WAIT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FINALIZE</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * finalize
 *
 ******************************************************************************/</comment>

<struct>struct <name>finalize_fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_finalize</name></name></type> <name>request</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_empty</name></name></type> <name>response</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>finalize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TEST_SETUP</name><argument_list>(<argument>finalize</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>finalize_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>
<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>finalize</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>finalize_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Finalize a prepared statement. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>finalize</argument>, <argument>success</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>finalize_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>stmt_id</name></name> <operator>=</operator> <name>stmt_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>finalize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>FINALIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * exec_sql
 *
 ******************************************************************************/</comment>

<struct>struct <name>exec_sql_fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_exec_sql</name></name></type> <name>request</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_result</name></name></type> <name>response</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>exec_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TEST_SETUP</name><argument_list>(<argument>exec_sql</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>
<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>exec_sql</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Exec a SQL text with a single query. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec_sql</argument>, <argument>single</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">"CREATE TABLE test (n INT)"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>exec_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>EXEC_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_APPLIED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Exec a SQL text with a single query. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec_sql</argument>, <argument>empty1</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>exec_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>EXEC_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Exec a SQL text with a single query. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec_sql</argument>, <argument>empty2</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">" --   Comment"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>exec_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>EXEC_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Exec an invalid SQL text with a single query. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec_sql</argument>, <argument>invalid</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">"NOT SQL"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>exec_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>EXEC_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><name>SQLITE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"near \"NOT\": syntax error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Exec a SQL text with a multiple queries. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec_sql</argument>, <argument>multi</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator>
	    <literal type="string">"CREATE TABLE test (n INT); INSERT INTO test VALUES(1)"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>exec_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>EXEC_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>WAIT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Exec an ATTACH DATABASE statement -- this should fail. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec_sql</argument>, <argument>attach</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">"ATTACH DATABASE foo AS foo"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>exec_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>EXEC_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><name>SQLITE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"too many attached databases - max 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Exec an SQL text and close the gateway early. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec_sql</argument>, <argument>closing</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">"CREATE TABLE test (n INT)"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>exec_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>EXEC_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Submit an EXEC_SQL request that triggers a failed barrier operation. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec_sql</argument>, <argument>barrier_error</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<comment type="block">/* Set up an uncommitted exec operation */</comment>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SUBMIT</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CLUSTER_DEPOSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Submit an EXEC_SQL request, forcing a barrier, which fails */</comment>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">"INSERT INTO test VALUES(123)"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>exec_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* We rely on leader__barrier (called by handle_exec_sql) attempting
	 * an allocation using raft_malloc. */</comment>
	<expr_stmt><expr><call><name>test_raft_heap_fault_config</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_raft_heap_fault_enable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE_STATUS</name><argument_list>(<argument><expr><name>DQLITE_REQUEST_EXEC_SQL</name></expr></argument>, <argument><expr><name>RAFT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Send an EXEC_SQL request in the new (schema version 1) format, which
 * supports larger numbers of parameters. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec_sql</argument>, <argument>manyParams</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">20000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>num_exec_params</name> <init>= <expr><literal type="number">999</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name> <modifier>*</modifier></type><name>values</name> <init>= <expr><call><name>munit_calloc</name><argument_list>(<argument><expr><name>num_exec_params</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"DELETE FROM test WHERE n = ?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_exec_params</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">" OR n = ?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_exec_params</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>SQLITE_INTEGER</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>integer</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <name>sql</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>exec_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE_PARAMS</name><argument_list>(<argument><expr><name>num_exec_params</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>TUPLE__PARAMS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE_SCHEMA_STATUS</name><argument_list>(<argument><expr><name>DQLITE_REQUEST_EXEC_SQL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>WAIT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * query_sql
 *
 ******************************************************************************/</comment>

<struct>struct <name>query_sql_fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_query_sql</name></name></type> <name>request</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_rows</name></name></type> <name>response</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>query_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TEST_SETUP</name><argument_list>(<argument>query_sql</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>
<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>query_sql</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Exec a SQL query whose result set fits in a page. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query_sql</argument>, <argument>small</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test VALUES(123)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">"SELECT n FROM test"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>QUERY_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Exec an empty query sql. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query_sql</argument>, <argument>empty1</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test VALUES(123)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>QUERY_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"empty statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Exec an empty query sql. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query_sql</argument>, <argument>empty2</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test VALUES(123)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">"               -- a comment"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>QUERY_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"empty statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Exec an invalid query sql. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query_sql</argument>, <argument>invalid</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test VALUES(123)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">"NOT SQL"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>QUERY_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><name>SQLITE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"near \"NOT\": syntax error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Exec a SQL query whose result set needs multiple pages. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query_sql</argument>, <argument>large</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>column</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>finished</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* 16 = 8B header + 8B value (int) */</comment>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n_rows_buffer</name> <init>= <expr><call><name>max_rows_buffer</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Insert 1 less than 2 response buffers worth of rows, otherwise we need
	 * 3 responses, of which the last one contains no rows. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>n_rows_buffer</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(123)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">"SELECT n FROM test"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>QUERY_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uint64__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>text__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* First response contains max amount of rows */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_rows_buffer</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>DECODE_ROW</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ullong</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>eof</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_RESPONSE_ROWS_PART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>gateway__resume</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>gateway</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>finished</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_false</name><argument_list>(<argument><expr><name>finished</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uint64__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>text__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Second, and last, response contains 1 less than maximum amount */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_rows_buffer</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>DECODE_ROW</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ullong</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>eof</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_RESPONSE_ROWS_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>gateway__resume</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>gateway</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>finished</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_true</name><argument_list>(<argument><expr><name>finished</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Exec a SQL query whose result set needs multiple pages and close before
 * receiving the full result set. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query_sql</argument>, <argument>largeClose</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>column</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* 16 = 8B header + 8B value (int) */</comment>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n_rows_buffer</name> <init>= <expr><call><name>max_rows_buffer</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Insert 1 less than 2 response buffers worth of rows, otherwise we need
	 * 3 responses, of which the last one contains no rows. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>n_rows_buffer</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(123)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">"SELECT n FROM test"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>QUERY_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uint64__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>text__decode</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* First response contains max amount of rows */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_rows_buffer</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>DECODE_ROW</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ullong</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>eof</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_RESPONSE_ROWS_PART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Perform a query with parameters */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query_sql</argument>, <argument>params</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(3)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES(4)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">"SELECT n FROM test WHERE n &gt; ? AND n &lt; ?"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>SQLITE_INTEGER</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>integer</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>SQLITE_INTEGER</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>integer</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE_PARAMS</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>TUPLE__PARAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>QUERY_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Perform a query and close the gateway early. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query_sql</argument>, <argument>closing</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test VALUES(123)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">"SELECT n FROM test"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>QUERY_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Perform a query yielding a lot of rows and close the gateway early. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query_sql</argument>, <argument>manyClosing</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>finished</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<comment type="block">/* Insert more than maximum amount of rows that can fit in a single response.
	 * 16 = 8B header + 8B value (int) */</comment>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n_rows_buffer</name> <init>= <expr><call><name>max_rows_buffer</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_rows_buffer</name> <operator>+</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test VALUES(123)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">"SELECT n FROM test"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>QUERY_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>gateway__close</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>gateway</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>gateway__resume</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>gateway</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>finished</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Submit a QUERY_SQL request that triggers a failed barrier operation. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query_sql</argument>, <argument>barrier_error</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<comment type="block">/* Set up an uncommitted exec operation */</comment>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test VALUES(123)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SUBMIT</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CLUSTER_DEPOSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Submit a QUERY_SQL request, forcing a barrier, which fails */</comment>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <literal type="string">"SELECT n FROM test"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* We rely on leader__barrier (called by handle_query_sql) attempting
	 * an allocation using raft_malloc. */</comment>
	<expr_stmt><expr><call><name>test_raft_heap_fault_config</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_raft_heap_fault_enable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE_STATUS</name><argument_list>(<argument><expr><name>DQLITE_REQUEST_QUERY_SQL</name></expr></argument>, <argument><expr><name>RAFT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Send a QUERY_SQL request in the new (schema version 1) format, which
 * supports larger numbers of parameters. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query_sql</argument>, <argument>manyParams</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_sql_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">20000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>num_query_params</name> <init>= <expr><literal type="number">999</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name> <modifier>*</modifier></type><name>values</name> <init>= <expr><call><name>munit_calloc</name><argument_list>(<argument><expr><name>num_query_params</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"SELECT (n) FROM test WHERE n = ?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_query_params</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">" OR n = ?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_query_params</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>SQLITE_INTEGER</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>integer</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <name>sql</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>query_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE_PARAMS</name><argument_list>(<argument><expr><name>num_query_params</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>TUPLE__PARAMS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE_SCHEMA_STATUS</name><argument_list>(<argument><expr><name>DQLITE_REQUEST_QUERY_SQL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>WAIT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * cluster
 *
 ******************************************************************************/</comment>

<struct>struct <name>request_cluster_fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_cluster</name></name></type> <name>request</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_servers</name></name></type> <name>response</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>request_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TEST_SETUP</name><argument_list>(<argument>request_cluster</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_cluster_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>
<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>request_cluster</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_cluster_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Submit a cluster request with an invalid format version. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>request_cluster</argument>, <argument>unrecognizedFormat</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_cluster_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>format</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE</name><argument_list>(<argument><expr><name>CLUSTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><name>DQLITE_PARSE</name></expr></argument>, <argument><expr><literal type="string">"unrecognized cluster format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * invalid
 *
 ******************************************************************************/</comment>

<struct>struct <name>invalid_fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_leader</name></name></type> <name>request</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_server</name></name></type> <name>response</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>invalid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TEST_SETUP</name><argument_list>(<argument>invalid</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>invalid_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>
<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>invalid</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>invalid_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Submit a request with an unrecognized type. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>invalid</argument>, <argument>requestType</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>invalid_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ENCODE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>leader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HANDLE_STATUS</name><argument_list>(<argument><expr><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><name>DQLITE_PARSE</name></expr></argument>, <argument><expr><literal type="string">"unrecognized request type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>
</unit>
