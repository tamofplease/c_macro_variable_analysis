<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/unit/ext/test_uv.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;raft.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../src/lib/transport.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../lib/endpoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../lib/runner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../lib/uv.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>TEST_MODULE</name><argument_list>(<argument><expr><name>ext_uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Helpers
 *
 ******************************************************************************/</comment>

<struct>struct <name>fixture</name>
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>uv_loop_s</name></name></type> <name>loop</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>uv_stream_s</name></name> <modifier>*</modifier></type><name>listener</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>test_endpoint</name></name></type> <name>endpoint</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>client</name></decl>;</decl_stmt>
	<union>union <block>{
		<decl_stmt><decl><type><name>uv_tcp_t</name></type> <name>tcp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uv_pipe_t</name></type> <name>pipe</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uv_stream_t</name></type> <name>stream</name></decl>;</decl_stmt>
	}</block>;</union>
}</block>;</struct>

<comment type="block">/* Return a buffer of size TEST_SOCKET_MIN_BUF_SIZE */</comment>
<function><type><specifier>static</specifier> <name>uv_buf_t</name> <modifier>*</modifier></type><name>buf_malloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <call><name>munit_malloc</name><argument_list>(<argument><expr><name>TEST_SOCKET_MIN_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>TEST_SOCKET_MIN_BUF_SIZE</name></expr>;</expr_stmt>
	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Free the buffer returned by buf_malloc() */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>buf_free</name><parameter_list>(<parameter><decl><type><name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Parameters
 *
 ******************************************************************************/</comment>

<comment type="block">/* Run the tests using both TCP and Unix sockets. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>MunitParameterEnum</name></type> <name><name>endpointParams</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><name>TEST_ENDPOINT_FAMILY</name></expr>, <expr><name>test_endpoint_family_values</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Setup and tear down
 *
 ******************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>listenCb</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>listener</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>listener</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>listener</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>UV_TCP</name></expr>:</case>
			<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_tcp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>UV_NAMED_PIPE</name></expr>:</case>
			<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_pipe_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>pipe</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>munit_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_accept</name><argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_uv_setup</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_endpoint_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>endpoint</name></name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>transport__stream</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>endpoint</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>listener</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_listen</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>listener</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>listenCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <call><name>test_endpoint_connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>endpoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_uv_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tear_down</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator>struct <name>uv_handle_s</name> <operator>*</operator><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>listener</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uv_close_cb</name><operator>)</operator><name>raft_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_endpoint_tear_down</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>endpoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_uv_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_uv_tear_down</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * uv_write
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_SETUP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TEAR_DOWN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>tear_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Writing an amount of data below the buffer size makes that data immediately
 * available for reading. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>write</argument>, <argument>sync</argument>, <argument>endpointParams</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uv_write_t</name></type> <name>req</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uv_buf_t</name> <modifier>*</modifier></type><name>buf1</name> <init>= <expr><call><name>buf_malloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uv_buf_t</name> <modifier>*</modifier></type><name>buf2</name> <init>= <expr><call><name>buf_malloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name><name>buf2</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>buf2</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name><name>buf2</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_uv_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>buf_free</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>buf_free</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * uv_read
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_SETUP</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TEAR_DOWN</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>tear_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_read_sync__alloc_cb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
				     <parameter><decl><type><name>size_t</name></type> <name>_</name></decl></parameter>,
				     <parameter><decl><type><name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>_</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>TEST_SOCKET_MIN_BUF_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <call><name>munit_malloc</name><argument_list>(<argument><expr><name>TEST_SOCKET_MIN_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_read_sync__read_cb</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
				    <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>,
				    <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>read_cb_called</name></decl>;</decl_stmt>

	<comment type="block">/* Apprently there's an empty read before the actual one. */</comment>
	<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>nread</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>TEST_SOCKET_MIN_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>TEST_SOCKET_MIN_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>read_cb_called</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>read_cb_called</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Reading an amount of data below the buffer happens synchronously. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>read</argument>, <argument>sync</argument>, <argument>endpointParams</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>buf_malloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>read_cb_called</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name>read_cb_called</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_read_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>test_read_sync__alloc_cb</name></expr></argument>,
			   <argument><expr><name>test_read_sync__read_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_uv_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_true</name><argument_list>(<argument><expr><name>read_cb_called</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>buf_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>
</unit>
