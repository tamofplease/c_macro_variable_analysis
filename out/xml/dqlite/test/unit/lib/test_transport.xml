<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/unit/lib/test_transport.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../src/lib/transport.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../lib/runner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../lib/endpoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../lib/uv.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>TEST_MODULE</name><argument_list>(<argument><expr><name>lib_transport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Fixture
 *
 ******************************************************************************/</comment>

<struct>struct <name>fixture</name>
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>test_endpoint</name></name></type> <name>endpoint</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>uv_loop_s</name></name></type> <name>loop</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>transport</name></name></type> <name>transport</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>client</name></decl>;</decl_stmt>
	<struct>struct
	<block>{
		<decl_stmt><decl><type><name>bool</name></type> <name>invoked</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
	}</block> <decl><name>read</name></decl>;</struct>
	<struct>struct
	<block>{
		<decl_stmt><decl><type><name>bool</name></type> <name>invoked</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
	}</block> <decl><name>write</name></decl>;</struct>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>transport</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>invoked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>transport</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>write</name><operator>.</operator><name>invoked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>write</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>uv_stream_s</name></name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>server</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_endpoint_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>endpoint</name></name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>listen</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>endpoint</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_endpoint_pair</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>endpoint</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_uv_setup</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>transport__stream</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>transport__init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>transport</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>transport</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>invoked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>status</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>write</name><operator>.</operator><name>invoked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>write</name><operator>.</operator><name>status</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tear_down</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>transport__close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>transport</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_uv_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_uv_tear_down</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_endpoint_tear_down</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>endpoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Helper macros.
 *
 ******************************************************************************/</comment>

<comment type="block">/* Allocate a libuv buffer with the given amount of bytes. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_ALLOC</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{munit_malloc(N), N};</cpp:value></cpp:define>

<comment type="block">/* Start reading into the current buffer */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ</name><parameter_list>(<parameter><type><name>BUF</name></type></parameter>)</parameter_list></cpp:macro>                                                   \
	<cpp:value>{                                                           \
		int rv2;                                            \
		rv2 = transport__read(&amp;f-&gt;transport, BUF, read_cb); \
		munit_assert_int(rv2, ==, 0);                       \
	}</cpp:value></cpp:define>

<comment type="block">/* Start writing the current buffer into the stream */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE</name><parameter_list>(<parameter><type><name>BUF</name></type></parameter>)</parameter_list></cpp:macro>                                                    \
	<cpp:value>{                                                             \
		int rv2;                                              \
		rv2 = transport__write(&amp;f-&gt;transport, BUF, write_cb); \
		munit_assert_int(rv2, ==, 0);                         \
	}</cpp:value></cpp:define>

<comment type="block">/* Write N bytes into the client buffer. Each byte will contain a progressive
 * number starting from 1. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_WRITE</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro>                          \
	<cpp:value>{                                        \
		uint8_t *buf_ = munit_malloc(N); \
		unsigned i_;                     \
		int rv_;                         \
		for (i_ = 0; i_ &lt; N; i_++) {     \
			buf_[i_] = i_ + 1;       \
		}                                \
		rv_ = write(f-&gt;client, buf_, N); \
		munit_assert_int(rv_, ==, N);    \
		free(buf_);                      \
	}</cpp:value></cpp:define>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Assertions.
 *
 ******************************************************************************/</comment>

<comment type="block">/* Assert that the read callback was invoked with the given status. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_READ</name><parameter_list>(<parameter><type><name>STATUS</name></type></parameter>)</parameter_list></cpp:macro>                           \
	<cpp:value>munit_assert_true(f-&gt;read.invoked);           \
	munit_assert_int(f-&gt;read.status, ==, STATUS); \
	f-&gt;read.invoked = false;                      \
	f-&gt;read.status = -1</cpp:value></cpp:define>

<comment type="block">/* Assert that the write callback was invoked with the given status. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_WRITE</name><parameter_list>(<parameter><type><name>STATUS</name></type></parameter>)</parameter_list></cpp:macro>                           \
	<cpp:value>munit_assert_true(f-&gt;write.invoked);           \
	munit_assert_int(f-&gt;write.status, ==, STATUS); \
	f-&gt;write.invoked = false;                      \
	f-&gt;write.status = -1</cpp:value></cpp:define>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * transport__read
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_SETUP</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TEAR_DOWN</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>tear_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>TEST_CASE</name><argument_list>(<argument>read</argument>, <argument>success</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uv_buf_t</name></type> <name>buf</name> <init>= <expr><call><name>BUF_ALLOC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLIENT_WRITE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>READ</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_uv_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_READ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>.</operator><name>base</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>.</operator><name>base</name></name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * transport__write
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_SETUP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TEAR_DOWN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>tear_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>TEST_CASE</name><argument_list>(<argument>write</argument>, <argument>success</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uv_buf_t</name></type> <name>buf</name> <init>= <expr><call><name>BUF_ALLOC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WRITE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_uv_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_WRITE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>
</unit>
