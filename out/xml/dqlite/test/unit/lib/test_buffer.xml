<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/unit/lib/test_buffer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../src/lib/buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../lib/runner.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>TEST_MODULE</name><argument_list>(<argument><expr><name>lib_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Fixture
 *
 ******************************************************************************/</comment>

<struct>struct <name>fixture</name>
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>buffer</name></name></type> <name>buffer</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>buffer__init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tear_down</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>buffer__close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Helper macros.
 *
 ******************************************************************************/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADVANCE</name><parameter_list>(<parameter><type><name>SIZE</name></type></parameter>)</parameter_list></cpp:macro>                                       \
	<cpp:value>{                                                   \
		cursor = buffer__advance(&amp;f-&gt;buffer, SIZE); \
		munit_assert_ptr_not_null(cursor);          \
	}</cpp:value></cpp:define>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Assertions.
 *
 ******************************************************************************/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_N_PAGES</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>munit_assert_int(f-&gt;buffer.n_pages, ==, N)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * buffer__init
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_SETUP</name><argument_list>(<argument><expr><name>init</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TEAR_DOWN</name><argument_list>(<argument><expr><name>init</name></expr></argument>, <argument><expr><name>tear_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* If n is 0, then the prefix is used to dermine the number of elements of the
 * tuple. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>init</argument>, <argument>n_pages</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_N_PAGES</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_long</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>page_size</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_PAGESIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * buffer__advance
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>advance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_SETUP</name><argument_list>(<argument><expr><name>advance</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TEAR_DOWN</name><argument_list>(<argument><expr><name>advance</name></expr></argument>, <argument><expr><name>tear_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* The buffer already has enough capacity. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>advance</argument>, <argument>enough</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADVANCE</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_N_PAGES</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* The buffer needs to double its size once. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>advance</argument>, <argument>double</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADVANCE</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_N_PAGES</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* The buffer needs to double its sice twice. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>advance</argument>, <argument>double_twice</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADVANCE</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_N_PAGES</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>
</unit>
