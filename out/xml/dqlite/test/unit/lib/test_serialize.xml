<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/unit/lib/test_serialize.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../src/lib/serialize.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../lib/runner.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>TEST_MODULE</name><argument_list>(<argument><expr><name>lib_serialize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Simple schema with stock fields.
 *
 ******************************************************************************/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERSON</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>               \
	<cpp:value>X(text, name, ##__VA_ARGS__) \
	X(uint64, age, ##__VA_ARGS__)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>SERIALIZE__DEFINE</name><argument_list>(<argument><expr><name>person</name></expr></argument>, <argument><expr><name>PERSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SERIALIZE__IMPLEMENT</name><argument_list>(<argument><expr><name>person</name></expr></argument>, <argument><expr><name>PERSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Complex schema with a custom field.
 *
 ******************************************************************************/</comment>

<struct>struct <name>pages</name>
<block>{
	<decl_stmt><decl><type><name>uint16_t</name></type> <name>n</name></decl>;</decl_stmt>    <comment type="block">/* Number of pages */</comment>
	<decl_stmt><decl><type><name>uint16_t</name></type> <name>size</name></decl>;</decl_stmt> <comment type="block">/* Size of each page */</comment>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>__unused__</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>bufs</name></decl>;</decl_stmt> <comment type="block">/* Array of page buffers */</comment>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_pages</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pages</name></name> <modifier>*</modifier></type><name>pages</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>pages</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pages</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pages</name><operator>-&gt;</operator><name>bufs</name></name> <operator>=</operator> <call><name>munit_malloc</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name><name>pages</name><operator>-&gt;</operator><name>bufs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pages</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>pages</name><operator>-&gt;</operator><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>munit_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy_pages</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pages</name></name> <modifier>*</modifier></type><name>pages</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pages</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pages</name><operator>-&gt;</operator><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pages</name><operator>-&gt;</operator><name>bufs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Opaque pointer to a struct pages object. */</comment>
<typedef>typedef <type><name><name>struct</name> <name>pages</name></name></type> <name>pages_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>person</name></name></type> <name>person_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>pages__sizeof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pages_t</name> <modifier>*</modifier></type><name>pages</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>uint16__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pages</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>uint16__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pages</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
	       <call><name>uint32__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pages</name><operator>-&gt;</operator><name>__unused__</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
	       <name><name>pages</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <name><name>pages</name><operator>-&gt;</operator><name>n</name></name></expr> <comment type="block">/* bufs */</comment>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pages__encode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pages_t</name> <modifier>*</modifier></type><name>pages</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>uint16__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pages</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uint16__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pages</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uint32__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pages</name><operator>-&gt;</operator><name>__unused__</name></name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pages</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>cursor</name></expr></argument>, <argument><expr><name><name>pages</name><operator>-&gt;</operator><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pages</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>+=</operator> <name><name>pages</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pages__decode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>, <parameter><decl><type><name>pages_t</name> <modifier>*</modifier></type><name>pages</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>uint16__decode</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pages</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uint16__decode</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pages</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uint32__decode</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pages</name><operator>-&gt;</operator><name>__unused__</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pages</name><operator>-&gt;</operator><name>bufs</name></name> <operator>=</operator> <call><name>munit_malloc</name><argument_list>(<argument><expr><name><name>pages</name><operator>-&gt;</operator><name>n</name></name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name><name>pages</name><operator>-&gt;</operator><name>bufs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pages</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>pages</name><operator>-&gt;</operator><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cursor</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <name><name>pages</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>cap</name></name> <operator>-=</operator> <name><name>pages</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOK</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                     \
	<cpp:value>X(text, title, ##__VA_ARGS__)    \
	X(person, author, ##__VA_ARGS__) \
	X(pages, pages, ##__VA_ARGS__)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>SERIALIZE__DEFINE</name><argument_list>(<argument><expr><name>book</name></expr></argument>, <argument><expr><name>BOOK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SERIALIZE__IMPLEMENT</name><argument_list>(<argument><expr><name>book</name></expr></argument>, <argument><expr><name>BOOK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Fixture
 *
 ******************************************************************************/</comment>

<struct>struct <name>fixture</name>
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>person</name></name></type> <name>person</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>book</name></name></type> <name>book</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tear_down</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Fields definition.
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_SETUP</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TEAR_DOWN</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>tear_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* The expected fields are defined on the struct. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>fields</argument>, <argument>define</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>person</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"John Doh"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>person</name><operator>.</operator><name>age</name></name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Sizeof method.
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><sizeof>sizeof<name/></sizeof>)</expr></argument>;
<argument><expr><call><name>TEST_SETUP</name><argument_list>(<argument><expr><sizeof>sizeof<name/></sizeof>, <name>setup</name></expr></argument>)</argument_list></call></expr></argument>;
<argument><expr><call><name>TEST_TEAR_DOWN</name><argument_list>(<argument><expr><sizeof>sizeof<name/></sizeof>, <name>tear_down</name></expr></argument>)</argument_list></call></expr></argument>;

<comment type="block">/* Padding is added if needed. */</comment>
<argument><expr><macro><name>TEST_CASE</name><argument_list>(<argument>sizeof</argument>, <argument>padding</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{
	struct <expr><name>fixture</name> <operator>*</operator><name>f</name> <operator>=</operator> <name>data</name></expr>;
	<expr><name>size_t</name> <name>size</name></expr>;
	<expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;
	<expr><name><name>f</name><operator>-&gt;</operator><name>person</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"John Doh"</literal></expr>;
	<expr><name><name>f</name><operator>-&gt;</operator><name>person</name><operator>.</operator><name>age</name></name> <operator>=</operator> <literal type="number">40</literal></expr>;
	<expr><name>size</name> <operator>=</operator> <call><name>person__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>person</name></name></expr></argument>)</argument_list></call></expr>;
	<expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">16</literal> <comment type="block">/* name */</comment> <operator>+</operator> <literal type="number">8</literal></expr></argument> <comment type="block">/* age */</comment>)</argument_list></call></expr>;
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
}</block></expr></argument></argument_list></call></expr></expr_stmt>

<comment type="block">/* Padding is not added if a string ends exactly at word boundary. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>sizeof</argument>, <argument>no_padding</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>person</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"Joe Doh"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>person</name><operator>.</operator><name>age</name></name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>person__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>person</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">8</literal> <comment type="block">/* name */</comment> <operator>+</operator> <literal type="number">8</literal></expr></argument> <comment type="block">/* age */</comment>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Encode method.
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>encode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_SETUP</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TEAR_DOWN</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>tear_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Padding is added if needed. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>encode</argument>, <argument>padding</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>person</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"John Doh"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>person</name><operator>.</operator><name>age</name></name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>person__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>person</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>munit_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cursor</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>person__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>person</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"John Doh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><call><name>ByteFlipLe64</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Padding is not added if a string ends exactly at word boundary. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>encode</argument>, <argument>no_padding</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>person</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"Joe Doh"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>person</name><operator>.</operator><name>age</name></name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>person__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>person</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>munit_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cursor</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>person__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>person</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Joe Doh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><call><name>ByteFlipLe64</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Encode a custom complex field. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>encode</argument>, <argument>custom</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>book</name><operator>.</operator><name>title</name></name> <operator>=</operator> <literal type="string">"Les miserables"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>book</name><operator>.</operator><name>author</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"Victor Hugo"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>book</name><operator>.</operator><name>author</name><operator>.</operator><name>age</name></name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>create_pages</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>book</name><operator>.</operator><name>pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>book</name><operator>.</operator><name>pages</name><operator>.</operator><name>bufs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Fantine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>book</name><operator>.</operator><name>pages</name><operator>.</operator><name>bufs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Cosette"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>book__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>book</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>,
			 <argument><expr><literal type="number">16</literal> <operator>+</operator>     <comment type="block">/* title                                   */</comment>
			     <literal type="number">16</literal> <operator>+</operator> <comment type="block">/* author name                             */</comment>
			     <literal type="number">8</literal> <operator>+</operator>  <comment type="block">/* author age                              */</comment>
			     <literal type="number">2</literal> <operator>+</operator>  <comment type="block">/* n pages                                 */</comment>
			     <literal type="number">2</literal> <operator>+</operator>  <comment type="block">/* page size                               */</comment>
			     <literal type="number">4</literal> <operator>+</operator>  <comment type="block">/* unused                                  */</comment>
			     <literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument> <comment type="block">/* page buffers */</comment>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>munit_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cursor</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>book__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>book</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cursor</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><literal type="string">"Les miserables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><literal type="string">"Victor Hugo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><call><name>ByteFlipLe64</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>cursor</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><call><name>ByteFlipLe16</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>cursor</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><call><name>ByteFlipLe16</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>cursor</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <comment type="block">/* Unused */</comment>

	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><literal type="string">"Fantine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><literal type="string">"Cosette"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>destroy_pages</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>book</name><operator>.</operator><name>pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Decode method.
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>decode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_SETUP</name><argument_list>(<argument><expr><name>decode</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_TEAR_DOWN</name><argument_list>(<argument><expr><name>decode</name></expr></argument>, <argument><expr><name>tear_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Padding is added if needed. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>decode</argument>, <argument>padding</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name> <init>= <expr><block>{<expr><name>buf</name></expr>, <expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"John Doh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>=</operator> <call><name>ByteFlipLe64</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>person__decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>person</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>person</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"John Doh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>person</name><operator>.</operator><name>age</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Padding is not added if a string ends exactly at word boundary. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>decode</argument>, <argument>no_padding</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name> <init>= <expr><block>{<expr><name>buf</name></expr>, <expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Joe Doh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>=</operator> <call><name>ByteFlipLe64</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>person__decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>person</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>person</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Joe Doh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>person</name><operator>.</operator><name>age</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* The given buffer has not enough data. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>decode</argument>, <argument>short</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name> <init>= <expr><block>{<expr><name>buf</name></expr>, <expr><literal type="number">16</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"John Doh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>person__decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>person</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Decode a custom complex field. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>decode</argument>, <argument>custom</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">16</literal> <operator>+</operator> <comment type="block">/* title */</comment>
		     <literal type="number">16</literal> <operator>+</operator> <comment type="block">/* author name */</comment>
		     <literal type="number">8</literal> <operator>+</operator>  <comment type="block">/* author age */</comment>
		     <literal type="number">2</literal> <operator>+</operator>  <comment type="block">/* n pages  */</comment>
		     <literal type="number">2</literal> <operator>+</operator>  <comment type="block">/* page size  */</comment>
		     <literal type="number">4</literal> <operator>+</operator>  <comment type="block">/* unused  */</comment>
		     <literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal></expr></init></decl> <comment type="block">/* page buffers */</comment>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name> <init>= <expr><block>{<expr><name>buf</name></expr>, <expr><name>len</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Les miserables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Victor Hugo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>=</operator> <call><name>ByteFlipLe64</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>=</operator> <call><name>ByteFlipLe16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>=</operator> <call><name>ByteFlipLe16</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <comment type="block">/* Unused */</comment>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Fantine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Cosette"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>book__decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>book</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>book</name><operator>.</operator><name>title</name></name></expr></argument>, <argument><expr><literal type="string">"Les miserables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>book</name><operator>.</operator><name>author</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Victor Hugo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>book</name><operator>.</operator><name>author</name><operator>.</operator><name>age</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>book</name><operator>.</operator><name>pages</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>book</name><operator>.</operator><name>pages</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>book</name><operator>.</operator><name>pages</name><operator>.</operator><name>bufs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Fantine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>book</name><operator>.</operator><name>pages</name><operator>.</operator><name>bufs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Cosette"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>book</name><operator>.</operator><name>pages</name><operator>.</operator><name>bufs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>
</unit>
