<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/unit/test_concurrency.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/cluster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/runner.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/gateway.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/response.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>TEST_MODULE</name><argument_list>(<argument><expr><name>concurrency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Fixture.
 *
 ******************************************************************************/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_GATEWAYS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<comment type="block">/* Context for a gateway handle request */</comment>
<struct>struct <name>context</name>
<block>{
	<decl_stmt><decl><type><name>bool</name></type> <name>invoked</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* Standalone leader database connection */</comment>
<struct>struct <name>connection</name>
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name></type> <name>gateway</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>buffer</name></name></type> <name>request</name></decl>;</decl_stmt>  <comment type="block">/* Request payload */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>buffer</name></name></type> <name>response</name></decl>;</decl_stmt> <comment type="block">/* Response payload */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>handle</name></name></type> <name>handle</name></decl>;</decl_stmt>   <comment type="block">/* Async handle request */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>context</name></name></type> <name>context</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXTURE</name></cpp:macro>          \
	<cpp:value>FIXTURE_CLUSTER; \
	struct connection connections[N_GATEWAYS]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETUP</name></cpp:macro>                                                        \
	<cpp:value>unsigned i;                                                  \
	int rc;                                                      \
	SETUP_CLUSTER(V2);					     \
	CLUSTER_ELECT(0);                                            \
	for (i = 0; i &lt; N_GATEWAYS; i++) {                           \
		struct connection *c = &amp;f-&gt;connections[i];           \
		struct request_open open;                            \
		struct response_db db;                               \
		gateway__init(&amp;c-&gt;gateway, CLUSTER_CONFIG(0),        \
			      CLUSTER_REGISTRY(0), CLUSTER_RAFT(0)); \
		c-&gt;handle.data = &amp;c-&gt;context;                        \
		rc = buffer__init(&amp;c-&gt;request);                      \
		munit_assert_int(rc, ==, 0);                         \
		rc = buffer__init(&amp;c-&gt;response);                     \
		munit_assert_int(rc, ==, 0);                         \
		open.filename = "test";                              \
		open.vfs = "";                                       \
		ENCODE(c, &amp;open, open);                              \
		HANDLE(c, OPEN);                                     \
		ASSERT_CALLBACK(c, 0, DB);                           \
		DECODE(c, &amp;db, db);                                  \
		munit_assert_int(db.id, ==, 0);                      \
	}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEAR_DOWN</name></cpp:macro>                                          \
	<cpp:value>unsigned i;                                        \
	for (i = 0; i &lt; N_GATEWAYS; i++) {                 \
		struct connection *c = &amp;f-&gt;connections[i]; \
		buffer__close(&amp;c-&gt;request);                \
		buffer__close(&amp;c-&gt;response);               \
		gateway__close(&amp;c-&gt;gateway);               \
	}                                                  \
	TEAR_DOWN_CLUSTER;</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fixture_handle_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>context</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>invoked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Helper macros.
 *
 ******************************************************************************/</comment>

<comment type="block">/* Reset the request buffer of the given connection and encode a request of the
 * given lower case name. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE</name><parameter_list>(<parameter><type><name>C</name></type></parameter>, <parameter><type><name>REQUEST</name></type></parameter>, <parameter><type><name>LOWER</name></type></parameter>)</parameter_list></cpp:macro>                               \
	<cpp:value>{                                                       \
		size_t n2 = request_##LOWER##__sizeof(REQUEST); \
		void *cursor;                                   \
		buffer__reset(&amp;C-&gt;request);                     \
		cursor = buffer__advance(&amp;C-&gt;request, n2);      \
		munit_assert_ptr_not_null(cursor);              \
		request_##LOWER##__encode(REQUEST, &amp;cursor);    \
	}</cpp:value></cpp:define>

<comment type="block">/* Decode a response of the given lower/upper case name using the response
 * buffer of the given connection. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODE</name><parameter_list>(<parameter><type><name>C</name></type></parameter>, <parameter><type><name>RESPONSE</name></type></parameter>, <parameter><type><name>LOWER</name></type></parameter>)</parameter_list></cpp:macro>                                   \
	<cpp:value>{                                                            \
		struct cursor cursor;                                \
		int rc2;                                             \
		cursor.p = buffer__cursor(&amp;C-&gt;response, 0);          \
		cursor.cap = buffer__offset(&amp;C-&gt;response);           \
		rc2 = response_##LOWER##__decode(&amp;cursor, RESPONSE); \
		munit_assert_int(rc2, ==, 0);                        \
	}</cpp:value></cpp:define>

<comment type="block">/* Submit a request of the given type to the given connection and check that no
 * error occurs. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE</name><parameter_list>(<parameter><type><name>C</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>)</parameter_list></cpp:macro>                                                 \
	<cpp:value>{                                                               \
		int rc2;                                                \
		C-&gt;handle.cursor.p = buffer__cursor(&amp;C-&gt;request, 0);    \
		C-&gt;handle.cursor.cap = buffer__offset(&amp;C-&gt;request);     \
		buffer__reset(&amp;C-&gt;response);                            \
		rc2 = gateway__handle(&amp;C-&gt;gateway, &amp;C-&gt;handle,          \
				      DQLITE_REQUEST_##TYPE, 0,         \
				      &amp;C-&gt;response, fixture_handle_cb); \
		munit_assert_int(rc2, ==, 0);                           \
	}</cpp:value></cpp:define>

<comment type="block">/* Prepare a statement on the given connection. The ID will be saved in
 * the STMT_ID pointer. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREPARE</name><parameter_list>(<parameter><type><name>C</name></type></parameter>, <parameter><type><name>SQL</name></type></parameter>, <parameter><type><name>STMT_ID</name></type></parameter>)</parameter_list></cpp:macro>                \
	<cpp:value>{                                       \
		struct request_prepare prepare; \
		struct response_stmt stmt;      \
		prepare.db_id = 0;              \
		prepare.sql = SQL;              \
		ENCODE(C, &amp;prepare, prepare);   \
		HANDLE(C, PREPARE);             \
		WAIT(C);                        \
		ASSERT_CALLBACK(C, 0, STMT);    \
		DECODE(C, &amp;stmt, stmt);         \
		*(STMT_ID) = stmt.id;           \
	}</cpp:value></cpp:define>

<comment type="block">/* Submit a request to exec a statement. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXEC</name><parameter_list>(<parameter><type><name>C</name></type></parameter>, <parameter><type><name>STMT_ID</name></type></parameter>)</parameter_list></cpp:macro>                  \
	<cpp:value>{                                 \
		struct request_exec exec; \
		exec.db_id = 0;           \
		exec.stmt_id = STMT_ID;   \
		ENCODE(C, &amp;exec, exec);   \
		HANDLE(C, EXEC);          \
	}</cpp:value></cpp:define>

<comment type="block">/* Submit a query request. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUERY</name><parameter_list>(<parameter><type><name>C</name></type></parameter>, <parameter><type><name>STMT_ID</name></type></parameter>)</parameter_list></cpp:macro>                   \
	<cpp:value>{                                   \
		struct request_query query; \
		query.db_id = 0;            \
		query.stmt_id = STMT_ID;    \
		ENCODE(C, &amp;query, query);   \
		HANDLE(C, QUERY);           \
	}</cpp:value></cpp:define>

<comment type="block">/* Wait for the gateway of the given connection to finish handling a request. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAIT</name><parameter_list>(<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro>                                        \
	<cpp:value>{                                              \
		unsigned _i;                           \
		for (_i = 0; _i &lt; 50; _i++) {          \
			CLUSTER_STEP;                  \
			if (C-&gt;context.invoked) {      \
				break;                 \
			}                              \
		}                                      \
		munit_assert_true(C-&gt;context.invoked); \
	}</cpp:value></cpp:define>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Assertions.
 *
 ******************************************************************************/</comment>

<comment type="block">/* Assert that the handle callback of the given connection has been invoked with
 * the given status and response type.. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_CALLBACK</name><parameter_list>(<parameter><type><name>C</name></type></parameter>, <parameter><type><name>STATUS</name></type></parameter>, <parameter><type><name>UPPER</name></type></parameter>)</parameter_list></cpp:macro>                               \
	<cpp:value>munit_assert_true(C-&gt;context.invoked);                          \
	munit_assert_int(C-&gt;context.status, ==, STATUS);                \
	munit_assert_int(C-&gt;context.type, ==, DQLITE_RESPONSE_##UPPER); \
	C-&gt;context.invoked = false</cpp:value></cpp:define>

<comment type="block">/* Assert that the failure response generated by the gateway of the given
 * connection matches the given details. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_FAILURE</name><parameter_list>(<parameter><type><name>C</name></type></parameter>, <parameter><type><name>CODE</name></type></parameter>, <parameter><type><name>MESSAGE</name></type></parameter>)</parameter_list></cpp:macro>                             \
	<cpp:value>{                                                            \
		struct response_failure failure;                     \
		DECODE(C, &amp;failure, failure);                        \
		munit_assert_int(failure.code, ==, CODE);            \
		munit_assert_string_equal(failure.message, MESSAGE); \
	}</cpp:value></cpp:define>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Concurrent exec requests
 *
 ******************************************************************************/</comment>

<struct>struct <name>exec_fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>c1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>c2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id2</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TEST_SETUP</name><argument_list>(<argument>exec</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>connections</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>c2</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>connections</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>
<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>exec</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* If another leader connection has submitted an Open request and is waiting for
 * it to complete, SQLITE_BUSY is returned. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>open</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE test1 (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>stmt_id1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c2</name></name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE test2 (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>stmt_id2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>stmt_id1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c2</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>stmt_id2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAIT</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c2</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c2</name></name></expr></argument>, <argument><expr><name>SQLITE_BUSY</name></expr></argument>, <argument><expr><literal type="string">"database is locked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAIT</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* If an exec request is already in progress on another leader connection,
 * SQLITE_BUSY is returned. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>tx</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<comment type="block">/* Create a test table using connection 0 */</comment>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>stmt_id1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>stmt_id1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAIT</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>stmt_id1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c2</name></name></expr></argument>, <argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>stmt_id2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>stmt_id1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c2</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>stmt_id2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAIT</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c2</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_FAILURE</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c2</name></name></expr></argument>, <argument><expr><name>SQLITE_BUSY</name></expr></argument>, <argument><expr><literal type="string">"database is locked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAIT</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Concurrent query requests
 *
 ******************************************************************************/</comment>

<struct>struct <name>query_fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>c1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>c2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id2</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TEST_SETUP</name><argument_list>(<argument>query</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>connections</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>c2</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>connections</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>stmt_id1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>stmt_id1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAIT</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>
<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>query</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Handle a query request while there is a transaction in progress. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query</argument>, <argument>tx</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="string">"INSERT INTO test VALUES(1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>stmt_id1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c2</name></name></expr></argument>, <argument><expr><literal type="string">"SELECT n FROM test"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>stmt_id2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>stmt_id1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QUERY</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c2</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>stmt_id2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAIT</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAIT</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_CALLBACK</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>c2</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>
</unit>
