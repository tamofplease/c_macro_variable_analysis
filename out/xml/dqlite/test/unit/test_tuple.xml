<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/unit/test_tuple.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/tuple.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/runner.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>TEST_MODULE</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Helper macros.
 *
 ******************************************************************************/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODER_INIT</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro>                                                   \
	<cpp:value>{                                                                 \
		int rc2;                                                  \
		int format_;                                              \
		format_ = (N &gt; 0) ? TUPLE__ROW : TUPLE__PARAMS;           \
		rc2 = tuple_decoder__init(&amp;decoder, N, format_, &amp;cursor); \
		munit_assert_int(rc2, ==, 0);                             \
	}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODER_INIT_PARAMS32</name></cpp:macro>                                                     \
	<cpp:value>{                                                                         \
		int rc2;                                                          \
		rc2 = tuple_decoder__init(&amp;decoder, 0, TUPLE__PARAMS32, &amp;cursor); \
		munit_assert_int(rc2, ==, 0);                                     \
	}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODER_NEXT</name></cpp:macro>                                         \
	<cpp:value>{                                                    \
		int rc2;                                     \
		rc2 = tuple_decoder__next(&amp;decoder, &amp;value); \
		munit_assert_int(rc2, ==, 0);                \
	}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODER_INIT</name><parameter_list>(<parameter><type><name>N</name></type></parameter>, <parameter><type><name>FORMAT</name></type></parameter>)</parameter_list></cpp:macro>                                                \
	<cpp:value>{                                                                      \
		int rc2;                                                       \
		rc2 = tuple_encoder__init(&amp;f-&gt;encoder, N, FORMAT, &amp;f-&gt;buffer); \
		munit_assert_int(rc2, ==, 0);                                  \
	}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODER_NEXT</name></cpp:macro>                                            \
	<cpp:value>{                                                       \
		int rc2;                                        \
		rc2 = tuple_encoder__next(&amp;f-&gt;encoder, &amp;value); \
		munit_assert_int(rc2, ==, 0);                   \
	}</cpp:value></cpp:define>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Assertions.
 *
 ******************************************************************************/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_VALUE_TYPE</name><parameter_list>(<parameter><type><name>TYPE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>munit_assert_int(value.type, ==, TYPE)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Decoder.
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TEST_GROUP</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* If n is 0, then the parameters format is used to determine the number of
 * elements of the tuple. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>decoder</argument>, <argument>init</argument>, <argument>param</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tuple_decoder</name></name></type> <name>decoder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name> <init>= <expr><block>{<expr><name>buf</name></expr>, <expr><sizeof>sizeof <name>buf</name></sizeof></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DECODER_INIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint</name><argument_list>(<argument><expr><name><name>decoder</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint</name><argument_list>(<argument><expr><call><name>tuple_decoder__n</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST_CASE</name><argument_list>(<argument>decoder</argument>, <argument>init</argument>, <argument>param32</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tuple_decoder</name></name></type> <name>decoder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name> <init>= <expr><block>{<expr><name>buf</name></expr>, <expr><sizeof>sizeof <name>buf</name></sizeof></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>DECODER_INIT_PARAMS32</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint</name><argument_list>(<argument><expr><name><name>decoder</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint</name><argument_list>(<argument><expr><call><name>tuple_decoder__n</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* If n is not 0, then it is the number of elements. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>decoder</argument>, <argument>init</argument>, <argument>row</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tuple_decoder</name></name></type> <name>decoder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name> <init>= <expr><block>{<expr><name>buf</name></expr>, <expr><sizeof>sizeof <name>buf</name></sizeof></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DECODER_INIT</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint</name><argument_list>(<argument><expr><name><name>decoder</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint</name><argument_list>(<argument><expr><call><name>tuple_decoder__n</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<expr_stmt><expr><call><name>TEST_GROUP</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Decode a tuple with row format and only one value. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>decoder</argument>, <argument>row</argument>, <argument>one_value</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tuple_decoder</name></name></type> <name>decoder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
	    <expr><block>{<expr><name>SQLITE_INTEGER</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	    <expr><block>{<expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name> <init>= <expr><block>{<expr><name>buf</name></expr>, <expr><sizeof>sizeof <name>buf</name></sizeof></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DECODER_INIT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>DECODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_VALUE_TYPE</name><argument_list>(<argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int64</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Decode a tuple with row format and two values. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>decoder</argument>, <argument>row</argument>, <argument>two_values</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tuple_decoder</name></name></type> <name>decoder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
	    <expr><block>{<expr><name>SQLITE_INTEGER</name> <operator>|</operator> <name>SQLITE_TEXT</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	    <expr><block>{<expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	    <expr><block>{<expr><literal type="char">'h'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name> <init>= <expr><block>{<expr><name>buf</name></expr>, <expr><sizeof>sizeof <name>buf</name></sizeof></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DECODER_INIT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>DECODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_VALUE_TYPE</name><argument_list>(<argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int64</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>DECODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_VALUE_TYPE</name><argument_list>(<argument><expr><name>SQLITE_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<expr_stmt><expr><call><name>TEST_GROUP</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Decode a tuple with params format and only one value. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>decoder</argument>, <argument>params</argument>, <argument>one_value</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tuple_decoder</name></name></type> <name>decoder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
	    <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name>SQLITE_INTEGER</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	    <expr><block>{<expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name> <init>= <expr><block>{<expr><name>buf</name></expr>, <expr><sizeof>sizeof <name>buf</name></sizeof></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DECODER_INIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>DECODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_VALUE_TYPE</name><argument_list>(<argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int64</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Decode a tuple with params format and two values. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>decoder</argument>, <argument>params</argument>, <argument>two_values</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tuple_decoder</name></name></type> <name>decoder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
	    <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><name>SQLITE_INTEGER</name></expr>, <expr><name>SQLITE_TEXT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	    <expr><block>{<expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	    <expr><block>{<expr><literal type="char">'h'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name> <init>= <expr><block>{<expr><name>buf</name></expr>, <expr><sizeof>sizeof <name>buf</name></sizeof></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DECODER_INIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>DECODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_VALUE_TYPE</name><argument_list>(<argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int64</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>DECODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_VALUE_TYPE</name><argument_list>(<argument><expr><name>SQLITE_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<expr_stmt><expr><call><name>TEST_GROUP</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>params32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Decode a tuple with params32 format and only one value. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>decoder</argument>, <argument>params32</argument>, <argument>one_value</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tuple_decoder</name></name></type> <name>decoder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
	    <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SQLITE_INTEGER</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	    <expr><block>{<expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name> <init>= <expr><block>{<expr><name>buf</name></expr>, <expr><sizeof>sizeof <name>buf</name></sizeof></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>DECODER_INIT_PARAMS32</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>DECODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_VALUE_TYPE</name><argument_list>(<argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int64</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Decode a tuple with params32 format and two values. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>decoder</argument>, <argument>params32</argument>, <argument>two_values</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tuple_decoder</name></name></type> <name>decoder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
	    <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SQLITE_INTEGER</name></expr>, <expr><name>SQLITE_TEXT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	    <expr><block>{<expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	    <expr><block>{<expr><literal type="char">'h'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name> <init>= <expr><block>{<expr><name>buf</name></expr>, <expr><sizeof>sizeof <name>buf</name></sizeof></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>DECODER_INIT_PARAMS32</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>DECODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_VALUE_TYPE</name><argument_list>(<argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int64</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>DECODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_VALUE_TYPE</name><argument_list>(<argument><expr><name>SQLITE_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<expr_stmt><expr><call><name>TEST_GROUP</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Decode a floating point number. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>decoder</argument>, <argument>type</argument>, <argument>float</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tuple_decoder</name></name></type> <name>decoder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8_t</name> <name><name>buf</name><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <init>= <expr><block>{
	    <expr><block>{<expr><name>SQLITE_FLOAT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	    <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name> <init>= <expr><block>{<expr><name>buf</name></expr>, <expr><sizeof>sizeof <name>buf</name></sizeof></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>pi</name> <init>= <expr><literal type="number">3.1415</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>, <argument><expr><sizeof>sizeof <name>pi</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>buf_value</name> <init>= <expr><call><name>__builtin_assume_aligned</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>buf_value</name> <operator>=</operator> <call><name>ByteFlipLe64</name><argument_list>(<argument><expr><operator>*</operator><name>buf_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DECODER_INIT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>DECODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_VALUE_TYPE</name><argument_list>(<argument><expr><name>SQLITE_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_double</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>float_</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">3.1415</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Decode a null value. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>decoder</argument>, <argument>type</argument>, <argument>null</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tuple_decoder</name></name></type> <name>decoder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8_t</name> <name><name>buf</name><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <init>= <expr><block>{
	    <expr><block>{<expr><name>SQLITE_NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	    <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name> <init>= <expr><block>{<expr><name>buf</name></expr>, <expr><sizeof>sizeof <name>buf</name></sizeof></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DECODER_INIT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>DECODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_VALUE_TYPE</name><argument_list>(<argument><expr><name>SQLITE_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Decode a date string in ISO8601 format. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>decoder</argument>, <argument>type</argument>, <argument>iso8601</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tuple_decoder</name></name></type> <name>decoder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8_t</name> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <init>= <expr><block>{
	    <expr><block>{<expr><name>DQLITE_ISO8601</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name> <init>= <expr><block>{<expr><name>buf</name></expr>, <expr><sizeof>sizeof <name>buf</name></sizeof></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"2018-07-20 09:49:05+00:00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DECODER_INIT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>DECODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_VALUE_TYPE</name><argument_list>(<argument><expr><name>DQLITE_ISO8601</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>iso8601</name></name></expr></argument>, <argument><expr><literal type="string">"2018-07-20 09:49:05+00:00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Decode a boolean. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>decoder</argument>, <argument>type</argument>, <argument>boolean</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tuple_decoder</name></name></type> <name>decoder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8_t</name> <name><name>buf</name><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <init>= <expr><block>{
	    <expr><block>{<expr><name>DQLITE_BOOLEAN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	    <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name> <init>= <expr><block>{<expr><name>buf</name></expr>, <expr><sizeof>sizeof <name>buf</name></sizeof></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DECODER_INIT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>DECODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_VALUE_TYPE</name><argument_list>(<argument><expr><name>DQLITE_BOOLEAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint64</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>boolean</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Encoder.
 *
 ******************************************************************************/</comment>

<struct>struct <name>encoder_fixture</name>
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>buffer</name></name></type> <name>buffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tuple_encoder</name></name></type> <name>encoder</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TEST_SETUP</name><argument_list>(<argument>encoder</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>encoder_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>buffer__init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>
<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>encoder</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>encoder_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>buffer__close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>TEST_GROUP</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Encode a tuple with row format and only one value. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>encoder</argument>, <argument>row</argument>, <argument>one_value</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>encoder_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>uint8_t</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ENCODER_INIT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TUPLE__ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SQLITE_INTEGER</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ENCODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* malloc'ed buffer is aligned suitably */</comment>
	<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>value_ptr</name> <init>= <expr><call><name>__builtin_assume_aligned</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint64</name><argument_list>(<argument><expr><operator>*</operator><name>value_ptr</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>ByteFlipLe64</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Encode a tuple with row format and two values. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>encoder</argument>, <argument>row</argument>, <argument>two_values</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>encoder_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>uint8_t</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ENCODER_INIT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TUPLE__ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SQLITE_INTEGER</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ENCODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SQLITE_TEXT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>text</name></name> <operator>=</operator> <literal type="string">"hello"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ENCODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_INTEGER</name> <operator>|</operator> <name>SQLITE_TEXT</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* malloc'ed buffer is aligned suitably */</comment>
	<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>value_ptr</name> <init>= <expr><call><name>__builtin_assume_aligned</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint64</name><argument_list>(<argument><expr><operator>*</operator><name>value_ptr</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>ByteFlipLe64</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<expr_stmt><expr><call><name>TEST_GROUP</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Encode a tuple with params format and only one value. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>encoder</argument>, <argument>params</argument>, <argument>one_value</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>encoder_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>uint8_t</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ENCODER_INIT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TUPLE__PARAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SQLITE_INTEGER</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ENCODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>value_ptr</name> <init>= <expr><call><name>__builtin_assume_aligned</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint64</name><argument_list>(<argument><expr><operator>*</operator><name>value_ptr</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>ByteFlipLe64</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Encode a tuple with params format and two values. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>encoder</argument>, <argument>params</argument>, <argument>two_values</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>encoder_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>uint8_t</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ENCODER_INIT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TUPLE__PARAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SQLITE_INTEGER</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ENCODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SQLITE_TEXT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>text</name></name> <operator>=</operator> <literal type="string">"hello"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ENCODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>value_ptr</name> <init>= <expr><call><name>__builtin_assume_aligned</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint64</name><argument_list>(<argument><expr><operator>*</operator><name>value_ptr</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>ByteFlipLe64</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<expr_stmt><expr><call><name>TEST_GROUP</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>params32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Encode a tuple with params32 format and only one value. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>encoder</argument>, <argument>params32</argument>, <argument>one_value</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>encoder_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>uint8_t</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ENCODER_INIT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TUPLE__PARAMS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SQLITE_INTEGER</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ENCODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>value_ptr</name> <init>= <expr><call><name>__builtin_assume_aligned</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint64</name><argument_list>(<argument><expr><operator>*</operator><name>value_ptr</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>ByteFlipLe64</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Encode a tuple with params32 format and two values. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>encoder</argument>, <argument>params32</argument>, <argument>two_values</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>encoder_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>uint8_t</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ENCODER_INIT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TUPLE__PARAMS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SQLITE_INTEGER</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ENCODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SQLITE_TEXT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>text</name></name> <operator>=</operator> <literal type="string">"hello"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ENCODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>value_ptr</name> <init>= <expr><call><name>__builtin_assume_aligned</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint64</name><argument_list>(<argument><expr><operator>*</operator><name>value_ptr</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>ByteFlipLe64</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<expr_stmt><expr><call><name>TEST_GROUP</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Encode a float parameter. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>encoder</argument>, <argument>type</argument>, <argument>float</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>encoder_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>uint8_t</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ENCODER_INIT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TUPLE__ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SQLITE_FLOAT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>float_</name></name> <operator>=</operator> <literal type="number">3.1415</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ENCODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>value_ptr</name> <init>= <expr><call><name>__builtin_assume_aligned</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint64</name><argument_list>(<argument><expr><operator>*</operator><name>value_ptr</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>ByteFlipLe64</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>value</name><operator>.</operator><name>float_</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Encode a unix time parameter. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>encoder</argument>, <argument>type</argument>, <argument>unixtime</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>encoder_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>uint8_t</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ENCODER_INIT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TUPLE__ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>DQLITE_UNIXTIME</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>unixtime</name></name> <operator>=</operator> <literal type="number">12345</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ENCODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_UNIXTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>value_ptr</name> <init>= <expr><call><name>__builtin_assume_aligned</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint64</name><argument_list>(<argument><expr><operator>*</operator><name>value_ptr</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>ByteFlipLe64</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>value</name><operator>.</operator><name>unixtime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Encode an ISO8601 date string time parameter. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>encoder</argument>, <argument>type</argument>, <argument>iso8601</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>encoder_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>uint8_t</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ENCODER_INIT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TUPLE__ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>DQLITE_ISO8601</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>iso8601</name></name> <operator>=</operator> <literal type="string">"2018-07-20 09:49:05+00:00"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ENCODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_ISO8601</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"2018-07-20 09:49:05+00:00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* Encode a boolean parameter. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>encoder</argument>, <argument>type</argument>, <argument>boolean</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>encoder_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>uint8_t</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ENCODER_INIT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TUPLE__ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>DQLITE_BOOLEAN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>value</name><operator>.</operator><name>boolean</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ENCODER_NEXT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>DQLITE_BOOLEAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>value_ptr</name> <init>= <expr><call><name>__builtin_assume_aligned</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>munit_assert_uint64</name><argument_list>(<argument><expr><operator>*</operator><name>value_ptr</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><call><name>ByteFlipLe64</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>boolean</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>
</unit>
